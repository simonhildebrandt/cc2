(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      (function() {
        function performWorkUntilDeadline() {
          needsPaint = false;
          if (isMessageLoopRunning) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasMoreWork = true;
            try {
              a: {
                isHostCallbackScheduled = false;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = true;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                  b: {
                    advanceTimers(currentTime);
                    for (currentTask = peek2(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                      var callback = currentTask.callback;
                      if ("function" === typeof callback) {
                        currentTask.callback = null;
                        currentPriorityLevel = currentTask.priorityLevel;
                        var continuationCallback = callback(
                          currentTask.expirationTime <= currentTime
                        );
                        currentTime = exports.unstable_now();
                        if ("function" === typeof continuationCallback) {
                          currentTask.callback = continuationCallback;
                          advanceTimers(currentTime);
                          hasMoreWork = true;
                          break b;
                        }
                        currentTask === peek2(taskQueue) && pop(taskQueue);
                        advanceTimers(currentTime);
                      } else pop(taskQueue);
                      currentTask = peek2(taskQueue);
                    }
                    if (null !== currentTask) hasMoreWork = true;
                    else {
                      var firstTimer = peek2(timerQueue);
                      null !== firstTimer && requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime
                      );
                      hasMoreWork = false;
                    }
                  }
                  break a;
                } finally {
                  currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
                }
                hasMoreWork = void 0;
              }
            } finally {
              hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
            }
          }
        }
        function push(heap, node2) {
          var index = heap.length;
          heap.push(node2);
          a: for (; 0 < index; ) {
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node2))
              heap[parentIndex] = node2, heap[index] = parent, index = parentIndex;
            else break a;
          }
        }
        function peek2(heap) {
          return 0 === heap.length ? null : heap[0];
        }
        function pop(heap) {
          if (0 === heap.length) return null;
          var first2 = heap[0], last2 = heap.pop();
          if (last2 !== first2) {
            heap[0] = last2;
            a: for (var index = 0, length2 = heap.length, halfLength = length2 >>> 1; index < halfLength; ) {
              var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
              if (0 > compare(left, last2))
                rightIndex < length2 && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last2, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last2, index = leftIndex);
              else if (rightIndex < length2 && 0 > compare(right, last2))
                heap[index] = right, heap[rightIndex] = last2, index = rightIndex;
              else break a;
            }
          }
          return first2;
        }
        function compare(a, b2) {
          var diff2 = a.sortIndex - b2.sortIndex;
          return 0 !== diff2 ? diff2 : a.id - b2.id;
        }
        function advanceTimers(currentTime) {
          for (var timer = peek2(timerQueue); null !== timer; ) {
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime)
              pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek2(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled)
            if (null !== peek2(taskQueue))
              isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
            else {
              var firstTimer = peek2(timerQueue);
              null !== firstTimer && requestHostTimeout(
                handleTimeout,
                firstTimer.startTime - currentTime
              );
            }
        }
        function shouldYieldToHost() {
          return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        exports.unstable_now = void 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date, initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
        if ("function" === typeof localSetImmediate)
          var schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        else if ("undefined" !== typeof MessageChannel) {
          var channel = new MessageChannel(), port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        exports.unstable_IdlePriority = 5;
        exports.unstable_ImmediatePriority = 1;
        exports.unstable_LowPriority = 4;
        exports.unstable_NormalPriority = 3;
        exports.unstable_Profiling = null;
        exports.unstable_UserBlockingPriority = 2;
        exports.unstable_cancelCallback = function(task) {
          task.callback = null;
        };
        exports.unstable_forceFrameRate = function(fps) {
          0 > fps || 125 < fps ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
        };
        exports.unstable_getCurrentPriorityLevel = function() {
          return currentPriorityLevel;
        };
        exports.unstable_next = function(eventHandler) {
          switch (currentPriorityLevel) {
            case 1:
            case 2:
            case 3:
              var priorityLevel = 3;
              break;
            default:
              priorityLevel = currentPriorityLevel;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_requestPaint = function() {
          needsPaint = true;
        };
        exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              priorityLevel = 3;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
          switch (priorityLevel) {
            case 1:
              var timeout = -1;
              break;
            case 2:
              timeout = 250;
              break;
            case 5:
              timeout = 1073741823;
              break;
            case 4:
              timeout = 1e4;
              break;
            default:
              timeout = 5e3;
          }
          timeout = options + timeout;
          priorityLevel = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: options,
            expirationTime: timeout,
            sortIndex: -1
          };
          options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek2(taskQueue) && priorityLevel === peek2(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
          return priorityLevel;
        };
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = function(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        };
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      (function() {
        function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component4.prototype, methodName, {
            get: function() {
              console.warn(
                "%s(...) is deprecated in plain JavaScript React classes. %s",
                info[0],
                info[1]
              );
            }
          });
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function warnNoop(publicInstance, callerName) {
          publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
          var warningKey = publicInstance + "." + callerName;
          didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error(
            "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
            callerName,
            publicInstance
          ), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
        }
        function Component4(props26, context, updater) {
          this.props = props26;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function ComponentDummy() {
        }
        function PureComponent(props26, context, updater) {
          this.props = props26;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e2) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x2) {
                }
            }
          return null;
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
          } catch (x2) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props26, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props26, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, self2, source, owner, props26, debugStack, debugTask) {
          self2 = props26.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props: props26,
            _owner: owner
          };
          null !== (void 0 !== self2 ? self2 : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          newKey = ReactElement(
            oldElement.type,
            newKey,
            void 0,
            void 0,
            oldElement._owner,
            oldElement.props,
            oldElement._debugStack,
            oldElement._debugTask
          );
          oldElement._store && (newKey._store.validated = oldElement._store.validated);
          return newKey;
        }
        function isValidElement5(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function escape(key) {
          var escaperLookup = { "=": "=0", ":": "=2" };
          return "$" + key.replace(/[=:]/g, function(match5) {
            return escaperLookup[match5];
          });
        }
        function getElementKey(element, index) {
          return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
        }
        function noop$1() {
        }
        function resolveThenable(thenable) {
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
            default:
              switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
                function(fulfilledValue) {
                  "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                },
                function(error) {
                  "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                }
              )), thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenable.reason;
              }
          }
          throw thenable;
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if ("undefined" === type || "boolean" === type) children = null;
          var invokeCallback = false;
          if (null === children) invokeCallback = true;
          else
            switch (type) {
              case "bigint":
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                    break;
                  case REACT_LAZY_TYPE:
                    return invokeCallback = children._init, mapIntoArray(
                      invokeCallback(children._payload),
                      array,
                      escapedPrefix,
                      nameSoFar,
                      callback
                    );
                }
            }
          if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
              return c;
            })) : null != callback && (isValidElement5(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(
              callback,
              escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(
                userProvidedKeyEscapeRegex,
                "$&/"
              ) + "/") + childKey
            ), "" !== nameSoFar && null != invokeCallback && isValidElement5(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
          }
          invokeCallback = 0;
          childKey = "" === nameSoFar ? "." : nameSoFar + ":";
          if (isArrayImpl(children))
            for (var i2 = 0; i2 < children.length; i2++)
              nameSoFar = children[i2], type = childKey + getElementKey(nameSoFar, i2), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if (i2 = getIteratorFn(children), "function" === typeof i2)
            for (i2 === children.entries && (didWarnAboutMaps || console.warn(
              "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
            ), didWarnAboutMaps = true), children = i2.call(children), i2 = 0; !(nameSoFar = children.next()).done; )
              nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i2++), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if ("object" === type) {
            if ("function" === typeof children.then)
              return mapIntoArray(
                resolveThenable(children),
                array,
                escapedPrefix,
                nameSoFar,
                callback
              );
            array = String(children);
            throw Error(
              "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
            );
          }
          return invokeCallback;
        }
        function mapChildren(children, func, context) {
          if (null == children) return children;
          var result = [], count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function lazyInitializer(payload) {
          if (-1 === payload._status) {
            var ctor = payload._result;
            ctor = ctor();
            ctor.then(
              function(moduleObject) {
                if (0 === payload._status || -1 === payload._status)
                  payload._status = 1, payload._result = moduleObject;
              },
              function(error) {
                if (0 === payload._status || -1 === payload._status)
                  payload._status = 2, payload._result = error;
              }
            );
            -1 === payload._status && (payload._status = 0, payload._result = ctor);
          }
          if (1 === payload._status)
            return ctor = payload._result, void 0 === ctor && console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
              ctor
            ), "default" in ctor || console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
              ctor
            ), ctor.default;
          throw payload._result;
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        function noop3() {
        }
        function enqueueTask(task) {
          if (null === enqueueTaskImpl)
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              enqueueTaskImpl = (module && module[requireString]).call(
                module,
                "timers"
              ).setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                false === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = true, "undefined" === typeof MessageChannel && console.error(
                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                ));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          return enqueueTaskImpl(task);
        }
        function aggregateErrors(errors) {
          return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
          prevActScopeDepth !== actScopeDepth - 1 && console.error(
            "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
          );
          actScopeDepth = prevActScopeDepth;
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          var queue = ReactSharedInternals.actQueue;
          if (null !== queue)
            if (0 !== queue.length)
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
                return;
              } catch (error) {
                ReactSharedInternals.thrownErrors.push(error);
              }
            else ReactSharedInternals.actQueue = null;
          0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
        }
        function flushActQueue(queue) {
          if (!isFlushing) {
            isFlushing = true;
            var i2 = 0;
            try {
              for (; i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  ReactSharedInternals.didUsePromise = false;
                  var continuation = callback(false);
                  if (null !== continuation) {
                    if (ReactSharedInternals.didUsePromise) {
                      queue[i2] = callback;
                      queue.splice(0, i2);
                      return;
                    }
                    callback = continuation;
                  } else break;
                } while (1);
              }
              queue.length = 0;
            } catch (error) {
              queue.splice(0, i2 + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally {
              isFlushing = false;
            }
          }
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
          isMounted: function() {
            return false;
          },
          enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
          }
        }, assign2 = Object.assign, emptyObject = {};
        Object.freeze(emptyObject);
        Component4.prototype.isReactComponent = {};
        Component4.prototype.setState = function(partialState, callback) {
          if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
            throw Error(
              "takes an object of state variables to update or a function which returns an object of state variables."
            );
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component4.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        var deprecatedAPIs = {
          isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
          ],
          replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
          ]
        }, fnName;
        for (fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        ComponentDummy.prototype = Component4.prototype;
        deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
        deprecatedAPIs.constructor = PureComponent;
        assign2(deprecatedAPIs, Component4.prototype);
        deprecatedAPIs.isPureReactComponent = true;
        var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
          H: null,
          A: null,
          T: null,
          S: null,
          V: null,
          actQueue: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false,
          didUsePromise: false,
          thrownErrors: [],
          getCurrentStack: null,
          recentlyCreatedOwnerStacks: 0
        }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        deprecatedAPIs = {
          "react-stack-bottom-frame": function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = deprecatedAPIs["react-stack-bottom-frame"].bind(deprecatedAPIs, UnknownOwner)();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
          queueMicrotask(function() {
            return queueMicrotask(callback);
          });
        } : enqueueTask;
        deprecatedAPIs = Object.freeze({
          __proto__: null,
          c: function(size3) {
            return resolveDispatcher().useMemoCache(size3);
          }
        });
        exports.Children = {
          map: mapChildren,
          forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function() {
                forEachFunc.apply(this, arguments);
              },
              forEachContext
            );
          },
          count: function(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          },
          toArray: function(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          },
          only: function(children) {
            if (!isValidElement5(children))
              throw Error(
                "React.Children.only expected to receive a single React element child."
              );
            return children;
          }
        };
        exports.Component = Component4;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
        exports.__COMPILER_RUNTIME = deprecatedAPIs;
        exports.act = function(callback) {
          var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = false;
          try {
            var result = callback();
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
              didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
                "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
              ));
            });
            return {
              then: function(resolve, reject) {
                didAwaitActCall = true;
                thenable.then(
                  function(returnValue) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (0 === prevActScopeDepth) {
                      try {
                        flushActQueue(queue), enqueueTask(function() {
                          return recursivelyFlushAsyncActWork(
                            returnValue,
                            resolve,
                            reject
                          );
                        });
                      } catch (error$0) {
                        ReactSharedInternals.thrownErrors.push(error$0);
                      }
                      if (0 < ReactSharedInternals.thrownErrors.length) {
                        var _thrownError = aggregateErrors(
                          ReactSharedInternals.thrownErrors
                        );
                        ReactSharedInternals.thrownErrors.length = 0;
                        reject(_thrownError);
                      }
                    } else resolve(returnValue);
                  },
                  function(error) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    ), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                  }
                );
              }
            };
          }
          var returnValue$jscomp$0 = result;
          popActScope(prevActQueue, prevActScopeDepth);
          0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
              "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
            ));
          }), ReactSharedInternals.actQueue = null);
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          return {
            then: function(resolve, reject) {
              didAwaitActCall = true;
              0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                return recursivelyFlushAsyncActWork(
                  returnValue$jscomp$0,
                  resolve,
                  reject
                );
              })) : resolve(returnValue$jscomp$0);
            }
          };
        };
        exports.cache = function(fn) {
          return function() {
            return fn.apply(null, arguments);
          };
        };
        exports.captureOwnerStack = function() {
          var getCurrentStack = ReactSharedInternals.getCurrentStack;
          return null === getCurrentStack ? null : getCurrentStack();
        };
        exports.cloneElement = function(element, config, children) {
          if (null === element || void 0 === element)
            throw Error(
              "The argument must be a React element, but you passed " + element + "."
            );
          var props26 = assign2({}, element.props), key = element.key, owner = element._owner;
          if (null != config) {
            var JSCompiler_inline_result;
            a: {
              if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
                config,
                "ref"
              ).get) && JSCompiler_inline_result.isReactWarning) {
                JSCompiler_inline_result = false;
                break a;
              }
              JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for (propName in config)
              !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props26[propName] = config[propName]);
          }
          var propName = arguments.length - 2;
          if (1 === propName) props26.children = children;
          else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for (var i2 = 0; i2 < propName; i2++)
              JSCompiler_inline_result[i2] = arguments[i2 + 2];
            props26.children = JSCompiler_inline_result;
          }
          props26 = ReactElement(
            element.type,
            key,
            void 0,
            void 0,
            owner,
            props26,
            element._debugStack,
            element._debugTask
          );
          for (key = 2; key < arguments.length; key++)
            owner = arguments[key], isValidElement5(owner) && owner._store && (owner._store.validated = 1);
          return props26;
        };
        exports.createContext = function(defaultValue) {
          defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          defaultValue.Provider = defaultValue;
          defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
          };
          defaultValue._currentRenderer = null;
          defaultValue._currentRenderer2 = null;
          return defaultValue;
        };
        exports.createElement = function(type, config, children) {
          for (var i2 = 2; i2 < arguments.length; i2++) {
            var node2 = arguments[i2];
            isValidElement5(node2) && node2._store && (node2._store.validated = 1);
          }
          i2 = {};
          node2 = null;
          if (null != config)
            for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn(
              "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
            )), hasValidKey(config) && (checkKeyStringCoercion(config.key), node2 = "" + config.key), config)
              hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i2[propName] = config[propName]);
          var childrenLength = arguments.length - 2;
          if (1 === childrenLength) i2.children = children;
          else if (1 < childrenLength) {
            for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
              childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i2.children = childArray;
          }
          if (type && type.defaultProps)
            for (propName in childrenLength = type.defaultProps, childrenLength)
              void 0 === i2[propName] && (i2[propName] = childrenLength[propName]);
          node2 && defineKeyPropWarningGetter(
            i2,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return ReactElement(
            type,
            node2,
            void 0,
            void 0,
            getOwner(),
            i2,
            propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.createRef = function() {
          var refObject = { current: null };
          Object.seal(refObject);
          return refObject;
        };
        exports.forwardRef = function(render) {
          null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error(
            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
          ) : "function" !== typeof render ? console.error(
            "forwardRef requires a render function but was given %s.",
            null === render ? "null" : typeof render
          ) : 0 !== render.length && 2 !== render.length && console.error(
            "forwardRef render functions accept exactly two parameters: props and ref. %s",
            1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."
          );
          null != render && null != render.defaultProps && console.error(
            "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
          );
          var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
            }
          });
          return elementType;
        };
        exports.isValidElement = isValidElement5;
        exports.lazy = function(ctor) {
          return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: { _status: -1, _result: ctor },
            _init: lazyInitializer
          };
        };
        exports.memo = function(type, compare) {
          null == type && console.error(
            "memo: The first argument must be a component. Instead received: %s",
            null === type ? "null" : typeof type
          );
          compare = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: void 0 === compare ? null : compare
          };
          var ownName;
          Object.defineProperty(compare, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
            }
          });
          return compare;
        };
        exports.startTransition = function(scope) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop3, reportGlobalError);
          } catch (error) {
            reportGlobalError(error);
          } finally {
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            )), ReactSharedInternals.T = prevTransition;
          }
        };
        exports.unstable_useCacheRefresh = function() {
          return resolveDispatcher().useCacheRefresh();
        };
        exports.use = function(usable) {
          return resolveDispatcher().use(usable);
        };
        exports.useActionState = function(action, initialState, permalink) {
          return resolveDispatcher().useActionState(
            action,
            initialState,
            permalink
          );
        };
        exports.useCallback = function(callback, deps) {
          return resolveDispatcher().useCallback(callback, deps);
        };
        exports.useContext = function(Context) {
          var dispatcher = resolveDispatcher();
          Context.$$typeof === REACT_CONSUMER_TYPE && console.error(
            "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
          );
          return dispatcher.useContext(Context);
        };
        exports.useDebugValue = function(value, formatterFn) {
          return resolveDispatcher().useDebugValue(value, formatterFn);
        };
        exports.useDeferredValue = function(value, initialValue) {
          return resolveDispatcher().useDeferredValue(value, initialValue);
        };
        exports.useEffect = function(create, createDeps, update) {
          null == create && console.warn(
            "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          var dispatcher = resolveDispatcher();
          if ("function" === typeof update)
            throw Error(
              "useEffect CRUD overload is not enabled in this build of React."
            );
          return dispatcher.useEffect(create, createDeps);
        };
        exports.useId = function() {
          return resolveDispatcher().useId();
        };
        exports.useImperativeHandle = function(ref, create, deps) {
          return resolveDispatcher().useImperativeHandle(ref, create, deps);
        };
        exports.useInsertionEffect = function(create, deps) {
          null == create && console.warn(
            "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useInsertionEffect(create, deps);
        };
        exports.useLayoutEffect = function(create, deps) {
          null == create && console.warn(
            "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useLayoutEffect(create, deps);
        };
        exports.useMemo = function(create, deps) {
          return resolveDispatcher().useMemo(create, deps);
        };
        exports.useOptimistic = function(passthrough, reducer) {
          return resolveDispatcher().useOptimistic(passthrough, reducer);
        };
        exports.useReducer = function(reducer, initialArg, init) {
          return resolveDispatcher().useReducer(reducer, initialArg, init);
        };
        exports.useRef = function(initialValue) {
          return resolveDispatcher().useRef(initialValue);
        };
        exports.useState = function(initialState) {
          return resolveDispatcher().useState(initialState);
        };
        exports.useSyncExternalStore = function(subscribe3, getSnapshot, getServerSnapshot) {
          return resolveDispatcher().useSyncExternalStore(
            subscribe3,
            getSnapshot,
            getServerSnapshot
          );
        };
        exports.useTransition = function() {
          return resolveDispatcher().useTransition();
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      (function() {
        function noop3() {
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function createPortal$1(children, containerInfo, implementation) {
          var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
          try {
            testStringCoercion(key);
            var JSCompiler_inline_result = false;
          } catch (e2) {
            JSCompiler_inline_result = true;
          }
          JSCompiler_inline_result && (console.error(
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"
          ), testStringCoercion(key));
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        function getCrossOriginStringAs(as, input) {
          if ("font" === as) return "";
          if ("string" === typeof input)
            return "use-credentials" === input ? input : "";
        }
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React26 = require_react(), Internals = {
          d: {
            f: noop3,
            r: function() {
              throw Error(
                "Invalid form element. requestFormReset must be passed a form that was rendered by React."
              );
            },
            D: noop3,
            C: noop3,
            L: noop3,
            m: noop3,
            X: noop3,
            S: noop3,
            M: noop3
          },
          p: 0,
          findDOMNode: null
        }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React26.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
        );
        exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
        exports.createPortal = function(children, container) {
          var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
          if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
            throw Error("Target container is not a DOM element.");
          return createPortal$1(children, container, null, key);
        };
        exports.flushSync = function(fn) {
          var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
          try {
            if (ReactSharedInternals.T = null, Internals.p = 2, fn)
              return fn();
          } finally {
            ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error(
              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
            );
          }
        };
        exports.preconnect = function(href, options) {
          "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error(
            "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : null != options && "string" !== typeof options.crossOrigin && console.error(
            "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
            getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
          ) : console.error(
            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
        };
        exports.prefetchDNS = function(href) {
          if ("string" !== typeof href || !href)
            console.error(
              "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
              getValueDescriptorExpectingObjectForWarning(href)
            );
          else if (1 < arguments.length) {
            var options = arguments[1];
            "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            ) : console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            );
          }
          "string" === typeof href && Internals.d.D(href);
        };
        exports.preinit = function(href, options) {
          "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error(
            "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : "style" !== options.as && "script" !== options.as && console.error(
            'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
            getValueDescriptorExpectingEnumForWarning(options.as)
          ) : console.error(
            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          if ("string" === typeof href && options && "string" === typeof options.as) {
            var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
            "style" === as ? Internals.d.S(
              href,
              "string" === typeof options.precedence ? options.precedence : void 0,
              {
                crossOrigin,
                integrity,
                fetchPriority
              }
            ) : "script" === as && Internals.d.X(href, {
              crossOrigin,
              integrity,
              fetchPriority,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
          }
        };
        exports.preinitModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
          if (encountered)
            console.error(
              "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
              encountered
            );
          else
            switch (encountered = options && "string" === typeof options.as ? options.as : "script", encountered) {
              case "script":
                break;
              default:
                encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error(
                  'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                  encountered,
                  href
                );
            }
          if ("string" === typeof href)
            if ("object" === typeof options && null !== options) {
              if (null == options.as || "script" === options.as)
                encountered = getCrossOriginStringAs(
                  options.as,
                  options.crossOrigin
                ), Internals.d.M(href, {
                  crossOrigin: encountered,
                  integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                  nonce: "string" === typeof options.nonce ? options.nonce : void 0
                });
            } else null == options && Internals.d.M(href);
        };
        exports.preload = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
            encountered
          );
          if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
            encountered = options.as;
            var crossOrigin = getCrossOriginStringAs(
              encountered,
              options.crossOrigin
            );
            Internals.d.L(href, encountered, {
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0,
              type: "string" === typeof options.type ? options.type : void 0,
              fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
              referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
              imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
              imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
              media: "string" === typeof options.media ? options.media : void 0
            });
          }
        };
        exports.preloadModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
            encountered
          );
          "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(
            options.as,
            options.crossOrigin
          ), Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin: encountered,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
          })) : Internals.d.m(href));
        };
        exports.requestFormReset = function(form) {
          Internals.d.r(form);
        };
        exports.unstable_batchedUpdates = function(fn, a) {
          return fn(a);
        };
        exports.useFormState = function(action, initialState, permalink) {
          return resolveDispatcher().useFormState(action, initialState, permalink);
        };
        exports.useFormStatus = function() {
          return resolveDispatcher().useHostTransitionStatus();
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-client.development.js
  var require_react_dom_client_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-client.development.js"(exports) {
      "use strict";
      (function() {
        function findHook(fiber, id) {
          for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
            fiber = fiber.next, id--;
          return fiber;
        }
        function copyWithSetImpl(obj, path, index, value) {
          if (index >= path.length) return value;
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
          return updated;
        }
        function copyWithRename(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length)
            console.warn("copyWithRename() expects paths of the same length");
          else {
            for (var i2 = 0; i2 < newPath.length - 1; i2++)
              if (oldPath[i2] !== newPath[i2]) {
                console.warn(
                  "copyWithRename() expects paths to be the same except for the deepest key"
                );
                return;
              }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          }
        }
        function copyWithRenameImpl(obj, oldPath, newPath, index) {
          var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
          index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(
            obj[oldKey],
            oldPath,
            newPath,
            index + 1
          );
          return updated;
        }
        function copyWithDeleteImpl(obj, path, index) {
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign2({}, obj);
          if (index + 1 === path.length)
            return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
          return updated;
        }
        function shouldSuspendImpl() {
          return false;
        }
        function shouldErrorImpl() {
          return null;
        }
        function warnForMissingKey() {
        }
        function warnInvalidHookAccess() {
          console.error(
            "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
          );
        }
        function warnInvalidContextAccess() {
          console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
        }
        function noop$2() {
        }
        function setToSortedString(set) {
          var array = [];
          set.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        }
        function createFiber(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        }
        function scheduleRoot(root2, element) {
          root2.context === emptyContextObject && (updateContainerImpl(root2.current, 2, element, root2, null, null), flushSyncWork$1());
        }
        function scheduleRefresh(root2, update) {
          if (null !== resolveFamily) {
            var staleFamilies = update.staleFamilies;
            update = update.updatedFamilies;
            flushPendingEffects();
            scheduleFibersWithFamiliesRecursively(
              root2.current,
              update,
              staleFamilies
            );
            flushSyncWork$1();
          }
        }
        function setRefreshHandler(handler) {
          resolveFamily = handler;
        }
        function isValidContainer(node2) {
          return !(!node2 || 1 !== node2.nodeType && 9 !== node2.nodeType && 11 !== node2.nodeType);
        }
        function getNearestMountedFiber(fiber) {
          var node2 = fiber, nearestMounted = fiber;
          if (fiber.alternate) for (; node2.return; ) node2 = node2.return;
          else {
            fiber = node2;
            do
              node2 = fiber, 0 !== (node2.flags & 4098) && (nearestMounted = node2.return), fiber = node2.return;
            while (fiber);
          }
          return 3 === node2.tag ? nearestMounted : null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (13 === fiber.tag) {
            var suspenseState = fiber.memoizedState;
            null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
            if (null !== suspenseState) return suspenseState.dehydrated;
          }
          return null;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber)
            throw Error("Unable to find node on an unmounted component.");
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            alternate = getNearestMountedFiber(fiber);
            if (null === alternate)
              throw Error("Unable to find node on an unmounted component.");
            return alternate !== fiber ? null : fiber;
          }
          for (var a = fiber, b2 = alternate; ; ) {
            var parentA = a.return;
            if (null === parentA) break;
            var parentB = parentA.alternate;
            if (null === parentB) {
              b2 = parentA.return;
              if (null !== b2) {
                a = b2;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              for (parentB = parentA.child; parentB; ) {
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b2) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
              }
              throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b2.return) a = parentA, b2 = parentB;
            else {
              for (var didFindChild = false, _child = parentA.child; _child; ) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                for (_child = parentB.child; _child; ) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild)
                  throw Error(
                    "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                  );
              }
            }
            if (a.alternate !== b2)
              throw Error(
                "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
              );
          }
          if (3 !== a.tag)
            throw Error("Unable to find node on an unmounted component.");
          return a.stateNode.current === a ? fiber : alternate;
        }
        function findCurrentHostFiberImpl(node2) {
          var tag = node2.tag;
          if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node2;
          for (node2 = node2.child; null !== node2; ) {
            tag = findCurrentHostFiberImpl(node2);
            if (null !== tag) return tag;
            node2 = node2.sibling;
          }
          return null;
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x2) {
                }
            }
          return null;
        }
        function getComponentNameFromOwner(owner) {
          return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
        }
        function getComponentNameFromFiber(fiber) {
          var type = fiber.type;
          switch (fiber.tag) {
            case 31:
              return "Activity";
            case 24:
              return "Cache";
            case 9:
              return (type._context.displayName || "Context") + ".Consumer";
            case 10:
              return (type.displayName || "Context") + ".Provider";
            case 18:
              return "DehydratedFragment";
            case 11:
              return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
            case 7:
              return "Fragment";
            case 26:
            case 27:
            case 5:
              return type;
            case 4:
              return "Portal";
            case 3:
              return "Root";
            case 6:
              return "Text";
            case 16:
              return getComponentNameFromType(type);
            case 8:
              return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
            case 22:
              return "Offscreen";
            case 12:
              return "Profiler";
            case 21:
              return "Scope";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 25:
              return "TracingMarker";
            case 1:
            case 0:
            case 14:
            case 15:
              if ("function" === typeof type)
                return type.displayName || type.name || null;
              if ("string" === typeof type) return type;
              break;
            case 29:
              type = fiber._debugInfo;
              if (null != type) {
                for (var i2 = type.length - 1; 0 <= i2; i2--)
                  if ("string" === typeof type[i2].name) return type[i2].name;
              }
              if (null !== fiber.return)
                return getComponentNameFromFiber(fiber.return);
          }
          return null;
        }
        function createCursor(defaultValue) {
          return { current: defaultValue };
        }
        function pop(cursor3, fiber) {
          0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor3.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
        }
        function push(cursor3, value, fiber) {
          index$jscomp$0++;
          valueStack[index$jscomp$0] = cursor3.current;
          fiberStack[index$jscomp$0] = fiber;
          cursor3.current = value;
        }
        function requiredContext(c) {
          null === c && console.error(
            "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
          );
          return c;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, null, fiber);
          var nextRootContext = nextRootInstance.nodeType;
          switch (nextRootContext) {
            case 9:
            case 11:
              nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
              nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
              break;
            default:
              if (nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
                nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(
                  nextRootInstance,
                  nextRootContext
                );
              else
                switch (nextRootContext) {
                  case "svg":
                    nextRootInstance = HostContextNamespaceSvg;
                    break;
                  case "math":
                    nextRootInstance = HostContextNamespaceMath;
                    break;
                  default:
                    nextRootInstance = HostContextNamespaceNone;
                }
          }
          nextRootContext = nextRootContext.toLowerCase();
          nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
          nextRootContext = {
            context: nextRootInstance,
            ancestorInfo: nextRootContext
          };
          pop(contextStackCursor, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          return requiredContext(contextStackCursor.current);
        }
        function pushHostContext(fiber) {
          null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
          var context = requiredContext(contextStackCursor.current);
          var type = fiber.type;
          var nextContext = getChildHostContextProd(context.context, type);
          type = updatedAncestorInfoDev(context.ancestorInfo, type);
          nextContext = { context: nextContext, ancestorInfo: type };
          context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
        }
        function popHostContext(fiber) {
          contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
          hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
        }
        function typeName(value) {
          return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        }
        function willCoercionThrow(value) {
          try {
            return testStringCoercion(value), false;
          } catch (e2) {
            return true;
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
              attributeName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
              propName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkFormFieldValueStringCoercion(value) {
          if (willCoercionThrow(value))
            return console.error(
              "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
              typeName(value)
            ), testStringCoercion(value);
        }
        function injectInternals(internals) {
          if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) return true;
          if (!hook.supportsFiber)
            return console.error(
              "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
            ), true;
          try {
            rendererID = hook.inject(internals), injectedHook = hook;
          } catch (err) {
            console.error("React instrumentation encountered an error: %s.", err);
          }
          return hook.checkDCE ? true : false;
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
          if (injectedHook && "function" === typeof injectedHook.setStrictMode)
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function markCommitStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
        }
        function markComponentRenderStarted(fiber) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
        function markComponentRenderStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
        }
        function markRenderStarted(lanes) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
        }
        function markRenderStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
        }
        function markStateUpdateScheduled(fiber, lane) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
        function clz32Fallback(x2) {
          x2 >>>= 0;
          return 0 === x2 ? 32 : 31 - (log(x2) / LN2 | 0) | 0;
        }
        function getLabelForLane(lane) {
          if (lane & 1) return "SyncHydrationLane";
          if (lane & 2) return "Sync";
          if (lane & 4) return "InputContinuousHydration";
          if (lane & 8) return "InputContinuous";
          if (lane & 16) return "DefaultHydration";
          if (lane & 32) return "Default";
          if (lane & 128) return "TransitionHydration";
          if (lane & 4194048) return "Transition";
          if (lane & 62914560) return "Retry";
          if (lane & 67108864) return "SelectiveHydration";
          if (lane & 134217728) return "IdleHydration";
          if (lane & 268435456) return "Idle";
          if (lane & 536870912) return "Offscreen";
          if (lane & 1073741824) return "Deferred";
        }
        function getHighestPriorityLanes(lanes) {
          var pendingSyncLanes = lanes & 42;
          if (0 !== pendingSyncLanes) return pendingSyncLanes;
          switch (lanes & -lanes) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
              return 64;
            case 128:
              return 128;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return lanes & 4194048;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return lanes & 62914560;
            case 67108864:
              return 67108864;
            case 134217728:
              return 134217728;
            case 268435456:
              return 268435456;
            case 536870912:
              return 536870912;
            case 1073741824:
              return 0;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), lanes;
          }
        }
        function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
          var pendingLanes = root2.pendingLanes;
          if (0 === pendingLanes) return 0;
          var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
          root2 = root2.warmLanes;
          var nonIdlePendingLanes = pendingLanes & 134217727;
          0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
          return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
        }
        function checkIfRootIsPrerendering(root2, renderLanes2) {
          return 0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2);
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case 1:
            case 2:
            case 4:
            case 8:
            case 64:
              return currentTime + 250;
            case 16:
            case 32:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return currentTime + 5e3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return -1;
            case 67108864:
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
              return -1;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), -1;
          }
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
          return lane;
        }
        function createLaneMap(initial) {
          for (var laneMap = [], i2 = 0; 31 > i2; i2++) laneMap.push(initial);
          return laneMap;
        }
        function markRootUpdated$1(root2, updateLane) {
          root2.pendingLanes |= updateLane;
          268435456 !== updateLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
        }
        function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
          var previouslyPendingLanes = root2.pendingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = 0;
          root2.pingedLanes = 0;
          root2.warmLanes = 0;
          root2.expiredLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          root2.errorRecoveryDisabledLanes &= remainingLanes;
          root2.shellSuspendCounter = 0;
          var entanglements = root2.entanglements, expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates;
          for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
            var index = 31 - clz32(remainingLanes), lane = 1 << index;
            entanglements[index] = 0;
            expirationTimes[index] = -1;
            var hiddenUpdatesForLane = hiddenUpdates[index];
            if (null !== hiddenUpdatesForLane)
              for (hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++) {
                var update = hiddenUpdatesForLane[index];
                null !== update && (update.lane &= -536870913);
              }
            remainingLanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
          0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root2.tag && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
        }
        function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
          root2.pendingLanes |= spawnedLane;
          root2.suspendedLanes &= ~spawnedLane;
          var spawnedLaneIndex = 31 - clz32(spawnedLane);
          root2.entangledLanes |= spawnedLane;
          root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          for (root2 = root2.entanglements; rootEntangledLanes; ) {
            var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
            lane & entangledLanes | root2[index] & entangledLanes && (root2[index] |= entangledLanes);
            rootEntangledLanes &= ~lane;
          }
        }
        function getBumpedLaneForHydrationByLane(lane) {
          switch (lane) {
            case 2:
              lane = 1;
              break;
            case 8:
              lane = 4;
              break;
            case 32:
              lane = 16;
              break;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              lane = 128;
              break;
            case 268435456:
              lane = 134217728;
              break;
            default:
              lane = 0;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (isDevToolsPresent)
            for (root2 = root2.pendingUpdatersLaneMap; 0 < lanes; ) {
              var index = 31 - clz32(lanes), lane = 1 << index;
              root2[index].add(fiber);
              lanes &= ~lane;
            }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (isDevToolsPresent)
            for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; 0 < lanes; ) {
              var index = 31 - clz32(lanes);
              root2 = 1 << index;
              index = pendingUpdatersLaneMap[index];
              0 < index.size && (index.forEach(function(fiber) {
                var alternate = fiber.alternate;
                null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
              }), index.clear());
              lanes &= ~root2;
            }
        }
        function lanesToEventPriority(lanes) {
          lanes &= -lanes;
          return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
        }
        function resolveUpdatePriority() {
          var updatePriority = ReactDOMSharedInternals.p;
          if (0 !== updatePriority) return updatePriority;
          updatePriority = window.event;
          return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
        }
        function runWithPriority(priority, fn) {
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            return ReactDOMSharedInternals.p = priority, fn();
          } finally {
            ReactDOMSharedInternals.p = previousPriority;
          }
        }
        function detachDeletedInstance(node2) {
          delete node2[internalInstanceKey];
          delete node2[internalPropsKey];
          delete node2[internalEventHandlersKey];
          delete node2[internalEventHandlerListenersKey];
          delete node2[internalEventHandlesSetKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) return targetInst;
          for (var parentNode = targetNode.parentNode; parentNode; ) {
            if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
              parentNode = targetInst.alternate;
              if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
                for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                  if (parentNode = targetNode[internalInstanceKey])
                    return parentNode;
                  targetNode = getParentSuspenseInstance(targetNode);
                }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node2) {
          if (node2 = node2[internalInstanceKey] || node2[internalContainerInstanceKey]) {
            var tag = node2.tag;
            if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
              return node2;
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          var tag = inst.tag;
          if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
            return inst.stateNode;
          throw Error("getNodeFromInstance: Invalid argument.");
        }
        function getResourcesFromRoot(root2) {
          var resources = root2[internalRootNodeResourcesKey];
          resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
          return resources;
        }
        function markNodeAsHoistable(node2) {
          node2[internalHoistableMarker] = true;
        }
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          registrationNameDependencies[registrationName] && console.error(
            "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
            registrationName
          );
          registrationNameDependencies[registrationName] = dependencies;
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
          for (registrationName = 0; registrationName < dependencies.length; registrationName++)
            allNativeEvents.add(dependencies[registrationName]);
        }
        function checkControlledValueProps(tagName, props26) {
          hasReadOnlyValue[props26.type] || props26.onChange || props26.onInput || props26.readOnly || props26.disabled || null == props26.value || ("select" === tagName ? console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
          ) : console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
          ));
          props26.onChange || props26.readOnly || props26.disabled || null == props26.checked || console.error(
            "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
          );
        }
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
            return true;
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
            return false;
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
            return validatedAttributeNameCache[attributeName] = true;
          illegalAttributeNameCache[attributeName] = true;
          console.error("Invalid attribute name: `%s`", attributeName);
          return false;
        }
        function getValueForAttributeOnCustomComponent(node2, name, expected) {
          if (isAttributeNameSafe(name)) {
            if (!node2.hasAttribute(name)) {
              switch (typeof expected) {
                case "symbol":
                case "object":
                  return expected;
                case "function":
                  return expected;
                case "boolean":
                  if (false === expected) return expected;
              }
              return void 0 === expected ? void 0 : null;
            }
            node2 = node2.getAttribute(name);
            if ("" === node2 && true === expected) return true;
            checkAttributeStringCoercion(expected, name);
            return node2 === "" + expected ? expected : node2;
          }
        }
        function setValueForAttribute(node2, name, value) {
          if (isAttributeNameSafe(name))
            if (null === value) node2.removeAttribute(name);
            else {
              switch (typeof value) {
                case "undefined":
                case "function":
                case "symbol":
                  node2.removeAttribute(name);
                  return;
                case "boolean":
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  if ("data-" !== prefix3 && "aria-" !== prefix3) {
                    node2.removeAttribute(name);
                    return;
                  }
              }
              checkAttributeStringCoercion(value, name);
              node2.setAttribute(name, "" + value);
            }
        }
        function setValueForKnownAttribute(node2, name, value) {
          if (null === value) node2.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node2.removeAttribute(name);
                return;
            }
            checkAttributeStringCoercion(value, name);
            node2.setAttribute(name, "" + value);
          }
        }
        function setValueForNamespacedAttribute(node2, namespace, name, value) {
          if (null === value) node2.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node2.removeAttribute(name);
                return;
            }
            checkAttributeStringCoercion(value, name);
            node2.setAttributeNS(namespace, name, "" + value);
          }
        }
        function disabledLog() {
        }
        function disableLogs() {
          if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props26 = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props26,
              log: props26,
              warn: props26,
              error: props26,
              group: props26,
              groupCollapsed: props26,
              groupEnd: props26
            });
          }
          disabledDepth++;
        }
        function reenableLogs() {
          disabledDepth--;
          if (0 === disabledDepth) {
            var props26 = { configurable: true, enumerable: true, writable: true };
            Object.defineProperties(console, {
              log: assign2({}, props26, { value: prevLog }),
              info: assign2({}, props26, { value: prevInfo }),
              warn: assign2({}, props26, { value: prevWarn }),
              error: assign2({}, props26, { value: prevError }),
              group: assign2({}, props26, { value: prevGroup }),
              groupCollapsed: assign2({}, props26, { value: prevGroupCollapsed }),
              groupEnd: assign2({}, props26, { value: prevGroupEnd })
            });
          }
          0 > disabledDepth && console.error(
            "disabledDepth fell below zero. This is a bug in React. Please file an issue."
          );
        }
        function describeBuiltInComponentFrame(name) {
          if (void 0 === prefix2)
            try {
              throw Error();
            } catch (x2) {
              var match5 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match5 && match5[1] || "";
              suffix = -1 < x2.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x2.stack.indexOf("@") ? "@unknown:0:0" : "";
            }
          return "\n" + prefix2 + name + suffix;
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) return "";
          var frame = componentFrameCache.get(fn);
          if (void 0 !== frame) return frame;
          reentry = true;
          frame = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher2 = null;
          previousDispatcher2 = ReactSharedInternals.H;
          ReactSharedInternals.H = null;
          disableLogs();
          try {
            var RunInRootFrame = {
              DetermineComponentFrameRoot: function() {
                try {
                  if (construct) {
                    var Fake = function() {
                      throw Error();
                    };
                    Object.defineProperty(Fake.prototype, "props", {
                      set: function() {
                        throw Error();
                      }
                    });
                    if ("object" === typeof Reflect && Reflect.construct) {
                      try {
                        Reflect.construct(Fake, []);
                      } catch (x2) {
                        var control = x2;
                      }
                      Reflect.construct(fn, [], Fake);
                    } else {
                      try {
                        Fake.call();
                      } catch (x$0) {
                        control = x$0;
                      }
                      fn.call(Fake.prototype);
                    }
                  } else {
                    try {
                      throw Error();
                    } catch (x$1) {
                      control = x$1;
                    }
                    (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                    });
                  }
                } catch (sample) {
                  if (sample && control && "string" === typeof sample.stack)
                    return [sample.stack, control.stack];
                }
                return [null, null];
              }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name"
            );
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name",
              { value: "DetermineComponentFrameRoot" }
            );
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
              for (_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes(
                "DetermineComponentFrameRoot"
              ); )
                namePropDescriptor++;
              for (; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes(
                "DetermineComponentFrameRoot"
              ); )
                _RunInRootFrame$Deter++;
              if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
                for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
                  _RunInRootFrame$Deter--;
              for (; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
                if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                  if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                    do
                      if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                        var _frame = "\n" + sampleLines[namePropDescriptor].replace(
                          " at new ",
                          " at "
                        );
                        fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                        "function" === typeof fn && componentFrameCache.set(fn, _frame);
                        return _frame;
                      }
                    while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                  }
                  break;
                }
            }
          } finally {
            reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
          }
          sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
          "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
          return sampleLines;
        }
        function formatOwnerStack(error) {
          var prevPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          error = error.stack;
          Error.prepareStackTrace = prevPrepareStackTrace;
          error.startsWith("Error: react-stack-top-frame\n") && (error = error.slice(29));
          prevPrepareStackTrace = error.indexOf("\n");
          -1 !== prevPrepareStackTrace && (error = error.slice(prevPrepareStackTrace + 1));
          prevPrepareStackTrace = error.indexOf("react-stack-bottom-frame");
          -1 !== prevPrepareStackTrace && (prevPrepareStackTrace = error.lastIndexOf(
            "\n",
            prevPrepareStackTrace
          ));
          if (-1 !== prevPrepareStackTrace)
            error = error.slice(0, prevPrepareStackTrace);
          else return "";
          return error;
        }
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return describeBuiltInComponentFrame(fiber.type);
            case 16:
              return describeBuiltInComponentFrame("Lazy");
            case 13:
              return describeBuiltInComponentFrame("Suspense");
            case 19:
              return describeBuiltInComponentFrame("SuspenseList");
            case 0:
            case 15:
              return describeNativeComponentFrame(fiber.type, false);
            case 11:
              return describeNativeComponentFrame(fiber.type.render, false);
            case 1:
              return describeNativeComponentFrame(fiber.type, true);
            case 31:
              return describeBuiltInComponentFrame("Activity");
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            do {
              info += describeFiber(workInProgress2);
              var debugInfo = workInProgress2._debugInfo;
              if (debugInfo)
                for (var i2 = debugInfo.length - 1; 0 <= i2; i2--) {
                  var entry = debugInfo[i2];
                  if ("string" === typeof entry.name) {
                    var JSCompiler_temp_const = info, env = entry.env;
                    var JSCompiler_inline_result = describeBuiltInComponentFrame(
                      entry.name + (env ? " [" + env + "]" : "")
                    );
                    info = JSCompiler_temp_const + JSCompiler_inline_result;
                  }
                }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        function describeFunctionComponentFrameWithoutLineNumber(fn) {
          return (fn = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(fn) : "";
        }
        function getCurrentFiberOwnerNameInDevOrNull() {
          if (null === current) return null;
          var owner = current._debugOwner;
          return null != owner ? getComponentNameFromOwner(owner) : null;
        }
        function getCurrentFiberStackInDev() {
          if (null === current) return "";
          var workInProgress2 = current;
          try {
            var info = "";
            6 === workInProgress2.tag && (workInProgress2 = workInProgress2.return);
            switch (workInProgress2.tag) {
              case 26:
              case 27:
              case 5:
                info += describeBuiltInComponentFrame(workInProgress2.type);
                break;
              case 13:
                info += describeBuiltInComponentFrame("Suspense");
                break;
              case 19:
                info += describeBuiltInComponentFrame("SuspenseList");
                break;
              case 31:
                info += describeBuiltInComponentFrame("Activity");
                break;
              case 30:
              case 0:
              case 15:
              case 1:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type
                ));
                break;
              case 11:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type.render
                ));
            }
            for (; workInProgress2; )
              if ("number" === typeof workInProgress2.tag) {
                var fiber = workInProgress2;
                workInProgress2 = fiber._debugOwner;
                var debugStack = fiber._debugStack;
                workInProgress2 && debugStack && ("string" !== typeof debugStack && (fiber._debugStack = debugStack = formatOwnerStack(debugStack)), "" !== debugStack && (info += "\n" + debugStack));
              } else if (null != workInProgress2.debugStack) {
                var ownerStack = workInProgress2.debugStack;
                (workInProgress2 = workInProgress2.owner) && ownerStack && (info += "\n" + formatOwnerStack(ownerStack));
              } else break;
            var JSCompiler_inline_result = info;
          } catch (x2) {
            JSCompiler_inline_result = "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
          return JSCompiler_inline_result;
        }
        function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
          var previousFiber = current;
          setCurrentFiber(fiber);
          try {
            return null !== fiber && fiber._debugTask ? fiber._debugTask.run(
              callback.bind(null, arg0, arg1, arg2, arg3, arg4)
            ) : callback(arg0, arg1, arg2, arg3, arg4);
          } finally {
            setCurrentFiber(previousFiber);
          }
          throw Error(
            "runWithFiberInDEV should never be called in production. This is a bug in React."
          );
        }
        function setCurrentFiber(fiber) {
          ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
          isRendering = false;
          current = fiber;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "bigint":
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              return checkFormFieldValueStringCoercion(value), value;
            default:
              return "";
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
        }
        function trackValueOnNode(node2) {
          var valueField = isCheckable(node2) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
            node2.constructor.prototype,
            valueField
          );
          checkFormFieldValueStringCoercion(node2[valueField]);
          var currentValue = "" + node2[valueField];
          if (!node2.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
            var get = descriptor.get, set = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get.call(this);
              },
              set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            return {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
              },
              stopTracking: function() {
                node2._valueTracker = null;
                delete node2[valueField];
              }
            };
          }
        }
        function track(node2) {
          node2._valueTracker || (node2._valueTracker = trackValueOnNode(node2));
        }
        function updateValueIfChanged(node2) {
          if (!node2) return false;
          var tracker = node2._valueTracker;
          if (!tracker) return true;
          var lastValue = tracker.getValue();
          var value = "";
          node2 && (value = isCheckable(node2) ? node2.checked ? "true" : "false" : node2.value);
          node2 = value;
          return node2 !== lastValue ? (tracker.setValue(node2), true) : false;
        }
        function getActiveElement2(doc) {
          doc = doc || ("undefined" !== typeof document ? document : void 0);
          if ("undefined" === typeof doc) return null;
          try {
            return doc.activeElement || doc.body;
          } catch (e2) {
            return doc.body;
          }
        }
        function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
          return value.replace(
            escapeSelectorAttributeValueInsideDoubleQuotesRegex,
            function(ch) {
              return "\\" + ch.charCodeAt(0).toString(16) + " ";
            }
          );
        }
        function validateInputProps(element, props26) {
          void 0 === props26.checked || void 0 === props26.defaultChecked || didWarnCheckedDefaultChecked || (console.error(
            "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props26.type
          ), didWarnCheckedDefaultChecked = true);
          void 0 === props26.value || void 0 === props26.defaultValue || didWarnValueDefaultValue$1 || (console.error(
            "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props26.type
          ), didWarnValueDefaultValue$1 = true);
        }
        function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
          element.name = "";
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
          if (null != value)
            if ("number" === type) {
              if (0 === value && "" === element.value || element.value != value)
                element.value = "" + getToStringValue(value);
            } else
              element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
          else
            "submit" !== type && "reset" !== type || element.removeAttribute("value");
          null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
          null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
          null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
          null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
        }
        function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
          if (null != value || null != defaultValue) {
            if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
              return;
            defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
            value = null != value ? "" + getToStringValue(value) : defaultValue;
            isHydrating2 || value === element.value || (element.value = value);
            element.defaultValue = value;
          }
          checked = null != checked ? checked : defaultChecked;
          checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
          element.checked = isHydrating2 ? element.checked : !!checked;
          element.defaultChecked = !!checked;
          null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (checkAttributeStringCoercion(name, "name"), element.name = name);
        }
        function setDefaultValue(node2, type, value) {
          "number" === type && getActiveElement2(node2.ownerDocument) === node2 || node2.defaultValue === "" + value || (node2.defaultValue = "" + value);
        }
        function validateOptionProps(element, props26) {
          null == props26.value && ("object" === typeof props26.children && null !== props26.children ? React26.Children.forEach(props26.children, function(child) {
            null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = true, console.error(
              "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
            ));
          }) : null == props26.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, console.error(
            "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
          )));
          null == props26.selected || didWarnSelectedSetOnOption || (console.error(
            "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
          ), didWarnSelectedSetOnOption = true);
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
        }
        function updateOptions(node2, multiple, propValue, setDefaultSelected) {
          node2 = node2.options;
          if (multiple) {
            multiple = {};
            for (var i2 = 0; i2 < propValue.length; i2++)
              multiple["$" + propValue[i2]] = true;
            for (propValue = 0; propValue < node2.length; propValue++)
              i2 = multiple.hasOwnProperty("$" + node2[propValue].value), node2[propValue].selected !== i2 && (node2[propValue].selected = i2), i2 && setDefaultSelected && (node2[propValue].defaultSelected = true);
          } else {
            propValue = "" + getToStringValue(propValue);
            multiple = null;
            for (i2 = 0; i2 < node2.length; i2++) {
              if (node2[i2].value === propValue) {
                node2[i2].selected = true;
                setDefaultSelected && (node2[i2].defaultSelected = true);
                return;
              }
              null !== multiple || node2[i2].disabled || (multiple = node2[i2]);
            }
            null !== multiple && (multiple.selected = true);
          }
        }
        function validateSelectProps(element, props26) {
          for (element = 0; element < valuePropNames.length; element++) {
            var propName = valuePropNames[element];
            if (null != props26[propName]) {
              var propNameIsArray = isArrayImpl(props26[propName]);
              props26.multiple && !propNameIsArray ? console.error(
                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
                propName,
                getDeclarationErrorAddendum()
              ) : !props26.multiple && propNameIsArray && console.error(
                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
                propName,
                getDeclarationErrorAddendum()
              );
            }
          }
          void 0 === props26.value || void 0 === props26.defaultValue || didWarnValueDefaultValue || (console.error(
            "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
          ), didWarnValueDefaultValue = true);
        }
        function validateTextareaProps(element, props26) {
          void 0 === props26.value || void 0 === props26.defaultValue || didWarnValDefaultVal || (console.error(
            "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component"
          ), didWarnValDefaultVal = true);
          null != props26.children && null == props26.value && console.error(
            "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
          );
        }
        function updateTextarea(element, value, defaultValue) {
          if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
            element.defaultValue !== value && (element.defaultValue = value);
            return;
          }
          element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
        }
        function initTextarea(element, value, defaultValue, children) {
          if (null == value) {
            if (null != children) {
              if (null != defaultValue)
                throw Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              if (isArrayImpl(children)) {
                if (1 < children.length)
                  throw Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
            null == defaultValue && (defaultValue = "");
            value = defaultValue;
          }
          defaultValue = getToStringValue(value);
          element.defaultValue = defaultValue;
          children = element.textContent;
          children === defaultValue && "" !== children && null !== children && (element.value = children);
        }
        function findNotableNode(node2, indent) {
          return void 0 === node2.serverProps && 0 === node2.serverTail.length && 1 === node2.children.length && 3 < node2.distanceFromLeaf && node2.distanceFromLeaf > 15 - indent ? findNotableNode(node2.children[0], indent) : node2;
        }
        function indentation(indent) {
          return "  " + "  ".repeat(indent);
        }
        function added(indent) {
          return "+ " + "  ".repeat(indent);
        }
        function removed(indent) {
          return "- " + "  ".repeat(indent);
        }
        function describeFiberType(fiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return fiber.type;
            case 16:
              return "Lazy";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 0:
            case 15:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            case 11:
              return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
            case 1:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            default:
              return null;
          }
        }
        function describeTextNode(content, maxLength) {
          return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
        }
        function describeTextDiff(clientText, serverProps, indent) {
          var maxLength = 120 - 2 * indent;
          if (null === serverProps)
            return added(indent) + describeTextNode(clientText, maxLength) + "\n";
          if ("string" === typeof serverProps) {
            for (var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++) ;
            firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
            return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
          }
          return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
        }
        function objectName(object) {
          return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeValue(value, maxLength) {
          switch (typeof value) {
            case "string":
              return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
            case "object":
              if (null === value) return "null";
              if (isArrayImpl(value)) return "[...]";
              if (value.$$typeof === REACT_ELEMENT_TYPE)
                return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
              var name = objectName(value);
              if ("Object" === name) {
                name = "";
                maxLength -= 2;
                for (var propName in value)
                  if (value.hasOwnProperty(propName)) {
                    var jsonPropName = JSON.stringify(propName);
                    jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                    maxLength -= propName.length - 2;
                    jsonPropName = describeValue(
                      value[propName],
                      15 > maxLength ? maxLength : 15
                    );
                    maxLength -= jsonPropName.length;
                    if (0 > maxLength) {
                      name += "" === name ? "..." : ", ...";
                      break;
                    }
                    name += ("" === name ? "" : ",") + propName + ":" + jsonPropName;
                  }
                return "{" + name + "}";
              }
              return name;
            case "function":
              return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
            default:
              return String(value);
          }
        }
        function describePropValue(value, maxLength) {
          return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
        }
        function describeExpandedElement(type, props26, rowPrefix) {
          var remainingRowLength = 120 - rowPrefix.length - type.length, properties2 = [], propName;
          for (propName in props26)
            if (props26.hasOwnProperty(propName) && "children" !== propName) {
              var propValue = describePropValue(
                props26[propName],
                120 - rowPrefix.length - propName.length - 1
              );
              remainingRowLength -= propName.length + propValue.length + 2;
              properties2.push(propName + "=" + propValue);
            }
          return 0 === properties2.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties2.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties2.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
        }
        function describePropertiesDiff(clientObject, serverObject, indent) {
          var properties2 = "", remainingServerProperties = assign2({}, serverObject), propName;
          for (propName in clientObject)
            if (clientObject.hasOwnProperty(propName)) {
              delete remainingServerProperties[propName];
              var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
              serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties2 += added(indent) + propName + ": " + clientPropValue + "\n", properties2 += removed(indent) + propName + ": " + maxLength + "\n") : properties2 += added(indent) + propName + ": " + clientPropValue + "\n";
            }
          for (var _propName in remainingServerProperties)
            remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(
              remainingServerProperties[_propName],
              120 - 2 * indent - _propName.length - 2
            ), properties2 += removed(indent) + _propName + ": " + clientObject + "\n");
          return properties2;
        }
        function describeElementDiff(type, clientProps, serverProps, indent) {
          var content = "", serverPropNames = /* @__PURE__ */ new Map();
          for (propName$jscomp$0 in serverProps)
            serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(
              propName$jscomp$0.toLowerCase(),
              propName$jscomp$0
            );
          if (1 === serverPropNames.size && serverPropNames.has("children"))
            content += describeExpandedElement(
              type,
              clientProps,
              indentation(indent)
            );
          else {
            for (var _propName2 in clientProps)
              if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
                var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
                if (void 0 !== serverPropName) {
                  serverPropNames.delete(_propName2.toLowerCase());
                  var propName$jscomp$0 = clientProps[_propName2];
                  serverPropName = serverProps[serverPropName];
                  var clientPropValue = describePropValue(
                    propName$jscomp$0,
                    maxLength$jscomp$0
                  );
                  maxLength$jscomp$0 = describePropValue(
                    serverPropName,
                    maxLength$jscomp$0
                  );
                  "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(
                    propName$jscomp$0,
                    serverPropName,
                    indent + 2
                  ) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
                } else
                  content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
              }
            serverPropNames.forEach(function(propName) {
              if ("children" !== propName) {
                var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
                content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
              }
            });
            content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
          }
          type = serverProps.children;
          clientProps = clientProps.children;
          if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
            serverPropNames = "";
            if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
              serverPropNames = "" + clientProps;
            content += describeTextDiff(serverPropNames, "" + type, indent + 1);
          } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
            content = null == type ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, void 0, indent + 1);
          return content;
        }
        function describeSiblingFiber(fiber, indent) {
          var type = describeFiberType(fiber);
          if (null === type) {
            type = "";
            for (fiber = fiber.child; fiber; )
              type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
            return type;
          }
          return indentation(indent) + "<" + type + ">\n";
        }
        function describeNode(node2, indent) {
          var skipToNode = findNotableNode(node2, indent);
          if (skipToNode !== node2 && (1 !== node2.children.length || node2.children[0] !== skipToNode))
            return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
          skipToNode = "";
          var debugInfo = node2.fiber._debugInfo;
          if (debugInfo)
            for (var i2 = 0; i2 < debugInfo.length; i2++) {
              var serverComponentName = debugInfo[i2].name;
              "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
            }
          debugInfo = "";
          i2 = node2.fiber.pendingProps;
          if (6 === node2.fiber.tag)
            debugInfo = describeTextDiff(i2, node2.serverProps, indent), indent++;
          else if (serverComponentName = describeFiberType(node2.fiber), null !== serverComponentName)
            if (void 0 === node2.serverProps) {
              debugInfo = indent;
              var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
              for (propName in i2)
                if (i2.hasOwnProperty(propName) && "children" !== propName) {
                  var propValue = describePropValue(i2[propName], 15);
                  maxLength -= propName.length + propValue.length + 2;
                  if (0 > maxLength) {
                    content += " ...";
                    break;
                  }
                  content += " " + propName + "=" + propValue;
                }
              debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
              indent++;
            } else
              null === node2.serverProps ? (debugInfo = describeExpandedElement(
                serverComponentName,
                i2,
                added(indent)
              ), indent++) : "string" === typeof node2.serverProps ? console.error(
                "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
              ) : (debugInfo = describeElementDiff(
                serverComponentName,
                i2,
                node2.serverProps,
                indent
              ), indent++);
          var propName = "";
          i2 = node2.fiber.child;
          for (serverComponentName = 0; i2 && serverComponentName < node2.children.length; )
            maxLength = node2.children[serverComponentName], maxLength.fiber === i2 ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i2, indent), i2 = i2.sibling;
          i2 && 0 < node2.children.length && (propName += indentation(indent) + "...\n");
          i2 = node2.serverTail;
          null === node2.serverProps && indent--;
          for (node2 = 0; node2 < i2.length; node2++)
            serverComponentName = i2[node2], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + "\n") : propName + describeExpandedElement(
              serverComponentName.type,
              serverComponentName.props,
              removed(indent)
            );
          return skipToNode + debugInfo + propName;
        }
        function describeDiff(rootNode) {
          try {
            return "\n\n" + describeNode(rootNode, 0);
          } catch (x2) {
            return "";
          }
        }
        function describeAncestors(ancestor, child, props26) {
          for (var fiber = child, node2 = null, distanceFromLeaf = 0; fiber; )
            fiber === ancestor && (distanceFromLeaf = 0), node2 = {
              fiber,
              children: null !== node2 ? [node2] : [],
              serverProps: fiber === child ? props26 : fiber === ancestor ? null : void 0,
              serverTail: [],
              distanceFromLeaf
            }, distanceFromLeaf++, fiber = fiber.return;
          return null !== node2 ? describeDiff(node2).replaceAll(/^[+-]/gm, ">") : "";
        }
        function updatedAncestorInfoDev(oldInfo, tag) {
          var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfoDev), info = { tag };
          -1 !== inScopeTags.indexOf(tag) && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null);
          -1 !== buttonScopeTags.indexOf(tag) && (ancestorInfo.pTagInButtonScope = null);
          -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null);
          ancestorInfo.current = info;
          "form" === tag && (ancestorInfo.formTag = info);
          "a" === tag && (ancestorInfo.aTagInScope = info);
          "button" === tag && (ancestorInfo.buttonTagInScope = info);
          "nobr" === tag && (ancestorInfo.nobrTagInScope = info);
          "p" === tag && (ancestorInfo.pTagInButtonScope = info);
          "li" === tag && (ancestorInfo.listItemTagAutoclosing = info);
          if ("dd" === tag || "dt" === tag)
            ancestorInfo.dlItemTagAutoclosing = info;
          "#document" === tag || "html" === tag ? ancestorInfo.containerTagInScope = null : ancestorInfo.containerTagInScope || (ancestorInfo.containerTagInScope = info);
          null !== oldInfo || "#document" !== tag && "html" !== tag && "body" !== tag ? true === ancestorInfo.implicitRootScope && (ancestorInfo.implicitRootScope = false) : ancestorInfo.implicitRootScope = true;
          return ancestorInfo;
        }
        function isTagValidWithParent(tag, parentTag, implicitRootScope) {
          switch (parentTag) {
            case "select":
              return "hr" === tag || "option" === tag || "optgroup" === tag || "script" === tag || "template" === tag || "#text" === tag;
            case "optgroup":
              return "option" === tag || "#text" === tag;
            case "option":
              return "#text" === tag;
            case "tr":
              return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "tbody":
            case "thead":
            case "tfoot":
              return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "colgroup":
              return "col" === tag || "template" === tag;
            case "table":
              return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "head":
              return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "html":
              if (implicitRootScope) break;
              return "head" === tag || "body" === tag || "frameset" === tag;
            case "frameset":
              return "frame" === tag;
            case "#document":
              if (!implicitRootScope) return "html" === tag;
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
            case "rp":
            case "rt":
              return -1 === impliedEndTags.indexOf(parentTag);
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return null == parentTag;
            case "head":
              return implicitRootScope || null === parentTag;
            case "html":
              return implicitRootScope && "#document" === parentTag || null === parentTag;
            case "body":
              return implicitRootScope && ("#document" === parentTag || "html" === parentTag) || null === parentTag;
          }
          return true;
        }
        function findInvalidAncestorForTag(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }
        function findAncestor(parent, tagName) {
          for (; parent; ) {
            switch (parent.tag) {
              case 5:
              case 26:
              case 27:
                if (parent.type === tagName) return parent;
            }
            parent = parent.return;
          }
          return null;
        }
        function validateDOMNesting(childTag, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
          var parentInfo = ancestorInfo.current;
          ancestorInfo = (parentInfo = isTagValidWithParent(
            childTag,
            parentInfo && parentInfo.tag,
            ancestorInfo.implicitRootScope
          ) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          ancestorInfo = parentInfo || ancestorInfo;
          if (!ancestorInfo) return true;
          var ancestorTag = ancestorInfo.tag;
          ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
          if (didWarn[ancestorInfo]) return false;
          didWarn[ancestorInfo] = true;
          var ancestor = (ancestorInfo = current) ? findAncestor(ancestorInfo.return, ancestorTag) : null, ancestorDescription = null !== ancestorInfo && null !== ancestor ? describeAncestors(ancestor, ancestorInfo, null) : "", tagDisplayName = "<" + childTag + ">";
          parentInfo ? (parentInfo = "", "table" === ancestorTag && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(
            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            parentInfo,
            ancestorDescription
          )) : console.error(
            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            ancestorDescription
          );
          ancestorInfo && (childTag = ancestorInfo.return, null === ancestor || null === childTag || ancestor === childTag && childTag._debugOwner === ancestorInfo._debugOwner || runWithFiberInDEV(ancestor, function() {
            console.error(
              "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
              ancestorTag,
              tagDisplayName
            );
          }));
          return false;
        }
        function validateTextNesting(childText, parentTag, implicitRootScope) {
          if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
            return true;
          implicitRootScope = "#text|" + parentTag;
          if (didWarn[implicitRootScope]) return false;
          didWarn[implicitRootScope] = true;
          var ancestor = (implicitRootScope = current) ? findAncestor(implicitRootScope, parentTag) : null;
          implicitRootScope = null !== implicitRootScope && null !== ancestor ? describeAncestors(
            ancestor,
            implicitRootScope,
            6 !== implicitRootScope.tag ? { children: null } : null
          ) : "";
          /\S/.test(childText) ? console.error(
            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          ) : console.error(
            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          );
          return false;
        }
        function setTextContent(node2, text) {
          if (text) {
            var firstChild = node2.firstChild;
            if (firstChild && firstChild === node2.lastChild && 3 === firstChild.nodeType) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node2.textContent = text;
        }
        function camelize(string) {
          return string.replace(hyphenPattern, function(_2, character2) {
            return character2.toUpperCase();
          });
        }
        function setValueForStyle(style2, styleName, value) {
          var isCustomProperty3 = 0 === styleName.indexOf("--");
          isCustomProperty3 || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported style property %s. Did you mean %s?",
            styleName,
            camelize(styleName.replace(msPattern, "ms-"))
          )) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported vendor-prefixed style property %s. Did you mean %s?",
            styleName,
            styleName.charAt(0).toUpperCase() + styleName.slice(1)
          )) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, console.error(
            `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
            styleName,
            value.replace(badStyleValueWithSemicolonPattern, "")
          )), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, console.error(
            "`NaN` is an invalid value for the `%s` css style property.",
            styleName
          )) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, console.error(
            "`Infinity` is an invalid value for the `%s` css style property.",
            styleName
          ))));
          null == value || "boolean" === typeof value || "" === value ? isCustomProperty3 ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty3 ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
        }
        function setValueForStyles(node2, styles, prevStyles) {
          if (null != styles && "object" !== typeof styles)
            throw Error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          styles && Object.freeze(styles);
          node2 = node2.style;
          if (null != prevStyles) {
            if (styles) {
              var expandedUpdates = {};
              if (prevStyles) {
                for (var key in prevStyles)
                  if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                    for (var longhands = shorthandToLonghand[key] || [key], i2 = 0; i2 < longhands.length; i2++)
                      expandedUpdates[longhands[i2]] = key;
              }
              for (var _key in styles)
                if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
                  for (key = shorthandToLonghand[_key] || [_key], longhands = 0; longhands < key.length; longhands++)
                    expandedUpdates[key[longhands]] = _key;
              _key = {};
              for (var key$jscomp$0 in styles)
                for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0; longhands < key.length; longhands++)
                  _key[key[longhands]] = key$jscomp$0;
              key$jscomp$0 = {};
              for (var _key2 in expandedUpdates)
                if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i2 = key + "," + longhands, !key$jscomp$0[i2])) {
                  key$jscomp$0[i2] = true;
                  i2 = console;
                  var value = styles[key];
                  i2.error.call(
                    i2,
                    "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                    null == value || "boolean" === typeof value || "" === value ? "Removing" : "Updating",
                    key,
                    longhands
                  );
                }
            }
            for (var styleName in prevStyles)
              !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node2.setProperty(styleName, "") : "float" === styleName ? node2.cssFloat = "" : node2[styleName] = "");
            for (var _styleName in styles)
              _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node2, _styleName, _key2);
          } else
            for (expandedUpdates in styles)
              styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node2, expandedUpdates, styles[expandedUpdates]);
        }
        function isCustomElement(tagName) {
          if (-1 === tagName.indexOf("-")) return false;
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        function validateProperty$1(tagName, name) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return true;
          if (rARIACamel$1.test(name)) {
            tagName = "aria-" + name.slice(4).toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                name
              ), warnedProperties$1[name] = true;
            if (name !== tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                name,
                tagName
              ), warnedProperties$1[name] = true;
          }
          if (rARIA$1.test(name)) {
            tagName = name.toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName) return warnedProperties$1[name] = true, false;
            name !== tagName && (console.error(
              "Unknown ARIA attribute `%s`. Did you mean `%s`?",
              name,
              tagName
            ), warnedProperties$1[name] = true);
          }
          return true;
        }
        function validateProperties$2(type, props26) {
          var invalidProps = [], key;
          for (key in props26)
            validateProperty$1(type, key) || invalidProps.push(key);
          props26 = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === invalidProps.length ? console.error(
            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props26,
            type
          ) : 1 < invalidProps.length && console.error(
            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props26,
            type
          );
        }
        function validateProperty(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return true;
          var lowerCasedName = name.toLowerCase();
          if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
            return console.error(
              "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
            ), warnedProperties[name] = true;
          if ("function" === typeof value && ("form" === tagName && "action" === name || "input" === tagName && "formAction" === name || "button" === tagName && "formAction" === name))
            return true;
          if (null != eventRegistry) {
            tagName = eventRegistry.possibleRegistrationNames;
            if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
              return true;
            eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
            if (null != eventRegistry)
              return console.error(
                "Invalid event handler property `%s`. Did you mean `%s`?",
                name,
                eventRegistry
              ), warnedProperties[name] = true;
            if (EVENT_NAME_REGEX.test(name))
              return console.error(
                "Unknown event handler property `%s`. It will be ignored.",
                name
              ), warnedProperties[name] = true;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && console.error(
              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
              name
            ), warnedProperties[name] = true;
          if (rARIA.test(name) || rARIACamel.test(name)) return true;
          if ("innerhtml" === lowerCasedName)
            return console.error(
              "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
            ), warnedProperties[name] = true;
          if ("aria" === lowerCasedName)
            return console.error(
              "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
            ), warnedProperties[name] = true;
          if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value)
            return console.error(
              "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
              typeof value
            ), warnedProperties[name] = true;
          if ("number" === typeof value && isNaN(value))
            return console.error(
              "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
              name
            ), warnedProperties[name] = true;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name)
              return console.error(
                "Invalid DOM property `%s`. Did you mean `%s`?",
                name,
                lowerCasedName
              ), warnedProperties[name] = true;
          } else if (name !== lowerCasedName)
            return console.error(
              "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
              name,
              lowerCasedName
            ), warnedProperties[name] = true;
          switch (name) {
            case "dangerouslySetInnerHTML":
            case "children":
            case "style":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              return true;
            case "innerText":
            case "textContent":
              return true;
          }
          switch (typeof value) {
            case "boolean":
              switch (name) {
                case "autoFocus":
                case "checked":
                case "multiple":
                case "muted":
                case "selected":
                case "contentEditable":
                case "spellCheck":
                case "draggable":
                case "value":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "capture":
                case "download":
                case "inert":
                  return true;
                default:
                  lowerCasedName = name.toLowerCase().slice(0, 5);
                  if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                    return true;
                  value ? console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  ) : console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  );
                  return warnedProperties[name] = true;
              }
            case "function":
            case "symbol":
              return warnedProperties[name] = true, false;
            case "string":
              if ("false" === value || "true" === value) {
                switch (name) {
                  case "checked":
                  case "selected":
                  case "multiple":
                  case "muted":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "inert":
                    break;
                  default:
                    return true;
                }
                console.error(
                  "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                  value,
                  name,
                  "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".',
                  name,
                  value
                );
                warnedProperties[name] = true;
              }
          }
          return true;
        }
        function warnUnknownProperties(type, props26, eventRegistry) {
          var unknownProps = [], key;
          for (key in props26)
            validateProperty(type, key, props26[key], eventRegistry) || unknownProps.push(key);
          props26 = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === unknownProps.length ? console.error(
            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props26,
            type
          ) : 1 < unknownProps.length && console.error(
            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props26,
            type
          );
        }
        function sanitizeURL(url) {
          return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
        }
        function getEventTarget2(nativeEvent) {
          nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
          nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
          return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
        }
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (internalInstance && (target = internalInstance.stateNode)) {
            var props26 = target[internalPropsKey] || null;
            a: switch (target = internalInstance.stateNode, internalInstance.type) {
              case "input":
                updateInput(
                  target,
                  props26.value,
                  props26.defaultValue,
                  props26.defaultValue,
                  props26.checked,
                  props26.defaultChecked,
                  props26.type,
                  props26.name
                );
                internalInstance = props26.name;
                if ("radio" === props26.type && null != internalInstance) {
                  for (props26 = target; props26.parentNode; ) props26 = props26.parentNode;
                  checkAttributeStringCoercion(internalInstance, "name");
                  props26 = props26.querySelectorAll(
                    'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                      "" + internalInstance
                    ) + '"][type="radio"]'
                  );
                  for (internalInstance = 0; internalInstance < props26.length; internalInstance++) {
                    var otherNode = props26[internalInstance];
                    if (otherNode !== target && otherNode.form === target.form) {
                      var otherProps = otherNode[internalPropsKey] || null;
                      if (!otherProps)
                        throw Error(
                          "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                        );
                      updateInput(
                        otherNode,
                        otherProps.value,
                        otherProps.defaultValue,
                        otherProps.defaultValue,
                        otherProps.checked,
                        otherProps.defaultChecked,
                        otherProps.type,
                        otherProps.name
                      );
                    }
                  }
                  for (internalInstance = 0; internalInstance < props26.length; internalInstance++)
                    otherNode = props26[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
                }
                break a;
              case "textarea":
                updateTextarea(target, props26.value, props26.defaultValue);
                break a;
              case "select":
                internalInstance = props26.value, null != internalInstance && updateOptions(target, !!props26.multiple, internalInstance, false);
            }
          }
        }
        function batchedUpdates$1(fn, a, b2) {
          if (isInsideEventHandler) return fn(a, b2);
          isInsideEventHandler = true;
          try {
            var JSCompiler_inline_result = fn(a);
            return JSCompiler_inline_result;
          } finally {
            if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
              if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
                for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
            }
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (null === stateNode) return null;
          var props26 = stateNode[internalPropsKey] || null;
          if (null === props26) return null;
          stateNode = props26[registrationName];
          a: switch (registrationName) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (props26 = !props26.disabled) || (inst = inst.type, props26 = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
              inst = !props26;
              break a;
            default:
              inst = false;
          }
          if (inst) return null;
          if (stateNode && "function" !== typeof stateNode)
            throw Error(
              "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type."
            );
          return stateNode;
        }
        function getData() {
          if (fallbackText) return fallbackText;
          var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
          for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
          return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
        }
        function getEventCharCode(nativeEvent) {
          var keyCode = nativeEvent.keyCode;
          "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
          10 === nativeEvent && (nativeEvent = 13);
          return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var propName in Interface)
              Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
            this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign2(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        function modifierStateGetter(keyArg) {
          var nativeEvent = this.nativeEvent;
          return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
        }
        function getEventModifierState() {
          return modifierStateGetter;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          nativeEvent = nativeEvent.detail;
          return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              if (nativeEvent.which !== SPACEBAR_CODE) return null;
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing)
            return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
                if (nativeEvent.char && 1 < nativeEvent.char.length)
                  return nativeEvent.char;
                if (nativeEvent.which)
                  return String.fromCharCode(nativeEvent.which);
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) return false;
          eventNameSuffix = "on" + eventNameSuffix;
          var isSupported = eventNameSuffix in document;
          isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
          return isSupported;
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
          inst = accumulateTwoPhaseListeners(inst, "onChange");
          0 < inst.length && (nativeEvent = new SyntheticEvent(
            "onChange",
            "change",
            null,
            nativeEvent,
            target
          ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) return targetInst;
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if ("change" === domEventName) return targetInst;
        }
        function stopWatchingForValueChange() {
          activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
        }
        function handlePropertyChange(nativeEvent) {
          if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(
              dispatchQueue,
              activeElementInst$1,
              nativeEvent,
              getEventTarget2(nativeEvent)
            );
            batchedUpdates$1(runEventInBatch, dispatchQueue);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
        }
        function getTargetInstForInputEventPolyfill(domEventName) {
          if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
            return getInstIfValueChanged(activeElementInst$1);
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if ("click" === domEventName) return getInstIfValueChanged(targetInst);
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if ("input" === domEventName || "change" === domEventName)
            return getInstIfValueChanged(targetInst);
        }
        function is(x2, y) {
          return x2 === y && (0 !== x2 || 1 / x2 === 1 / y) || x2 !== x2 && y !== y;
        }
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) return true;
          if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
            return false;
          var keysA = Object.keys(objA), keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) return false;
          for (keysB = 0; keysB < keysA.length; keysB++) {
            var currentKey = keysA[keysB];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
              return false;
          }
          return true;
        }
        function getLeafNode(node2) {
          for (; node2 && node2.firstChild; ) node2 = node2.firstChild;
          return node2;
        }
        function getNodeForCharacterOffset(root2, offset3) {
          var node2 = getLeafNode(root2);
          root2 = 0;
          for (var nodeEnd; node2; ) {
            if (3 === node2.nodeType) {
              nodeEnd = root2 + node2.textContent.length;
              if (root2 <= offset3 && nodeEnd >= offset3)
                return { node: node2, offset: offset3 - root2 };
              root2 = nodeEnd;
            }
            a: {
              for (; node2; ) {
                if (node2.nextSibling) {
                  node2 = node2.nextSibling;
                  break a;
                }
                node2 = node2.parentNode;
              }
              node2 = void 0;
            }
            node2 = getLeafNode(node2);
          }
        }
        function containsNode(outerNode, innerNode) {
          return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
        }
        function getActiveElementDeep(containerInfo) {
          containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
          for (var element = getActiveElement2(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
            try {
              var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
            } catch (err) {
              JSCompiler_inline_result = false;
            }
            if (JSCompiler_inline_result) containerInfo = element.contentWindow;
            else break;
            element = getActiveElement2(containerInfo.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
          mouseDown || null == activeElement || activeElement !== getActiveElement2(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
            anchorNode: doc.anchorNode,
            anchorOffset: doc.anchorOffset,
            focusNode: doc.focusNode,
            focusOffset: doc.focusOffset
          }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
            "onSelect",
            "select",
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes["Webkit" + styleProp] = "webkit" + eventName;
          prefixes["Moz" + styleProp] = "moz" + eventName;
          return prefixes;
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
          if (!vendorPrefixes[eventName]) return eventName;
          var prefixMap = vendorPrefixes[eventName], styleProp;
          for (styleProp in prefixMap)
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
              return prefixedEventNames[eventName] = prefixMap[styleProp];
          return eventName;
        }
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function createCapturedValueAtFiber(value, source) {
          if ("object" === typeof value && null !== value) {
            var existing = CapturedStacks.get(value);
            if (void 0 !== existing) return existing;
            source = {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
            CapturedStacks.set(value, source);
            return source;
          }
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function finishQueueingConcurrentUpdates() {
          for (var endIndex = concurrentQueuesIndex, i2 = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i2 < endIndex; ) {
            var fiber = concurrentQueues[i2];
            concurrentQueues[i2++] = null;
            var queue = concurrentQueues[i2];
            concurrentQueues[i2++] = null;
            var update = concurrentQueues[i2];
            concurrentQueues[i2++] = null;
            var lane = concurrentQueues[i2];
            concurrentQueues[i2++] = null;
            if (null !== queue && null !== update) {
              var pending = queue.pending;
              null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
              queue.pending = update;
            }
            0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
          }
        }
        function enqueueUpdate$1(fiber, queue, update, lane) {
          concurrentQueues[concurrentQueuesIndex++] = fiber;
          concurrentQueues[concurrentQueuesIndex++] = queue;
          concurrentQueues[concurrentQueuesIndex++] = update;
          concurrentQueues[concurrentQueuesIndex++] = lane;
          concurrentlyUpdatedLanes |= lane;
          fiber.lanes |= lane;
          fiber = fiber.alternate;
          null !== fiber && (fiber.lanes |= lane);
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          enqueueUpdate$1(fiber, queue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          enqueueUpdate$1(fiber, null, null, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
          sourceFiber.lanes |= lane;
          var alternate = sourceFiber.alternate;
          null !== alternate && (alternate.lanes |= lane);
          for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
            parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
          return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
        }
        function getRootForUpdatedFiber(sourceFiber) {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
            throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error(
              "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
            );
          nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error(
            "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
          ));
          null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          for (var node2 = sourceFiber, parent = node2.return; null !== parent; )
            null === node2.alternate && 0 !== (node2.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node2 = parent, parent = node2.return;
          return 3 === node2.tag ? node2.stateNode : null;
        }
        function resolveFunctionForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? type : family.current;
        }
        function resolveForwardRefForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          if (null === resolveFamily) return false;
          var prevType = fiber.elementType;
          element = element.type;
          var needsCompareFamilies = false, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
          switch (fiber.tag) {
            case 1:
              "function" === typeof element && (needsCompareFamilies = true);
              break;
            case 0:
              "function" === typeof element ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 11:
              $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 14:
            case 15:
              $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            default:
              return false;
          }
          return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? true : false;
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber));
        }
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case 0:
            case 15:
            case 1:
              candidateType = type;
              break;
            case 11:
              candidateType = type.render;
          }
          if (null === resolveFamily)
            throw Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = false;
          type = false;
          null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = true : updatedFamilies.has(candidateType) && (1 === tag ? type = true : needsRender = true)));
          null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = true);
          type && (fiber._debugNeedsRemount = true);
          if (type || needsRender)
            alternate = enqueueConcurrentRenderForLane(fiber, 2), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
          null === child || type || scheduleFibersWithFamiliesRecursively(
            child,
            updatedFamilies,
            staleFamilies
          );
          null !== sibling && scheduleFibersWithFamiliesRecursively(
            sibling,
            updatedFamilies,
            staleFamilies
          );
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
          this.index = 0;
          this.refCleanup = this.ref = null;
          this.pendingProps = pendingProps;
          this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
          this.mode = mode;
          this.subtreeFlags = this.flags = 0;
          this.deletions = null;
          this.childLanes = this.lanes = 0;
          this.alternate = null;
          this.actualDuration = -0;
          this.actualStartTime = -1.1;
          this.treeBaseDuration = this.selfBaseDuration = -0;
          this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
        }
        function shouldConstruct(Component4) {
          Component4 = Component4.prototype;
          return !(!Component4 || !Component4.isReactComponent);
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          null === workInProgress2 ? (workInProgress2 = createFiber(
            current2.tag,
            pendingProps,
            current2.key,
            current2.mode
          ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugStack = current2._debugStack, workInProgress2._debugTask = current2._debugTask, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = -0, workInProgress2.actualStartTime = -1.1);
          workInProgress2.flags = current2.flags & 65011712;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          pendingProps = current2.dependencies;
          workInProgress2.dependencies = null === pendingProps ? null : {
            lanes: pendingProps.lanes,
            firstContext: pendingProps.firstContext,
            _debugThenableState: pendingProps._debugThenableState
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          workInProgress2.refCleanup = current2.refCleanup;
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          workInProgress2._debugInfo = current2._debugInfo;
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case 0:
            case 15:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 1:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 11:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= 65011714;
          var current2 = workInProgress2.alternate;
          null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
            lanes: renderLanes2.lanes,
            firstContext: renderLanes2.firstContext,
            _debugThenableState: renderLanes2._debugThenableState
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration);
          return workInProgress2;
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = 0, resolvedType = type;
          if ("function" === typeof type)
            shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
          else if ("string" === typeof type)
            fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
          else
            a: switch (type) {
              case REACT_ACTIVITY_TYPE:
                return key = createFiber(31, pendingProps, key, mode), key.elementType = REACT_ACTIVITY_TYPE, key.lanes = lanes, key;
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(
                  pendingProps.children,
                  mode,
                  lanes,
                  key
                );
              case REACT_STRICT_MODE_TYPE:
                fiberTag = 8;
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
                break;
              case REACT_PROFILER_TYPE:
                return type = pendingProps, owner = mode, "string" !== typeof type.id && console.error(
                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                  typeof type.id
                ), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
              case REACT_SUSPENSE_TYPE:
                return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
              case REACT_SUSPENSE_LIST_TYPE:
                return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
              default:
                if ("object" === typeof type && null !== type)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                    case REACT_CONTEXT_TYPE:
                      fiberTag = 10;
                      break a;
                    case REACT_CONSUMER_TYPE:
                      fiberTag = 9;
                      break a;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = 11;
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break a;
                    case REACT_MEMO_TYPE:
                      fiberTag = 14;
                      break a;
                    case REACT_LAZY_TYPE:
                      fiberTag = 16;
                      resolvedType = null;
                      break a;
                  }
                resolvedType = "";
                if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length)
                  resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
                (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
                fiberTag = 29;
                pendingProps = Error(
                  "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType)
                );
                resolvedType = null;
            }
          key = createFiber(fiberTag, pendingProps, key, mode);
          key.elementType = type;
          key.type = resolvedType;
          key.lanes = lanes;
          key._debugOwner = owner;
          return key;
        }
        function createFiberFromElement(element, mode, lanes) {
          mode = createFiberFromTypeAndProps(
            element.type,
            element.key,
            element.props,
            element._owner,
            mode,
            lanes
          );
          mode._debugOwner = element._owner;
          mode._debugStack = element._debugStack;
          mode._debugTask = element._debugTask;
          return mode;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          elements = createFiber(7, elements, key, mode);
          elements.lanes = lanes;
          return elements;
        }
        function createFiberFromText(content, mode, lanes) {
          content = createFiber(6, content, null, mode);
          content.lanes = lanes;
          return content;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          mode = createFiber(
            4,
            null !== portal.children ? portal.children : [],
            portal.key,
            mode
          );
          mode.lanes = lanes;
          mode.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return mode;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          workInProgress2 = treeContextOverflow;
          var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
          baseIdWithLeadingBit &= ~(1 << baseLength);
          index += 1;
          var length2 = 32 - clz32(totalChildren) + baseLength;
          if (30 < length2) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            length2 = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
            baseIdWithLeadingBit >>= numberOfOverflowBits;
            baseLength -= numberOfOverflowBits;
            treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
            treeContextOverflow = length2 + workInProgress2;
          } else
            treeContextId = 1 << length2 | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
        }
        function popTreeContext(workInProgress2) {
          for (; workInProgress2 === treeForkProvider; )
            treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
          for (; workInProgress2 === treeContextProvider; )
            treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
        }
        function warnIfNotHydrating() {
          isHydrating || console.error(
            "Expected to be hydrating. This is a bug in React. Please file an issue."
          );
        }
        function buildHydrationDiffNode(fiber, distanceFromLeaf) {
          if (null === fiber.return) {
            if (null === hydrationDiffRootDEV)
              hydrationDiffRootDEV = {
                fiber,
                children: [],
                serverProps: void 0,
                serverTail: [],
                distanceFromLeaf
              };
            else {
              if (hydrationDiffRootDEV.fiber !== fiber)
                throw Error(
                  "Saw multiple hydration diff roots in a pass. This is a bug in React."
                );
              hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
            }
            return hydrationDiffRootDEV;
          }
          var siblings = buildHydrationDiffNode(
            fiber.return,
            distanceFromLeaf + 1
          ).children;
          if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
            return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
          distanceFromLeaf = {
            fiber,
            children: [],
            serverProps: void 0,
            serverTail: [],
            distanceFromLeaf
          };
          siblings.push(distanceFromLeaf);
          return distanceFromLeaf;
        }
        function warnNonHydratedInstance(fiber, rejectedCandidate) {
          didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
        }
        function throwOnHydrationMismatch(fiber) {
          var diff2 = "", diffRoot = hydrationDiffRootDEV;
          null !== diffRoot && (hydrationDiffRootDEV = null, diff2 = describeDiff(diffRoot));
          queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff2
              ),
              fiber
            )
          );
          throw HydrationMismatchException;
        }
        function prepareToHydrateHostInstance(fiber) {
          var didHydrate = fiber.stateNode;
          var type = fiber.type, props26 = fiber.memoizedProps;
          didHydrate[internalInstanceKey] = fiber;
          didHydrate[internalPropsKey] = props26;
          validatePropertiesInDevelopment(type, props26);
          switch (type) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", didHydrate);
              listenToNonDelegatedEvent("close", didHydrate);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "video":
            case "audio":
              for (type = 0; type < mediaEventTypes.length; type++)
                listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
              break;
            case "source":
              listenToNonDelegatedEvent("error", didHydrate);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", didHydrate);
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", didHydrate);
              break;
            case "input":
              checkControlledValueProps("input", props26);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateInputProps(didHydrate, props26);
              initInput(
                didHydrate,
                props26.value,
                props26.defaultValue,
                props26.checked,
                props26.defaultChecked,
                props26.type,
                props26.name,
                true
              );
              track(didHydrate);
              break;
            case "option":
              validateOptionProps(didHydrate, props26);
              break;
            case "select":
              checkControlledValueProps("select", props26);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateSelectProps(didHydrate, props26);
              break;
            case "textarea":
              checkControlledValueProps("textarea", props26), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props26), initTextarea(
                didHydrate,
                props26.value,
                props26.defaultValue,
                props26.children
              ), track(didHydrate);
          }
          type = props26.children;
          "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || true === props26.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props26.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props26.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props26.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props26.onClick && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
          didHydrate || throwOnHydrationMismatch(fiber);
        }
        function popToNextHostParent(fiber) {
          for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
            switch (hydrationParentFiber.tag) {
              case 5:
              case 13:
                rootOrSingletonContext = false;
                return;
              case 27:
              case 3:
                rootOrSingletonContext = true;
                return;
              default:
                hydrationParentFiber = hydrationParentFiber.return;
            }
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) return false;
          if (!isHydrating)
            return popToNextHostParent(fiber), isHydrating = true, false;
          var tag = fiber.tag, JSCompiler_temp;
          if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
            if (JSCompiler_temp = 5 === tag)
              JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
            JSCompiler_temp = !JSCompiler_temp;
          }
          if (JSCompiler_temp && nextHydratableInstance) {
            for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
              var diffNode = buildHydrationDiffNode(fiber, 0), description = describeHydratableInstanceForDevWarnings(JSCompiler_temp);
              diffNode.serverTail.push(description);
              JSCompiler_temp = "Suspense" === description.type ? getNextHydratableInstanceAfterSuspenseInstance(JSCompiler_temp) : getNextHydratable(JSCompiler_temp.nextSibling);
            }
            throwOnHydrationMismatch(fiber);
          }
          popToNextHostParent(fiber);
          if (13 === tag) {
            fiber = fiber.memoizedState;
            fiber = null !== fiber ? fiber.dehydrated : null;
            if (!fiber)
              throw Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
              );
            nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(fiber);
          } else
            27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
          return true;
        }
        function resetHydrationState() {
          nextHydratableInstance = hydrationParentFiber = null;
          didSuspendOrErrorDEV = isHydrating = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          var queuedErrors = hydrationErrors;
          null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
            workInProgressRootRecoverableErrors,
            queuedErrors
          ), hydrationErrors = null);
          return queuedErrors;
        }
        function queueHydrationError(error) {
          null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
        }
        function emitPendingHydrationWarnings() {
          var diffRoot = hydrationDiffRootDEV;
          if (null !== diffRoot) {
            hydrationDiffRootDEV = null;
            for (var diff2 = describeDiff(diffRoot); 0 < diffRoot.children.length; )
              diffRoot = diffRoot.children[0];
            runWithFiberInDEV(diffRoot.fiber, function() {
              console.error(
                "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
                "https://react.dev/link/hydration-mismatch",
                diff2
              );
            });
          }
        }
        function resetContextDependencies() {
          lastContextDependency = currentlyRenderingFiber$1 = null;
          isDisallowedContextReadInDEV = false;
        }
        function pushProvider(providerFiber, context, nextValue) {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          push(rendererCursorDEV, context._currentRenderer, providerFiber);
          void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && console.error(
            "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
          );
          context._currentRenderer = rendererSigil;
        }
        function popProvider(context, providerFiber) {
          context._currentValue = valueCursor.current;
          var currentRenderer = rendererCursorDEV.current;
          pop(rendererCursorDEV, providerFiber);
          context._currentRenderer = currentRenderer;
          pop(valueCursor, providerFiber);
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          for (; null !== parent; ) {
            var alternate = parent.alternate;
            (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
            if (parent === propagationRoot) break;
            parent = parent.return;
          }
          parent !== propagationRoot && console.error(
            "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
          var fiber = workInProgress2.child;
          null !== fiber && (fiber.return = workInProgress2);
          for (; null !== fiber; ) {
            var list = fiber.dependencies;
            if (null !== list) {
              var nextFiber = fiber.child;
              list = list.firstContext;
              a: for (; null !== list; ) {
                var dependency = list;
                list = fiber;
                for (var i2 = 0; i2 < contexts.length; i2++)
                  if (dependency.context === contexts[i2]) {
                    list.lanes |= renderLanes2;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes2);
                    scheduleContextWorkOnParentPath(
                      list.return,
                      renderLanes2,
                      workInProgress2
                    );
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                  }
                list = dependency.next;
              }
            } else if (18 === fiber.tag) {
              nextFiber = fiber.return;
              if (null === nextFiber)
                throw Error(
                  "We just came from a parent so we must have had a parent. This is a bug in React."
                );
              nextFiber.lanes |= renderLanes2;
              list = nextFiber.alternate;
              null !== list && (list.lanes |= renderLanes2);
              scheduleContextWorkOnParentPath(
                nextFiber,
                renderLanes2,
                workInProgress2
              );
              nextFiber = null;
            } else nextFiber = fiber.child;
            if (null !== nextFiber) nextFiber.return = fiber;
            else
              for (nextFiber = fiber; null !== nextFiber; ) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                fiber = nextFiber.sibling;
                if (null !== fiber) {
                  fiber.return = nextFiber.return;
                  nextFiber = fiber;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            fiber = nextFiber;
          }
        }
        function propagateParentContextChanges(current2, workInProgress2, renderLanes2, forcePropagateEntireTree) {
          current2 = null;
          for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
            if (!isInsidePropagationBailout) {
              if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
              else if (0 !== (parent.flags & 262144)) break;
            }
            if (10 === parent.tag) {
              var currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent = currentParent.memoizedProps;
              if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current2 ? current2.push(context) : current2 = [context]);
              }
            } else if (parent === hostTransitionProviderCursor.current) {
              currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current2 ? current2.push(HostTransitionContext) : current2 = [HostTransitionContext]);
            }
            parent = parent.return;
          }
          null !== current2 && propagateContextChanges(
            workInProgress2,
            current2,
            renderLanes2,
            forcePropagateEntireTree
          );
          workInProgress2.flags |= 262144;
        }
        function checkIfContextChanged(currentDependencies) {
          for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
            if (!objectIs(
              currentDependencies.context._currentValue,
              currentDependencies.memoizedValue
            ))
              return true;
            currentDependencies = currentDependencies.next;
          }
          return false;
        }
        function prepareToReadContext(workInProgress2) {
          currentlyRenderingFiber$1 = workInProgress2;
          lastContextDependency = null;
          workInProgress2 = workInProgress2.dependencies;
          null !== workInProgress2 && (workInProgress2.firstContext = null);
        }
        function readContext(context) {
          isDisallowedContextReadInDEV && console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
          return readContextForConsumer(currentlyRenderingFiber$1, context);
        }
        function readContextDuringReconciliation(consumer, context) {
          null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
          return readContextForConsumer(consumer, context);
        }
        function readContextForConsumer(consumer, context) {
          var value = context._currentValue;
          context = { context, memoizedValue: value, next: null };
          if (null === lastContextDependency) {
            if (null === consumer)
              throw Error(
                "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
              );
            lastContextDependency = context;
            consumer.dependencies = {
              lanes: 0,
              firstContext: context,
              _debugThenableState: null
            };
            consumer.flags |= 524288;
          } else lastContextDependency = lastContextDependency.next = context;
          return value;
        }
        function createCache3() {
          return {
            controller: new AbortControllerLocal(),
            data: /* @__PURE__ */ new Map(),
            refCount: 0
          };
        }
        function retainCache(cache2) {
          cache2.controller.signal.aborted && console.warn(
            "A cache instance was retained after it was already freed. This likely indicates a bug in React."
          );
          cache2.refCount++;
        }
        function releaseCache(cache2) {
          cache2.refCount--;
          0 > cache2.refCount && console.warn(
            "A cache instance was released after it was already freed. This likely indicates a bug in React."
          );
          0 === cache2.refCount && scheduleCallback$2(NormalPriority, function() {
            cache2.controller.abort();
          });
        }
        function pushNestedEffectDurations() {
          var prevEffectDuration = profilerEffectDuration;
          profilerEffectDuration = 0;
          return prevEffectDuration;
        }
        function popNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration = prevEffectDuration;
          return elapsedTime;
        }
        function bubbleNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration += prevEffectDuration;
          return elapsedTime;
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now();
          0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
        }
        function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
          }
        }
        function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            profilerStartTime = -1;
          }
        }
        function recordEffectDuration() {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            profilerStartTime = -1;
            profilerEffectDuration += elapsedTime;
          }
        }
        function startEffectTimer() {
          profilerStartTime = now();
        }
        function transferActualDuration(fiber) {
          for (var child = fiber.child; child; )
            fiber.actualDuration += child.actualDuration, child = child.sibling;
        }
        function entangleAsyncAction(transition, thenable) {
          if (null === currentEntangledListeners) {
            var entangledListeners = currentEntangledListeners = [];
            currentEntangledPendingCount = 0;
            currentEntangledLane = requestTransitionLane();
            currentEntangledActionThenable = {
              status: "pending",
              value: void 0,
              then: function(resolve) {
                entangledListeners.push(resolve);
              }
            };
          }
          currentEntangledPendingCount++;
          thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
          return thenable;
        }
        function pingEngtangledActionScope() {
          if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
            null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
            var listeners = currentEntangledListeners;
            currentEntangledListeners = null;
            currentEntangledLane = 0;
            currentEntangledActionThenable = null;
            for (var i2 = 0; i2 < listeners.length; i2++) (0, listeners[i2])();
          }
        }
        function chainThenableValue(thenable, result) {
          var listeners = [], thenableWithOverride = {
            status: "pending",
            value: null,
            reason: null,
            then: function(resolve) {
              listeners.push(resolve);
            }
          };
          thenable.then(
            function() {
              thenableWithOverride.status = "fulfilled";
              thenableWithOverride.value = result;
              for (var i2 = 0; i2 < listeners.length; i2++) (0, listeners[i2])(result);
            },
            function(error) {
              thenableWithOverride.status = "rejected";
              thenableWithOverride.reason = error;
              for (error = 0; error < listeners.length; error++)
                (0, listeners[error])(void 0);
            }
          );
          return thenableWithOverride;
        }
        function peekCacheFromPool() {
          var cacheResumedFromPreviousRender = resumedCache.current;
          return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
        }
        function pushTransition(offscreenWorkInProgress, prevCachePool) {
          null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
        }
        function getSuspendedCache() {
          var cacheFromPool = peekCacheFromPool();
          return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
        }
        function createThenableState() {
          return { didWarnAboutUncachedPromise: false, thenables: [] };
        }
        function isThenableResolved(thenable) {
          thenable = thenable.status;
          return "fulfilled" === thenable || "rejected" === thenable;
        }
        function noop$3() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = true);
          var trackedThenables = thenableState2.thenables;
          index = trackedThenables[index];
          void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, console.error(
            "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
          )), thenable.then(noop$3, noop$3), thenable = index);
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            default:
              if ("string" === typeof thenable.status)
                thenable.then(noop$3, noop$3);
              else {
                thenableState2 = workInProgressRoot;
                if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                  throw Error(
                    "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                  );
                thenableState2 = thenable;
                thenableState2.status = "pending";
                thenableState2.then(
                  function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                      var fulfilledThenable = thenable;
                      fulfilledThenable.status = "fulfilled";
                      fulfilledThenable.value = fulfilledValue;
                    }
                  },
                  function(error) {
                    if ("pending" === thenable.status) {
                      var rejectedThenable = thenable;
                      rejectedThenable.status = "rejected";
                      rejectedThenable.reason = error;
                    }
                  }
                );
              }
              switch (thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
              }
              suspendedThenable = thenable;
              needsToResetSuspendedThenableDEV = true;
              throw SuspenseException;
          }
        }
        function getSuspendedThenable() {
          if (null === suspendedThenable)
            throw Error(
              "Expected a suspended thenable. This is a bug in React. Please file an issue."
            );
          var thenable = suspendedThenable;
          suspendedThenable = null;
          needsToResetSuspendedThenableDEV = false;
          return thenable;
        }
        function checkIfUseWrappedInAsyncCatch(rejectedReason) {
          if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
            throw Error(
              "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
            );
        }
        function initializeUpdateQueue(fiber) {
          fiber.updateQueue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: { pending: null, lanes: 0, hiddenCallbacks: null },
            callbacks: null
          };
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          current2 = current2.updateQueue;
          workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
            baseState: current2.baseState,
            firstBaseUpdate: current2.firstBaseUpdate,
            lastBaseUpdate: current2.lastBaseUpdate,
            shared: current2.shared,
            callbacks: null
          });
        }
        function createUpdate(lane) {
          return {
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (null === updateQueue) return null;
          updateQueue = updateQueue.shared;
          if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
            var componentName2 = getComponentNameFromFiber(fiber);
            console.error(
              "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
              componentName2
            );
            didWarnUpdateInsideUpdate = true;
          }
          if ((executionContext & RenderContext) !== NoContext)
            return componentName2 = updateQueue.pending, null === componentName2 ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
          enqueueUpdate$1(fiber, updateQueue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function entangleTransitions(root2, fiber, lane) {
          fiber = fiber.updateQueue;
          if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
            var queueLanes = fiber.lanes;
            queueLanes &= root2.pendingLanes;
            lane |= queueLanes;
            fiber.lanes = lane;
            markRootEntangled(root2, lane);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
          if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
            var newFirst = null, newLast = null;
            queue = queue.firstBaseUpdate;
            if (null !== queue) {
              do {
                var clone2 = {
                  lane: queue.lane,
                  tag: queue.tag,
                  payload: queue.payload,
                  callback: null,
                  next: null
                };
                null === newLast ? newFirst = newLast = clone2 : newLast = newLast.next = clone2;
                queue = queue.next;
              } while (null !== queue);
              null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
            } else newFirst = newLast = capturedUpdate;
            queue = {
              baseState: current2.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: current2.shared,
              callbacks: current2.callbacks
            };
            workInProgress2.updateQueue = queue;
            return;
          }
          workInProgress2 = queue.lastBaseUpdate;
          null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
          queue.lastBaseUpdate = capturedUpdate;
        }
        function suspendIfUpdateReadFromEntangledAsyncAction() {
          if (didReadFromEntangledAsyncAction) {
            var entangledActionThenable = currentEntangledActionThenable;
            if (null !== entangledActionThenable) throw entangledActionThenable;
          }
        }
        function processUpdateQueue(workInProgress2, props26, instance$jscomp$0, renderLanes2) {
          didReadFromEntangledAsyncAction = false;
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          currentlyProcessingQueue = queue.shared;
          var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
          if (null !== pendingQueue) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
          }
          if (null !== firstBaseUpdate) {
            var newState = queue.baseState;
            lastBaseUpdate = 0;
            current2 = firstPendingUpdate = lastPendingUpdate = null;
            pendingQueue = firstBaseUpdate;
            do {
              var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
              if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
                null !== current2 && (current2 = current2.next = {
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: null,
                  next: null
                });
                a: {
                  updateLane = workInProgress2;
                  var partialState = pendingQueue;
                  var nextProps = props26, instance = instance$jscomp$0;
                  switch (partialState.tag) {
                    case ReplaceState:
                      partialState = partialState.payload;
                      if ("function" === typeof partialState) {
                        isDisallowedContextReadInDEV = true;
                        var nextState = partialState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            partialState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                        newState = nextState;
                        break a;
                      }
                      newState = partialState;
                      break a;
                    case CaptureUpdate:
                      updateLane.flags = updateLane.flags & -65537 | 128;
                    case UpdateState:
                      nextState = partialState.payload;
                      if ("function" === typeof nextState) {
                        isDisallowedContextReadInDEV = true;
                        partialState = nextState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            nextState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                      } else partialState = nextState;
                      if (null === partialState || void 0 === partialState) break a;
                      newState = assign2({}, newState, partialState);
                      break a;
                    case ForceUpdate:
                      hasForceUpdate = true;
                  }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
              } else
                isHiddenUpdate = {
                  lane: updateLane,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: pendingQueue.callback,
                  next: null
                }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
              pendingQueue = pendingQueue.next;
              if (null === pendingQueue)
                if (pendingQueue = queue.shared.pending, null === pendingQueue)
                  break;
                else
                  isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
            } while (1);
            null === current2 && (lastPendingUpdate = newState);
            queue.baseState = lastPendingUpdate;
            queue.firstBaseUpdate = firstPendingUpdate;
            queue.lastBaseUpdate = current2;
            null === firstBaseUpdate && (queue.shared.lanes = 0);
            workInProgressRootSkippedLanes |= lastBaseUpdate;
            workInProgress2.lanes = lastBaseUpdate;
            workInProgress2.memoizedState = newState;
          }
          currentlyProcessingQueue = null;
        }
        function callCallback(callback, context) {
          if ("function" !== typeof callback)
            throw Error(
              "Invalid argument passed as callback. Expected a function. Instead received: " + callback
            );
          callback.call(context);
        }
        function commitHiddenCallbacks(updateQueue, context) {
          var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
          if (null !== hiddenCallbacks)
            for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < hiddenCallbacks.length; updateQueue++)
              callCallback(hiddenCallbacks[updateQueue], context);
        }
        function commitCallbacks(updateQueue, context) {
          var callbacks = updateQueue.callbacks;
          if (null !== callbacks)
            for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
              callCallback(callbacks[updateQueue], context);
        }
        function pushHiddenContext(fiber, context) {
          var prevEntangledRenderLanes = entangledRenderLanes;
          push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
          push(currentTreeHiddenStackCursor, context, fiber);
          entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
        }
        function reuseHiddenContextOnStack(fiber) {
          push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
          push(
            currentTreeHiddenStackCursor,
            currentTreeHiddenStackCursor.current,
            fiber
          );
        }
        function popHiddenContext(fiber) {
          entangledRenderLanes = prevEntangledRenderLanesCursor.current;
          pop(currentTreeHiddenStackCursor, fiber);
          pop(prevEntangledRenderLanesCursor, fiber);
        }
        function mountHookTypesDev() {
          var hookName = currentHookNameInDev;
          null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
        function updateHookTypesDev() {
          var hookName = currentHookNameInDev;
          if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
            var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), null !== hookTypesDev)) {
              for (var table = "", i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                var oldHookName = hookTypesDev[i2], newHookName = i2 === hookTypesUpdateIndexDev ? hookName : oldHookName;
                for (oldHookName = i2 + 1 + ". " + oldHookName; 30 > oldHookName.length; )
                  oldHookName += " ";
                oldHookName += newHookName + "\n";
                table += oldHookName;
              }
              console.error(
                "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                componentName2,
                table
              );
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          void 0 === deps || null === deps || isArrayImpl(deps) || console.error(
            "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
            currentHookNameInDev,
            typeof deps
          );
        }
        function warnOnUseFormStateInDev() {
          var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
          didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), console.error(
            "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
            componentName2
          ));
        }
        function throwInvalidHookError() {
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (ignorePreviousDependencies) return false;
          if (null === prevDeps)
            return console.error(
              "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
              currentHookNameInDev
            ), false;
          nextDeps.length !== prevDeps.length && console.error(
            "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
            currentHookNameInDev,
            "[" + prevDeps.join(", ") + "]",
            "[" + nextDeps.join(", ") + "]"
          );
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++)
            if (!objectIs(nextDeps[i2], prevDeps[i2])) return false;
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component4, props26, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber = workInProgress2;
          hookTypesDev = null !== current2 ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          if ("[object AsyncFunction]" === Object.prototype.toString.call(Component4) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component4))
            nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error(
              "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
              null === nextRenderLanes ? "An unknown Component" : "<" + nextRenderLanes + ">"
            ));
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = 0;
          ReactSharedInternals.H = null !== current2 && null !== current2.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
          shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
          var children = callComponentInDEV(Component4, props26, secondArg);
          shouldDoubleInvokeUserFnsInHooksDEV = false;
          didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(
            workInProgress2,
            Component4,
            props26,
            secondArg
          ));
          if (nextRenderLanes) {
            setIsStrictModeForDevtools(true);
            try {
              children = renderWithHooksAgain(
                workInProgress2,
                Component4,
                props26,
                secondArg
              );
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          finishRenderingHooks(current2, workInProgress2);
          return children;
        }
        function finishRenderingHooks(current2, workInProgress2) {
          workInProgress2._debugHookTypes = hookTypesDev;
          null === workInProgress2.dependencies ? null !== thenableState$1 && (workInProgress2.dependencies = {
            lanes: 0,
            firstContext: null,
            _debugThenableState: thenableState$1
          }) : workInProgress2.dependencies._debugThenableState = thenableState$1;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
          renderLanes = 0;
          hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          null !== current2 && (current2.flags & 65011712) !== (workInProgress2.flags & 65011712) && console.error(
            "Internal React error: Expected static flag was missing. Please notify the React team."
          );
          didScheduleRenderPhaseUpdate = false;
          thenableIndexCounter$1 = 0;
          thenableState$1 = null;
          if (didRenderTooFewHooks)
            throw Error(
              "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
            );
          null === current2 || didReceiveUpdate || (current2 = current2.dependencies, null !== current2 && checkIfContextChanged(current2) && (didReceiveUpdate = true));
          needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current2 = true) : current2 = false;
          current2 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), console.error(
            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
          )));
        }
        function renderWithHooksAgain(workInProgress2, Component4, props26, secondArg) {
          currentlyRenderingFiber = workInProgress2;
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
            thenableIndexCounter$1 = 0;
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (numberOfReRenders >= RE_RENDER_LIMIT)
              throw Error(
                "Too many re-renders. React limits the number of renders to prevent an infinite loop."
              );
            numberOfReRenders += 1;
            ignorePreviousDependencies = false;
            workInProgressHook = currentHook = null;
            if (null != workInProgress2.updateQueue) {
              var children = workInProgress2.updateQueue;
              children.lastEffect = null;
              children.events = null;
              children.stores = null;
              null != children.memoCache && (children.memoCache.index = 0);
            }
            hookTypesUpdateIndexDev = -1;
            ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
            children = callComponentInDEV(Component4, props26, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
          return children;
        }
        function TransitionAwareHostComponent() {
          var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
          maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
          dispatcher = dispatcher.useState()[0];
          (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
          return maybeThenable;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = 0 !== localIdCounter;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags = (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags & -402655237 : workInProgress2.flags & -2053;
          current2.lanes &= ~lanes;
        }
        function resetHooksOnUnwind(workInProgress2) {
          if (didScheduleRenderPhaseUpdate) {
            for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
              var queue = workInProgress2.queue;
              null !== queue && (queue.pending = null);
              workInProgress2 = workInProgress2.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = 0;
          hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          thenableIndexCounter$1 = localIdCounter = 0;
          thenableState$1 = null;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          if (null === currentHook) {
            var nextCurrentHook = currentlyRenderingFiber.alternate;
            nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
          } else nextCurrentHook = currentHook.next;
          var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
          if (null !== nextWorkInProgressHook)
            workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
          else {
            if (null === nextCurrentHook) {
              if (null === currentlyRenderingFiber.alternate)
                throw Error(
                  "Update hook called on initial render. This is likely a bug in React. Please file an issue."
                );
              throw Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            nextCurrentHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return { lastEffect: null, events: null, stores: null, memoCache: null };
        }
        function useThenable(thenable) {
          var index = thenableIndexCounter$1;
          thenableIndexCounter$1 += 1;
          null === thenableState$1 && (thenableState$1 = createThenableState());
          thenable = trackUsedThenable(thenableState$1, thenable, index);
          index = currentlyRenderingFiber;
          null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
          return thenable;
        }
        function use(usable) {
          if (null !== usable && "object" === typeof usable) {
            if ("function" === typeof usable.then) return useThenable(usable);
            if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
          }
          throw Error("An unsupported type was passed to use(): " + String(usable));
        }
        function useMemoCache(size3) {
          var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
          null !== updateQueue && (memoCache = updateQueue.memoCache);
          if (null == memoCache) {
            var current2 = currentlyRenderingFiber.alternate;
            null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
              data: current2.data.map(function(array) {
                return array.slice();
              }),
              index: 0
            })));
          }
          null == memoCache && (memoCache = { data: [], index: 0 });
          null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
          updateQueue.memoCache = memoCache;
          updateQueue = memoCache.data[memoCache.index];
          if (void 0 === updateQueue || ignorePreviousDependencies)
            for (updateQueue = memoCache.data[memoCache.index] = Array(size3), current2 = 0; current2 < size3; current2++)
              updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
          else
            updateQueue.length !== size3 && console.error(
              "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
              updateQueue.length,
              size3
            );
          memoCache.index++;
          return updateQueue;
        }
        function basicStateReducer(state2, action) {
          return "function" === typeof action ? action(state2) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                init(initialArg);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          } else initialState = initialArg;
          hook.memoizedState = hook.baseState = initialState;
          reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber,
            reducer
          );
          return [hook.memoizedState, reducer];
        }
        function updateReducer(reducer) {
          var hook = updateWorkInProgressHook();
          return updateReducerImpl(hook, currentHook, reducer);
        }
        function updateReducerImpl(hook, current2, reducer) {
          var queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
          if (null !== pendingQueue) {
            if (null !== baseQueue) {
              var baseFirst = baseQueue.next;
              baseQueue.next = pendingQueue.next;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue !== baseQueue && console.error(
              "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
            );
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          pendingQueue = hook.baseState;
          if (null === baseQueue) hook.memoizedState = pendingQueue;
          else {
            current2 = baseQueue.next;
            var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction2 = false;
            do {
              var updateLane = update.lane & -536870913;
              if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane)
                  null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                else if ((renderLanes & revertLane) === revertLane) {
                  update = update.next;
                  revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                  continue;
                } else
                  updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
              } else
                revertLane = {
                  lane: updateLane,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
              update = update.next;
            } while (null !== update && update !== current2);
            null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
            if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, null !== reducer)))
              throw reducer;
            hook.memoizedState = pendingQueue;
            hook.baseState = baseFirst;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = pendingQueue;
          }
          null === baseQueue && (queue.lanes = 0);
          return [hook.memoizedState, queue.dispatch];
        }
        function rerenderReducer(reducer) {
          var hook = updateWorkInProgressHook(), queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
          if (null !== lastRenderPhaseUpdate) {
            queue.pending = null;
            var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            do
              newState = reducer(newState, update.action), update = update.next;
            while (update !== lastRenderPhaseUpdate);
            objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
            hook.memoizedState = newState;
            null === hook.baseQueue && (hook.baseState = newState);
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountSyncExternalStore(subscribe3, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
          if (isHydrating) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            var nextSnapshot = getServerSnapshot();
            didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error(
              "The result of getServerSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          } else {
            nextSnapshot = getSnapshot();
            didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true));
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
          hook.memoizedState = nextSnapshot;
          getServerSnapshot = { value: nextSnapshot, getSnapshot };
          hook.queue = getServerSnapshot;
          mountEffect(
            subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe3),
            [subscribe3]
          );
          fiber.flags |= 2048;
          pushSimpleEffect(
            HasEffect | Passive,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              getServerSnapshot,
              nextSnapshot,
              getSnapshot
            ),
            null
          );
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe3, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
          if (isHydrating$jscomp$0) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            getServerSnapshot = getServerSnapshot();
          } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(getServerSnapshot, cachedSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          if (cachedSnapshot = !objectIs(
            (currentHook || hook).memoizedState,
            getServerSnapshot
          ))
            hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
          hook = hook.queue;
          var create = subscribeToStore.bind(null, fiber, hook, subscribe3);
          updateEffectImpl(2048, Passive, create, [subscribe3]);
          if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= 2048;
            pushSimpleEffect(
              HasEffect | Passive,
              createEffectInstance(),
              updateStoreInstance.bind(
                null,
                fiber,
                hook,
                getServerSnapshot,
                getSnapshot
              ),
              null
            );
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
          }
          return getServerSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= 16384;
          fiber = { getSnapshot, value: renderedSnapshot };
          getSnapshot = currentlyRenderingFiber.updateQueue;
          null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        }
        function subscribeToStore(fiber, inst, subscribe3) {
          return subscribe3(function() {
            checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
          });
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
        }
        function mountStateImpl(initialState) {
          var hook = mountWorkInProgressHook();
          if ("function" === typeof initialState) {
            var initialStateInitializer = initialState;
            initialState = initialStateInitializer();
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                initialStateInitializer();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          hook.memoizedState = hook.baseState = initialState;
          hook.queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          return hook;
        }
        function mountState(initialState) {
          initialState = mountStateImpl(initialState);
          var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
          queue.dispatch = dispatch;
          return [initialState.memoizedState, dispatch];
        }
        function mountOptimistic(passthrough) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          hook = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            true,
            queue
          );
          queue.dispatch = hook;
          return [passthrough, hook];
        }
        function updateOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        }
        function updateOptimisticImpl(hook, current2, passthrough, reducer) {
          hook.baseState = passthrough;
          return updateReducerImpl(
            hook,
            currentHook,
            "function" === typeof reducer ? reducer : basicStateReducer
          );
        }
        function rerenderOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          if (null !== currentHook)
            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
          hook.baseState = passthrough;
          return [passthrough, hook.queue.dispatch];
        }
        function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
          if (isRenderPhaseUpdate(fiber))
            throw Error("Cannot update form state while rendering.");
          fiber = actionQueue.action;
          if (null !== fiber) {
            var actionNode = {
              payload,
              action: fiber,
              next: null,
              isTransition: true,
              status: "pending",
              value: null,
              reason: null,
              listeners: [],
              then: function(listener) {
                actionNode.listeners.push(listener);
              }
            };
            null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
            setState(actionNode);
            setPendingState = actionQueue.pending;
            null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
          }
        }
        function runActionStateAction(actionQueue, node2) {
          var action = node2.action, payload = node2.payload, prevState = actionQueue.state;
          if (node2.isTransition) {
            var prevTransition = ReactSharedInternals.T, currentTransition = {};
            ReactSharedInternals.T = currentTransition;
            ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
            try {
              var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
              null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
              handleActionReturnValue(actionQueue, node2, returnValue);
            } catch (error) {
              onActionError(actionQueue, node2, error);
            } finally {
              ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn(
                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
              ));
            }
          } else
            try {
              currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node2, currentTransition);
            } catch (error$4) {
              onActionError(actionQueue, node2, error$4);
            }
        }
        function handleActionReturnValue(actionQueue, node2, returnValue) {
          null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (returnValue.then(
            function(nextState) {
              onActionSuccess(actionQueue, node2, nextState);
            },
            function(error) {
              return onActionError(actionQueue, node2, error);
            }
          ), node2.isTransition || console.error(
            "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
          )) : onActionSuccess(actionQueue, node2, returnValue);
        }
        function onActionSuccess(actionQueue, actionNode, nextState) {
          actionNode.status = "fulfilled";
          actionNode.value = nextState;
          notifyActionListeners(actionNode);
          actionQueue.state = nextState;
          actionNode = actionQueue.pending;
          null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
        }
        function onActionError(actionQueue, actionNode, error) {
          var last2 = actionQueue.pending;
          actionQueue.pending = null;
          if (null !== last2) {
            last2 = last2.next;
            do
              actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
            while (actionNode !== last2);
          }
          actionQueue.action = null;
        }
        function notifyActionListeners(actionNode) {
          actionNode = actionNode.listeners;
          for (var i2 = 0; i2 < actionNode.length; i2++) (0, actionNode[i2])();
        }
        function actionStateReducer(oldState, newState) {
          return newState;
        }
        function mountActionState(action, initialStateProp) {
          if (isHydrating) {
            var ssrFormState = workInProgressRoot.formState;
            if (null !== ssrFormState) {
              a: {
                var isMatching = currentlyRenderingFiber;
                if (isHydrating) {
                  if (nextHydratableInstance) {
                    b: {
                      var markerInstance = nextHydratableInstance;
                      for (var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType; ) {
                        if (!inRootOrSingleton) {
                          markerInstance = null;
                          break b;
                        }
                        markerInstance = getNextHydratable(
                          markerInstance.nextSibling
                        );
                        if (null === markerInstance) {
                          markerInstance = null;
                          break b;
                        }
                      }
                      inRootOrSingleton = markerInstance.data;
                      markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                    }
                    if (markerInstance) {
                      nextHydratableInstance = getNextHydratable(
                        markerInstance.nextSibling
                      );
                      isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                      break a;
                    }
                  }
                  throwOnHydrationMismatch(isMatching);
                }
                isMatching = false;
              }
              isMatching && (initialStateProp = ssrFormState[0]);
            }
          }
          ssrFormState = mountWorkInProgressHook();
          ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
          isMatching = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: actionStateReducer,
            lastRenderedState: initialStateProp
          };
          ssrFormState.queue = isMatching;
          ssrFormState = dispatchSetState.bind(
            null,
            currentlyRenderingFiber,
            isMatching
          );
          isMatching.dispatch = ssrFormState;
          isMatching = mountStateImpl(false);
          inRootOrSingleton = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            false,
            isMatching.queue
          );
          isMatching = mountWorkInProgressHook();
          markerInstance = {
            state: initialStateProp,
            dispatch: null,
            action,
            pending: null
          };
          isMatching.queue = markerInstance;
          ssrFormState = dispatchActionState.bind(
            null,
            currentlyRenderingFiber,
            markerInstance,
            inRootOrSingleton,
            ssrFormState
          );
          markerInstance.dispatch = ssrFormState;
          isMatching.memoizedState = action;
          return [initialStateProp, ssrFormState, false];
        }
        function updateActionState(action) {
          var stateHook = updateWorkInProgressHook();
          return updateActionStateImpl(stateHook, currentHook, action);
        }
        function updateActionStateImpl(stateHook, currentStateHook, action) {
          currentStateHook = updateReducerImpl(
            stateHook,
            currentStateHook,
            actionStateReducer
          )[0];
          stateHook = updateReducer(basicStateReducer)[0];
          if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
            try {
              var state2 = useThenable(currentStateHook);
            } catch (x2) {
              if (x2 === SuspenseException) throw SuspenseActionException;
              throw x2;
            }
          else state2 = currentStateHook;
          currentStateHook = updateWorkInProgressHook();
          var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
          action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
            HasEffect | Passive,
            createEffectInstance(),
            actionStateActionEffect.bind(null, actionQueue, action),
            null
          ));
          return [state2, dispatch, stateHook];
        }
        function actionStateActionEffect(actionQueue, action) {
          actionQueue.action = action;
        }
        function rerenderActionState(action) {
          var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
          if (null !== currentStateHook)
            return updateActionStateImpl(stateHook, currentStateHook, action);
          updateWorkInProgressHook();
          stateHook = stateHook.memoizedState;
          currentStateHook = updateWorkInProgressHook();
          var dispatch = currentStateHook.queue.dispatch;
          currentStateHook.memoizedState = action;
          return [stateHook, dispatch, false];
        }
        function pushSimpleEffect(tag, inst, create, createDeps) {
          tag = {
            tag,
            create,
            deps: createDeps,
            inst,
            next: null
          };
          inst = currentlyRenderingFiber.updateQueue;
          null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
          create = inst.lastEffect;
          null === create ? inst.lastEffect = tag.next = tag : (createDeps = create.next, create.next = tag, tag.next = createDeps, inst.lastEffect = tag);
          return tag;
        }
        function createEffectInstance() {
          return { destroy: void 0, resource: void 0 };
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = { current: initialValue };
          return hook.memoizedState = initialValue;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
          var hook = mountWorkInProgressHook();
          createDeps = void 0 === createDeps ? null : createDeps;
          currentlyRenderingFiber.flags |= fiberFlags;
          hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            createEffectInstance(),
            create,
            createDeps
          );
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var inst = hook.memoizedState.inst;
          null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            inst,
            create,
            deps
          ));
        }
        function mountEffect(create, createDeps) {
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode ? mountEffectImpl(276826112, Passive, create, createDeps) : mountEffectImpl(8390656, Passive, create, createDeps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if ("function" === typeof ref) {
            create = create();
            var refCleanup = ref(create);
            return function() {
              "function" === typeof refCleanup ? refCleanup() : ref(null);
            };
          }
          if (null !== ref && void 0 !== ref)
            return ref.hasOwnProperty("current") || console.error(
              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
              "an object with keys {" + Object.keys(ref).join(", ") + "}"
            ), create = create(), ref.current = create, function() {
              ref.current = null;
            };
        }
        function mountImperativeHandle(ref, create, deps) {
          "function" !== typeof create && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create ? typeof create : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          mountEffectImpl(
            fiberFlags,
            Layout,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        }
        function updateImperativeHandle(ref, create, deps) {
          "function" !== typeof create && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create ? typeof create : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          updateEffectImpl(
            4,
            Layout,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        }
        function mountCallback(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
          ];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          hook.memoizedState = [callback, deps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var nextValue = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [nextValue, deps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          prevState = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [prevState, deps];
          return prevState;
        }
        function mountDeferredValue(value, initialValue) {
          var hook = mountWorkInProgressHook();
          return mountDeferredValueImpl(hook, value, initialValue);
        }
        function updateDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function rerenderDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function mountDeferredValueImpl(hook, value, initialValue) {
          if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
            return hook.memoizedState = value;
          hook.memoizedState = initialValue;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return initialValue;
        }
        function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
          if (objectIs(value, prevValue)) return value;
          if (null !== currentTreeHiddenStackCursor.current)
            return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
          if (0 === (renderLanes & 42))
            return didReceiveUpdate = true, hook.memoizedState = value;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return prevValue;
        }
        function startTransition3(fiber, queue, pendingState, finishedState, callback) {
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          dispatchOptimisticSetState(fiber, false, queue, pendingState);
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
              var thenableForFinishedState = chainThenableValue(
                returnValue,
                finishedState
              );
              dispatchSetStateInternal(
                fiber,
                queue,
                thenableForFinishedState,
                requestUpdateLane(fiber)
              );
            } else
              dispatchSetStateInternal(
                fiber,
                queue,
                finishedState,
                requestUpdateLane(fiber)
              );
          } catch (error) {
            dispatchSetStateInternal(
              fiber,
              queue,
              { then: function() {
              }, status: "rejected", reason: error },
              requestUpdateLane(fiber)
            );
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        }
        function startHostTransition(formFiber, pendingState, action, formData) {
          if (5 !== formFiber.tag)
            throw Error(
              "Expected the form instance to be a HostComponent. This is a bug in React."
            );
          var queue = ensureFormComponentIsStateful(formFiber).queue;
          startTransition3(
            formFiber,
            queue,
            pendingState,
            NotPendingTransition,
            null === action ? noop$2 : function() {
              requestFormReset$1(formFiber);
              return action(formData);
            }
          );
        }
        function ensureFormComponentIsStateful(formFiber) {
          var existingStateHook = formFiber.memoizedState;
          if (null !== existingStateHook) return existingStateHook;
          existingStateHook = {
            memoizedState: NotPendingTransition,
            baseState: NotPendingTransition,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: NotPendingTransition
            },
            next: null
          };
          var initialResetState = {};
          existingStateHook.next = {
            memoizedState: initialResetState,
            baseState: initialResetState,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialResetState
            },
            next: null
          };
          formFiber.memoizedState = existingStateHook;
          formFiber = formFiber.alternate;
          null !== formFiber && (formFiber.memoizedState = existingStateHook);
          return existingStateHook;
        }
        function requestFormReset$1(formFiber) {
          null === ReactSharedInternals.T && console.error(
            "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
          );
          var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
          dispatchSetStateInternal(
            formFiber,
            resetStateQueue,
            {},
            requestUpdateLane(formFiber)
          );
        }
        function mountTransition() {
          var stateHook = mountStateImpl(false);
          stateHook = startTransition3.bind(
            null,
            currentlyRenderingFiber,
            stateHook.queue,
            true,
            false
          );
          mountWorkInProgressHook().memoizedState = stateHook;
          return [false, stateHook];
        }
        function updateTransition() {
          var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function rerenderTransition() {
          var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function useHostTransitionStatus() {
          return readContext(HostTransitionContext);
        }
        function mountId() {
          var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
          if (isHydrating) {
            var treeId = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
            identifierPrefix = "\xAB" + identifierPrefix + "R" + treeId;
            treeId = localIdCounter++;
            0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
            identifierPrefix += "\xBB";
          } else
            treeId = globalClientIdCounter++, identifierPrefix = "\xAB" + identifierPrefix + "r" + treeId.toString(32) + "\xBB";
          return hook.memoizedState = identifierPrefix;
        }
        function mountRefresh() {
          return mountWorkInProgressHook().memoizedState = refreshCache.bind(
            null,
            currentlyRenderingFiber
          );
        }
        function refreshCache(fiber, seedKey) {
          for (var provider = fiber.return; null !== provider; ) {
            switch (provider.tag) {
              case 24:
              case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root2 = enqueueUpdate(provider, fiber, lane);
                null !== root2 && (scheduleUpdateOnFiber(root2, provider, lane), entangleTransitions(root2, provider, lane));
                provider = createCache3();
                null !== seedKey && void 0 !== seedKey && null !== root2 && console.error(
                  "The seed argument is not enabled outside experimental channels."
                );
                fiber.payload = { cache: provider };
                return;
            }
            provider = provider.return;
          }
        }
        function dispatchReducerAction(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          var update = {
            lane: args,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, update) : (update = enqueueConcurrentHookUpdate(fiber, queue, update, args), null !== update && (scheduleUpdateOnFiber(update, fiber, args), entangleTransitionUpdate(update, queue, args)));
          markStateUpdateScheduled(fiber, args);
        }
        function dispatchSetState(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          dispatchSetStateInternal(fiber, queue, action, args);
          markStateUpdateScheduled(fiber, args);
        }
        function dispatchSetStateInternal(fiber, queue, action, lane) {
          var update = {
            lane,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
          else {
            var alternate = fiber.alternate;
            if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
              var prevDispatcher = ReactSharedInternals.H;
              ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState))
                  return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
              } catch (error) {
              } finally {
                ReactSharedInternals.H = prevDispatcher;
              }
            }
            action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (null !== action)
              return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
          }
          return false;
        }
        function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
          null === ReactSharedInternals.T && 0 === currentEntangledLane && console.error(
            "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
          );
          action = {
            lane: 2,
            revertLane: requestTransitionLane(),
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender)
              throw Error("Cannot update optimistic state while rendering.");
            console.error("Cannot call startTransition while rendering.");
          } else
            throwIfDuringRender = enqueueConcurrentHookUpdate(
              fiber,
              queue,
              action,
              2
            ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
          markStateUpdateScheduled(fiber, 2);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (0 !== (lane & 4194048)) {
            var queueLanes = queue.lanes;
            queueLanes &= root2.pendingLanes;
            lane |= queueLanes;
            queue.lanes = lane;
            markRootEntangled(root2, lane);
          }
        }
        function pushDebugInfo(debugInfo) {
          var previousDebugInfo = currentDebugInfo;
          null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
          return previousDebugInfo;
        }
        function validateFragmentProps(element, fiber, returnFiber) {
          for (var keys = Object.keys(element.props), i2 = 0; i2 < keys.length; i2++) {
            var key = keys[i2];
            if ("children" !== key && "key" !== key) {
              null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
              runWithFiberInDEV(
                fiber,
                function(erroredKey) {
                  console.error(
                    "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                    erroredKey
                  );
                },
                key
              );
              break;
            }
          }
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          null === thenableState && (thenableState = createThenableState());
          return trackUsedThenable(thenableState, thenable, index);
        }
        function coerceRef(workInProgress2, element) {
          element = element.props.ref;
          workInProgress2.ref = void 0 !== element ? element : null;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
            throw Error(
              'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
            );
          returnFiber = Object.prototype.toString.call(newChild);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        function warnOnFunctionType(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
            invalidChild,
            invalidChild,
            invalidChild
          ) : console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
            invalidChild,
            invalidChild,
            parentName,
            invalidChild,
            parentName
          ));
        }
        function warnOnSymbolType(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), 3 === returnFiber.tag ? console.error(
            "Symbols are not valid as a React child.\n  root.render(%s)",
            invalidChild
          ) : console.error(
            "Symbols are not valid as a React child.\n  <%s>%s</%s>",
            parentName,
            invalidChild,
            parentName
          ));
        }
        function createChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (shouldTrackSideEffects) {
              var deletions = returnFiber.deletions;
              null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null;
            for (; null !== currentFirstChild; )
              deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return null;
          }
          function mapRemainingChildren(currentFirstChild) {
            for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
              null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            fiber = createWorkInProgress(fiber, pendingProps);
            fiber.index = 0;
            fiber.sibling = null;
            return fiber;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects)
              return newFiber.flags |= 1048576, lastPlacedIndex;
            newIndex = newFiber.alternate;
            if (null !== newIndex)
              return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
            newFiber.flags |= 67108866;
            return lastPlacedIndex;
          }
          function placeSingleChild(newFiber) {
            shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (null === current2 || 6 !== current2.tag)
              return current2 = createFiberFromText(
                textContent,
                returnFiber.mode,
                lanes
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, textContent);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE)
              return current2 = updateFragment(
                returnFiber,
                current2,
                element.props.children,
                lanes,
                element.key
              ), validateFragmentProps(element, current2, returnFiber), current2;
            if (null !== current2 && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(elementType) === current2.type))
              return current2 = useFiber(current2, element.props), coerceRef(current2, element), current2.return = returnFiber, current2._debugOwner = element._owner, current2._debugInfo = currentDebugInfo, current2;
            current2 = createFiberFromElement(element, returnFiber.mode, lanes);
            coerceRef(current2, element);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
              return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, portal.children || []);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateFragment(returnFiber, current2, fragment, lanes, key) {
            if (null === current2 || 7 !== current2.tag)
              return current2 = createFiberFromFragment(
                fragment,
                returnFiber.mode,
                lanes,
                key
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, fragment);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function createChild(returnFiber, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return newChild = createFiberFromText(
                "" + newChild,
                returnFiber.mode,
                lanes
              ), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugTask = returnFiber._debugTask, newChild._debugInfo = currentDebugInfo, newChild;
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return lanes = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                  return newChild = createFiberFromPortal(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  newChild = callLazyInitInDEV(newChild);
                  returnFiber = createChild(returnFiber, newChild, lanes);
                  currentDebugInfo = _prevDebugInfo;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return lanes = createFiberFromFragment(
                  newChild,
                  returnFiber.mode,
                  lanes,
                  null
                ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(
                  returnFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return createChild(
                  returnFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = null !== oldFiber ? oldFiber.key : null;
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber) : null;
                case REACT_PORTAL_TYPE:
                  return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                  return key = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
                if (null !== key) return null;
                key = pushDebugInfo(newChild._debugInfo);
                returnFiber = updateFragment(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes,
                  null
                );
                currentDebugInfo = key;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = key, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateSlot(
                  returnFiber,
                  oldFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newIdx = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  ), currentDebugInfo = existingChildren, returnFiber;
                case REACT_PORTAL_TYPE:
                  return existingChildren = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                  newChild = callLazyInitInDEV(newChild);
                  returnFiber = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  );
                  currentDebugInfo = _prevDebugInfo7;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes,
                  null
                ), currentDebugInfo = existingChildren, returnFiber;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo7, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
            if ("object" !== typeof child || null === child) return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(returnFiber, workInProgress2, child);
                var key = child.key;
                if ("string" !== typeof key) break;
                if (null === knownKeys) {
                  knownKeys = /* @__PURE__ */ new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                runWithFiberInDEV(workInProgress2, function() {
                  console.error(
                    "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                    key
                  );
                });
                break;
              case REACT_LAZY_TYPE:
                child = callLazyInitInDEV(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                lanes
              );
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                newChildren[newIdx],
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; newIdx < newChildren.length; newIdx++)
                oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  newChildren[newIdx],
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                newChildren[newIdx],
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                newChildren[newIdx],
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
            if (null == newChildren)
              throw Error("An iterable object provided no iterator.");
            for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                step.value,
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; !step.done; newIdx++, step = newChildren.next())
                oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  step.value,
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                step.value,
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                step.value,
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  a: {
                    for (var key = newChild.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === key) {
                        key = newChild.type;
                        if (key === REACT_FRAGMENT_TYPE) {
                          if (7 === currentFirstChild.tag) {
                            deleteRemainingChildren(
                              returnFiber,
                              currentFirstChild.sibling
                            );
                            lanes = useFiber(
                              currentFirstChild,
                              newChild.props.children
                            );
                            lanes.return = returnFiber;
                            lanes._debugOwner = newChild._owner;
                            lanes._debugInfo = currentDebugInfo;
                            validateFragmentProps(newChild, lanes, returnFiber);
                            returnFiber = lanes;
                            break a;
                          }
                        } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(
                          currentFirstChild,
                          newChild
                        ) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(key) === currentFirstChild.type) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(currentFirstChild, newChild.props);
                          coerceRef(lanes, newChild);
                          lanes.return = returnFiber;
                          lanes._debugOwner = newChild._owner;
                          lanes._debugInfo = currentDebugInfo;
                          returnFiber = lanes;
                          break a;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      } else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(
                      newChild,
                      returnFiber.mode,
                      lanes
                    ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                  }
                  returnFiber = placeSingleChild(returnFiber);
                  currentDebugInfo = prevDebugInfo;
                  return returnFiber;
                case REACT_PORTAL_TYPE:
                  a: {
                    prevDebugInfo = newChild;
                    for (newChild = prevDebugInfo.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === newChild)
                        if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            prevDebugInfo.children || []
                          );
                          lanes.return = returnFiber;
                          returnFiber = lanes;
                          break a;
                        } else {
                          deleteRemainingChildren(returnFiber, currentFirstChild);
                          break;
                        }
                      else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    lanes = createFiberFromPortal(
                      prevDebugInfo,
                      returnFiber.mode,
                      lanes
                    );
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                  }
                  return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                  return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = reconcileChildFibersImpl(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                  ), currentDebugInfo = prevDebugInfo, returnFiber;
              }
              if (isArrayImpl(newChild))
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (getIteratorFn(newChild)) {
                prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                key = getIteratorFn(newChild);
                if ("function" !== typeof key)
                  throw Error(
                    "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                  );
                var newChildren = key.call(newChild);
                if (newChildren === newChild) {
                  if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(newChildren))
                    didWarnAboutGenerators || console.error(
                      "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                    ), didWarnAboutGenerators = true;
                } else
                  newChild.entries !== key || didWarnAboutMaps || (console.error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                  ), didWarnAboutMaps = true);
                returnFiber = reconcileChildrenIterator(
                  returnFiber,
                  currentFirstChild,
                  newChildren,
                  lanes
                );
                currentDebugInfo = prevDebugInfo;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(
                returnFiber,
                currentFirstChild.sibling
              ), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(
                prevDebugInfo,
                returnFiber.mode,
                lanes
              ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return function(returnFiber, currentFirstChild, newChild, lanes) {
            var prevDebugInfo = currentDebugInfo;
            currentDebugInfo = null;
            try {
              thenableIndexCounter = 0;
              var firstChildFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
              thenableState = null;
              return firstChildFiber;
            } catch (x2) {
              if (x2 === SuspenseException || x2 === SuspenseActionException) throw x2;
              var fiber = createFiber(29, x2, null, returnFiber.mode);
              fiber.lanes = lanes;
              fiber.return = returnFiber;
              var debugInfo = fiber._debugInfo = currentDebugInfo;
              fiber._debugOwner = returnFiber._debugOwner;
              fiber._debugTask = returnFiber._debugTask;
              if (null != debugInfo) {
                for (var i2 = debugInfo.length - 1; 0 <= i2; i2--)
                  if ("string" === typeof debugInfo[i2].stack) {
                    fiber._debugOwner = debugInfo[i2];
                    fiber._debugTask = debugInfo[i2].debugTask;
                    break;
                  }
              }
              return fiber;
            } finally {
              currentDebugInfo = prevDebugInfo;
            }
          };
        }
        function pushPrimaryTreeSuspenseHandler(handler) {
          var current2 = handler.alternate;
          push(
            suspenseStackCursor,
            suspenseStackCursor.current & SubtreeSuspenseContextMask,
            handler
          );
          push(suspenseHandlerStackCursor, handler, handler);
          null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
        }
        function pushOffscreenSuspenseHandler(fiber) {
          if (22 === fiber.tag) {
            if (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary) {
              var current2 = fiber.alternate;
              null !== current2 && null !== current2.memoizedState && (shellBoundary = fiber);
            }
          } else reuseSuspenseHandlerOnStack(fiber);
        }
        function reuseSuspenseHandlerOnStack(fiber) {
          push(suspenseStackCursor, suspenseStackCursor.current, fiber);
          push(
            suspenseHandlerStackCursor,
            suspenseHandlerStackCursor.current,
            fiber
          );
        }
        function popSuspenseHandler(fiber) {
          pop(suspenseHandlerStackCursor, fiber);
          shellBoundary === fiber && (shellBoundary = null);
          pop(suspenseStackCursor, fiber);
        }
        function findFirstSuspended(row) {
          for (var node2 = row; null !== node2; ) {
            if (13 === node2.tag) {
              var state2 = node2.memoizedState;
              if (null !== state2 && (state2 = state2.dehydrated, null === state2 || state2.data === SUSPENSE_PENDING_START_DATA || isSuspenseInstanceFallback(state2)))
                return node2;
            } else if (19 === node2.tag && void 0 !== node2.memoizedProps.revealOrder) {
              if (0 !== (node2.flags & 128)) return node2;
            } else if (null !== node2.child) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === row) break;
            for (; null === node2.sibling; ) {
              if (null === node2.return || node2.return === row) return null;
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        function warnOnInvalidCallback(callback) {
          if (null !== callback && "function" !== typeof callback) {
            var key = String(callback);
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error(
              "Expected the last optional `callback` argument to be a function. Instead received: %s.",
              callback
            ));
          }
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error(
            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
            ctor
          )));
          prevState = null === partialState || void 0 === partialState ? prevState : assign2({}, prevState, partialState);
          workInProgress2.memoizedState = prevState;
          0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = prevState);
        }
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if ("function" === typeof instance.shouldComponentUpdate) {
            oldProps = instance.shouldComponentUpdate(
              newProps,
              newState,
              nextContext
            );
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                oldProps = instance.shouldComponentUpdate(
                  newProps,
                  newState,
                  nextContext
                );
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            void 0 === oldProps && console.error(
              "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
              getComponentNameFromType(ctor) || "Component"
            );
            return oldProps;
          }
          return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
          "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), console.error(
            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            workInProgress2
          )), classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          ));
        }
        function resolveClassComponentProps(Component4, baseProps) {
          var newProps = baseProps;
          if ("ref" in baseProps) {
            newProps = {};
            for (var propName in baseProps)
              "ref" !== propName && (newProps[propName] = baseProps[propName]);
          }
          if (Component4 = Component4.defaultProps) {
            newProps === baseProps && (newProps = assign2({}, newProps));
            for (var _propName in Component4)
              void 0 === newProps[_propName] && (newProps[_propName] = Component4[_propName]);
          }
          return newProps;
        }
        function defaultOnUncaughtError(error) {
          reportGlobalError(error);
          console.warn(
            "%s\n\n%s\n",
            componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.",
            "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
          );
        }
        function defaultOnCaughtError(error) {
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
          if ("object" === typeof error && null !== error && "string" === typeof error.environmentName) {
            var JSCompiler_inline_result = error.environmentName;
            error = [
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            ].slice(0);
            "string" === typeof error[0] ? error.splice(
              0,
              1,
              badgeFormat + error[0],
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            ) : error.splice(
              0,
              0,
              badgeFormat,
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            );
            error.unshift(console);
            JSCompiler_inline_result = bind.apply(console.error, error);
            JSCompiler_inline_result();
          } else
            console.error(
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            );
        }
        function defaultOnRecoverableError(error) {
          reportGlobalError(error);
        }
        function logUncaughtError(root2, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = null;
            var error = errorInfo.value;
            if (null !== ReactSharedInternals.actQueue)
              ReactSharedInternals.thrownErrors.push(error);
            else {
              var onUncaughtError = root2.onUncaughtError;
              onUncaughtError(error, { componentStack: errorInfo.stack });
            }
          } catch (e$5) {
            setTimeout(function() {
              throw e$5;
            });
          }
        }
        function logCaughtError(root2, boundary, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = getComponentNameFromFiber(boundary);
            var onCaughtError = root2.onCaughtError;
            onCaughtError(errorInfo.value, {
              componentStack: errorInfo.stack,
              errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
            });
          } catch (e$6) {
            setTimeout(function() {
              throw e$6;
            });
          }
        }
        function createRootErrorUpdate(root2, errorInfo, lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          lane.payload = { element: null };
          lane.callback = function() {
            runWithFiberInDEV(errorInfo.source, logUncaughtError, root2, errorInfo);
          };
          return lane;
        }
        function createClassErrorUpdate(lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          return lane;
        }
        function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if ("function" === typeof getDerivedStateFromError) {
            var error = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error);
            };
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
              runWithFiberInDEV(
                errorInfo.source,
                logCaughtError,
                root2,
                fiber,
                errorInfo
              );
            };
          }
          var inst = fiber.stateNode;
          null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(
              errorInfo.source,
              logCaughtError,
              root2,
              fiber,
              errorInfo
            );
            "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
            callComponentDidCatchInDEV(this, errorInfo);
            "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & 2) && console.error(
              "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
              getComponentNameFromFiber(fiber) || "Unknown"
            );
          });
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= 32768;
          isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes);
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            returnFiber = sourceFiber.alternate;
            null !== returnFiber && propagateParentContextChanges(
              returnFiber,
              sourceFiber,
              rootRenderLanes,
              true
            );
            isHydrating && (didSuspendOrErrorDEV = true);
            sourceFiber = suspenseHandlerStackCursor.current;
            if (null !== sourceFiber) {
              switch (sourceFiber.tag) {
                case 13:
                  return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
                case 22:
                  return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                    transitions: null,
                    markerInstances: null,
                    retryQueue: /* @__PURE__ */ new Set([value])
                  }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
              }
              throw Error(
                "Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React."
              );
            }
            attachPingListener(root2, value, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return false;
          }
          if (isHydrating)
            return didSuspendOrErrorDEV = true, returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                  { cause: value }
                ),
                sourceFiber
              )
            )) : (value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                  { cause: value }
                ),
                sourceFiber
              )
            ), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
              root2.stateNode,
              value,
              rootRenderLanes
            ), enqueueCapturedUpdate(root2, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
          var error = createCapturedValueAtFiber(
            Error(
              "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
              { cause: value }
            ),
            sourceFiber
          );
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
          workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
          if (null === returnFiber) return true;
          value = createCapturedValueAtFiber(value, sourceFiber);
          sourceFiber = returnFiber;
          do {
            switch (sourceFiber.tag) {
              case 3:
                return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(
                  sourceFiber.stateNode,
                  value,
                  root2
                ), enqueueCapturedUpdate(sourceFiber, root2), false;
              case 1:
                if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== error && "function" === typeof error.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(error))))
                  return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                    rootRenderLanes,
                    root2,
                    sourceFiber,
                    value
                  ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
            }
            sourceFiber = sourceFiber.return;
          } while (null !== sourceFiber);
          return false;
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
            workInProgress2,
            current2.child,
            nextChildren,
            renderLanes2
          );
        }
        function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderLanes2) {
          Component4 = Component4.render;
          var ref = workInProgress2.ref;
          if ("ref" in nextProps) {
            var propsWithoutRef = {};
            for (var key in nextProps)
              "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
          } else propsWithoutRef = nextProps;
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          nextProps = renderWithHooks(
            current2,
            workInProgress2,
            Component4,
            propsWithoutRef,
            ref,
            renderLanes2
          );
          key = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && key && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
          if (null === current2) {
            var type = Component4.type;
            if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component4.compare)
              return Component4 = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component4, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(
                current2,
                workInProgress2,
                Component4,
                nextProps,
                renderLanes2
              );
            current2 = createFiberFromTypeAndProps(
              Component4.type,
              null,
              nextProps,
              workInProgress2,
              workInProgress2.mode,
              renderLanes2
            );
            current2.ref = workInProgress2.ref;
            current2.return = workInProgress2;
            return workInProgress2.child = current2;
          }
          type = current2.child;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            var prevProps = type.memoizedProps;
            Component4 = Component4.compare;
            Component4 = null !== Component4 ? Component4 : shallowEqual;
            if (Component4(prevProps, nextProps) && current2.ref === workInProgress2.ref)
              return bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
          }
          workInProgress2.flags |= 1;
          current2 = createWorkInProgress(type, nextProps);
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
          if (null !== current2) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
              if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
                0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
              else
                return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          return updateFunctionComponent(
            current2,
            workInProgress2,
            Component4,
            nextProps,
            renderLanes2
          );
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current2 ? current2.memoizedState : null;
          if ("hidden" === nextProps.mode) {
            if (0 !== (workInProgress2.flags & 128)) {
              nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
              if (null !== current2) {
                nextChildren = workInProgress2.child = current2.child;
                for (prevState = 0; null !== nextChildren; )
                  prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress2.childLanes = prevState & ~nextProps;
              } else workInProgress2.childLanes = 0, workInProgress2.child = null;
              return deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                nextProps,
                renderLanes2
              );
            }
            if (0 !== (renderLanes2 & 536870912))
              workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
                workInProgress2,
                null !== prevState ? prevState.cachePool : null
              ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
            else
              return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
                renderLanes2
              );
          } else
            null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
          var JSCompiler_inline_result = peekCacheFromPool();
          JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
            parent: CacheContext._currentValue,
            pool: JSCompiler_inline_result
          };
          workInProgress2.memoizedState = {
            baseLanes: nextBaseLanes,
            cachePool: JSCompiler_inline_result
          };
          null !== current2 && pushTransition(workInProgress2, null);
          reuseHiddenContextOnStack(workInProgress2);
          pushOffscreenSuspenseHandler(workInProgress2);
          null !== current2 && propagateParentContextChanges(current2, workInProgress2, renderLanes2, true);
          return null;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (null === ref)
            null !== current2 && null !== current2.ref && (workInProgress2.flags |= 4194816);
          else {
            if ("function" !== typeof ref && "object" !== typeof ref)
              throw Error(
                "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
              );
            if (null === current2 || current2.ref !== ref)
              workInProgress2.flags |= 4194816;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
          if (Component4.prototype && "function" === typeof Component4.prototype.render) {
            var componentName2 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutBadClass[componentName2] || (console.error(
              "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
              componentName2,
              componentName2
            ), didWarnAboutBadClass[componentName2] = true);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress2,
            null
          );
          null === current2 && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component4.contextTypes && (componentName2 = getComponentNameFromType(Component4) || "Unknown", didWarnAboutContextTypes[componentName2] || (didWarnAboutContextTypes[componentName2] = true, console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
            componentName2
          ))));
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          Component4 = renderWithHooks(
            current2,
            workInProgress2,
            Component4,
            nextProps,
            void 0,
            renderLanes2
          );
          nextProps = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, Component4, renderLanes2);
          return workInProgress2.child;
        }
        function replayFunctionComponent(current2, workInProgress2, nextProps, Component4, secondArg, renderLanes2) {
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          workInProgress2.updateQueue = null;
          nextProps = renderWithHooksAgain(
            workInProgress2,
            Component4,
            nextProps,
            secondArg
          );
          finishRenderingHooks(current2, workInProgress2);
          Component4 = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && Component4 && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
          switch (shouldErrorImpl(workInProgress2)) {
            case false:
              var _instance = workInProgress2.stateNode, state2 = new workInProgress2.type(
                workInProgress2.memoizedProps,
                _instance.context
              ).state;
              _instance.updater.enqueueSetState(_instance, state2, null);
              break;
            case true:
              workInProgress2.flags |= 128;
              workInProgress2.flags |= 65536;
              _instance = Error("Simulated error coming from DevTools");
              var lane = renderLanes2 & -renderLanes2;
              workInProgress2.lanes |= lane;
              state2 = workInProgressRoot;
              if (null === state2)
                throw Error(
                  "Expected a work-in-progress root. This is a bug in React. Please file an issue."
                );
              lane = createClassErrorUpdate(lane);
              initializeClassErrorUpdate(
                lane,
                state2,
                workInProgress2,
                createCapturedValueAtFiber(_instance, workInProgress2)
              );
              enqueueCapturedUpdate(workInProgress2, lane);
          }
          prepareToReadContext(workInProgress2);
          if (null === workInProgress2.stateNode) {
            state2 = emptyContextObject;
            _instance = Component4.contextType;
            "contextType" in Component4 && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component4) && (didWarnAboutInvalidateContextType.add(Component4), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error(
              "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
              getComponentNameFromType(Component4) || "Component",
              lane
            ));
            "object" === typeof _instance && null !== _instance && (state2 = readContext(_instance));
            _instance = new Component4(nextProps, state2);
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                _instance = new Component4(nextProps, state2);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            state2 = workInProgress2.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
            _instance.updater = classComponentUpdater;
            workInProgress2.stateNode = _instance;
            _instance._reactInternals = workInProgress2;
            _instance._reactInternalInstance = fakeInternalInstance;
            "function" === typeof Component4.getDerivedStateFromProps && null === state2 && (state2 = getComponentNameFromType(Component4) || "Component", didWarnAboutUninitializedState.has(state2) || (didWarnAboutUninitializedState.add(state2), console.error(
              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
              state2,
              null === _instance.state ? "null" : "undefined",
              state2
            )));
            if ("function" === typeof Component4.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
              var foundWillUpdateName = lane = state2 = null;
              "function" === typeof _instance.componentWillMount && true !== _instance.componentWillMount.__suppressDeprecationWarning ? state2 = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state2 = "UNSAFE_componentWillMount");
              "function" === typeof _instance.componentWillReceiveProps && true !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
              "function" === typeof _instance.componentWillUpdate && true !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
              if (null !== state2 || null !== lane || null !== foundWillUpdateName) {
                _instance = getComponentNameFromType(Component4) || "Component";
                var newApiName = "function" === typeof Component4.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error(
                  "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                  _instance,
                  newApiName,
                  null !== state2 ? "\n  " + state2 : "",
                  null !== lane ? "\n  " + lane : "",
                  null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
                ));
              }
            }
            _instance = workInProgress2.stateNode;
            state2 = getComponentNameFromType(Component4) || "Component";
            _instance.render || (Component4.prototype && "function" === typeof Component4.prototype.render ? console.error(
              "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
              state2
            ) : console.error(
              "No `render` method found on the %s instance: you may have forgotten to define `render`.",
              state2
            ));
            !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error(
              "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
              state2
            );
            _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error(
              "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
              state2
            );
            _instance.contextType && console.error(
              "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
              state2
            );
            Component4.childContextTypes && !didWarnAboutChildContextTypes.has(Component4) && (didWarnAboutChildContextTypes.add(Component4), console.error(
              "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
              state2
            ));
            Component4.contextTypes && !didWarnAboutContextTypes$1.has(Component4) && (didWarnAboutContextTypes$1.add(Component4), console.error(
              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
              state2
            ));
            "function" === typeof _instance.componentShouldUpdate && console.error(
              "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
              state2
            );
            Component4.prototype && Component4.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && console.error(
              "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
              getComponentNameFromType(Component4) || "A pure component"
            );
            "function" === typeof _instance.componentDidUnmount && console.error(
              "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
              state2
            );
            "function" === typeof _instance.componentDidReceiveProps && console.error(
              "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
              state2
            );
            "function" === typeof _instance.componentWillRecieveProps && console.error(
              "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
              state2
            );
            "function" === typeof _instance.UNSAFE_componentWillRecieveProps && console.error(
              "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
              state2
            );
            lane = _instance.props !== nextProps;
            void 0 !== _instance.props && lane && console.error(
              "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
              state2
            );
            _instance.defaultProps && console.error(
              "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
              state2,
              state2
            );
            "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component4) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component4), console.error(
              "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
              getComponentNameFromType(Component4)
            ));
            "function" === typeof _instance.getDerivedStateFromProps && console.error(
              "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state2
            );
            "function" === typeof _instance.getDerivedStateFromError && console.error(
              "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state2
            );
            "function" === typeof Component4.getSnapshotBeforeUpdate && console.error(
              "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
              state2
            );
            (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state2);
            "function" === typeof _instance.getChildContext && "object" !== typeof Component4.childContextTypes && console.error(
              "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
              state2
            );
            _instance = workInProgress2.stateNode;
            _instance.props = nextProps;
            _instance.state = workInProgress2.memoizedState;
            _instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            state2 = Component4.contextType;
            _instance.context = "object" === typeof state2 && null !== state2 ? readContext(state2) : emptyContextObject;
            _instance.state === nextProps && (state2 = getComponentNameFromType(Component4) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state2) || (didWarnAboutDirectlyAssigningPropsToState.add(state2), console.error(
              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
              state2
            )));
            workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
              workInProgress2,
              _instance
            );
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
              workInProgress2,
              _instance
            );
            _instance.state = workInProgress2.memoizedState;
            state2 = Component4.getDerivedStateFromProps;
            "function" === typeof state2 && (applyDerivedStateFromProps(
              workInProgress2,
              Component4,
              state2,
              nextProps
            ), _instance.state = workInProgress2.memoizedState);
            "function" === typeof Component4.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state2 = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state2 !== _instance.state && (console.error(
              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
              getComponentNameFromFiber(workInProgress2) || "Component"
            ), classComponentUpdater.enqueueReplaceState(
              _instance,
              _instance.state,
              null
            )), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
            "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308);
            (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728);
            _instance = true;
          } else if (null === current2) {
            _instance = workInProgress2.stateNode;
            var unresolvedOldProps = workInProgress2.memoizedProps;
            lane = resolveClassComponentProps(Component4, unresolvedOldProps);
            _instance.props = lane;
            var oldContext = _instance.context;
            foundWillUpdateName = Component4.contextType;
            state2 = emptyContextObject;
            "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state2 = readContext(foundWillUpdateName));
            newApiName = Component4.getDerivedStateFromProps;
            foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
            unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
            foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state2) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              state2
            );
            hasForceUpdate = false;
            var oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            oldContext = workInProgress2.memoizedState;
            unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(
              workInProgress2,
              Component4,
              newApiName,
              nextProps
            ), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component4,
              lane,
              nextProps,
              oldState,
              oldContext,
              state2
            )) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728)) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state2, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), _instance = false);
          } else {
            _instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            state2 = workInProgress2.memoizedProps;
            foundWillUpdateName = resolveClassComponentProps(Component4, state2);
            _instance.props = foundWillUpdateName;
            newApiName = workInProgress2.pendingProps;
            oldState = _instance.context;
            oldContext = Component4.contextType;
            lane = emptyContextObject;
            "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
            unresolvedOldProps = Component4.getDerivedStateFromProps;
            (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state2 !== newApiName || oldState !== lane) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              lane
            );
            hasForceUpdate = false;
            oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            var newState = workInProgress2.memoizedState;
            state2 !== newApiName || oldState !== newState || hasForceUpdate || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
              workInProgress2,
              Component4,
              unresolvedOldProps,
              nextProps
            ), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component4,
              foundWillUpdateName,
              nextProps,
              oldState,
              newState,
              lane
            ) || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies)) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(
              nextProps,
              newState,
              lane
            )), "function" === typeof _instance.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state2 === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state2 === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state2 === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state2 === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
          }
          lane = _instance;
          markRef(current2, workInProgress2);
          state2 = 0 !== (workInProgress2.flags & 128);
          if (lane || state2) {
            lane = workInProgress2.stateNode;
            setCurrentFiber(workInProgress2);
            if (state2 && "function" !== typeof Component4.getDerivedStateFromError)
              Component4 = null, profilerStartTime = -1;
            else {
              markComponentRenderStarted(workInProgress2);
              Component4 = callRenderInDEV(lane);
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  callRenderInDEV(lane);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              markComponentRenderStopped();
            }
            workInProgress2.flags |= 1;
            null !== current2 && state2 ? (workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              Component4,
              renderLanes2
            )) : reconcileChildren(current2, workInProgress2, Component4, renderLanes2);
            workInProgress2.memoizedState = lane.state;
            current2 = workInProgress2.child;
          } else
            current2 = bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          renderLanes2 = workInProgress2.stateNode;
          _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || console.error(
            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
            getComponentNameFromFiber(workInProgress2) || "a component"
          ), didWarnAboutReassigningProps = true);
          return current2;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
          resetHydrationState();
          workInProgress2.flags |= 256;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function validateFunctionComponentInDev(workInProgress2, Component4) {
          Component4 && Component4.childContextTypes && console.error(
            "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
            Component4.displayName || Component4.name || "Component"
          );
          "function" === typeof Component4.getDerivedStateFromProps && (workInProgress2 = getComponentNameFromType(Component4) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (console.error(
            "%s: Function components do not support getDerivedStateFromProps.",
            workInProgress2
          ), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
          "object" === typeof Component4.contextType && null !== Component4.contextType && (Component4 = getComponentNameFromType(Component4) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component4] || (console.error(
            "%s: Function components do not support contextType.",
            Component4
          ), didWarnAboutContextTypeOnFunctionComponent[Component4] = true));
        }
        function mountSuspenseOffscreenState(renderLanes2) {
          return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
        }
        function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
          current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
          primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
          return current2;
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var JSCompiler_object_inline_digest_2451;
          var JSCompiler_object_inline_stack_2452 = workInProgress2.pendingProps;
          shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
          var JSCompiler_object_inline_componentStack_2453 = false;
          var didSuspend = 0 !== (workInProgress2.flags & 128);
          (JSCompiler_object_inline_digest_2451 = didSuspend) || (JSCompiler_object_inline_digest_2451 = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
          JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_componentStack_2453 = true, workInProgress2.flags &= -129);
          JSCompiler_object_inline_digest_2451 = 0 !== (workInProgress2.flags & 32);
          workInProgress2.flags &= -33;
          if (null === current2) {
            if (isHydrating) {
              JSCompiler_object_inline_componentStack_2453 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
              if (isHydrating) {
                var JSCompiler_object_inline_message_2450 = nextHydratableInstance;
                var JSCompiler_temp;
                if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2450)) {
                  c: {
                    var instance = JSCompiler_object_inline_message_2450;
                    for (JSCompiler_temp = rootOrSingletonContext; 8 !== instance.nodeType; ) {
                      if (!JSCompiler_temp) {
                        JSCompiler_temp = null;
                        break c;
                      }
                      instance = getNextHydratable(instance.nextSibling);
                      if (null === instance) {
                        JSCompiler_temp = null;
                        break c;
                      }
                    }
                    JSCompiler_temp = instance;
                  }
                  null !== JSCompiler_temp ? (warnIfNotHydrating(), workInProgress2.memoizedState = {
                    dehydrated: JSCompiler_temp,
                    treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                    retryLane: 536870912,
                    hydrationErrors: null
                  }, instance = createFiber(18, null, null, NoMode), instance.stateNode = JSCompiler_temp, instance.return = workInProgress2, workInProgress2.child = instance, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp = true) : JSCompiler_temp = false;
                  JSCompiler_temp = !JSCompiler_temp;
                }
                JSCompiler_temp && (warnNonHydratedInstance(
                  workInProgress2,
                  JSCompiler_object_inline_message_2450
                ), throwOnHydrationMismatch(workInProgress2));
              }
              JSCompiler_object_inline_message_2450 = workInProgress2.memoizedState;
              if (null !== JSCompiler_object_inline_message_2450 && (JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_message_2450.dehydrated, null !== JSCompiler_object_inline_message_2450))
                return isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
              popSuspenseHandler(workInProgress2);
            }
            JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_stack_2452.children;
            JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_stack_2452.fallback;
            if (JSCompiler_object_inline_componentStack_2453)
              return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = workInProgress2.mode, JSCompiler_object_inline_message_2450 = mountWorkInProgressOffscreenFiber(
                {
                  mode: "hidden",
                  children: JSCompiler_object_inline_message_2450
                },
                JSCompiler_object_inline_componentStack_2453
              ), JSCompiler_object_inline_stack_2452 = createFiberFromFragment(
                JSCompiler_object_inline_stack_2452,
                JSCompiler_object_inline_componentStack_2453,
                renderLanes2,
                null
              ), JSCompiler_object_inline_message_2450.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_message_2450.sibling = JSCompiler_object_inline_stack_2452, workInProgress2.child = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_componentStack_2453.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                JSCompiler_object_inline_digest_2451,
                renderLanes2
              ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            return mountSuspensePrimaryChildren(
              workInProgress2,
              JSCompiler_object_inline_message_2450
            );
          }
          var prevState = current2.memoizedState;
          if (null !== prevState && (JSCompiler_object_inline_message_2450 = prevState.dehydrated, null !== JSCompiler_object_inline_message_2450)) {
            if (didSuspend)
              workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_object_inline_stack_2452 = mountWorkInProgressOffscreenFiber(
                {
                  mode: "visible",
                  children: JSCompiler_object_inline_stack_2452.children
                },
                JSCompiler_object_inline_message_2450
              ), JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
                JSCompiler_object_inline_componentStack_2453,
                JSCompiler_object_inline_message_2450,
                renderLanes2,
                null
              ), JSCompiler_object_inline_componentStack_2453.flags |= 2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, reconcileChildFibers(
                workInProgress2,
                current2.child,
                null,
                renderLanes2
              ), JSCompiler_object_inline_stack_2452 = workInProgress2.child, JSCompiler_object_inline_stack_2452.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2452.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                JSCompiler_object_inline_digest_2451,
                renderLanes2
              ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = JSCompiler_object_inline_componentStack_2453);
            else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isHydrating && console.error(
              "We should not be hydrating here. This is a bug in React. Please file a bug."
            ), isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450)) {
              JSCompiler_object_inline_digest_2451 = JSCompiler_object_inline_message_2450.nextSibling && JSCompiler_object_inline_message_2450.nextSibling.dataset;
              if (JSCompiler_object_inline_digest_2451) {
                JSCompiler_temp = JSCompiler_object_inline_digest_2451.dgst;
                var message = JSCompiler_object_inline_digest_2451.msg;
                instance = JSCompiler_object_inline_digest_2451.stck;
                var componentStack = JSCompiler_object_inline_digest_2451.cstck;
              }
              JSCompiler_object_inline_message_2450 = message;
              JSCompiler_object_inline_digest_2451 = JSCompiler_temp;
              JSCompiler_object_inline_stack_2452 = instance;
              JSCompiler_temp = JSCompiler_object_inline_componentStack_2453 = componentStack;
              JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_message_2450 ? Error(JSCompiler_object_inline_message_2450) : Error(
                "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
              );
              JSCompiler_object_inline_componentStack_2453.stack = JSCompiler_object_inline_stack_2452 || "";
              JSCompiler_object_inline_componentStack_2453.digest = JSCompiler_object_inline_digest_2451;
              JSCompiler_object_inline_digest_2451 = void 0 === JSCompiler_temp ? null : JSCompiler_temp;
              JSCompiler_object_inline_stack_2452 = {
                value: JSCompiler_object_inline_componentStack_2453,
                source: null,
                stack: JSCompiler_object_inline_digest_2451
              };
              "string" === typeof JSCompiler_object_inline_digest_2451 && CapturedStacks.set(
                JSCompiler_object_inline_componentStack_2453,
                JSCompiler_object_inline_stack_2452
              );
              queueHydrationError(JSCompiler_object_inline_stack_2452);
              workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              );
            } else if (didReceiveUpdate || propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), JSCompiler_object_inline_digest_2451 = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_object_inline_digest_2451) {
              JSCompiler_object_inline_digest_2451 = workInProgressRoot;
              if (null !== JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_stack_2452 = renderLanes2 & -renderLanes2, JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & 42) ? 1 : getBumpedLaneForHydrationByLane(
                JSCompiler_object_inline_stack_2452
              ), JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & (JSCompiler_object_inline_digest_2451.suspendedLanes | renderLanes2)) ? 0 : JSCompiler_object_inline_stack_2452, 0 !== JSCompiler_object_inline_stack_2452 && JSCompiler_object_inline_stack_2452 !== prevState.retryLane))
                throw prevState.retryLane = JSCompiler_object_inline_stack_2452, enqueueConcurrentRenderForLane(
                  current2,
                  JSCompiler_object_inline_stack_2452
                ), scheduleUpdateOnFiber(
                  JSCompiler_object_inline_digest_2451,
                  current2,
                  JSCompiler_object_inline_stack_2452
                ), SelectiveHydrationException;
              JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
              workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              );
            } else
              JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA ? (workInProgress2.flags |= 192, workInProgress2.child = current2.child, workInProgress2 = null) : (current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
                JSCompiler_object_inline_message_2450.nextSibling
              ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current2.id, treeContextOverflow = current2.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
                workInProgress2,
                JSCompiler_object_inline_stack_2452.children
              ), workInProgress2.flags |= 4096);
            return workInProgress2;
          }
          if (JSCompiler_object_inline_componentStack_2453)
            return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_temp = current2.child, instance = JSCompiler_temp.sibling, JSCompiler_object_inline_stack_2452 = createWorkInProgress(
              JSCompiler_temp,
              {
                mode: "hidden",
                children: JSCompiler_object_inline_stack_2452.children
              }
            ), JSCompiler_object_inline_stack_2452.subtreeFlags = JSCompiler_temp.subtreeFlags & 65011712, null !== instance ? JSCompiler_object_inline_componentStack_2453 = createWorkInProgress(
              instance,
              JSCompiler_object_inline_componentStack_2453
            ) : (JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
              JSCompiler_object_inline_componentStack_2453,
              JSCompiler_object_inline_message_2450,
              renderLanes2,
              null
            ), JSCompiler_object_inline_componentStack_2453.flags |= 2), JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_componentStack_2453, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_message_2450 = current2.child.memoizedState, null === JSCompiler_object_inline_message_2450 ? JSCompiler_object_inline_message_2450 = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp = JSCompiler_object_inline_message_2450.cachePool, null !== JSCompiler_temp ? (instance = CacheContext._currentValue, JSCompiler_temp = JSCompiler_temp.parent !== instance ? { parent: instance, pool: instance } : JSCompiler_temp) : JSCompiler_temp = getSuspendedCache(), JSCompiler_object_inline_message_2450 = {
              baseLanes: JSCompiler_object_inline_message_2450.baseLanes | renderLanes2,
              cachePool: JSCompiler_temp
            }), JSCompiler_object_inline_componentStack_2453.memoizedState = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_digest_2451,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          renderLanes2 = current2.child;
          current2 = renderLanes2.sibling;
          renderLanes2 = createWorkInProgress(renderLanes2, {
            mode: "visible",
            children: JSCompiler_object_inline_stack_2452.children
          });
          renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
          null !== current2 && (JSCompiler_object_inline_digest_2451 = workInProgress2.deletions, null === JSCompiler_object_inline_digest_2451 ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_object_inline_digest_2451.push(current2));
          workInProgress2.child = renderLanes2;
          workInProgress2.memoizedState = null;
          return renderLanes2;
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
          primaryChildren = mountWorkInProgressOffscreenFiber(
            { mode: "visible", children: primaryChildren },
            workInProgress2.mode
          );
          primaryChildren.return = workInProgress2;
          return workInProgress2.child = primaryChildren;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
          offscreenProps = createFiber(22, offscreenProps, null, mode);
          offscreenProps.lanes = 0;
          offscreenProps.stateNode = {
            _visibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null
          };
          return offscreenProps;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          current2 = mountSuspensePrimaryChildren(
            workInProgress2,
            workInProgress2.pendingProps.children
          );
          current2.flags |= 2;
          workInProgress2.memoizedState = null;
          return current2;
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes |= renderLanes2;
          var alternate = fiber.alternate;
          null !== alternate && (alternate.lanes |= renderLanes2);
          scheduleContextWorkOnParentPath(
            fiber.return,
            renderLanes2,
            propagationRoot
          );
        }
        function validateSuspenseListNestedChild(childSlot, index) {
          var isAnArray = isArrayImpl(childSlot);
          childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
          return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error(
            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
            isAnArray,
            index,
            isAnArray
          ), false) : true;
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          null === renderState ? workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
          nextProps = nextProps.children;
          if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder])
            if (didWarnAboutRevealOrder[revealOrder] = true, "string" === typeof revealOrder)
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                case "forward":
                case "backward":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                default:
                  console.error(
                    '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                    revealOrder
                  );
              }
            else
              console.error(
                '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                revealOrder
              );
          void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = true, console.error(
            '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
            tailMode
          )) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = true, console.error(
            '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
            tailMode
          )));
          a: if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && false !== nextProps)
            if (isArrayImpl(nextProps))
              for (var i2 = 0; i2 < nextProps.length; i2++) {
                if (!validateSuspenseListNestedChild(nextProps[i2], i2)) break a;
              }
            else if (i2 = getIteratorFn(nextProps), "function" === typeof i2) {
              if (i2 = i2.call(nextProps))
                for (var step = i2.next(), _i = 0; !step.done; step = i2.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) break a;
                  _i++;
                }
            } else
              console.error(
                'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                revealOrder
              );
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          nextProps = suspenseStackCursor.current;
          if (0 !== (nextProps & ForceSuspenseFallback))
            nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128;
          else {
            if (null !== current2 && 0 !== (current2.flags & 128))
              a: for (current2 = workInProgress2.child; null !== current2; ) {
                if (13 === current2.tag)
                  null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(
                    current2,
                    renderLanes2,
                    workInProgress2
                  );
                else if (19 === current2.tag)
                  scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
                else if (null !== current2.child) {
                  current2.child.return = current2;
                  current2 = current2.child;
                  continue;
                }
                if (current2 === workInProgress2) break a;
                for (; null === current2.sibling; ) {
                  if (null === current2.return || current2.return === workInProgress2)
                    break a;
                  current2 = current2.return;
                }
                current2.sibling.return = current2.return;
                current2 = current2.sibling;
              }
            nextProps &= SubtreeSuspenseContextMask;
          }
          push(suspenseStackCursor, nextProps, workInProgress2);
          switch (revealOrder) {
            case "forwards":
              renderLanes2 = workInProgress2.child;
              for (revealOrder = null; null !== renderLanes2; )
                current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
              renderLanes2 = revealOrder;
              null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
              initSuspenseListRenderState(
                workInProgress2,
                false,
                revealOrder,
                renderLanes2,
                tailMode
              );
              break;
            case "backwards":
              renderLanes2 = null;
              revealOrder = workInProgress2.child;
              for (workInProgress2.child = null; null !== revealOrder; ) {
                current2 = revealOrder.alternate;
                if (null !== current2 && null === findFirstSuspended(current2)) {
                  workInProgress2.child = revealOrder;
                  break;
                }
                current2 = revealOrder.sibling;
                revealOrder.sibling = renderLanes2;
                renderLanes2 = revealOrder;
                revealOrder = current2;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                renderLanes2,
                null,
                tailMode
              );
              break;
            case "together":
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
              break;
            default:
              workInProgress2.memoizedState = null;
          }
          return workInProgress2.child;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          null !== current2 && (workInProgress2.dependencies = current2.dependencies);
          profilerStartTime = -1;
          workInProgressRootSkippedLanes |= workInProgress2.lanes;
          if (0 === (renderLanes2 & workInProgress2.childLanes))
            if (null !== current2) {
              if (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), 0 === (renderLanes2 & workInProgress2.childLanes))
                return null;
            } else return null;
          if (null !== current2 && workInProgress2.child !== current2.child)
            throw Error("Resuming work not yet implemented.");
          if (null !== workInProgress2.child) {
            current2 = workInProgress2.child;
            renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
            workInProgress2.child = renderLanes2;
            for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
              current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
            renderLanes2.sibling = null;
          }
          return workInProgress2.child;
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          if (0 !== (current2.lanes & renderLanes2)) return true;
          current2 = current2.dependencies;
          return null !== current2 && checkIfContextChanged(current2) ? true : false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case 3:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
              resetHydrationState();
              break;
            case 27:
            case 5:
              pushHostContext(workInProgress2);
              break;
            case 4:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              break;
            case 10:
              pushProvider(
                workInProgress2,
                workInProgress2.type,
                workInProgress2.memoizedProps.value
              );
              break;
            case 12:
              0 !== (renderLanes2 & workInProgress2.childLanes) && (workInProgress2.flags |= 4);
              workInProgress2.flags |= 2048;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = -0;
              stateNode.passiveEffectDuration = -0;
              break;
            case 13:
              stateNode = workInProgress2.memoizedState;
              if (null !== stateNode) {
                if (null !== stateNode.dehydrated)
                  return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
                if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                  return updateSuspenseComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                pushPrimaryTreeSuspenseHandler(workInProgress2);
                current2 = bailoutOnAlreadyFinishedWork(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
                return null !== current2 ? current2.sibling : null;
              }
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              break;
            case 19:
              var didSuspendBefore = 0 !== (current2.flags & 128);
              stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes);
              stateNode || (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes));
              if (didSuspendBefore) {
                if (stateNode)
                  return updateSuspenseListComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                workInProgress2.flags |= 128;
              }
              didSuspendBefore = workInProgress2.memoizedState;
              null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
              push(
                suspenseStackCursor,
                suspenseStackCursor.current,
                workInProgress2
              );
              if (stateNode) break;
              else return null;
            case 22:
            case 23:
              return workInProgress2.lanes = 0, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            case 24:
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          if (workInProgress2._debugNeedsRemount && null !== current2) {
            renderLanes2 = createFiberFromTypeAndProps(
              workInProgress2.type,
              workInProgress2.key,
              workInProgress2.pendingProps,
              workInProgress2._debugOwner || null,
              workInProgress2.mode,
              workInProgress2.lanes
            );
            renderLanes2._debugStack = workInProgress2._debugStack;
            renderLanes2._debugTask = workInProgress2._debugTask;
            var returnFiber = workInProgress2.return;
            if (null === returnFiber) throw Error("Cannot swap the root fiber.");
            current2.alternate = null;
            workInProgress2.alternate = null;
            renderLanes2.index = workInProgress2.index;
            renderLanes2.sibling = workInProgress2.sibling;
            renderLanes2.return = workInProgress2.return;
            renderLanes2.ref = workInProgress2.ref;
            renderLanes2._debugInfo = workInProgress2._debugInfo;
            if (workInProgress2 === returnFiber.child)
              returnFiber.child = renderLanes2;
            else {
              var prevSibling = returnFiber.child;
              if (null === prevSibling)
                throw Error("Expected parent to have a child.");
              for (; prevSibling.sibling !== workInProgress2; )
                if (prevSibling = prevSibling.sibling, null === prevSibling)
                  throw Error("Expected to find the previous sibling.");
              prevSibling.sibling = renderLanes2;
            }
            workInProgress2 = returnFiber.deletions;
            null === workInProgress2 ? (returnFiber.deletions = [current2], returnFiber.flags |= 16) : workInProgress2.push(current2);
            renderLanes2.flags |= 2;
            return renderLanes2;
          }
          if (null !== current2)
            if (current2.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current2.type)
              didReceiveUpdate = true;
            else {
              if (!checkScheduledUpdateOrContext(current2, renderLanes2) && 0 === (workInProgress2.flags & 128))
                return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
            }
          else {
            didReceiveUpdate = false;
            if (returnFiber = isHydrating)
              warnIfNotHydrating(), returnFiber = 0 !== (workInProgress2.flags & 1048576);
            returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
          }
          workInProgress2.lanes = 0;
          switch (workInProgress2.tag) {
            case 16:
              a: if (returnFiber = workInProgress2.pendingProps, current2 = callLazyInitInDEV(workInProgress2.elementType), workInProgress2.type = current2, "function" === typeof current2)
                shouldConstruct(current2) ? (returnFiber = resolveClassComponentProps(
                  current2,
                  returnFiber
                ), workInProgress2.tag = 1, workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                )) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current2), workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                ));
              else {
                if (void 0 !== current2 && null !== current2) {
                  if (prevSibling = current2.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                    workInProgress2.tag = 11;
                    workInProgress2.type = current2 = resolveForwardRefForHotReloading(current2);
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (prevSibling === REACT_MEMO_TYPE) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = "";
                null !== current2 && "object" === typeof current2 && current2.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
                current2 = getComponentNameFromType(current2) || current2;
                throw Error(
                  "Element type is invalid. Received a promise that resolves to: " + current2 + ". Lazy element type must resolve to a class or function." + workInProgress2
                );
              }
              return workInProgress2;
            case 0:
              return updateFunctionComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 1:
              return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(
                returnFiber,
                workInProgress2.pendingProps
              ), updateClassComponent(
                current2,
                workInProgress2,
                returnFiber,
                prevSibling,
                renderLanes2
              );
            case 3:
              a: {
                pushHostContainer(
                  workInProgress2,
                  workInProgress2.stateNode.containerInfo
                );
                if (null === current2)
                  throw Error(
                    "Should have a current fiber. This is a bug in React."
                  );
                returnFiber = workInProgress2.pendingProps;
                var prevState = workInProgress2.memoizedState;
                prevSibling = prevState.element;
                cloneUpdateQueue(current2, workInProgress2);
                processUpdateQueue(workInProgress2, returnFiber, null, renderLanes2);
                var nextState = workInProgress2.memoizedState;
                returnFiber = nextState.cache;
                pushProvider(workInProgress2, CacheContext, returnFiber);
                returnFiber !== prevState.cache && propagateContextChanges(
                  workInProgress2,
                  [CacheContext],
                  renderLanes2,
                  true
                );
                suspendIfUpdateReadFromEntangledAsyncAction();
                returnFiber = nextState.element;
                if (prevState.isDehydrated)
                  if (prevState = {
                    element: returnFiber,
                    isDehydrated: false,
                    cache: nextState.cache
                  }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (returnFiber !== prevSibling) {
                    prevSibling = createCapturedValueAtFiber(
                      Error(
                        "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                      ),
                      workInProgress2
                    );
                    queueHydrationError(prevSibling);
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else {
                    current2 = workInProgress2.stateNode.containerInfo;
                    switch (current2.nodeType) {
                      case 9:
                        current2 = current2.body;
                        break;
                      default:
                        current2 = "HTML" === current2.nodeName ? current2.ownerDocument.body : current2;
                    }
                    nextHydratableInstance = getNextHydratable(current2.firstChild);
                    hydrationParentFiber = workInProgress2;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    hydrationDiffRootDEV = null;
                    rootOrSingletonContext = true;
                    current2 = mountChildFibers(
                      workInProgress2,
                      null,
                      returnFiber,
                      renderLanes2
                    );
                    for (workInProgress2.child = current2; current2; )
                      current2.flags = current2.flags & -3 | 4096, current2 = current2.sibling;
                  }
                else {
                  resetHydrationState();
                  if (returnFiber === prevSibling) {
                    workInProgress2 = bailoutOnAlreadyFinishedWork(
                      current2,
                      workInProgress2,
                      renderLanes2
                    );
                    break a;
                  }
                  reconcileChildren(
                    current2,
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
                }
                workInProgress2 = workInProgress2.child;
              }
              return workInProgress2;
            case 26:
              return markRef(current2, workInProgress2), null === current2 ? (current2 = getResource(
                workInProgress2.type,
                null,
                workInProgress2.pendingProps,
                null
              )) ? workInProgress2.memoizedState = current2 : isHydrating || (current2 = workInProgress2.type, renderLanes2 = workInProgress2.pendingProps, returnFiber = requiredContext(
                rootInstanceStackCursor.current
              ), returnFiber = getOwnerDocumentFromRootContainer(
                returnFiber
              ).createElement(current2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = renderLanes2, setInitialProperties(returnFiber, current2, renderLanes2), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(
                workInProgress2.type,
                current2.memoizedProps,
                workInProgress2.pendingProps,
                current2.memoizedState
              ), null;
            case 27:
              return pushHostContext(workInProgress2), null === current2 && isHydrating && (returnFiber = requiredContext(rootInstanceStackCursor.current), prevSibling = getHostContext(), returnFiber = workInProgress2.stateNode = resolveSingletonInstance(
                workInProgress2.type,
                workInProgress2.pendingProps,
                returnFiber,
                prevSibling,
                false
              ), didSuspendOrErrorDEV || (prevSibling = diffHydratedProperties(
                returnFiber,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevSibling
              ), null !== prevSibling && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevSibling)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, prevSibling = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = prevSibling, nextHydratableInstance = getNextHydratable(
                returnFiber.firstChild
              )) : nextHydratableInstance = prevSibling), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), markRef(current2, workInProgress2), null === current2 && (workInProgress2.flags |= 4194304), workInProgress2.child;
            case 5:
              return null === current2 && isHydrating && (prevState = getHostContext(), returnFiber = validateDOMNesting(
                workInProgress2.type,
                prevState.ancestorInfo
              ), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(
                prevSibling,
                workInProgress2.type,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== nextState ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (prevState = diffHydratedProperties(
                nextState,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevState
              ), null !== prevState && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevState)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                nextState.firstChild
              ), rootOrSingletonContext = false, prevState = true) : prevState = false, nextState = !prevState), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, prevState = workInProgress2.pendingProps, nextState = null !== current2 ? current2.memoizedProps : null, returnFiber = prevState.children, shouldSetTextContent(prevSibling, prevState) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), null !== workInProgress2.memoizedState && (prevSibling = renderWithHooks(
                current2,
                workInProgress2,
                TransitionAwareHostComponent,
                null,
                null,
                renderLanes2
              ), HostTransitionContext._currentValue = prevSibling), markRef(current2, workInProgress2), reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 6:
              return null === current2 && isHydrating && (current2 = workInProgress2.pendingProps, renderLanes2 = getHostContext(), returnFiber = renderLanes2.ancestorInfo.current, current2 = null != returnFiber ? validateTextNesting(
                current2,
                returnFiber.tag,
                renderLanes2.ancestorInfo.implicitRootScope
              ) : true, renderLanes2 = nextHydratableInstance, (returnFiber = !renderLanes2) || (returnFiber = canHydrateTextInstance(
                renderLanes2,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== returnFiber ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (current2 && warnNonHydratedInstance(workInProgress2, renderLanes2), throwOnHydrationMismatch(workInProgress2))), null;
            case 13:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case 4:
              return pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              ), returnFiber = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
                workInProgress2,
                null,
                returnFiber,
                renderLanes2
              ) : reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 11:
              return updateForwardRef(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 7:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps,
                renderLanes2
              ), workInProgress2.child;
            case 8:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 12:
              return workInProgress2.flags |= 4, workInProgress2.flags |= 2048, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 10:
              return returnFiber = workInProgress2.type, prevSibling = workInProgress2.pendingProps, prevState = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, console.error(
                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
              )), pushProvider(workInProgress2, returnFiber, prevState), reconcileChildren(
                current2,
                workInProgress2,
                prevSibling.children,
                renderLanes2
              ), workInProgress2.child;
            case 9:
              return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, "function" !== typeof returnFiber && console.error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
              ), prepareToReadContext(workInProgress2), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress2), returnFiber = callComponentInDEV(
                returnFiber,
                prevSibling,
                void 0
              ), markComponentRenderStopped(), workInProgress2.flags |= 1, reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 14:
              return updateMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 15:
              return updateSimpleMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 19:
              return updateSuspenseListComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case 31:
              return returnFiber = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, returnFiber = {
                mode: returnFiber.mode,
                children: returnFiber.children
              }, null === current2 ? (current2 = mountWorkInProgressOffscreenFiber(
                returnFiber,
                renderLanes2
              ), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2) : (current2 = createWorkInProgress(current2.child, returnFiber), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2), workInProgress2;
            case 22:
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            case 24:
              return prepareToReadContext(workInProgress2), returnFiber = readContext(CacheContext), null === current2 ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, prevState = createCache3(), prevSibling.pooledCache = prevState, retainCache(prevState), null !== prevState && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = prevState), workInProgress2.memoizedState = {
                parent: returnFiber,
                cache: prevSibling
              }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current2.memoizedState, prevState = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
                parent: returnFiber,
                cache: returnFiber
              }, workInProgress2.memoizedState = prevSibling, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = prevState.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              ))), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 29:
              throw workInProgress2.pendingProps;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= 4;
        }
        function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
          if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded)
            workInProgress2.flags &= -16777217;
          else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
            resource = suspenseHandlerStackCursor.current;
            if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
              throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
            workInProgress2.flags |= 8192;
          }
        }
        function scheduleRetryEffect(workInProgress2, retryQueue) {
          null !== retryQueue && (workInProgress2.flags |= 4);
          workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (!isHydrating)
            switch (renderState.tailMode) {
              case "hidden":
                hasRenderedATailFallback = renderState.tail;
                for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                  null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
                null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
                break;
              case "collapsed":
                lastTailNode = renderState.tail;
                for (var _lastTailNode = null; null !== lastTailNode; )
                  null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
                null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
            }
        }
        function bubbleProperties(completedWork) {
          var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
          if (didBailout)
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2; )
                newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 65011712, subtreeFlags |= _child2.flags & 65011712, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else
              for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
                newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712, subtreeFlags |= _treeBaseDuration.flags & 65011712, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          else if ((completedWork.mode & ProfileMode) !== NoMode) {
            _treeBaseDuration = completedWork.actualDuration;
            _child2 = completedWork.selfBaseDuration;
            for (var child = completedWork.child; null !== child; )
              newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = _treeBaseDuration;
            completedWork.treeBaseDuration = _child2;
          } else
            for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
              newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 31:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
              return bubbleProperties(workInProgress2), null;
            case 1:
              return bubbleProperties(workInProgress2), null;
            case 3:
              renderLanes2 = workInProgress2.stateNode;
              newProps = null;
              null !== current2 && (newProps = current2.memoizedState.cache);
              workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
              popProvider(CacheContext, workInProgress2);
              popHostContainer(workInProgress2);
              renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
              if (null === current2 || null === current2.child)
                popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
              bubbleProperties(workInProgress2);
              return null;
            case 26:
              return renderLanes2 = workInProgress2.memoizedState, null === current2 ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                renderLanes2
              )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                renderLanes2
              )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
            case 27:
              popHostContext(workInProgress2);
              renderLanes2 = requiredContext(rootInstanceStackCursor.current);
              var _type = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                current2 = getHostContext();
                popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(
                  _type,
                  newProps,
                  renderLanes2,
                  current2,
                  true
                ), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
              }
              bubbleProperties(workInProgress2);
              return null;
            case 5:
              popHostContext(workInProgress2);
              renderLanes2 = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                _type = getHostContext();
                if (popHydrationState(workInProgress2))
                  prepareToHydrateHostInstance(workInProgress2, _type);
                else {
                  current2 = requiredContext(rootInstanceStackCursor.current);
                  validateDOMNesting(renderLanes2, _type.ancestorInfo);
                  _type = _type.context;
                  current2 = getOwnerDocumentFromRootContainer(current2);
                  switch (_type) {
                    case HostContextNamespaceSvg:
                      current2 = current2.createElementNS(SVG_NAMESPACE, renderLanes2);
                      break;
                    case HostContextNamespaceMath:
                      current2 = current2.createElementNS(
                        MATH_NAMESPACE,
                        renderLanes2
                      );
                      break;
                    default:
                      switch (renderLanes2) {
                        case "svg":
                          current2 = current2.createElementNS(
                            SVG_NAMESPACE,
                            renderLanes2
                          );
                          break;
                        case "math":
                          current2 = current2.createElementNS(
                            MATH_NAMESPACE,
                            renderLanes2
                          );
                          break;
                        case "script":
                          current2 = current2.createElement("div");
                          current2.innerHTML = "<script><\/script>";
                          current2 = current2.removeChild(current2.firstChild);
                          break;
                        case "select":
                          current2 = "string" === typeof newProps.is ? current2.createElement("select", { is: newProps.is }) : current2.createElement("select");
                          newProps.multiple ? current2.multiple = true : newProps.size && (current2.size = newProps.size);
                          break;
                        default:
                          current2 = "string" === typeof newProps.is ? current2.createElement(renderLanes2, {
                            is: newProps.is
                          }) : current2.createElement(renderLanes2), -1 === renderLanes2.indexOf("-") && (renderLanes2 !== renderLanes2.toLowerCase() && console.error(
                            "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                            renderLanes2
                          ), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current2) || hasOwnProperty.call(
                            warnedUnknownTags,
                            renderLanes2
                          ) || (warnedUnknownTags[renderLanes2] = true, console.error(
                            "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                            renderLanes2
                          )));
                      }
                  }
                  current2[internalInstanceKey] = workInProgress2;
                  current2[internalPropsKey] = newProps;
                  a: for (_type = workInProgress2.child; null !== _type; ) {
                    if (5 === _type.tag || 6 === _type.tag)
                      current2.appendChild(_type.stateNode);
                    else if (4 !== _type.tag && 27 !== _type.tag && null !== _type.child) {
                      _type.child.return = _type;
                      _type = _type.child;
                      continue;
                    }
                    if (_type === workInProgress2) break a;
                    for (; null === _type.sibling; ) {
                      if (null === _type.return || _type.return === workInProgress2)
                        break a;
                      _type = _type.return;
                    }
                    _type.sibling.return = _type.return;
                    _type = _type.sibling;
                  }
                  workInProgress2.stateNode = current2;
                  a: switch (setInitialProperties(current2, renderLanes2, newProps), renderLanes2) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      current2 = !!newProps.autoFocus;
                      break a;
                    case "img":
                      current2 = true;
                      break a;
                    default:
                      current2 = false;
                  }
                  current2 && markUpdate(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              workInProgress2.flags &= -16777217;
              return null;
            case 6:
              if (current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                current2 = requiredContext(rootInstanceStackCursor.current);
                renderLanes2 = getHostContext();
                if (popHydrationState(workInProgress2)) {
                  current2 = workInProgress2.stateNode;
                  renderLanes2 = workInProgress2.memoizedProps;
                  _type = !didSuspendOrErrorDEV;
                  newProps = null;
                  var returnFiber = hydrationParentFiber;
                  if (null !== returnFiber)
                    switch (returnFiber.tag) {
                      case 3:
                        _type && (_type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== _type && (buildHydrationDiffNode(workInProgress2, 0).serverProps = _type));
                        break;
                      case 27:
                      case 5:
                        newProps = returnFiber.memoizedProps, _type && (_type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== _type && (buildHydrationDiffNode(
                          workInProgress2,
                          0
                        ).serverProps = _type));
                    }
                  current2[internalInstanceKey] = workInProgress2;
                  current2 = current2.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, renderLanes2) ? true : false;
                  current2 || throwOnHydrationMismatch(workInProgress2);
                } else
                  _type = renderLanes2.ancestorInfo.current, null != _type && validateTextNesting(
                    newProps,
                    _type.tag,
                    renderLanes2.ancestorInfo.implicitRootScope
                  ), current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                    newProps
                  ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
              }
              bubbleProperties(workInProgress2);
              return null;
            case 13:
              newProps = workInProgress2.memoizedState;
              if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
                _type = popHydrationState(workInProgress2);
                if (null !== newProps && null !== newProps.dehydrated) {
                  if (null === current2) {
                    if (!_type)
                      throw Error(
                        "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                      );
                    _type = workInProgress2.memoizedState;
                    _type = null !== _type ? _type.dehydrated : null;
                    if (!_type)
                      throw Error(
                        "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                      );
                    _type[internalInstanceKey] = workInProgress2;
                    bubbleProperties(workInProgress2);
                    (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                  } else
                    emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                  _type = false;
                } else
                  _type = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = _type), _type = true;
                if (!_type) {
                  if (workInProgress2.flags & 256)
                    return popSuspenseHandler(workInProgress2), workInProgress2;
                  popSuspenseHandler(workInProgress2);
                  return null;
                }
              }
              popSuspenseHandler(workInProgress2);
              if (0 !== (workInProgress2.flags & 128))
                return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
              renderLanes2 = null !== newProps;
              current2 = null !== current2 && null !== current2.memoizedState;
              renderLanes2 && (newProps = workInProgress2.child, _type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (_type = newProps.alternate.memoizedState.cachePool.pool), returnFiber = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (returnFiber = newProps.memoizedState.cachePool.pool), returnFiber !== _type && (newProps.flags |= 2048));
              renderLanes2 !== current2 && renderLanes2 && (workInProgress2.child.flags |= 8192);
              scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
              bubbleProperties(workInProgress2);
              (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
              return null;
            case 4:
              return popHostContainer(workInProgress2), null === current2 && listenToAllSupportedEvents(
                workInProgress2.stateNode.containerInfo
              ), bubbleProperties(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
            case 19:
              pop(suspenseStackCursor, workInProgress2);
              _type = workInProgress2.memoizedState;
              if (null === _type) return bubbleProperties(workInProgress2), null;
              newProps = 0 !== (workInProgress2.flags & 128);
              returnFiber = _type.rendering;
              if (null === returnFiber)
                if (newProps) cutOffTailIfNeeded(_type, false);
                else {
                  if (workInProgressRootExitStatus !== RootInProgress || null !== current2 && 0 !== (current2.flags & 128))
                    for (current2 = workInProgress2.child; null !== current2; ) {
                      returnFiber = findFirstSuspended(current2);
                      if (null !== returnFiber) {
                        workInProgress2.flags |= 128;
                        cutOffTailIfNeeded(_type, false);
                        current2 = returnFiber.updateQueue;
                        workInProgress2.updateQueue = current2;
                        scheduleRetryEffect(workInProgress2, current2);
                        workInProgress2.subtreeFlags = 0;
                        current2 = renderLanes2;
                        for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                          resetWorkInProgress(renderLanes2, current2), renderLanes2 = renderLanes2.sibling;
                        push(
                          suspenseStackCursor,
                          suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback,
                          workInProgress2
                        );
                        return workInProgress2.child;
                      }
                      current2 = current2.sibling;
                    }
                  null !== _type.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
                }
              else {
                if (!newProps)
                  if (current2 = findFirstSuspended(returnFiber), null !== current2) {
                    if (workInProgress2.flags |= 128, newProps = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(_type, true), null === _type.tail && "hidden" === _type.tailMode && !returnFiber.alternate && !isHydrating)
                      return bubbleProperties(workInProgress2), null;
                  } else
                    2 * now$1() - _type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
                _type.isBackwards ? (returnFiber.sibling = workInProgress2.child, workInProgress2.child = returnFiber) : (current2 = _type.last, null !== current2 ? current2.sibling = returnFiber : workInProgress2.child = returnFiber, _type.last = returnFiber);
              }
              if (null !== _type.tail)
                return current2 = _type.tail, _type.rendering = current2, _type.tail = current2.sibling, _type.renderingStartTime = now$1(), current2.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = newProps ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), current2;
              bubbleProperties(workInProgress2);
              return null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (renderLanes2 = current2.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache, workInProgress2), null;
            case 24:
              return renderLanes2 = null, null !== current2 && (renderLanes2 = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
            case 25:
              return null;
            case 30:
              return null;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function unwindWork(current2, workInProgress2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 1:
              return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 3:
              return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
            case 26:
            case 27:
            case 5:
              return popHostContext(workInProgress2), null;
            case 13:
              popSuspenseHandler(workInProgress2);
              current2 = workInProgress2.memoizedState;
              if (null !== current2 && null !== current2.dehydrated) {
                if (null === workInProgress2.alternate)
                  throw Error(
                    "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                  );
                resetHydrationState();
              }
              current2 = workInProgress2.flags;
              return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 19:
              return pop(suspenseStackCursor, workInProgress2), null;
            case 4:
              return popHostContainer(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), null !== current2 && pop(resumedCache, workInProgress2), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 24:
              return popProvider(CacheContext, workInProgress2), null;
            case 25:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case 3:
              popProvider(CacheContext, interruptedWork);
              popHostContainer(interruptedWork);
              break;
            case 26:
            case 27:
            case 5:
              popHostContext(interruptedWork);
              break;
            case 4:
              popHostContainer(interruptedWork);
              break;
            case 13:
              popSuspenseHandler(interruptedWork);
              break;
            case 19:
              pop(suspenseStackCursor, interruptedWork);
              break;
            case 10:
              popProvider(interruptedWork.type, interruptedWork);
              break;
            case 22:
            case 23:
              popSuspenseHandler(interruptedWork);
              popHiddenContext(interruptedWork);
              null !== current2 && pop(resumedCache, interruptedWork);
              break;
            case 24:
              popProvider(CacheContext, interruptedWork);
          }
        }
        function shouldProfile(current2) {
          return (current2.mode & ProfileMode) !== NoMode;
        }
        function commitHookLayoutEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitHookEffectListMount(flags, finishedWork) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags && ((flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                  finishedWork
                ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                  finishedWork
                ), lastEffect = void 0, (flags & Insertion4) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = runWithFiberInDEV(
                  finishedWork,
                  callCreateInDEV,
                  updateQueue
                ), (flags & Insertion4) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped(), void 0 !== lastEffect && "function" !== typeof lastEffect)) {
                  var hookName = void 0;
                  hookName = 0 !== (updateQueue.tag & Layout) ? "useLayoutEffect" : 0 !== (updateQueue.tag & Insertion4) ? "useInsertionEffect" : "useEffect";
                  var addendum = void 0;
                  addendum = null === lastEffect ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof lastEffect.then ? "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
                  runWithFiberInDEV(
                    finishedWork,
                    function(n2, a) {
                      console.error(
                        "%s must not return anything besides a function, which is used for clean-up.%s",
                        n2,
                        a
                      );
                    },
                    hookName,
                    addendum
                  );
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags) {
                  var inst = updateQueue.inst, destroy = inst.destroy;
                  void 0 !== destroy && (inst.destroy = void 0, (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                    finishedWork
                  ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
                    finishedWork
                  ), (flags & Insertion4) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = finishedWork, runWithFiberInDEV(
                    lastEffect,
                    callDestroyInDEV,
                    lastEffect,
                    nearestMountedAncestor,
                    destroy
                  ), (flags & Insertion4) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookPassiveMountEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitClassCallbacks(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          if (null !== updateQueue) {
            var instance = finishedWork.stateNode;
            finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error(
              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ), instance.state !== finishedWork.memoizedState && console.error(
              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ));
            try {
              runWithFiberInDEV(
                finishedWork,
                commitCallbacks,
                updateQueue,
                instance
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }
        function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
          return instance.getSnapshotBeforeUpdate(prevProps, prevState);
        }
        function commitClassSnapshot(finishedWork, current2) {
          var prevProps = current2.memoizedProps, prevState = current2.memoizedState;
          current2 = finishedWork.stateNode;
          finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current2.props !== finishedWork.memoizedProps && console.error(
            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ), current2.state !== finishedWork.memoizedState && console.error(
            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
          try {
            var resolvedPrevProps = resolveClassComponentProps(
              finishedWork.type,
              prevProps,
              finishedWork.elementType === finishedWork.type
            );
            var snapshot2 = runWithFiberInDEV(
              finishedWork,
              callGetSnapshotBeforeUpdates,
              current2,
              resolvedPrevProps,
              prevState
            );
            prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
            void 0 !== snapshot2 || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
              console.error(
                "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
                getComponentNameFromFiber(finishedWork)
              );
            }));
            current2.__reactInternalSnapshotBeforeUpdate = snapshot2;
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          instance.props = resolveClassComponentProps(
            current2.type,
            current2.memoizedProps
          );
          instance.state = current2.memoizedState;
          shouldProfile(current2) ? (startEffectTimer(), runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          ), recordEffectDuration()) : runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          );
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (null !== ref) {
            switch (finishedWork.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = finishedWork.stateNode;
                break;
              case 30:
                instanceToUse = finishedWork.stateNode;
                break;
              default:
                instanceToUse = finishedWork.stateNode;
            }
            if ("function" === typeof ref)
              if (shouldProfile(finishedWork))
                try {
                  startEffectTimer(), finishedWork.refCleanup = ref(instanceToUse);
                } finally {
                  recordEffectDuration();
                }
              else finishedWork.refCleanup = ref(instanceToUse);
            else
              "string" === typeof ref ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error(
                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                getComponentNameFromFiber(finishedWork)
              ), ref.current = instanceToUse;
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            runWithFiberInDEV(current2, commitAttachRef, current2);
          } catch (error) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref, refCleanup = current2.refCleanup;
          if (null !== ref)
            if ("function" === typeof refCleanup)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, refCleanup);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, refCleanup);
              } catch (error) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error);
              } finally {
                current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
              }
            else if ("function" === typeof ref)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, ref, null);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, ref, null);
              } catch (error$7) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error$7);
              }
            else ref.current = null;
        }
        function commitProfiler(finishedWork, current2, commitStartTime2, effectDuration) {
          var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
          _finishedWork$memoize = _finishedWork$memoize.onRender;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize && _finishedWork$memoize(
            id,
            current2,
            finishedWork.actualDuration,
            finishedWork.treeBaseDuration,
            finishedWork.actualStartTime,
            commitStartTime2
          );
          "function" === typeof onCommit && onCommit(
            finishedWork.memoizedProps.id,
            current2,
            effectDuration,
            commitStartTime2
          );
        }
        function commitProfilerPostCommitImpl(finishedWork, current2, commitStartTime2, passiveEffectDuration) {
          var _finishedWork$memoize2 = finishedWork.memoizedProps;
          finishedWork = _finishedWork$memoize2.id;
          _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize2 && _finishedWork$memoize2(
            finishedWork,
            current2,
            passiveEffectDuration,
            commitStartTime2
          );
        }
        function commitHostMount(finishedWork) {
          var type = finishedWork.type, props26 = finishedWork.memoizedProps, instance = finishedWork.stateNode;
          try {
            runWithFiberInDEV(
              finishedWork,
              commitMount,
              instance,
              type,
              props26,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHostUpdate(finishedWork, newProps, oldProps) {
          try {
            runWithFiberInDEV(
              finishedWork,
              commitUpdate,
              finishedWork.stateNode,
              finishedWork.type,
              oldProps,
              newProps,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function isHostParent(fiber) {
          return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
        }
        function getHostSibling(fiber) {
          a: for (; ; ) {
            for (; null === fiber.sibling; ) {
              if (null === fiber.return || isHostParent(fiber.return)) return null;
              fiber = fiber.return;
            }
            fiber.sibling.return = fiber.return;
            for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
              if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
              if (fiber.flags & 2) continue a;
              if (null === fiber.child || 4 === fiber.tag) continue a;
              else fiber.child.return = fiber, fiber = fiber.child;
            }
            if (!(fiber.flags & 2)) return fiber.stateNode;
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
          var tag = node2.tag;
          if (5 === tag || 6 === tag)
            node2 = node2.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node2, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node2), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
          else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode, before = null), node2 = node2.child, null !== node2))
            for (insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling; null !== node2; )
              insertOrAppendPlacementNodeIntoContainer(node2, before, parent), node2 = node2.sibling;
        }
        function insertOrAppendPlacementNode(node2, before, parent) {
          var tag = node2.tag;
          if (5 === tag || 6 === tag)
            node2 = node2.stateNode, before ? parent.insertBefore(node2, before) : parent.appendChild(node2);
          else if (4 !== tag && (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode), node2 = node2.child, null !== node2))
            for (insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling; null !== node2; )
              insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling;
        }
        function commitPlacement(finishedWork) {
          for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
            if (isHostParent(parentFiber)) {
              hostParentFiber = parentFiber;
              break;
            }
            parentFiber = parentFiber.return;
          }
          if (null == hostParentFiber)
            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          switch (hostParentFiber.tag) {
            case 27:
              hostParentFiber = hostParentFiber.stateNode;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            case 5:
              parentFiber = hostParentFiber.stateNode;
              hostParentFiber.flags & 32 && (resetTextContent(parentFiber), hostParentFiber.flags &= -33);
              hostParentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                hostParentFiber,
                parentFiber
              );
              break;
            case 3:
            case 4:
              hostParentFiber = hostParentFiber.stateNode.containerInfo;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            default:
              throw Error(
                "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
              );
          }
        }
        function commitHostSingletonAcquisition(finishedWork) {
          var singleton = finishedWork.stateNode, props26 = finishedWork.memoizedProps;
          try {
            runWithFiberInDEV(
              finishedWork,
              acquireSingletonInstance,
              finishedWork.type,
              props26,
              singleton,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitBeforeMutationEffects(root2, firstChild) {
          root2 = root2.containerInfo;
          eventsEnabled = _enabled;
          root2 = getActiveElementDeep(root2);
          if (hasSelectionCapabilities(root2)) {
            if ("selectionStart" in root2)
              var JSCompiler_temp = {
                start: root2.selectionStart,
                end: root2.selectionEnd
              };
            else
              a: {
                JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
                var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
                if (selection && 0 !== selection.rangeCount) {
                  JSCompiler_temp = selection.anchorNode;
                  var anchorOffset = selection.anchorOffset, focusNode2 = selection.focusNode;
                  selection = selection.focusOffset;
                  try {
                    JSCompiler_temp.nodeType, focusNode2.nodeType;
                  } catch (e$2) {
                    JSCompiler_temp = null;
                    break a;
                  }
                  var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node2 = root2, parentNode = null;
                  b: for (; ; ) {
                    for (var next3; ; ) {
                      node2 !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node2.nodeType || (start = length2 + anchorOffset);
                      node2 !== focusNode2 || 0 !== selection && 3 !== node2.nodeType || (end = length2 + selection);
                      3 === node2.nodeType && (length2 += node2.nodeValue.length);
                      if (null === (next3 = node2.firstChild)) break;
                      parentNode = node2;
                      node2 = next3;
                    }
                    for (; ; ) {
                      if (node2 === root2) break b;
                      parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length2);
                      parentNode === focusNode2 && ++indexWithinFocus === selection && (end = length2);
                      if (null !== (next3 = node2.nextSibling)) break;
                      node2 = parentNode;
                      parentNode = node2.parentNode;
                    }
                    node2 = next3;
                  }
                  JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
                } else JSCompiler_temp = null;
              }
            JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
          } else JSCompiler_temp = null;
          selectionInformation = {
            focusedElem: root2,
            selectionRange: JSCompiler_temp
          };
          _enabled = false;
          for (nextEffect = firstChild; null !== nextEffect; )
            if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root2)
              root2.return = firstChild, nextEffect = root2;
            else
              for (; null !== nextEffect; ) {
                root2 = firstChild = nextEffect;
                JSCompiler_temp = root2.alternate;
                anchorOffset = root2.flags;
                switch (root2.tag) {
                  case 0:
                    break;
                  case 11:
                  case 15:
                    break;
                  case 1:
                    0 !== (anchorOffset & 1024) && null !== JSCompiler_temp && commitClassSnapshot(root2, JSCompiler_temp);
                    break;
                  case 3:
                    if (0 !== (anchorOffset & 1024)) {
                      if (root2 = root2.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, 9 === JSCompiler_temp)
                        clearContainerSparingly(root2);
                      else if (1 === JSCompiler_temp)
                        switch (root2.nodeName) {
                          case "HEAD":
                          case "HTML":
                          case "BODY":
                            clearContainerSparingly(root2);
                            break;
                          default:
                            root2.textContent = "";
                        }
                    }
                    break;
                  case 5:
                  case 26:
                  case 27:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    if (0 !== (anchorOffset & 1024))
                      throw Error(
                        "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                      );
                }
                root2 = firstChild.sibling;
                if (null !== root2) {
                  root2.return = firstChild.return;
                  nextEffect = root2;
                  break;
                }
                nextEffect = firstChild.return;
              }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
              break;
            case 1:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 4)
                if (finishedRoot = finishedWork.stateNode, null === current2)
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  )), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  );
                else {
                  var prevProps = resolveClassComponentProps(
                    finishedWork.type,
                    current2.memoizedProps
                  );
                  current2 = current2.memoizedState;
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ));
                  shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
                }
              flags & 64 && commitClassCallbacks(finishedWork);
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 3:
              current2 = pushNestedEffectDurations();
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                prevProps = null;
                if (null !== finishedWork.child)
                  switch (finishedWork.child.tag) {
                    case 27:
                    case 5:
                      prevProps = finishedWork.child.stateNode;
                      break;
                    case 1:
                      prevProps = finishedWork.child.stateNode;
                  }
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitCallbacks,
                    flags,
                    prevProps
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              finishedRoot.effectDuration += popNestedEffectDurations(current2);
              break;
            case 27:
              null === current2 && flags & 4 && commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              null === current2 && flags & 4 && commitHostMount(finishedWork);
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                finishedRoot = finishedWork.stateNode;
                finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    finishedRoot.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              break;
            case 13:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
                null,
                finishedWork
              ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
              break;
            case 22:
              flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
              if (!flags) {
                current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
                prevProps = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = flags;
                (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  0 !== (finishedWork.subtreeFlags & 8772)
                ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                offscreenSubtreeIsHidden = prevProps;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              }
              break;
            case 30:
              break;
            default:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          }
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
          fiber.stateNode = null;
          fiber._debugOwner = null;
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          for (parent = parent.child; null !== parent; )
            commitDeletionEffectsOnFiber(
              finishedRoot,
              nearestMountedAncestor,
              parent
            ), parent = parent.sibling;
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
            try {
              injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          switch (deletedFiber.tag) {
            case 26:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
              break;
            case 27:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              runWithFiberInDEV(
                deletedFiber,
                releaseSingletonInstance,
                deletedFiber.stateNode
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 5:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            case 6:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (null !== hostParent)
                if (hostParentIsContainer)
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChildFromContainer,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
                else
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChild,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
              break;
            case 18:
              null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
                9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
                deletedFiber.stateNode
              ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
              break;
            case 4:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              offscreenSubtreeWasHidden || commitHookEffectListUnmount(
                Insertion4,
                deletedFiber,
                nearestMountedAncestor
              );
              offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(
                deletedFiber,
                nearestMountedAncestor,
                Layout
              );
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 1:
              offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
                deletedFiber,
                nearestMountedAncestor,
                prevHostParent
              ));
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 21:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 22:
              offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              offscreenSubtreeWasHidden = prevHostParent;
              break;
            default:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHydratedSuspenseInstance,
                finishedRoot
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
        function getRetryCache(finishedWork) {
          switch (finishedWork.tag) {
            case 13:
            case 19:
              var retryCache = finishedWork.stateNode;
              null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
              return retryCache;
            case 22:
              return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
            default:
              throw Error(
                "Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React."
              );
          }
        }
        function attachSuspenseRetryListeners(finishedWork, wakeables) {
          var retryCache = getRetryCache(finishedWork);
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              if (isDevToolsPresent)
                if (null !== inProgressLanes && null !== inProgressRoot)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error(
                    "Expected finished root and lanes to be set. This is a bug in React."
                  );
              wakeable.then(retry, retry);
            }
          });
        }
        function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
          var deletions = parentFiber.deletions;
          if (null !== deletions)
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var root2 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i2], parent = returnFiber;
              a: for (; null !== parent; ) {
                switch (parent.tag) {
                  case 27:
                    if (isSingletonScope(parent.type)) {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break a;
                    }
                    break;
                  case 5:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  case 3:
                  case 4:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break a;
                }
                parent = parent.return;
              }
              if (null === hostParent)
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
              root2 = deletedFiber;
              returnFiber = root2.alternate;
              null !== returnFiber && (returnFiber.return = null);
              root2.return = null;
            }
          if (parentFiber.subtreeFlags & 13878)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
        }
        function commitMutationEffectsOnFiber(finishedWork, root2) {
          var current2 = finishedWork.alternate, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (commitHookEffectListUnmount(
                Insertion4 | HasEffect,
                finishedWork,
                finishedWork.return
              ), commitHookEffectListMount(Insertion4 | HasEffect, finishedWork), commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout | HasEffect
              ));
              break;
            case 1:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current2 = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current2 ? flags : current2.concat(flags))));
              break;
            case 26:
              var hoistableRoot = currentHoistableRoot;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (flags & 4)
                if (root2 = null !== current2 ? current2.memoizedState : null, flags = finishedWork.memoizedState, null === current2)
                  if (null === flags)
                    if (null === finishedWork.stateNode) {
                      a: {
                        flags = finishedWork.type;
                        current2 = finishedWork.memoizedProps;
                        root2 = hoistableRoot.ownerDocument || hoistableRoot;
                        b: switch (flags) {
                          case "title":
                            hoistableRoot = root2.getElementsByTagName("title")[0];
                            if (!hoistableRoot || hoistableRoot[internalHoistableMarker] || hoistableRoot[internalInstanceKey] || hoistableRoot.namespaceURI === SVG_NAMESPACE || hoistableRoot.hasAttribute("itemprop"))
                              hoistableRoot = root2.createElement(flags), root2.head.insertBefore(
                                hoistableRoot,
                                root2.querySelector("head > title")
                              );
                            setInitialProperties(hoistableRoot, flags, current2);
                            hoistableRoot[internalInstanceKey] = finishedWork;
                            markNodeAsHoistable(hoistableRoot);
                            flags = hoistableRoot;
                            break a;
                          case "link":
                            var maybeNodes = getHydratableHoistableCache(
                              "link",
                              "href",
                              root2
                            ).get(flags + (current2.href || ""));
                            if (maybeNodes) {
                              for (var i2 = 0; i2 < maybeNodes.length; i2++)
                                if (hoistableRoot = maybeNodes[i2], hoistableRoot.getAttribute("href") === (null == current2.href || "" === current2.href ? null : current2.href) && hoistableRoot.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && hoistableRoot.getAttribute("title") === (null == current2.title ? null : current2.title) && hoistableRoot.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                  maybeNodes.splice(i2, 1);
                                  break b;
                                }
                            }
                            hoistableRoot = root2.createElement(flags);
                            setInitialProperties(hoistableRoot, flags, current2);
                            root2.head.appendChild(hoistableRoot);
                            break;
                          case "meta":
                            if (maybeNodes = getHydratableHoistableCache(
                              "meta",
                              "content",
                              root2
                            ).get(flags + (current2.content || ""))) {
                              for (i2 = 0; i2 < maybeNodes.length; i2++)
                                if (hoistableRoot = maybeNodes[i2], checkAttributeStringCoercion(
                                  current2.content,
                                  "content"
                                ), hoistableRoot.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && hoistableRoot.getAttribute("name") === (null == current2.name ? null : current2.name) && hoistableRoot.getAttribute("property") === (null == current2.property ? null : current2.property) && hoistableRoot.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && hoistableRoot.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                  maybeNodes.splice(i2, 1);
                                  break b;
                                }
                            }
                            hoistableRoot = root2.createElement(flags);
                            setInitialProperties(hoistableRoot, flags, current2);
                            root2.head.appendChild(hoistableRoot);
                            break;
                          default:
                            throw Error(
                              'getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.'
                            );
                        }
                        hoistableRoot[internalInstanceKey] = finishedWork;
                        markNodeAsHoistable(hoistableRoot);
                        flags = hoistableRoot;
                      }
                      finishedWork.stateNode = flags;
                    } else
                      mountHoistable(
                        hoistableRoot,
                        finishedWork.type,
                        finishedWork.stateNode
                      );
                  else
                    finishedWork.stateNode = acquireResource(
                      hoistableRoot,
                      flags,
                      finishedWork.memoizedProps
                    );
                else
                  root2 !== flags ? (null === root2 ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : root2.count--, null === flags ? mountHoistable(
                    hoistableRoot,
                    finishedWork.type,
                    finishedWork.stateNode
                  ) : acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                    finishedWork,
                    finishedWork.memoizedProps,
                    current2.memoizedProps
                  );
              break;
            case 27:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              null !== current2 && flags & 4 && commitHostUpdate(
                finishedWork,
                finishedWork.memoizedProps,
                current2.memoizedProps
              );
              break;
            case 5:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (finishedWork.flags & 32) {
                root2 = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(finishedWork, resetTextContent, root2);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              flags & 4 && null != finishedWork.stateNode && (root2 = finishedWork.memoizedProps, commitHostUpdate(
                finishedWork,
                root2,
                null !== current2 ? current2.memoizedProps : root2
              ));
              flags & 1024 && (needsFormReset = true, "form" !== finishedWork.type && console.error(
                "Unexpected host component type. Expected a form. This is a bug in React."
              ));
              break;
            case 6:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & 4) {
                if (null === finishedWork.stateNode)
                  throw Error(
                    "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                  );
                flags = finishedWork.memoizedProps;
                current2 = null !== current2 ? current2.memoizedProps : flags;
                root2 = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitTextUpdate,
                    root2,
                    current2,
                    flags
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              break;
            case 3:
              hoistableRoot = pushNestedEffectDurations();
              tagCaches = null;
              maybeNodes = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(root2.containerInfo);
              recursivelyTraverseMutationEffects(root2, finishedWork);
              currentHoistableRoot = maybeNodes;
              commitReconciliationEffects(finishedWork);
              if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHydratedContainer,
                    root2.containerInfo
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
              root2.effectDuration += popNestedEffectDurations(hoistableRoot);
              break;
            case 4:
              flags = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                finishedWork.stateNode.containerInfo
              );
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              currentHoistableRoot = flags;
              break;
            case 12:
              flags = pushNestedEffectDurations();
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
              break;
            case 13:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now$1());
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 22:
              hoistableRoot = null !== finishedWork.memoizedState;
              var wasHidden = null !== current2 && null !== current2.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              commitReconciliationEffects(finishedWork);
              if (flags & 8192)
                a: for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & ~OffscreenVisible : root2._visibility | OffscreenVisible, hoistableRoot && (null === current2 || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current2 = null, root2 = finishedWork; ; ) {
                  if (5 === root2.tag || 26 === root2.tag) {
                    if (null === current2) {
                      wasHidden = current2 = root2;
                      try {
                        maybeNodes = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideInstance, maybeNodes) : runWithFiberInDEV(
                          wasHidden,
                          unhideInstance,
                          wasHidden.stateNode,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if (6 === root2.tag) {
                    if (null === current2) {
                      wasHidden = root2;
                      try {
                        i2 = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideTextInstance, i2) : runWithFiberInDEV(
                          wasHidden,
                          unhideTextInstance,
                          i2,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
                    root2.child.return = root2;
                    root2 = root2.child;
                    continue;
                  }
                  if (root2 === finishedWork) break a;
                  for (; null === root2.sibling; ) {
                    if (null === root2.return || root2.return === finishedWork)
                      break a;
                    current2 === root2 && (current2 = null);
                    root2 = root2.return;
                  }
                  current2 === root2 && (current2 = null);
                  root2.sibling.return = root2.return;
                  root2 = root2.sibling;
                }
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
              break;
            case 19:
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 30:
              break;
            case 21:
              break;
            default:
              recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & 2) {
            try {
              runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            finishedWork.flags &= -3;
          }
          flags & 4096 && (finishedWork.flags &= -4097);
        }
        function recursivelyResetForms(parentFiber) {
          if (parentFiber.subtreeFlags & 1024)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var fiber = parentFiber;
              recursivelyResetForms(fiber);
              5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
              parentFiber = parentFiber.sibling;
            }
        }
        function recursivelyTraverseLayoutEffects(root2, parentFiber) {
          if (parentFiber.subtreeFlags & 8772)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
        }
        function disappearLayoutEffects(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 1:
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
                finishedWork,
                finishedWork.return,
                instance
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 27:
              runWithFiberInDEV(
                finishedWork,
                releaseSingletonInstance,
                finishedWork.stateNode
              );
            case 26:
            case 5:
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 30:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            default:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
          }
        }
        function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
        }
        function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              commitHookLayoutEffects(finishedWork, Layout);
              break;
            case 1:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              current2 = finishedWork.stateNode;
              "function" === typeof current2.componentDidMount && runWithFiberInDEV(
                finishedWork,
                callComponentDidMountInDEV,
                finishedWork,
                current2
              );
              current2 = finishedWork.updateQueue;
              if (null !== current2) {
                finishedRoot = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHiddenCallbacks,
                    current2,
                    finishedRoot
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 27:
              commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostMount(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (includeWorkInProgressEffects && flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
                includeWorkInProgressEffects = finishedWork.stateNode;
                includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    includeWorkInProgressEffects.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
              break;
            case 13:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 30:
              break;
            default:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
          }
        }
        function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            reappearLayoutEffects(
              finishedRoot,
              parentFiber.alternate,
              parentFiber,
              includeWorkInProgressEffects
            ), parentFiber = parentFiber.sibling;
        }
        function commitOffscreenPassiveMountEffects(current2, finishedWork) {
          var previousCache = null;
          null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
          current2 = null;
          null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
          current2 !== previousCache && (null != current2 && retainCache(current2), null != previousCache && releaseCache(previousCache));
        }
        function commitCachePassiveMountEffect(current2, finishedWork) {
          current2 = null;
          null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
          finishedWork = finishedWork.memoizedState.cache;
          finishedWork !== current2 && (retainCache(finishedWork), null != current2 && releaseCache(current2));
        }
        function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitPassiveMountOnFiber(
                root2,
                parentFiber,
                committedLanes,
                committedTransitions
              ), parentFiber = parentFiber.sibling;
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
              break;
            case 1:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              break;
            case 3:
              var prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && (committedLanes = null, null !== finishedWork.alternate && (committedLanes = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== committedLanes && (retainCache(finishedWork), null != committedLanes && releaseCache(committedLanes)));
              finishedRoot.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
              break;
            case 12:
              if (flags & 2048) {
                flags = pushNestedEffectDurations();
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                );
                finishedRoot = finishedWork.stateNode;
                finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfilerPostCommitImpl,
                    finishedWork,
                    finishedWork.alternate,
                    commitStartTime,
                    finishedRoot.passiveEffectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                );
              break;
            case 13:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              break;
            case 23:
              break;
            case 22:
              prevEffectDuration = finishedWork.stateNode;
              var _current = finishedWork.alternate;
              null !== finishedWork.memoizedState ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              ) : (prevEffectDuration._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                0 !== (finishedWork.subtreeFlags & 10256)
              ));
              flags & 2048 && commitOffscreenPassiveMountEffects(_current, finishedWork);
              break;
            case 24:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
          }
        }
        function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            reconnectPassiveEffects(
              finishedRoot,
              parentFiber,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ), parentFiber = parentFiber.sibling;
        }
        function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              commitHookPassiveMountEffects(finishedWork, Passive);
              break;
            case 23:
              break;
            case 22:
              var _instance2 = finishedWork.stateNode;
              null !== finishedWork.memoizedState ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ));
              includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
          }
        }
        function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
              switch (finishedWork.tag) {
                case 22:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
                  flags & 2048 && commitOffscreenPassiveMountEffects(
                    finishedWork.alternate,
                    finishedWork
                  );
                  break;
                case 24:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
                  flags & 2048 && commitCachePassiveMountEffect(
                    finishedWork.alternate,
                    finishedWork
                  );
                  break;
                default:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
              }
              parentFiber = parentFiber.sibling;
            }
        }
        function recursivelyAccumulateSuspenseyCommit(parentFiber) {
          if (parentFiber.subtreeFlags & suspenseyCommitFlag)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
        }
        function accumulateSuspenseyCommitOnFiber(fiber) {
          switch (fiber.tag) {
            case 26:
              recursivelyAccumulateSuspenseyCommit(fiber);
              fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
                currentHoistableRoot,
                fiber.memoizedState,
                fiber.memoizedProps
              );
              break;
            case 5:
              recursivelyAccumulateSuspenseyCommit(fiber);
              break;
            case 3:
            case 4:
              var previousHoistableRoot = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                fiber.stateNode.containerInfo
              );
              recursivelyAccumulateSuspenseyCommit(fiber);
              currentHoistableRoot = previousHoistableRoot;
              break;
            case 22:
              null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
              break;
            default:
              recursivelyAccumulateSuspenseyCommit(fiber);
          }
        }
        function detachAlternateSiblings(parentFiber) {
          var previousFiber = parentFiber.alternate;
          if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
            previousFiber.child = null;
            do
              previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
            while (null !== parentFiber);
          }
        }
        function recursivelyTraversePassiveUnmountEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
              }
            detachAlternateSiblings(parentFiber);
          }
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive | HasEffect
              );
              break;
            case 3:
              var prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
              break;
            case 12:
              prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevEffectDuration);
              break;
            case 22:
              prevEffectDuration = finishedWork.stateNode;
              null !== finishedWork.memoizedState && prevEffectDuration._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (prevEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
              break;
            default:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
          }
        }
        function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
              }
            detachAlternateSiblings(parentFiber);
          }
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
        }
        function disconnectPassiveEffect(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive
              );
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              break;
            case 22:
              var instance = finishedWork.stateNode;
              instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
              break;
            default:
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          for (; null !== nextEffect; ) {
            var fiber = nextEffect, current2 = fiber;
            switch (current2.tag) {
              case 0:
              case 11:
              case 15:
                commitHookPassiveUnmountEffects(
                  current2,
                  nearestMountedAncestor,
                  Passive
                );
                break;
              case 23:
              case 22:
                null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (current2 = current2.memoizedState.cachePool.pool, null != current2 && retainCache(current2));
                break;
              case 24:
                releaseCache(current2.memoizedState.cache);
            }
            current2 = fiber.child;
            if (null !== current2) current2.return = fiber, nextEffect = current2;
            else
              a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
                current2 = nextEffect;
                var sibling = current2.sibling, returnFiber = current2.return;
                detachFiberAfterEffects(current2);
                if (current2 === fiber) {
                  nextEffect = null;
                  break a;
                }
                if (null !== sibling) {
                  sibling.return = returnFiber;
                  nextEffect = sibling;
                  break a;
                }
                nextEffect = returnFiber;
              }
          }
        }
        function onCommitRoot() {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
        function isConcurrentActEnvironment() {
          var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
          isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || console.error(
            "The current testing environment is not configured to support act(...)"
          );
          return isReactActEnvironmentGlobal;
        }
        function requestUpdateLane(fiber) {
          if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes)
            return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
          var transition = ReactSharedInternals.T;
          return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber), fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
        }
        function requestDeferredLane() {
          0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
          var suspenseHandler = suspenseHandlerStackCursor.current;
          null !== suspenseHandler && (suspenseHandler.flags |= 32);
          return workInProgressDeferredLane;
        }
        function scheduleUpdateOnFiber(root2, fiber, lane) {
          isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
          isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
          if (root2 === workInProgressRoot && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root2.cancelPendingCommit)
            prepareFreshStack(root2, 0), markRootSuspended(
              root2,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            );
          markRootUpdated$1(root2, lane);
          if (0 !== (executionContext & RenderContext) && root2 === workInProgressRoot) {
            if (isRendering)
              switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  root2 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  didWarnAboutUpdateInRenderForAnotherComponent.has(root2) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root2), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error(
                    "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                    fiber,
                    root2,
                    root2
                  ));
                  break;
                case 1:
                  didWarnAboutUpdateInRender || (console.error(
                    "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                  ), didWarnAboutUpdateInRender = true);
              }
          } else
            isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(
              root2,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            )), ensureRootIsScheduled(root2);
        }
        function performWorkOnRoot(root2, lanes, forceSync) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root2.expiredLanes) || checkIfRootIsPrerendering(root2, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes, true), renderWasConcurrent = shouldTimeSlice;
          do {
            if (exitStatus === RootInProgress) {
              workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root2, lanes, 0, false);
              break;
            } else {
              forceSync = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root2, lanes, false);
                renderWasConcurrent = false;
                continue;
              }
              if (exitStatus === RootErrored) {
                renderWasConcurrent = lanes;
                if (root2.errorRecoveryDisabledLanes & renderWasConcurrent)
                  var errorRetryLanes = 0;
                else
                  errorRetryLanes = root2.pendingLanes & -536870913, errorRetryLanes = 0 !== errorRetryLanes ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
                if (0 !== errorRetryLanes) {
                  lanes = errorRetryLanes;
                  a: {
                    exitStatus = root2;
                    var errorRetryLanes$jscomp$0 = errorRetryLanes;
                    errorRetryLanes = workInProgressRootConcurrentErrors;
                    var wasRootDehydrated = exitStatus.current.memoizedState.isDehydrated;
                    wasRootDehydrated && (prepareFreshStack(
                      exitStatus,
                      errorRetryLanes$jscomp$0
                    ).flags |= 256);
                    errorRetryLanes$jscomp$0 = renderRootSync(
                      exitStatus,
                      errorRetryLanes$jscomp$0,
                      false
                    );
                    if (errorRetryLanes$jscomp$0 !== RootErrored) {
                      if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                        exitStatus.errorRecoveryDisabledLanes |= renderWasConcurrent;
                        workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                        exitStatus = RootSuspendedWithDelay;
                        break a;
                      }
                      exitStatus = workInProgressRootRecoverableErrors;
                      workInProgressRootRecoverableErrors = errorRetryLanes;
                      null !== exitStatus && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = exitStatus : workInProgressRootRecoverableErrors.push.apply(
                        workInProgressRootRecoverableErrors,
                        exitStatus
                      ));
                    }
                    exitStatus = errorRetryLanes$jscomp$0;
                  }
                  renderWasConcurrent = false;
                  if (exitStatus !== RootErrored) continue;
                }
              }
              if (exitStatus === RootFatalErrored) {
                prepareFreshStack(root2, 0);
                markRootSuspended(root2, lanes, 0, true);
                break;
              }
              a: {
                shouldTimeSlice = root2;
                switch (exitStatus) {
                  case RootInProgress:
                  case RootFatalErrored:
                    throw Error("Root did not complete. This is a bug in React.");
                  case RootSuspendedWithDelay:
                    if ((lanes & 4194048) !== lanes) break;
                  case RootSuspendedAtTheShell:
                    markRootSuspended(
                      shouldTimeSlice,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    break a;
                  case RootErrored:
                    workInProgressRootRecoverableErrors = null;
                    break;
                  case RootSuspended:
                  case RootCompleted:
                    break;
                  default:
                    throw Error("Unknown root exit status.");
                }
                if (null !== ReactSharedInternals.actQueue)
                  commitRoot(
                    shouldTimeSlice,
                    forceSync,
                    lanes,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes
                  );
                else {
                  if ((lanes & 62914560) === lanes && (renderWasConcurrent = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < renderWasConcurrent)) {
                    markRootSuspended(
                      shouldTimeSlice,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(
                      commitRootWhenReady.bind(
                        null,
                        shouldTimeSlice,
                        forceSync,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                        workInProgressRootDidIncludeRecursiveRenderUpdate,
                        lanes,
                        workInProgressDeferredLane,
                        workInProgressRootInterleavedUpdatedLanes,
                        workInProgressSuspendedRetryLanes,
                        workInProgressRootDidSkipSuspendedSiblings,
                        exitStatus,
                        THROTTLED_COMMIT,
                        renderStartTime,
                        0
                      ),
                      renderWasConcurrent
                    );
                    break a;
                  }
                  commitRootWhenReady(
                    shouldTimeSlice,
                    forceSync,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    exitStatus,
                    IMMEDIATE_COMMIT,
                    renderStartTime,
                    0
                  );
                }
              }
            }
            break;
          } while (1);
          ensureRootIsScheduled(root2);
        }
        function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
          root2.timeoutHandle = noTimeout;
          suspendedCommitReason = finishedWork.subtreeFlags;
          if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
            if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop3 }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
              root2.cancelPendingCommit = suspendedCommitReason(
                commitRoot.bind(
                  null,
                  root2,
                  finishedWork,
                  lanes,
                  recoverableErrors,
                  transitions,
                  didIncludeRenderPhaseUpdate,
                  spawnedLane,
                  updatedLanes,
                  suspendedRetryLanes,
                  exitStatus,
                  SUSPENDED_COMMIT,
                  completedRenderStartTime,
                  completedRenderEndTime
                )
              );
              markRootSuspended(
                root2,
                lanes,
                spawnedLane,
                !didSkipSuspendedSiblings
              );
              return;
            }
          }
          commitRoot(
            root2,
            finishedWork,
            lanes,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
          );
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          for (var node2 = finishedWork; ; ) {
            var tag = node2.tag;
            if ((0 === tag || 11 === tag || 15 === tag) && node2.flags & 16384 && (tag = node2.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
              for (var i2 = 0; i2 < tag.length; i2++) {
                var check = tag[i2], getSnapshot = check.getSnapshot;
                check = check.value;
                try {
                  if (!objectIs(getSnapshot(), check)) return false;
                } catch (error) {
                  return false;
                }
              }
            tag = node2.child;
            if (node2.subtreeFlags & 16384 && null !== tag)
              tag.return = node2, node2 = tag;
            else {
              if (node2 === finishedWork) break;
              for (; null === node2.sibling; ) {
                if (null === node2.return || node2.return === finishedWork) return true;
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          return true;
        }
        function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
          suspendedLanes &= ~workInProgressRootPingedLanes;
          suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
          didAttemptEntireTree = root2.expirationTimes;
          for (var lanes = suspendedLanes; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index;
            didAttemptEntireTree[index] = -1;
            lanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
        }
        function flushSyncWork$1() {
          return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
        }
        function resetWorkInProgressStack() {
          if (null !== workInProgress) {
            if (workInProgressSuspendedReason === NotSuspended)
              var interruptedWork = workInProgress.return;
            else
              interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
            for (; null !== interruptedWork; )
              unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
            workInProgress = null;
          }
        }
        function prepareFreshStack(root2, lanes) {
          var timeoutHandle = root2.timeoutHandle;
          timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle));
          timeoutHandle = root2.cancelPendingCommit;
          null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
          resetWorkInProgressStack();
          workInProgressRoot = root2;
          workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
          workInProgressRootRenderLanes = lanes;
          workInProgressSuspendedReason = NotSuspended;
          workInProgressThrownValue = null;
          workInProgressRootDidSkipSuspendedSiblings = false;
          workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
          workInProgressRootDidAttachPingListener = false;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
          workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
          workInProgressRootDidIncludeRecursiveRenderUpdate = false;
          0 !== (lanes & 8) && (lanes |= lanes & 32);
          var allEntangledLanes = root2.entangledLanes;
          if (0 !== allEntangledLanes)
            for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
              var index = 31 - clz32(allEntangledLanes), lane = 1 << index;
              lanes |= root2[index];
              allEntangledLanes &= ~lane;
            }
          entangledRenderLanes = lanes;
          finishQueueingConcurrentUpdates();
          lanes = getCurrentTime();
          1e3 < lanes - lastResetTime && (ReactSharedInternals.recentlyCreatedOwnerStacks = 0, lastResetTime = lanes);
          ReactStrictModeWarnings.discardPendingWarnings();
          return timeoutHandle;
        }
        function handleThrow(root2, thrownValue) {
          currentlyRenderingFiber = null;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          ReactSharedInternals.getCurrentStack = null;
          isRendering = false;
          current = null;
          thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
          workInProgressThrownValue = thrownValue;
          var erroredWork = workInProgress;
          if (null === erroredWork)
            workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(
              root2,
              createCapturedValueAtFiber(thrownValue, root2.current)
            );
          else
            switch (erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork), markComponentRenderStopped(), workInProgressSuspendedReason) {
              case SuspendedOnError:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(
                  erroredWork,
                  thrownValue,
                  workInProgressRootRenderLanes
                );
                break;
              case SuspendedOnData:
              case SuspendedOnAction:
              case SuspendedOnImmediate:
              case SuspendedOnDeprecatedThrowPromise:
              case SuspendedAndReadyToContinue:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(
                  erroredWork,
                  thrownValue,
                  workInProgressRootRenderLanes
                );
            }
        }
        function pushDispatcher() {
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
        }
        function pushAsyncDispatcher() {
          var prevAsyncDispatcher = ReactSharedInternals.A;
          ReactSharedInternals.A = DefaultAsyncDispatcher;
          return prevAsyncDispatcher;
        }
        function renderDidSuspendDelayIfPossible() {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
          workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
          0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
            workInProgressRoot,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        }
        function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root2, lanes);
            }
            workInProgressTransitions = null;
            prepareFreshStack(root2, lanes);
          }
          markRenderStarted(lanes);
          lanes = false;
          memoizedUpdaters = workInProgressRootExitStatus;
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
                var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
                switch (workInProgressSuspendedReason) {
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    memoizedUpdaters = RootSuspendedAtTheShell;
                    break a;
                  case SuspendedOnImmediate:
                  case SuspendedOnData:
                  case SuspendedOnAction:
                  case SuspendedOnDeprecatedThrowPromise:
                    null === suspenseHandlerStackCursor.current && (lanes = true);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                      memoizedUpdaters = RootInProgress;
                      break a;
                    }
                    break;
                  default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                }
              }
              workLoopSync();
              memoizedUpdaters = workInProgressRootExitStatus;
              break;
            } catch (thrownValue$8) {
              handleThrow(root2, thrownValue$8);
            }
          while (1);
          lanes && root2.shellSuspendCounter++;
          resetContextDependencies();
          executionContext = prevExecutionContext;
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          markRenderStopped();
          null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
          return memoizedUpdaters;
        }
        function workLoopSync() {
          for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root2, lanes);
            }
            workInProgressTransitions = null;
            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
            prepareFreshStack(root2, lanes);
          } else
            workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
              root2,
              lanes
            );
          markRenderStarted(lanes);
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress)
                b: switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                  case SuspendedOnError:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root2,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnError
                    );
                    break;
                  case SuspendedOnData:
                  case SuspendedOnAction:
                    if (isThenableResolved(memoizedUpdaters)) {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      replaySuspendedUnitOfWork(lanes);
                      break;
                    }
                    lanes = function() {
                      workInProgressSuspendedReason !== SuspendedOnData && workInProgressSuspendedReason !== SuspendedOnAction || workInProgressRoot !== root2 || (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                      ensureRootIsScheduled(root2);
                    };
                    memoizedUpdaters.then(lanes, lanes);
                    break a;
                  case SuspendedOnImmediate:
                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                    break a;
                  case SuspendedOnInstance:
                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                    break a;
                  case SuspendedAndReadyToContinue:
                    isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(
                      root2,
                      lanes,
                      memoizedUpdaters,
                      SuspendedAndReadyToContinue
                    ));
                    break;
                  case SuspendedOnInstanceAndReadyToContinue:
                    var resource = null;
                    switch (workInProgress.tag) {
                      case 26:
                        resource = workInProgress.memoizedState;
                      case 5:
                      case 27:
                        var hostFiber = workInProgress;
                        if (resource ? preloadResource(resource) : 1) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          var sibling = hostFiber.sibling;
                          if (null !== sibling) workInProgress = sibling;
                          else {
                            var returnFiber = hostFiber.return;
                            null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                          }
                          break b;
                        }
                        break;
                      default:
                        console.error(
                          "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                        );
                    }
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root2,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnInstanceAndReadyToContinue
                    );
                    break;
                  case SuspendedOnDeprecatedThrowPromise:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root2,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnDeprecatedThrowPromise
                    );
                    break;
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootSuspendedAtTheShell;
                    break a;
                  default:
                    throw Error(
                      "Unexpected SuspendedReason. This is a bug in React."
                    );
                }
              null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrentByScheduler();
              break;
            } catch (thrownValue$9) {
              handleThrow(root2, thrownValue$9);
            }
          while (1);
          resetContextDependencies();
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          executionContext = prevExecutionContext;
          if (null !== workInProgress)
            return null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), RootInProgress;
          markRenderStopped();
          workInProgressRoot = null;
          workInProgressRootRenderLanes = 0;
          finishQueueingConcurrentUpdates();
          return workInProgressRootExitStatus;
        }
        function workLoopConcurrentByScheduler() {
          for (; null !== workInProgress && !shouldYield(); )
            performUnitOfWork(workInProgress);
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          ), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          );
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === current2 ? completeUnitOfWork(unitOfWork) : workInProgress = current2;
        }
        function replaySuspendedUnitOfWork(unitOfWork) {
          var next3 = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === next3 ? completeUnitOfWork(unitOfWork) : workInProgress = next3;
        }
        function replayBeginWork(unitOfWork) {
          var current2 = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
          isProfilingMode && startProfilerTimer(unitOfWork);
          switch (unitOfWork.tag) {
            case 15:
            case 0:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type,
                void 0,
                workInProgressRootRenderLanes
              );
              break;
            case 11:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type.render,
                unitOfWork.ref,
                workInProgressRootRenderLanes
              );
              break;
            case 5:
              resetHooksOnUnwind(unitOfWork);
            default:
              unwindInterruptedWork(current2, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current2 = beginWork(current2, unitOfWork, entangledRenderLanes);
          }
          isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
          return current2;
        }
        function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
          resetContextDependencies();
          resetHooksOnUnwind(unitOfWork);
          thenableState = null;
          thenableIndexCounter = 0;
          var returnFiber = unitOfWork.return;
          try {
            if (throwException(
              root2,
              returnFiber,
              unitOfWork,
              thrownValue,
              workInProgressRootRenderLanes
            )) {
              workInProgressRootExitStatus = RootFatalErrored;
              logUncaughtError(
                root2,
                createCapturedValueAtFiber(thrownValue, root2.current)
              );
              workInProgress = null;
              return;
            }
          } catch (error) {
            if (null !== returnFiber) throw workInProgress = returnFiber, error;
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(
              root2,
              createCapturedValueAtFiber(thrownValue, root2.current)
            );
            workInProgress = null;
            return;
          }
          if (unitOfWork.flags & 32768) {
            if (isHydrating || suspendedReason === SuspendedOnError) root2 = true;
            else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
              root2 = false;
            else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnAction || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise)
              suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
            unwindUnitOfWork(unitOfWork, root2);
          } else completeUnitOfWork(unitOfWork);
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            if (0 !== (completedWork.flags & 32768)) {
              unwindUnitOfWork(
                completedWork,
                workInProgressRootDidSkipSuspendedSiblings
              );
              return;
            }
            var current2 = completedWork.alternate;
            unitOfWork = completedWork.return;
            startProfilerTimer(completedWork);
            current2 = runWithFiberInDEV(
              completedWork,
              completeWork,
              current2,
              completedWork,
              entangledRenderLanes
            );
            (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
            if (null !== current2) {
              workInProgress = current2;
              return;
            }
            completedWork = completedWork.sibling;
            if (null !== completedWork) {
              workInProgress = completedWork;
              return;
            }
            workInProgress = completedWork = unitOfWork;
          } while (null !== completedWork);
          workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
        }
        function unwindUnitOfWork(unitOfWork, skipSiblings) {
          do {
            var next3 = unwindWork(unitOfWork.alternate, unitOfWork);
            if (null !== next3) {
              next3.flags &= 32767;
              workInProgress = next3;
              return;
            }
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
              next3 = unitOfWork.actualDuration;
              for (var child = unitOfWork.child; null !== child; )
                next3 += child.actualDuration, child = child.sibling;
              unitOfWork.actualDuration = next3;
            }
            next3 = unitOfWork.return;
            null !== next3 && (next3.flags |= 32768, next3.subtreeFlags = 0, next3.deletions = null);
            if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
              workInProgress = unitOfWork;
              return;
            }
            workInProgress = unitOfWork = next3;
          } while (null !== unitOfWork);
          workInProgressRootExitStatus = RootSuspendedAtTheShell;
          workInProgress = null;
        }
        function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
          root2.cancelPendingCommit = null;
          do
            flushPendingEffects();
          while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
          ReactStrictModeWarnings.flushLegacyContextWarning();
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(lanes);
          if (null === finishedWork) markCommitStopped();
          else {
            0 === lanes && console.error(
              "finishedLanes should not be empty during a commit. This is a bug in React."
            );
            if (finishedWork === root2.current)
              throw Error(
                "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
              );
            didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
            didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
            markRootFinished(
              root2,
              lanes,
              didIncludeRenderPhaseUpdate,
              spawnedLane,
              updatedLanes,
              suspendedRetryLanes
            );
            root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
            pendingFinishedWork = finishedWork;
            pendingEffectsRoot = root2;
            pendingEffectsLanes = lanes;
            pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
            pendingPassiveTransitions = transitions;
            pendingRecoverableErrors = recoverableErrors;
            0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
              flushPassiveEffects(true);
              return null;
            })) : (root2.callbackNode = null, root2.callbackPriority = 0);
            commitStartTime = now();
            recoverableErrors = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
              recoverableErrors = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              transitions = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              spawnedLane = executionContext;
              executionContext |= CommitContext;
              try {
                commitBeforeMutationEffects(root2, finishedWork, lanes);
              } finally {
                executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
              }
            }
            pendingEffectsStatus = PENDING_MUTATION_PHASE;
            flushMutationEffects();
            flushLayoutEffects();
            flushSpawnedWork();
          }
        }
        function flushMutationEffects() {
          if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
              rootMutationHasEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                inProgressLanes = lanes;
                inProgressRoot = root2;
                commitMutationEffectsOnFiber(finishedWork, root2);
                inProgressRoot = inProgressLanes = null;
                lanes = selectionInformation;
                var curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = lanes.focusedElem, priorSelectionRange = lanes.selectionRange;
                if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                  priorFocusedElem.ownerDocument.documentElement,
                  priorFocusedElem
                )) {
                  if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                    var start = priorSelectionRange.start, end = priorSelectionRange.end;
                    void 0 === end && (end = start);
                    if ("selectionStart" in priorFocusedElem)
                      priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                        end,
                        priorFocusedElem.value.length
                      );
                    else {
                      var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                      if (win.getSelection) {
                        var selection = win.getSelection(), length2 = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(
                          priorSelectionRange.start,
                          length2
                        ), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length2);
                        !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                        var startMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          start$jscomp$0
                        ), endMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          end$jscomp$0
                        );
                        if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                          var range = doc.createRange();
                          range.setStart(startMarker.node, startMarker.offset);
                          selection.removeAllRanges();
                          start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                        }
                      }
                    }
                  }
                  doc = [];
                  for (selection = priorFocusedElem; selection = selection.parentNode; )
                    1 === selection.nodeType && doc.push({
                      element: selection,
                      left: selection.scrollLeft,
                      top: selection.scrollTop
                    });
                  "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                  for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                    var info = doc[priorFocusedElem];
                    info.element.scrollLeft = info.left;
                    info.element.scrollTop = info.top;
                  }
                }
                _enabled = !!eventsEnabled;
                selectionInformation = eventsEnabled = null;
              } finally {
                executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
              }
            }
            root2.current = finishedWork;
            pendingEffectsStatus = PENDING_LAYOUT_PHASE;
          }
        }
        function flushLayoutEffects() {
          if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
            if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
              rootHasLayoutEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(lanes), inProgressLanes = lanes, inProgressRoot = root2, commitLayoutEffectOnFiber(
                  root2,
                  finishedWork.alternate,
                  finishedWork
                ), inProgressRoot = inProgressLanes = null, null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped();
              } finally {
                executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
              }
            }
            pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
          }
        }
        function flushSpawnedWork() {
          if (pendingEffectsStatus === PENDING_SPAWNED_WORK || pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            requestPaint();
            var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors, rootDidHavePassiveEffects = 0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256);
            rootDidHavePassiveEffects ? pendingEffectsStatus = PENDING_PASSIVE_PHASE : (pendingEffectsStatus = NO_PENDING_EFFECTS, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
            var remainingLanes = root2.pendingLanes;
            0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
            rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2);
            rootDidHavePassiveEffects = lanesToEventPriority(lanes);
            finishedWork = finishedWork.stateNode;
            if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
              try {
                var didError = 128 === (finishedWork.current.flags & 128);
                switch (rootDidHavePassiveEffects) {
                  case DiscreteEventPriority:
                    var schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority$1;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority$1;
                }
                injectedHook.onCommitFiberRoot(
                  rendererID,
                  finishedWork,
                  schedulerPriority,
                  didError
                );
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %s",
                  err
                ));
              }
            isDevToolsPresent && root2.memoizedUpdaters.clear();
            onCommitRoot();
            if (null !== recoverableErrors) {
              didError = ReactSharedInternals.T;
              schedulerPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              ReactSharedInternals.T = null;
              try {
                var onRecoverableError = root2.onRecoverableError;
                for (finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++) {
                  var recoverableError = recoverableErrors[finishedWork], errorInfo = makeErrorInfo(recoverableError.stack);
                  runWithFiberInDEV(
                    recoverableError.source,
                    onRecoverableError,
                    recoverableError.value,
                    errorInfo
                  );
                }
              } finally {
                ReactSharedInternals.T = didError, ReactDOMSharedInternals.p = schedulerPriority;
              }
            }
            0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
            ensureRootIsScheduled(root2);
            remainingLanes = root2.pendingLanes;
            0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? (nestedUpdateScheduled = true, root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0;
            flushSyncWorkAcrossRoots_impl(0, false);
            markCommitStopped();
          }
        }
        function makeErrorInfo(componentStack) {
          componentStack = { componentStack };
          Object.defineProperty(componentStack, "digest", {
            get: function() {
              console.error(
                'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
              );
            }
          });
          return componentStack;
        }
        function releaseRootPooledCache(root2, remainingLanes) {
          0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
        }
        function flushPendingEffects(wasDelayedCommit) {
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
          return flushPassiveEffects(wasDelayedCommit);
        }
        function flushPassiveEffects() {
          if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return false;
          var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
          pendingEffectsRemainingLanes = 0;
          var renderPriority = lanesToEventPriority(pendingEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
          renderPriority = ReactSharedInternals.T;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = priority;
            ReactSharedInternals.T = null;
            priority = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            pendingFinishedWork = pendingEffectsRoot = null;
            pendingEffectsLanes = 0;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw Error("Cannot flush passive effects while already rendering.");
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountOnFiber(root$jscomp$0.current);
            commitPassiveMountOnFiber(
              root$jscomp$0,
              root$jscomp$0.current,
              lanes,
              priority
            );
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
            commitDoubleInvokeEffectsInDEV(root$jscomp$0);
            executionContext = prevExecutionContext;
            flushSyncWorkAcrossRoots_impl(0, false);
            didScheduleUpdateDuringPassiveEffects ? root$jscomp$0 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root$jscomp$0) : nestedPassiveUpdateCount = 0;
            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
            if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %s",
                  err
                ));
              }
            var stateNode = root$jscomp$0.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            return true;
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root2, remainingLanes);
          }
        }
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
          rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
          null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
          isRunningInsertionEffect = false;
          if (3 === sourceFiber.tag)
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          else {
            for (; null !== nearestMountedAncestor; ) {
              if (3 === nearestMountedAncestor.tag) {
                captureCommitPhaseErrorOnRoot(
                  nearestMountedAncestor,
                  sourceFiber,
                  error
                );
                return;
              }
              if (1 === nearestMountedAncestor.tag) {
                var instance = nearestMountedAncestor.stateNode;
                if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                  error = createClassErrorUpdate(2);
                  instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                  null !== instance && (initializeClassErrorUpdate(
                    error,
                    instance,
                    nearestMountedAncestor,
                    sourceFiber
                  ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                  return;
                }
              }
              nearestMountedAncestor = nearestMountedAncestor.return;
            }
            console.error(
              "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
              error
            );
          }
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          if (null === pingCache) {
            pingCache = root2.pingCache = new PossiblyWeakMap();
            var threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else
            threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
          threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root2, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(pingCache, pingCache));
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          null !== pingCache && pingCache.delete(wakeable);
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          root2.warmLanes &= ~pingedLanes;
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && console.error(
            "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
          );
          workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
          ensureRootIsScheduled(root2);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          0 === retryLane && (retryLane = claimNextRetryLane());
          boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = 0;
          switch (boundaryFiber.tag) {
            case 13:
              var retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              null !== suspenseState && (retryLane = suspenseState.retryLane);
              break;
            case 19:
              retryCache = boundaryFiber.stateNode;
              break;
            case 22:
              retryCache = boundaryFiber.stateNode._retryCache;
              break;
            default:
              throw Error(
                "Pinged unknown suspense boundary type. This is probably a bug in React."
              );
          }
          null !== retryCache && retryCache.delete(wakeable);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
          if (0 !== (parentFiber.subtreeFlags & 67117056))
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var root2 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
              isStrictModeFiber = isInStrictMode || isStrictModeFiber;
              22 !== fiber.tag ? fiber.flags & 67108864 ? isStrictModeFiber && runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root2,
                fiber,
                (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
              ) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
                root2,
                fiber,
                isStrictModeFiber
              ) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root2,
                fiber
              ) : fiber.subtreeFlags & 67108864 && runWithFiberInDEV(
                fiber,
                recursivelyTraverseAndDoubleInvokeEffectsInDEV,
                root2,
                fiber,
                isStrictModeFiber
              ));
              parentFiber = parentFiber.sibling;
            }
        }
        function doubleInvokeEffectsOnFiber(root2, fiber) {
          var shouldDoubleInvokePassiveEffects = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : true;
          setIsStrictModeForDevtools(true);
          try {
            disappearLayoutEffects(fiber), shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber), reappearLayoutEffects(root2, fiber.alternate, fiber, false), shouldDoubleInvokePassiveEffects && reconnectPassiveEffects(root2, fiber, 0, null, false, 0);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        function commitDoubleInvokeEffectsInDEV(root2) {
          var doubleInvokeEffects = true;
          root2.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = false);
          recursivelyTraverseAndDoubleInvokeEffectsInDEV(
            root2,
            root2.current,
            doubleInvokeEffects
          );
        }
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          if ((executionContext & RenderContext) === NoContext) {
            var tag = fiber.tag;
            if (3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
              tag = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (null !== didWarnStateUpdateForNotYetMountedComponent) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
                didWarnStateUpdateForNotYetMountedComponent.add(tag);
              } else didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([tag]);
              runWithFiberInDEV(fiber, function() {
                console.error(
                  "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
                );
              });
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          isDevToolsPresent && root2.memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
        function scheduleCallback$1(priorityLevel, callback) {
          var actQueue = ReactSharedInternals.actQueue;
          return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
            console.error(
              "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
              getComponentNameFromFiber(fiber)
            );
          });
        }
        function ensureRootIsScheduled(root2) {
          root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
          mightHavePendingSyncWork = true;
          null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateRootScheduleTask()) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
        }
        function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
          if (!isFlushingWork && mightHavePendingSyncWork) {
            isFlushingWork = true;
            do {
              var didPerformSomeWork = false;
              for (var root2 = firstScheduledRoot; null !== root2; ) {
                if (!onlyLegacy)
                  if (0 !== syncTransitionLanes) {
                    var pendingLanes = root2.pendingLanes;
                    if (0 === pendingLanes) var nextLanes = 0;
                    else {
                      var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
                      nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                      nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                      nextLanes = nextLanes & 201326741 ? nextLanes & 201326741 | 1 : nextLanes ? nextLanes | 2 : 0;
                    }
                    0 !== nextLanes && (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
                  } else
                    nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(
                      root2,
                      root2 === workInProgressRoot ? nextLanes : 0,
                      null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
                    ), 0 === (nextLanes & 3) || checkIfRootIsPrerendering(root2, nextLanes) || (didPerformSomeWork = true, performSyncWorkOnRoot(root2, nextLanes));
                root2 = root2.next;
              }
            } while (didPerformSomeWork);
            isFlushingWork = false;
          }
        }
        function processRootScheduleInImmediateTask() {
          processRootScheduleInMicrotask();
        }
        function processRootScheduleInMicrotask() {
          mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
          var syncTransitionLanes = 0;
          0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
          for (var currentTime = now$1(), prev3 = null, root2 = firstScheduledRoot; null !== root2; ) {
            var next3 = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
            if (0 === nextLanes)
              root2.next = null, null === prev3 ? firstScheduledRoot = next3 : prev3.next = next3, null === next3 && (lastScheduledRoot = prev3);
            else if (prev3 = root2, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
              mightHavePendingSyncWork = true;
            root2 = next3;
          }
          flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
        }
        function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
          for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & -62914561; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
            if (-1 === expirationTime) {
              if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else expirationTime <= currentTime && (root2.expiredLanes |= lane);
            lanes &= ~lane;
          }
          currentTime = workInProgressRoot;
          suspendedLanes = workInProgressRootRenderLanes;
          suspendedLanes = getNextLanes(
            root2,
            root2 === currentTime ? suspendedLanes : 0,
            null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
          );
          pingedLanes = root2.callbackNode;
          if (0 === suspendedLanes || root2 === currentTime && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root2.cancelPendingCommit)
            return null !== pingedLanes && cancelCallback(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
          if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
            currentTime = suspendedLanes & -suspendedLanes;
            if (currentTime !== root2.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode)
              cancelCallback(pingedLanes);
            else return currentTime;
            switch (lanesToEventPriority(suspendedLanes)) {
              case DiscreteEventPriority:
              case ContinuousEventPriority:
                suspendedLanes = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                suspendedLanes = NormalPriority$1;
                break;
              case IdleEventPriority:
                suspendedLanes = IdlePriority;
                break;
              default:
                suspendedLanes = NormalPriority$1;
            }
            pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
            null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
            root2.callbackPriority = currentTime;
            root2.callbackNode = suspendedLanes;
            return currentTime;
          }
          null !== pingedLanes && cancelCallback(pingedLanes);
          root2.callbackPriority = 2;
          root2.callbackNode = null;
          return 2;
        }
        function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
          nestedUpdateScheduled = currentUpdateIsNested = false;
          if (pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
            return root2.callbackNode = null, root2.callbackPriority = 0, null;
          var originalCallbackNode = root2.callbackNode;
          if (flushPendingEffects(true) && root2.callbackNode !== originalCallbackNode)
            return null;
          var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
          workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
            root2,
            root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
            null !== root2.cancelPendingCommit || root2.timeoutHandle !== noTimeout
          );
          if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
          performWorkOnRoot(
            root2,
            workInProgressRootRenderLanes$jscomp$0,
            didTimeout
          );
          scheduleTaskForRootDuringMicrotask(root2, now$1());
          return null != root2.callbackNode && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
        }
        function performSyncWorkOnRoot(root2, lanes) {
          if (flushPendingEffects()) return null;
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
          performWorkOnRoot(root2, lanes, true);
        }
        function cancelCallback(callbackNode) {
          callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
        }
        function scheduleImmediateRootScheduleTask() {
          null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
            processRootScheduleInMicrotask();
            return null;
          });
          scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(
              ImmediatePriority,
              processRootScheduleInImmediateTask
            ) : processRootScheduleInMicrotask();
          });
        }
        function requestTransitionLane() {
          0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
          return currentEventTransitionLane;
        }
        function coerceFormActionProp(actionProp) {
          if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp)
            return null;
          if ("function" === typeof actionProp) return actionProp;
          checkAttributeStringCoercion(actionProp, "action");
          return sanitizeURL("" + actionProp);
        }
        function createFormDataWithSubmitter(form, submitter) {
          var temp = submitter.ownerDocument.createElement("input");
          temp.name = submitter.name;
          temp.value = submitter.value;
          form.id && temp.setAttribute("form", form.id);
          submitter.parentNode.insertBefore(temp, submitter);
          form = new FormData(form);
          temp.parentNode.removeChild(temp);
          return form;
        }
        function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
          if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
            var action = coerceFormActionProp(
              (nativeEventTarget[internalPropsKey] || null).action
            ), submitter = nativeEvent.submitter;
            submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
            var event = new SyntheticEvent(
              "action",
              "action",
              null,
              nativeEvent,
              nativeEventTarget
            );
            dispatchQueue.push({
              event,
              listeners: [
                {
                  instance: null,
                  listener: function() {
                    if (nativeEvent.defaultPrevented) {
                      if (0 !== currentEventTransitionLane) {
                        var formData = submitter ? createFormDataWithSubmitter(
                          nativeEventTarget,
                          submitter
                        ) : new FormData(nativeEventTarget), pendingState = {
                          pending: true,
                          data: formData,
                          method: nativeEventTarget.method,
                          action
                        };
                        Object.freeze(pendingState);
                        startHostTransition(
                          maybeTargetInst,
                          pendingState,
                          null,
                          formData
                        );
                      }
                    } else
                      "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(
                        nativeEventTarget,
                        submitter
                      ) : new FormData(nativeEventTarget), pendingState = {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      }, Object.freeze(pendingState), startHostTransition(
                        maybeTargetInst,
                        pendingState,
                        action,
                        formData
                      ));
                  },
                  currentTarget: nativeEventTarget
                }
              ]
            });
          }
        }
        function executeDispatch(event, listener, currentTarget) {
          event.currentTarget = currentTarget;
          try {
            listener(event);
          } catch (error) {
            reportGlobalError(error);
          }
          event.currentTarget = null;
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          eventSystemFlags = 0 !== (eventSystemFlags & 4);
          for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
            var _dispatchQueue$i = dispatchQueue[i2];
            a: {
              var previousInstance = void 0, event = _dispatchQueue$i.event;
              _dispatchQueue$i = _dispatchQueue$i.listeners;
              if (eventSystemFlags)
                for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                  var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
              else
                for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                  _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                  instance = _dispatchListeners$i.instance;
                  currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
            }
          }
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          nonDelegatedEvents.has(domEventName) || console.error(
            'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
            domEventName
          );
          var listenerSet = targetElement[internalEventHandlersKey];
          void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
          var listenerSetKey = domEventName + "__bubble";
          listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error(
            'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
            domEventName
          );
          var eventSystemFlags = 0;
          isCapturePhaseListener && (eventSystemFlags |= 4);
          addTrappedEventListener(
            target,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener
          );
        }
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
            });
            var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
            null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
          switch (getEventPriority(domEventName)) {
            case DiscreteEventPriority:
              var listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            default:
              listenerWrapper = dispatchEvent;
          }
          eventSystemFlags = listenerWrapper.bind(
            null,
            domEventName,
            eventSystemFlags,
            targetContainer
          );
          listenerWrapper = void 0;
          !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
          isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            capture: true,
            passive: listenerWrapper
          }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            passive: listenerWrapper
          }) : targetContainer.addEventListener(
            domEventName,
            eventSystemFlags,
            false
          );
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
          var ancestorInst = targetInst$jscomp$0;
          if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
            a: for (; ; ) {
              if (null === targetInst$jscomp$0) return;
              var nodeTag = targetInst$jscomp$0.tag;
              if (3 === nodeTag || 4 === nodeTag) {
                var container = targetInst$jscomp$0.stateNode.containerInfo;
                if (container === targetContainer) break;
                if (4 === nodeTag)
                  for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                    var grandTag = nodeTag.tag;
                    if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                      return;
                    nodeTag = nodeTag.return;
                  }
                for (; null !== container; ) {
                  nodeTag = getClosestInstanceFromNode(container);
                  if (null === nodeTag) return;
                  grandTag = nodeTag.tag;
                  if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                    targetInst$jscomp$0 = ancestorInst = nodeTag;
                    continue a;
                  }
                  container = container.parentNode;
                }
              }
              targetInst$jscomp$0 = targetInst$jscomp$0.return;
            }
          batchedUpdates$1(function() {
            var targetInst = ancestorInst, nativeEventTarget = getEventTarget2(nativeEvent), dispatchQueue = [];
            a: {
              var reactName = topLevelEventsToReactNames.get(domEventName);
              if (void 0 !== reactName) {
                var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
                switch (domEventName) {
                  case "keypress":
                    if (0 === getEventCharCode(nativeEvent)) break a;
                  case "keydown":
                  case "keyup":
                    SyntheticEventCtor = SyntheticKeyboardEvent;
                    break;
                  case "focusin":
                    reactEventType = "focus";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "focusout":
                    reactEventType = "blur";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "beforeblur":
                  case "afterblur":
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "click":
                    if (2 === nativeEvent.button) break a;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    SyntheticEventCtor = SyntheticMouseEvent;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    SyntheticEventCtor = SyntheticDragEvent;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    SyntheticEventCtor = SyntheticTouchEvent;
                    break;
                  case ANIMATION_END:
                  case ANIMATION_ITERATION:
                  case ANIMATION_START:
                    SyntheticEventCtor = SyntheticAnimationEvent;
                    break;
                  case TRANSITION_END:
                    SyntheticEventCtor = SyntheticTransitionEvent;
                    break;
                  case "scroll":
                  case "scrollend":
                    SyntheticEventCtor = SyntheticUIEvent;
                    break;
                  case "wheel":
                    SyntheticEventCtor = SyntheticWheelEvent;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    SyntheticEventCtor = SyntheticClipboardEvent;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    SyntheticEventCtor = SyntheticPointerEvent;
                    break;
                  case "toggle":
                  case "beforetoggle":
                    SyntheticEventCtor = SyntheticToggleEvent;
                }
                var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
                inCapturePhase = [];
                for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                  var _instance2 = instance;
                  lastHostComponent = _instance2.stateNode;
                  _instance2 = _instance2.tag;
                  5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(
                    createDispatchListener(
                      instance,
                      _instance2,
                      lastHostComponent
                    )
                  ));
                  if (accumulateTargetOnly) break;
                  instance = instance.return;
                }
                0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                  reactName,
                  reactEventType,
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: reactName,
                  listeners: inCapturePhase
                }));
              }
            }
            if (0 === (eventSystemFlags & 7)) {
              a: {
                reactName = "mouseover" === domEventName || "pointerover" === domEventName;
                SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
                if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                  break a;
                if (SyntheticEventCtor || reactName) {
                  reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                  if (SyntheticEventCtor) {
                    if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                      reactEventType = null;
                  } else SyntheticEventCtor = null, reactEventType = targetInst;
                  if (SyntheticEventCtor !== reactEventType) {
                    inCapturePhase = SyntheticMouseEvent;
                    _instance2 = "onMouseLeave";
                    reactEventName = "onMouseEnter";
                    instance = "mouse";
                    if ("pointerout" === domEventName || "pointerover" === domEventName)
                      inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                    accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                    lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                    reactName = new inCapturePhase(
                      _instance2,
                      instance + "leave",
                      SyntheticEventCtor,
                      nativeEvent,
                      nativeEventTarget
                    );
                    reactName.target = accumulateTargetOnly;
                    reactName.relatedTarget = lastHostComponent;
                    _instance2 = null;
                    getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                      reactEventName,
                      instance + "enter",
                      reactEventType,
                      nativeEvent,
                      nativeEventTarget
                    ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                    accumulateTargetOnly = _instance2;
                    if (SyntheticEventCtor && reactEventType)
                      b: {
                        inCapturePhase = SyntheticEventCtor;
                        reactEventName = reactEventType;
                        instance = 0;
                        for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                          instance++;
                        lastHostComponent = 0;
                        for (_instance2 = reactEventName; _instance2; _instance2 = getParent(_instance2))
                          lastHostComponent++;
                        for (; 0 < instance - lastHostComponent; )
                          inCapturePhase = getParent(inCapturePhase), instance--;
                        for (; 0 < lastHostComponent - instance; )
                          reactEventName = getParent(reactEventName), lastHostComponent--;
                        for (; instance--; ) {
                          if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                            break b;
                          inCapturePhase = getParent(inCapturePhase);
                          reactEventName = getParent(reactEventName);
                        }
                        inCapturePhase = null;
                      }
                    else inCapturePhase = null;
                    null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      reactName,
                      SyntheticEventCtor,
                      inCapturePhase,
                      false
                    );
                    null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      accumulateTargetOnly,
                      reactEventType,
                      inCapturePhase,
                      true
                    );
                  }
                }
              }
              a: {
                reactName = targetInst ? getNodeFromInstance(targetInst) : window;
                SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
                if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                  var getTargetInstFunc = getTargetInstForChangeEvent;
                else if (isTextInputElement(reactName))
                  if (isInputEventSupported)
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                  else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    var handleEventFunc = handleEventsForInputEventPolyfill;
                  }
                else
                  SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
                if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                  createAndAccumulateChangeEvent(
                    dispatchQueue,
                    getTargetInstFunc,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break a;
                }
                handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
                "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
              }
              handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
              switch (domEventName) {
                case "focusin":
                  if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                    activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                  break;
                case "focusout":
                  lastSelection = activeElementInst = activeElement = null;
                  break;
                case "mousedown":
                  mouseDown = true;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  mouseDown = false;
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break;
                case "selectionchange":
                  if (skipSelectionChangeEvent) break;
                case "keydown":
                case "keyup":
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
              }
              var fallbackData;
              if (canUseCompositionEvent)
                b: {
                  switch (domEventName) {
                    case "compositionstart":
                      var eventType = "onCompositionStart";
                      break b;
                    case "compositionend":
                      eventType = "onCompositionEnd";
                      break b;
                    case "compositionupdate":
                      eventType = "onCompositionUpdate";
                      break b;
                  }
                  eventType = void 0;
                }
              else
                isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
              eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(
                targetInst,
                eventType
              ), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
                eventType,
                domEventName,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: eventType,
                listeners: handleEventFunc
              }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
              if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
                eventType = accumulateTwoPhaseListeners(
                  targetInst,
                  "onBeforeInput"
                ), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent(
                  "onBeforeInput",
                  "beforeinput",
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: handleEventFunc,
                  listeners: eventType
                }), handleEventFunc.data = fallbackData);
              extractEvents$1(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );
            }
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
            var _instance3 = targetFiber, stateNode = _instance3.stateNode;
            _instance3 = _instance3.tag;
            5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ));
            if (3 === targetFiber.tag) return listeners;
            targetFiber = targetFiber.return;
          }
          return [];
        }
        function getParent(inst) {
          if (null === inst) return null;
          do
            inst = inst.return;
          while (inst && 5 !== inst.tag && 27 !== inst.tag);
          return inst ? inst : null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
            var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
            _instance4 = _instance4.tag;
            if (null !== alternate && alternate === common) break;
            5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
              createDispatchListener(target, stateNode, alternate)
            )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
              createDispatchListener(target, stateNode, alternate)
            )));
            target = target.return;
          }
          0 !== listeners.length && dispatchQueue.push({ event, listeners });
        }
        function validatePropertiesInDevelopment(type, props26) {
          validateProperties$2(type, props26);
          "input" !== type && "textarea" !== type && "select" !== type || null == props26 || null !== props26.value || didWarnValueNull || (didWarnValueNull = true, "select" === type && props26.multiple ? console.error(
            "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
            type
          ) : console.error(
            "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
            type
          ));
          var eventRegistry = {
            registrationNameDependencies,
            possibleRegistrationNames
          };
          isCustomElement(type) || "string" === typeof props26.is || warnUnknownProperties(type, props26, eventRegistry);
          props26.contentEditable && !props26.suppressContentEditableWarning && null != props26.children && console.error(
            "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
          );
        }
        function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
          serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
        }
        function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
          attributeNames.forEach(function(attributeName) {
            serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
          });
        }
        function warnForInvalidEventListener(registrationName, listener) {
          false === listener ? console.error(
            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
            registrationName,
            registrationName,
            registrationName
          ) : console.error(
            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
            registrationName,
            typeof listener
          );
        }
        function normalizeHTML(parent, html) {
          parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(
            parent.namespaceURI,
            parent.tagName
          ) : parent.ownerDocument.createElement(parent.tagName);
          parent.innerHTML = html;
          return parent.innerHTML;
        }
        function normalizeMarkupForTextOrAttribute(markup) {
          willCoercionThrow(markup) && (console.error(
            "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
            typeName(markup)
          ), testStringCoercion(markup));
          return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText) {
          clientText = normalizeMarkupForTextOrAttribute(clientText);
          return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
        }
        function noop$1() {
        }
        function setProp(domElement, tag, key, value, props26, prevValue) {
          switch (key) {
            case "children":
              if ("string" === typeof value)
                validateTextNesting(value, tag, false), "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value);
              else if ("number" === typeof value || "bigint" === typeof value)
                validateTextNesting("" + value, tag, false), "body" !== tag && setTextContent(domElement, "" + value);
              break;
            case "className":
              setValueForKnownAttribute(domElement, "class", value);
              break;
            case "tabIndex":
              setValueForKnownAttribute(domElement, "tabindex", value);
              break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height":
              setValueForKnownAttribute(domElement, key, value);
              break;
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "data":
              if ("object" !== tag) {
                setValueForKnownAttribute(domElement, "data", value);
                break;
              }
            case "src":
            case "href":
              if ("" === value && ("a" !== tag || "href" !== key)) {
                "src" === key ? console.error(
                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                ) : console.error(
                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                );
                domElement.removeAttribute(key);
                break;
              }
              if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "action":
            case "formAction":
              null != value && ("form" === tag ? "formAction" === key ? console.error(
                "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
              ) : "function" === typeof value && (null == props26.encType && null == props26.method || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
              )), null == props26.target || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
              ))) : "input" === tag || "button" === tag ? "action" === key ? console.error(
                "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
              ) : "input" !== tag || "submit" === props26.type || "image" === props26.type || didWarnFormActionType ? "button" !== tag || null == props26.type || "submit" === props26.type || didWarnFormActionType ? "function" === typeof value && (null == props26.name || didWarnFormActionName || (didWarnFormActionName = true, console.error(
                'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
              )), null == props26.formEncType && null == props26.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
              )), null == props26.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
              ))) : (didWarnFormActionType = true, console.error(
                'A button can only specify a formAction along with type="submit" or no type.'
              )) : (didWarnFormActionType = true, console.error(
                'An input can only specify a formAction along with type="submit" or type="image".'
              )) : "action" === key ? console.error(
                "You can only pass the action prop to <form>."
              ) : console.error(
                "You can only pass the formAction prop to <input> or <button>."
              ));
              if ("function" === typeof value) {
                domElement.setAttribute(
                  key,
                  "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
                );
                break;
              } else
                "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props26.name, props26, null), setProp(
                  domElement,
                  tag,
                  "formEncType",
                  props26.formEncType,
                  props26,
                  null
                ), setProp(
                  domElement,
                  tag,
                  "formMethod",
                  props26.formMethod,
                  props26,
                  null
                ), setProp(
                  domElement,
                  tag,
                  "formTarget",
                  props26.formTarget,
                  props26,
                  null
                )) : (setProp(
                  domElement,
                  tag,
                  "encType",
                  props26.encType,
                  props26,
                  null
                ), setProp(domElement, tag, "method", props26.method, props26, null), setProp(
                  domElement,
                  tag,
                  "target",
                  props26.target,
                  props26,
                  null
                )));
              if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props26.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "multiple":
              domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "muted":
              domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              break;
            case "autoFocus":
              break;
            case "xlinkHref":
              if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
                domElement.removeAttribute("xlink:href");
                break;
              }
              checkAttributeStringCoercion(value, key);
              key = sanitizeURL("" + value);
              domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
              break;
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
              null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
              break;
            case "inert":
              "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, console.error(
                "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                key
              ));
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
              value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
              break;
            case "capture":
            case "download":
              true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "cols":
            case "rows":
            case "size":
            case "span":
              null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "rowSpan":
            case "start":
              null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
              break;
            case "popover":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              setValueForAttribute(domElement, "popover", value);
              break;
            case "xlinkActuate":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:actuate",
                value
              );
              break;
            case "xlinkArcrole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:arcrole",
                value
              );
              break;
            case "xlinkRole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:role",
                value
              );
              break;
            case "xlinkShow":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:show",
                value
              );
              break;
            case "xlinkTitle":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:title",
                value
              );
              break;
            case "xlinkType":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:type",
                value
              );
              break;
            case "xmlBase":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:base",
                value
              );
              break;
            case "xmlLang":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:lang",
                value
              );
              break;
            case "xmlSpace":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:space",
                value
              );
              break;
            case "is":
              null != prevValue && console.error(
                'Cannot update the "is" prop after it has been initialized.'
              );
              setValueForAttribute(domElement, "is", value);
              break;
            case "innerText":
            case "textContent":
              break;
            case "popoverTarget":
              didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = true, console.error(
                "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
                value
              ));
            default:
              !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
          }
        }
        function setPropOnCustomElement(domElement, tag, key, value, props26, prevValue) {
          switch (key) {
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props26.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "children":
              "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML":
            case "ref":
              break;
            case "innerText":
            case "textContent":
              break;
            default:
              if (registrationNameDependencies.hasOwnProperty(key))
                null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
              else
                a: {
                  if ("o" === key[0] && "n" === key[1] && (props26 = key.endsWith("Capture"), tag = key.slice(2, props26 ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props26), "function" === typeof value)) {
                    "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                    domElement.addEventListener(tag, value, props26);
                    break a;
                  }
                  key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
                }
          }
        }
        function setInitialProperties(domElement, tag, props26) {
          validatePropertiesInDevelopment(tag, props26);
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "img":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              var hasSrc = false, hasSrcSet = false, propKey;
              for (propKey in props26)
                if (props26.hasOwnProperty(propKey)) {
                  var propValue = props26[propKey];
                  if (null != propValue)
                    switch (propKey) {
                      case "src":
                        hasSrc = true;
                        break;
                      case "srcSet":
                        hasSrcSet = true;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      default:
                        setProp(domElement, tag, propKey, propValue, props26, null);
                    }
                }
              hasSrcSet && setProp(domElement, tag, "srcSet", props26.srcSet, props26, null);
              hasSrc && setProp(domElement, tag, "src", props26.src, props26, null);
              return;
            case "input":
              checkControlledValueProps("input", props26);
              listenToNonDelegatedEvent("invalid", domElement);
              var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
              for (hasSrc in props26)
                if (props26.hasOwnProperty(hasSrc)) {
                  var _propValue = props26[hasSrc];
                  if (null != _propValue)
                    switch (hasSrc) {
                      case "name":
                        hasSrcSet = _propValue;
                        break;
                      case "type":
                        propValue = _propValue;
                        break;
                      case "checked":
                        checked = _propValue;
                        break;
                      case "defaultChecked":
                        defaultChecked = _propValue;
                        break;
                      case "value":
                        propKey = _propValue;
                        break;
                      case "defaultValue":
                        defaultValue = _propValue;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        if (null != _propValue)
                          throw Error(
                            tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                          );
                        break;
                      default:
                        setProp(domElement, tag, hasSrc, _propValue, props26, null);
                    }
                }
              validateInputProps(domElement, props26);
              initInput(
                domElement,
                propKey,
                defaultValue,
                checked,
                defaultChecked,
                propValue,
                hasSrcSet,
                false
              );
              track(domElement);
              return;
            case "select":
              checkControlledValueProps("select", props26);
              listenToNonDelegatedEvent("invalid", domElement);
              hasSrc = propValue = propKey = null;
              for (hasSrcSet in props26)
                if (props26.hasOwnProperty(hasSrcSet) && (defaultValue = props26[hasSrcSet], null != defaultValue))
                  switch (hasSrcSet) {
                    case "value":
                      propKey = defaultValue;
                      break;
                    case "defaultValue":
                      propValue = defaultValue;
                      break;
                    case "multiple":
                      hasSrc = defaultValue;
                    default:
                      setProp(
                        domElement,
                        tag,
                        hasSrcSet,
                        defaultValue,
                        props26,
                        null
                      );
                  }
              validateSelectProps(domElement, props26);
              tag = propKey;
              props26 = propValue;
              domElement.multiple = !!hasSrc;
              null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props26 && updateOptions(domElement, !!hasSrc, props26, true);
              return;
            case "textarea":
              checkControlledValueProps("textarea", props26);
              listenToNonDelegatedEvent("invalid", domElement);
              propKey = hasSrcSet = hasSrc = null;
              for (propValue in props26)
                if (props26.hasOwnProperty(propValue) && (defaultValue = props26[propValue], null != defaultValue))
                  switch (propValue) {
                    case "value":
                      hasSrc = defaultValue;
                      break;
                    case "defaultValue":
                      hasSrcSet = defaultValue;
                      break;
                    case "children":
                      propKey = defaultValue;
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != defaultValue)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        propValue,
                        defaultValue,
                        props26,
                        null
                      );
                  }
              validateTextareaProps(domElement, props26);
              initTextarea(domElement, hasSrc, hasSrcSet, propKey);
              track(domElement);
              return;
            case "option":
              validateOptionProps(domElement, props26);
              for (checked in props26)
                if (props26.hasOwnProperty(checked) && (hasSrc = props26[checked], null != hasSrc))
                  switch (checked) {
                    case "selected":
                      domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                      break;
                    default:
                      setProp(domElement, tag, checked, hasSrc, props26, null);
                  }
              return;
            case "dialog":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
                listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
              break;
            case "image":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "embed":
            case "source":
            case "link":
              listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem":
              for (defaultChecked in props26)
                if (props26.hasOwnProperty(defaultChecked) && (hasSrc = props26[defaultChecked], null != hasSrc))
                  switch (defaultChecked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    default:
                      setProp(domElement, tag, defaultChecked, hasSrc, props26, null);
                  }
              return;
            default:
              if (isCustomElement(tag)) {
                for (_propValue in props26)
                  props26.hasOwnProperty(_propValue) && (hasSrc = props26[_propValue], void 0 !== hasSrc && setPropOnCustomElement(
                    domElement,
                    tag,
                    _propValue,
                    hasSrc,
                    props26,
                    void 0
                  ));
                return;
              }
          }
          for (defaultValue in props26)
            props26.hasOwnProperty(defaultValue) && (hasSrc = props26[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props26, null));
        }
        function updateProperties(domElement, tag, lastProps, nextProps) {
          validatePropertiesInDevelopment(tag, nextProps);
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "input":
              var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
              for (propKey in lastProps) {
                var lastProp = lastProps[propKey];
                if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                  switch (propKey) {
                    case "checked":
                      break;
                    case "value":
                      break;
                    case "defaultValue":
                      lastDefaultValue = lastProp;
                    default:
                      nextProps.hasOwnProperty(propKey) || setProp(
                        domElement,
                        tag,
                        propKey,
                        null,
                        nextProps,
                        lastProp
                      );
                  }
              }
              for (var _propKey8 in nextProps) {
                var propKey = nextProps[_propKey8];
                lastProp = lastProps[_propKey8];
                if (nextProps.hasOwnProperty(_propKey8) && (null != propKey || null != lastProp))
                  switch (_propKey8) {
                    case "type":
                      type = propKey;
                      break;
                    case "name":
                      name = propKey;
                      break;
                    case "checked":
                      checked = propKey;
                      break;
                    case "defaultChecked":
                      defaultChecked = propKey;
                      break;
                    case "value":
                      value = propKey;
                      break;
                    case "defaultValue":
                      defaultValue = propKey;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propKey)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      propKey !== lastProp && setProp(
                        domElement,
                        tag,
                        _propKey8,
                        propKey,
                        nextProps,
                        lastProp
                      );
                  }
              }
              tag = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
              nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
              tag || !nextProps || didWarnUncontrolledToControlled || (console.error(
                "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnUncontrolledToControlled = true);
              !tag || nextProps || didWarnControlledToUncontrolled || (console.error(
                "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnControlledToUncontrolled = true);
              updateInput(
                domElement,
                value,
                defaultValue,
                lastDefaultValue,
                checked,
                defaultChecked,
                type,
                name
              );
              return;
            case "select":
              propKey = value = defaultValue = _propKey8 = null;
              for (type in lastProps)
                if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                  switch (type) {
                    case "value":
                      break;
                    case "multiple":
                      propKey = lastDefaultValue;
                    default:
                      nextProps.hasOwnProperty(type) || setProp(
                        domElement,
                        tag,
                        type,
                        null,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              for (name in nextProps)
                if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                  switch (name) {
                    case "value":
                      _propKey8 = type;
                      break;
                    case "defaultValue":
                      defaultValue = type;
                      break;
                    case "multiple":
                      value = type;
                    default:
                      type !== lastDefaultValue && setProp(
                        domElement,
                        tag,
                        name,
                        type,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              nextProps = defaultValue;
              tag = value;
              lastProps = propKey;
              null != _propKey8 ? updateOptions(domElement, !!tag, _propKey8, false) : !!lastProps !== !!tag && (null != nextProps ? updateOptions(domElement, !!tag, nextProps, true) : updateOptions(domElement, !!tag, tag ? [] : "", false));
              return;
            case "textarea":
              propKey = _propKey8 = null;
              for (defaultValue in lastProps)
                if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                  switch (defaultValue) {
                    case "value":
                      break;
                    case "children":
                      break;
                    default:
                      setProp(domElement, tag, defaultValue, null, nextProps, name);
                  }
              for (value in nextProps)
                if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                  switch (value) {
                    case "value":
                      _propKey8 = name;
                      break;
                    case "defaultValue":
                      propKey = name;
                      break;
                    case "children":
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != name)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      name !== type && setProp(domElement, tag, value, name, nextProps, type);
                  }
              updateTextarea(domElement, _propKey8, propKey);
              return;
            case "option":
              for (var _propKey13 in lastProps)
                if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey13))
                  switch (_propKey13) {
                    case "selected":
                      domElement.selected = false;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        _propKey13,
                        null,
                        nextProps,
                        _propKey8
                      );
                  }
              for (lastDefaultValue in nextProps)
                if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (lastDefaultValue) {
                    case "selected":
                      domElement.selected = _propKey8 && "function" !== typeof _propKey8 && "symbol" !== typeof _propKey8;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        lastDefaultValue,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            case "img":
            case "link":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
            case "menuitem":
              for (var _propKey15 in lastProps)
                _propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey15) && setProp(
                  domElement,
                  tag,
                  _propKey15,
                  null,
                  nextProps,
                  _propKey8
                );
              for (checked in nextProps)
                if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (checked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != _propKey8)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        checked,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            default:
              if (isCustomElement(tag)) {
                for (var _propKey17 in lastProps)
                  _propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && void 0 !== _propKey8 && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(
                    domElement,
                    tag,
                    _propKey17,
                    void 0,
                    nextProps,
                    _propKey8
                  );
                for (defaultChecked in nextProps)
                  _propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || void 0 === _propKey8 && void 0 === propKey || setPropOnCustomElement(
                    domElement,
                    tag,
                    defaultChecked,
                    _propKey8,
                    nextProps,
                    propKey
                  );
                return;
              }
          }
          for (var _propKey19 in lastProps)
            _propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
          for (lastProp in nextProps)
            _propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || null == _propKey8 && null == propKey || setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
        }
        function getPropNameFromAttributeName(attrName) {
          switch (attrName) {
            case "class":
              return "className";
            case "for":
              return "htmlFor";
            default:
              return attrName;
          }
        }
        function getStylesObjectFromElement(domElement) {
          var serverValueInObjectForm = {};
          domElement = domElement.style;
          for (var i2 = 0; i2 < domElement.length; i2++) {
            var styleName = domElement[i2];
            serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
          }
          return serverValueInObjectForm;
        }
        function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
          if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
            console.error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          else {
            var clientValue;
            var delimiter2 = clientValue = "", styleName;
            for (styleName in value$jscomp$0)
              if (value$jscomp$0.hasOwnProperty(styleName)) {
                var value = value$jscomp$0[styleName];
                null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter2 + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter2 + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter2 + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter2 = ";");
              }
            clientValue = clientValue || null;
            value$jscomp$0 = domElement.getAttribute("style");
            value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
          }
        }
        function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
            }
            if (!value) return;
          } else
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (value) return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
              default:
                if (isNaN(value)) return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function diffHydratedProperties(domElement, tag, props26, hostContext) {
          for (var serverDifferences = {}, extraAttributes = /* @__PURE__ */ new Set(), attributes = domElement.attributes, i2 = 0; i2 < attributes.length; i2++)
            switch (attributes[i2].name.toLowerCase()) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributes.add(attributes[i2].name);
            }
          if (isCustomElement(tag))
            for (var propKey in props26) {
              if (props26.hasOwnProperty(propKey)) {
                var value = props26[propKey];
                if (null != value) {
                  if (registrationNameDependencies.hasOwnProperty(propKey))
                    "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                  else if (true !== props26.suppressHydrationWarning)
                    switch (propKey) {
                      case "children":
                        "string" !== typeof value && "number" !== typeof value || warnForPropDifference(
                          "children",
                          domElement.textContent,
                          value,
                          serverDifferences
                        );
                        continue;
                      case "suppressContentEditableWarning":
                      case "suppressHydrationWarning":
                      case "defaultValue":
                      case "defaultChecked":
                      case "innerHTML":
                      case "ref":
                        continue;
                      case "dangerouslySetInnerHTML":
                        attributes = domElement.innerHTML;
                        value = value ? value.__html : void 0;
                        null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        ));
                        continue;
                      case "style":
                        extraAttributes.delete(propKey);
                        diffHydratedStyles(domElement, value, serverDifferences);
                        continue;
                      case "offsetParent":
                      case "offsetTop":
                      case "offsetLeft":
                      case "offsetWidth":
                      case "offsetHeight":
                      case "isContentEditable":
                      case "outerText":
                      case "outerHTML":
                        extraAttributes.delete(propKey.toLowerCase());
                        console.error(
                          "Assignment to read-only property will result in a no-op: `%s`",
                          propKey
                        );
                        continue;
                      case "className":
                        extraAttributes.delete("class");
                        attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          "class",
                          value
                        );
                        warnForPropDifference(
                          "className",
                          attributes,
                          value,
                          serverDifferences
                        );
                        continue;
                      default:
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          propKey,
                          value
                        ), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        );
                    }
                }
              }
            }
          else
            for (value in props26)
              if (props26.hasOwnProperty(value) && (propKey = props26[value], null != propKey)) {
                if (registrationNameDependencies.hasOwnProperty(value))
                  "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
                else if (true !== props26.suppressHydrationWarning)
                  switch (value) {
                    case "children":
                      "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference(
                        "children",
                        domElement.textContent,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "value":
                    case "checked":
                    case "selected":
                    case "defaultValue":
                    case "defaultChecked":
                    case "innerHTML":
                    case "ref":
                      continue;
                    case "dangerouslySetInnerHTML":
                      attributes = domElement.innerHTML;
                      propKey = propKey ? propKey.__html : void 0;
                      null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                      continue;
                    case "className":
                      hydrateAttribute(
                        domElement,
                        value,
                        "class",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "tabIndex":
                      hydrateAttribute(
                        domElement,
                        value,
                        "tabindex",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "style":
                      extraAttributes.delete(value);
                      diffHydratedStyles(domElement, propKey, serverDifferences);
                      continue;
                    case "multiple":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.multiple,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "muted":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.muted,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "autoFocus":
                      extraAttributes.delete("autofocus");
                      warnForPropDifference(
                        value,
                        domElement.autofocus,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "data":
                      if ("object" !== tag) {
                        extraAttributes.delete(value);
                        attributes = domElement.getAttribute("data");
                        warnForPropDifference(
                          value,
                          attributes,
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                    case "src":
                    case "href":
                      if (!("" !== propKey || "a" === tag && "href" === value || "object" === tag && "data" === value)) {
                        "src" === value ? console.error(
                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        ) : console.error(
                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "action":
                    case "formAction":
                      attributes = domElement.getAttribute(value);
                      if ("function" === typeof propKey) {
                        extraAttributes.delete(value.toLowerCase());
                        "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                        continue;
                      } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                        extraAttributes.delete(value.toLowerCase());
                        warnForPropDifference(
                          value,
                          "function",
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkHref":
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        "xlink:href",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "contentEditable":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "contenteditable",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "spellCheck":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "spellcheck",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "draggable":
                    case "autoReverse":
                    case "externalResourcesRequired":
                    case "focusable":
                    case "preserveAlpha":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "capture":
                    case "download":
                      a: {
                        i2 = domElement;
                        var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i2 = i2.getAttribute(attributeName);
                        if (null === i2)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                              break a;
                            default:
                              if (false === propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                              break;
                            case "boolean":
                              if (true === propKey && "" === i2) break a;
                              break;
                            default:
                              if (checkAttributeStringCoercion(propKey, attributes), i2 === "" + propKey)
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i2,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "cols":
                    case "rows":
                    case "size":
                    case "span":
                      a: {
                        i2 = domElement;
                        attributeName = attributes = value;
                        serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i2 = i2.getAttribute(attributeName);
                        if (null === i2)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                            case "boolean":
                              break a;
                            default:
                              if (isNaN(propKey) || 1 > propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                            case "boolean":
                              break;
                            default:
                              if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i2 === "" + propKey))
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i2,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "rowSpan":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        "rowspan",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "start":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xHeight":
                      hydrateAttribute(
                        domElement,
                        value,
                        "x-height",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkActuate":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:actuate",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkArcrole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:arcrole",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkRole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:role",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkShow":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:show",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkTitle":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:title",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkType":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:type",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlBase":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:base",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlLang":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:lang",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlSpace":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:space",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "inert":
                      "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, console.error(
                        "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                        value
                      ));
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    default:
                      if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                        i2 = getAttributeAlias(value);
                        attributes = false;
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(i2.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(
                          attributeName
                        ) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i2));
                        a: if (attributeName = domElement, serverDifferences$jscomp$0 = i2, i2 = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                          if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                            attributeName = attributeName.getAttribute(
                              serverDifferences$jscomp$0
                            ), checkAttributeStringCoercion(
                              i2,
                              serverDifferences$jscomp$0
                            ), i2 = attributeName === "" + i2 ? i2 : attributeName;
                          else {
                            switch (typeof i2) {
                              case "function":
                              case "symbol":
                                break a;
                              case "boolean":
                                if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName)
                                  break a;
                            }
                            i2 = void 0 === i2 ? void 0 : null;
                          }
                        else i2 = void 0;
                        attributes || warnForPropDifference(
                          value,
                          i2,
                          propKey,
                          serverDifferences
                        );
                      }
                  }
              }
          0 < extraAttributes.size && true !== props26.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
          return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
        }
        function propNamesListJoin(list, combinator) {
          switch (list.length) {
            case 0:
              return "";
            case 1:
              return list[0];
            case 2:
              return list[0] + " " + combinator + " " + list[1];
            default:
              return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function getOwnHostContext(namespaceURI) {
          switch (namespaceURI) {
            case SVG_NAMESPACE:
              return HostContextNamespaceSvg;
            case MATH_NAMESPACE:
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        }
        function getChildHostContextProd(parentNamespace, type) {
          if (parentNamespace === HostContextNamespaceNone)
            switch (type) {
              case "svg":
                return HostContextNamespaceSvg;
              case "math":
                return HostContextNamespaceMath;
              default:
                return HostContextNamespaceNone;
            }
          return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
        }
        function shouldSetTextContent(type, props26) {
          return "textarea" === type || "noscript" === type || "string" === typeof props26.children || "number" === typeof props26.children || "bigint" === typeof props26.children || "object" === typeof props26.dangerouslySetInnerHTML && null !== props26.dangerouslySetInnerHTML && null != props26.dangerouslySetInnerHTML.__html;
        }
        function shouldAttemptEagerTransition() {
          var event = window.event;
          if (event && "popstate" === event.type) {
            if (event === currentPopstateTransitionEvent) return false;
            currentPopstateTransitionEvent = event;
            return true;
          }
          currentPopstateTransitionEvent = null;
          return false;
        }
        function handleErrorInNextTick(error) {
          setTimeout(function() {
            throw error;
          });
        }
        function commitMount(domElement, type, newProps) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              newProps.autoFocus && domElement.focus();
              break;
            case "img":
              newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
          }
        }
        function commitUpdate(domElement, type, oldProps, newProps) {
          updateProperties(domElement, type, oldProps, newProps);
          domElement[internalPropsKey] = newProps;
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function isSingletonScope(type) {
          return "head" === type;
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          (9 === container.nodeType ? container.body : "HTML" === container.nodeName ? container.ownerDocument.body : container).removeChild(child);
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node2 = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
          do {
            var nextNode = node2.nextSibling;
            parentInstance.removeChild(node2);
            if (nextNode && 8 === nextNode.nodeType)
              if (node2 = nextNode.data, node2 === SUSPENSE_END_DATA) {
                if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                  node2 = possiblePreambleContribution;
                  var ownerDocument = parentInstance.ownerDocument;
                  node2 & PREAMBLE_CONTRIBUTION_HTML && releaseSingletonInstance(ownerDocument.documentElement);
                  node2 & PREAMBLE_CONTRIBUTION_BODY && releaseSingletonInstance(ownerDocument.body);
                  if (node2 & PREAMBLE_CONTRIBUTION_HEAD)
                    for (node2 = ownerDocument.head, releaseSingletonInstance(node2), ownerDocument = node2.firstChild; ownerDocument; ) {
                      var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                      ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node2.removeChild(ownerDocument);
                      ownerDocument = nextNode$jscomp$0;
                    }
                }
                if (0 === depth) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                }
                depth--;
              } else
                node2 === SUSPENSE_START_DATA || node2 === SUSPENSE_PENDING_START_DATA || node2 === SUSPENSE_FALLBACK_START_DATA ? depth++ : possiblePreambleContribution = node2.charCodeAt(0) - 48;
            else possiblePreambleContribution = 0;
            node2 = nextNode;
          } while (node2);
          retryIfBlockedOn(suspenseInstance);
        }
        function hideInstance(instance) {
          instance = instance.style;
          "function" === typeof instance.setProperty ? instance.setProperty("display", "none", "important") : instance.display = "none";
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props26) {
          props26 = props26[STYLE];
          props26 = void 0 !== props26 && null !== props26 && props26.hasOwnProperty("display") ? props26.display : null;
          instance.style.display = null == props26 || "boolean" === typeof props26 ? "" : ("" + props26).trim();
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainerSparingly(container) {
          var nextNode = container.firstChild;
          nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
          for (; nextNode; ) {
            var node2 = nextNode;
            nextNode = nextNode.nextSibling;
            switch (node2.nodeName) {
              case "HTML":
              case "HEAD":
              case "BODY":
                clearContainerSparingly(node2);
                detachDeletedInstance(node2);
                continue;
              case "SCRIPT":
              case "STYLE":
                continue;
              case "LINK":
                if ("stylesheet" === node2.rel.toLowerCase()) continue;
            }
            container.removeChild(node2);
          }
        }
        function canHydrateInstance(instance, type, props26, inRootOrSingleton) {
          for (; 1 === instance.nodeType; ) {
            var anyProps = props26;
            if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
              if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
                break;
            } else if (!inRootOrSingleton)
              if ("input" === type && "hidden" === instance.type) {
                checkAttributeStringCoercion(anyProps.name, "name");
                var name = null == anyProps.name ? null : "" + anyProps.name;
                if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                  return instance;
              } else return instance;
            else if (!instance[internalHoistableMarker])
              switch (type) {
                case "meta":
                  if (!instance.hasAttribute("itemprop")) break;
                  return instance;
                case "link":
                  name = instance.getAttribute("rel");
                  if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                    break;
                  else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                    break;
                  return instance;
                case "style":
                  if (instance.hasAttribute("data-precedence")) break;
                  return instance;
                case "script":
                  name = instance.getAttribute("src");
                  if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                    break;
                  return instance;
                default:
                  return instance;
              }
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) break;
          }
          return null;
        }
        function canHydrateTextInstance(instance, text, inRootOrSingleton) {
          if ("" === text) return null;
          for (; 3 !== instance.nodeType; ) {
            if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
              return null;
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) return null;
          }
          return instance;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA || instance.data === SUSPENSE_PENDING_START_DATA && instance.ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE;
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          var ownerDocument = instance.ownerDocument;
          if (instance.data !== SUSPENSE_PENDING_START_DATA || ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE)
            callback();
          else {
            var listener = function() {
              callback();
              ownerDocument.removeEventListener("DOMContentLoaded", listener);
            };
            ownerDocument.addEventListener("DOMContentLoaded", listener);
            instance._reactRetry = listener;
          }
        }
        function getNextHydratable(node2) {
          for (; null != node2; node2 = node2.nextSibling) {
            var nodeType = node2.nodeType;
            if (1 === nodeType || 3 === nodeType) break;
            if (8 === nodeType) {
              nodeType = node2.data;
              if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
                break;
              if (nodeType === SUSPENSE_END_DATA) return null;
            }
          }
          return node2;
        }
        function describeHydratableInstanceForDevWarnings(instance) {
          if (1 === instance.nodeType) {
            for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i2 = 0; i2 < attributes.length; i2++) {
              var attr = attributes[i2];
              serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
            }
            return { type: JSCompiler_temp_const, props: serverDifferences };
          }
          return 8 === instance.nodeType ? { type: "Suspense", props: {} } : instance.nodeValue;
        }
        function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
          return null === parentProps || true !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          suspenseInstance = suspenseInstance.nextSibling;
          for (var depth = 0; suspenseInstance; ) {
            if (8 === suspenseInstance.nodeType) {
              var data2 = suspenseInstance.data;
              if (data2 === SUSPENSE_END_DATA) {
                if (0 === depth)
                  return getNextHydratable(suspenseInstance.nextSibling);
                depth--;
              } else
                data2 !== SUSPENSE_START_DATA && data2 !== SUSPENSE_FALLBACK_START_DATA && data2 !== SUSPENSE_PENDING_START_DATA || depth++;
            }
            suspenseInstance = suspenseInstance.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          targetInstance = targetInstance.previousSibling;
          for (var depth = 0; targetInstance; ) {
            if (8 === targetInstance.nodeType) {
              var data2 = targetInstance.data;
              if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                if (0 === depth) return targetInstance;
                depth--;
              } else data2 === SUSPENSE_END_DATA && depth++;
            }
            targetInstance = targetInstance.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function resolveSingletonInstance(type, props26, rootContainerInstance, hostContext, validateDOMNestingDev) {
          validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
          props26 = getOwnerDocumentFromRootContainer(rootContainerInstance);
          switch (type) {
            case "html":
              type = props26.documentElement;
              if (!type)
                throw Error(
                  "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "head":
              type = props26.head;
              if (!type)
                throw Error(
                  "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "body":
              type = props26.body;
              if (!type)
                throw Error(
                  "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            default:
              throw Error(
                "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
        }
        function acquireSingletonInstance(type, props26, instance, internalInstanceHandle) {
          if (!instance[internalContainerInstanceKey] && getInstanceFromNode(instance)) {
            var tagName = instance.tagName.toLowerCase();
            console.error(
              "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
              tagName,
              tagName,
              tagName
            );
          }
          switch (type) {
            case "html":
            case "head":
            case "body":
              break;
            default:
              console.error(
                "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
          for (tagName = instance.attributes; tagName.length; )
            instance.removeAttributeNode(tagName[0]);
          setInitialProperties(instance, type, props26);
          instance[internalInstanceKey] = internalInstanceHandle;
          instance[internalPropsKey] = props26;
        }
        function releaseSingletonInstance(instance) {
          for (var attributes = instance.attributes; attributes.length; )
            instance.removeAttributeNode(attributes[0]);
          detachDeletedInstance(instance);
        }
        function getHoistableRoot(container) {
          return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
        }
        function preconnectAs(rel, href, crossOrigin) {
          var ownerDocument = globalDocument;
          if (ownerDocument && "string" === typeof href && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
            limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
            "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
            preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
          }
        }
        function getResource(type, currentProps, pendingProps, currentResource) {
          var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
          if (!resourceRoot)
            throw Error(
              '"resourceRoot" was expected to exist. This is a bug in React.'
            );
          switch (type) {
            case "meta":
            case "title":
              return null;
            case "style":
              return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "style",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            case "link":
              if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
                type = getStyleKey(pendingProps.href);
                var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
                if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                  type: "stylesheet",
                  instance: null,
                  count: 0,
                  state: { loading: NotLoaded, preload: null }
                }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(
                  getStylesheetSelectorFromKey(type)
                )) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                  var preloadProps = {
                    rel: "preload",
                    as: "style",
                    href: pendingProps.href,
                    crossOrigin: pendingProps.crossOrigin,
                    integrity: pendingProps.integrity,
                    media: pendingProps.media,
                    hrefLang: pendingProps.hrefLang,
                    referrerPolicy: pendingProps.referrerPolicy
                  };
                  preloadPropsMap.set(type, preloadProps);
                  _styles || preloadStylesheet(
                    resourceRoot,
                    type,
                    preloadProps,
                    _resource.state
                  );
                }
                if (currentProps && null === currentResource)
                  throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                    "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                  );
                return _resource;
              }
              if (currentProps && null !== currentResource)
                throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                  "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                );
              return null;
            case "script":
              return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "script",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            default:
              throw Error(
                'getResource encountered a type it did not expect: "' + type + '". this is a bug in React.'
              );
          }
        }
        function describeLinkForResourceErrorDEV(props26) {
          var describedProps = 0, description = "<link";
          "string" === typeof props26.rel ? (describedProps++, description += ' rel="' + props26.rel + '"') : hasOwnProperty.call(props26, "rel") && (describedProps++, description += ' rel="' + (null === props26.rel ? "null" : "invalid type " + typeof props26.rel) + '"');
          "string" === typeof props26.href ? (describedProps++, description += ' href="' + props26.href + '"') : hasOwnProperty.call(props26, "href") && (describedProps++, description += ' href="' + (null === props26.href ? "null" : "invalid type " + typeof props26.href) + '"');
          "string" === typeof props26.precedence ? (describedProps++, description += ' precedence="' + props26.precedence + '"') : hasOwnProperty.call(props26, "precedence") && (describedProps++, description += " precedence={" + (null === props26.precedence ? "null" : "invalid type " + typeof props26.precedence) + "}");
          Object.getOwnPropertyNames(props26).length > describedProps && (description += " ...");
          return description + " />";
        }
        function getStyleKey(href) {
          return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
        }
        function getStylesheetSelectorFromKey(key) {
          return 'link[rel="stylesheet"][' + key + "]";
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign2({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function preloadStylesheet(ownerDocument, key, preloadProps, state2) {
          ownerDocument.querySelector(
            'link[rel="preload"][as="style"][' + key + "]"
          ) ? state2.loading = Loaded : (key = ownerDocument.createElement("link"), state2.preload = key, key.addEventListener("load", function() {
            return state2.loading |= Loaded;
          }), key.addEventListener("error", function() {
            return state2.loading |= Errored;
          }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
        }
        function getScriptKey(src) {
          return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
        }
        function getScriptSelectorFromKey(key) {
          return "script[async]" + key;
        }
        function acquireResource(hoistableRoot, resource, props26) {
          resource.count++;
          if (null === resource.instance)
            switch (resource.type) {
              case "style":
                var instance = hoistableRoot.querySelector(
                  'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props26.href) + '"]'
                );
                if (instance)
                  return resource.instance = instance, markNodeAsHoistable(instance), instance;
                var styleProps = assign2({}, props26, {
                  "data-href": props26.href,
                  "data-precedence": props26.precedence,
                  href: null,
                  precedence: null
                });
                instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
                markNodeAsHoistable(instance);
                setInitialProperties(instance, "style", styleProps);
                insertStylesheet(instance, props26.precedence, hoistableRoot);
                return resource.instance = instance;
              case "stylesheet":
                styleProps = getStyleKey(props26.href);
                var _instance = hoistableRoot.querySelector(
                  getStylesheetSelectorFromKey(styleProps)
                );
                if (_instance)
                  return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
                instance = stylesheetPropsFromRawProps(props26);
                (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
                _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
                markNodeAsHoistable(_instance);
                var linkInstance = _instance;
                linkInstance._p = new Promise(function(resolve, reject) {
                  linkInstance.onload = resolve;
                  linkInstance.onerror = reject;
                });
                setInitialProperties(_instance, "link", instance);
                resource.state.loading |= Inserted;
                insertStylesheet(_instance, props26.precedence, hoistableRoot);
                return resource.instance = _instance;
              case "script":
                _instance = getScriptKey(props26.src);
                if (styleProps = hoistableRoot.querySelector(
                  getScriptSelectorFromKey(_instance)
                ))
                  return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
                instance = props26;
                if (styleProps = preloadPropsMap.get(_instance))
                  instance = assign2({}, props26), adoptPreloadPropsForScript(instance, styleProps);
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                styleProps = hoistableRoot.createElement("script");
                markNodeAsHoistable(styleProps);
                setInitialProperties(styleProps, "link", instance);
                hoistableRoot.head.appendChild(styleProps);
                return resource.instance = styleProps;
              case "void":
                return null;
              default:
                throw Error(
                  'acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.'
                );
            }
          else
            "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props26.precedence, hoistableRoot));
          return resource.instance;
        }
        function insertStylesheet(instance, precedence, root2) {
          for (var nodes = root2.querySelectorAll(
            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
          ), last2 = nodes.length ? nodes[nodes.length - 1] : null, prior = last2, i2 = 0; i2 < nodes.length; i2++) {
            var node2 = nodes[i2];
            if (node2.dataset.precedence === precedence) prior = node2;
            else if (prior !== last2) break;
          }
          prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
        }
        function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
          null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
          null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
          null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
        }
        function adoptPreloadPropsForScript(scriptProps, preloadProps) {
          null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
          null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
          null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
        }
        function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
          if (null === tagCaches) {
            var cache2 = /* @__PURE__ */ new Map();
            var caches = tagCaches = /* @__PURE__ */ new Map();
            caches.set(ownerDocument, cache2);
          } else
            caches = tagCaches, cache2 = caches.get(ownerDocument), cache2 || (cache2 = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache2));
          if (cache2.has(type)) return cache2;
          cache2.set(type, null);
          ownerDocument = ownerDocument.getElementsByTagName(type);
          for (caches = 0; caches < ownerDocument.length; caches++) {
            var node2 = ownerDocument[caches];
            if (!(node2[internalHoistableMarker] || node2[internalInstanceKey] || "link" === type && "stylesheet" === node2.getAttribute("rel")) && node2.namespaceURI !== SVG_NAMESPACE) {
              var nodeKey = node2.getAttribute(keyAttribute) || "";
              nodeKey = type + nodeKey;
              var existing = cache2.get(nodeKey);
              existing ? existing.push(node2) : cache2.set(nodeKey, [node2]);
            }
          }
          return cache2;
        }
        function mountHoistable(hoistableRoot, type, instance) {
          hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
          hoistableRoot.head.insertBefore(
            instance,
            "title" === type ? hoistableRoot.querySelector("head > title") : null
          );
        }
        function isHostHoistableType(type, props26, hostContext) {
          var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
          if (hostContext.context === HostContextNamespaceSvg || null != props26.itemProp)
            return !outsideHostContainerContext || null == props26.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || console.error(
              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
              type,
              type
            ), false;
          switch (type) {
            case "meta":
            case "title":
              return true;
            case "style":
              if ("string" !== typeof props26.precedence || "string" !== typeof props26.href || "" === props26.href) {
                outsideHostContainerContext && console.error(
                  'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
                );
                break;
              }
              return true;
            case "link":
              if ("string" !== typeof props26.rel || "string" !== typeof props26.href || "" === props26.href || props26.onLoad || props26.onError) {
                if ("stylesheet" === props26.rel && "string" === typeof props26.precedence) {
                  type = props26.href;
                  var onError = props26.onError, disabled = props26.disabled;
                  hostContext = [];
                  props26.onLoad && hostContext.push("`onLoad`");
                  onError && hostContext.push("`onError`");
                  null != disabled && hostContext.push("`disabled`");
                  onError = propNamesListJoin(hostContext, "and");
                  onError += 1 === hostContext.length ? " prop" : " props";
                  disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                  hostContext.length && console.error(
                    'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                    type,
                    disabled,
                    onError
                  );
                }
                outsideHostContainerContext && ("string" !== typeof props26.rel || "string" !== typeof props26.href || "" === props26.href ? console.error(
                  "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
                ) : (props26.onError || props26.onLoad) && console.error(
                  "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ));
                break;
              }
              switch (props26.rel) {
                case "stylesheet":
                  return type = props26.precedence, props26 = props26.disabled, "string" !== typeof type && outsideHostContainerContext && console.error(
                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                  ), "string" === typeof type && null == props26;
                default:
                  return true;
              }
            case "script":
              type = props26.async && "function" !== typeof props26.async && "symbol" !== typeof props26.async;
              if (!type || props26.onLoad || props26.onError || !props26.src || "string" !== typeof props26.src) {
                outsideHostContainerContext && (type ? props26.onLoad || props26.onError ? console.error(
                  "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
                ));
                break;
              }
              return true;
            case "noscript":
            case "template":
              outsideHostContainerContext && console.error(
                "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
                type
              );
          }
          return false;
        }
        function preloadResource(resource) {
          return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? false : true;
        }
        function noop3() {
        }
        function suspendResource(hoistableRoot, resource, props26) {
          if (null === suspendedState)
            throw Error(
              "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
            );
          var state2 = suspendedState;
          if ("stylesheet" === resource.type && ("string" !== typeof props26.media || false !== matchMedia(props26.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
            if (null === resource.instance) {
              var key = getStyleKey(props26.href), instance = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(key)
              );
              if (instance) {
                hoistableRoot = instance._p;
                null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state2.count++, state2 = onUnsuspend.bind(state2), hoistableRoot.then(state2, state2));
                resource.state.loading |= Inserted;
                resource.instance = instance;
                markNodeAsHoistable(instance);
                return;
              }
              instance = hoistableRoot.ownerDocument || hoistableRoot;
              props26 = stylesheetPropsFromRawProps(props26);
              (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props26, key);
              instance = instance.createElement("link");
              markNodeAsHoistable(instance);
              var linkInstance = instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance, "link", props26);
              resource.instance = instance;
            }
            null === state2.stylesheets && (state2.stylesheets = /* @__PURE__ */ new Map());
            state2.stylesheets.set(resource, hoistableRoot);
            (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state2.count++, resource = onUnsuspend.bind(state2), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
          }
        }
        function waitForCommitToBeReady() {
          if (null === suspendedState)
            throw Error(
              "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
            );
          var state2 = suspendedState;
          state2.stylesheets && 0 === state2.count && insertSuspendedStylesheets(state2, state2.stylesheets);
          return 0 < state2.count ? function(commit) {
            var stylesheetTimer = setTimeout(function() {
              state2.stylesheets && insertSuspendedStylesheets(state2, state2.stylesheets);
              if (state2.unsuspend) {
                var unsuspend = state2.unsuspend;
                state2.unsuspend = null;
                unsuspend();
              }
            }, 6e4);
            state2.unsuspend = commit;
            return function() {
              state2.unsuspend = null;
              clearTimeout(stylesheetTimer);
            };
          } : null;
        }
        function onUnsuspend() {
          this.count--;
          if (0 === this.count) {
            if (this.stylesheets)
              insertSuspendedStylesheets(this, this.stylesheets);
            else if (this.unsuspend) {
              var unsuspend = this.unsuspend;
              this.unsuspend = null;
              unsuspend();
            }
          }
        }
        function insertSuspendedStylesheets(state2, resources) {
          state2.stylesheets = null;
          null !== state2.unsuspend && (state2.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state2), precedencesByRoot = null, onUnsuspend.call(state2));
        }
        function insertStylesheetIntoRoot(root2, resource) {
          if (!(resource.state.loading & Inserted)) {
            var precedences = precedencesByRoot.get(root2);
            if (precedences) var last2 = precedences.get(LAST_PRECEDENCE);
            else {
              precedences = /* @__PURE__ */ new Map();
              precedencesByRoot.set(root2, precedences);
              for (var nodes = root2.querySelectorAll(
                "link[data-precedence],style[data-precedence]"
              ), i2 = 0; i2 < nodes.length; i2++) {
                var node2 = nodes[i2];
                if ("LINK" === node2.nodeName || "not all" !== node2.getAttribute("media"))
                  precedences.set(node2.dataset.precedence, node2), last2 = node2;
              }
              last2 && precedences.set(LAST_PRECEDENCE, last2);
            }
            nodes = resource.instance;
            node2 = nodes.getAttribute("data-precedence");
            i2 = precedences.get(node2) || last2;
            i2 === last2 && precedences.set(LAST_PRECEDENCE, nodes);
            precedences.set(node2, nodes);
            this.count++;
            last2 = onUnsuspend.bind(this);
            nodes.addEventListener("load", last2);
            nodes.addEventListener("error", last2);
            i2 ? i2.parentNode.insertBefore(nodes, i2.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
            resource.state.loading |= Inserted;
          }
        }
        function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
          this.tag = 1;
          this.containerInfo = containerInfo;
          this.pingCache = this.current = this.pendingChildren = null;
          this.timeoutHandle = noTimeout;
          this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
          this.callbackPriority = 0;
          this.expirationTimes = createLaneMap(-1);
          this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
          this.entanglements = createLaneMap(0);
          this.hiddenUpdates = createLaneMap(null);
          this.identifierPrefix = identifierPrefix;
          this.onUncaughtError = onUncaughtError;
          this.onCaughtError = onCaughtError;
          this.onRecoverableError = onRecoverableError;
          this.pooledCache = null;
          this.pooledCacheLanes = 0;
          this.formState = formState;
          this.incompleteTransitions = /* @__PURE__ */ new Map();
          this.passiveEffectDuration = this.effectDuration = -0;
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          containerInfo = this.pendingUpdatersLaneMap = [];
          for (tag = 0; 31 > tag; tag++) containerInfo.push(/* @__PURE__ */ new Set());
          this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
        }
        function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
          containerInfo = new FiberRootNode(
            containerInfo,
            tag,
            hydrate,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            formState
          );
          tag = ConcurrentMode;
          true === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
          isDevToolsPresent && (tag |= ProfileMode);
          isStrictMode = createFiber(3, null, null, tag);
          containerInfo.current = isStrictMode;
          isStrictMode.stateNode = containerInfo;
          tag = createCache3();
          retainCache(tag);
          containerInfo.pooledCache = tag;
          retainCache(tag);
          isStrictMode.memoizedState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: tag
          };
          initializeUpdateQueue(isStrictMode);
          return containerInfo;
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) return emptyContextObject;
          parentComponent = emptyContextObject;
          return parentComponent;
        }
        function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
          if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot)
            try {
              injectedHook.onScheduleFiberRoot(rendererID, container, element);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
          parentComponent = getContextForSubtree(parentComponent);
          null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
          isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, console.error(
            "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
            getComponentNameFromFiber(current) || "Unknown"
          ));
          container = createUpdate(lane);
          container.payload = { element };
          callback = void 0 === callback ? null : callback;
          null !== callback && ("function" !== typeof callback && console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ), container.callback = callback);
          element = enqueueUpdate(rootFiber, container, lane);
          null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
        }
        function markRetryLaneImpl(fiber, retryLane) {
          fiber = fiber.memoizedState;
          if (null !== fiber && null !== fiber.dehydrated) {
            var a = fiber.retryLane;
            fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
        }
        function attemptContinuousHydration(fiber) {
          if (13 === fiber.tag) {
            var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
            null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864);
            markRetryLaneIfNotHydrated(fiber, 67108864);
          }
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function getLaneLabelMap() {
          for (var map2 = /* @__PURE__ */ new Map(), lane = 1, index = 0; 31 > index; index++) {
            var label = getLabelForLane(lane);
            map2.set(lane, label);
            lane *= 2;
          }
          return map2;
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (_enabled) {
            var blockedOn = findInstanceBlockingEvent(nativeEvent);
            if (null === blockedOn)
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              ), clearIfContinuousEvent(domEventName, nativeEvent);
            else if (queueIfContinuousEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ))
              nativeEvent.stopPropagation();
            else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
              for (; null !== blockedOn; ) {
                var fiber = getInstanceFromNode(blockedOn);
                if (null !== fiber)
                  switch (fiber.tag) {
                    case 3:
                      fiber = fiber.stateNode;
                      if (fiber.current.memoizedState.isDehydrated) {
                        var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                        if (0 !== lanes) {
                          var root2 = fiber;
                          root2.pendingLanes |= 2;
                          for (root2.entangledLanes |= 2; lanes; ) {
                            var lane = 1 << 31 - clz32(lanes);
                            root2.entanglements[1] |= lane;
                            lanes &= ~lane;
                          }
                          ensureRootIsScheduled(fiber);
                          (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, false));
                        }
                      }
                      break;
                    case 13:
                      root2 = enqueueConcurrentRenderForLane(fiber, 2), null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                  }
                fiber = findInstanceBlockingEvent(nativeEvent);
                null === fiber && dispatchEventForPluginEventSystem(
                  domEventName,
                  eventSystemFlags,
                  nativeEvent,
                  return_targetInst,
                  targetContainer
                );
                if (fiber === blockedOn) break;
                blockedOn = fiber;
              }
              null !== blockedOn && nativeEvent.stopPropagation();
            } else
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                null,
                targetContainer
              );
          }
        }
        function findInstanceBlockingEvent(nativeEvent) {
          nativeEvent = getEventTarget2(nativeEvent);
          return findInstanceBlockingTarget(nativeEvent);
        }
        function findInstanceBlockingTarget(targetNode) {
          return_targetInst = null;
          targetNode = getClosestInstanceFromNode(targetNode);
          if (null !== targetNode) {
            var nearestMounted = getNearestMountedFiber(targetNode);
            if (null === nearestMounted) targetNode = null;
            else {
              var tag = nearestMounted.tag;
              if (13 === tag) {
                targetNode = getSuspenseInstanceFromFiber(nearestMounted);
                if (null !== targetNode) return targetNode;
                targetNode = null;
              } else if (3 === tag) {
                if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                  return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                targetNode = null;
              } else nearestMounted !== targetNode && (targetNode = null);
            }
          }
          return_targetInst = targetNode;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "beforetoggle":
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "toggle":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message":
              switch (getCurrentPriorityLevel()) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority$1:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            default:
              return DefaultEventPriority;
          }
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout":
              queuedPointers.delete(nativeEvent.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              queuedPointerCaptures.delete(nativeEvent.pointerId);
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
            return existingQueuedEvent = {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          blockedOn = existingQueuedEvent.targetContainers;
          null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin":
              return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedFocus,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "dragenter":
              return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedDrag,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "mouseover":
              return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedMouse,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "pointerover":
              var pointerId = nativeEvent.pointerId;
              queuedPointers.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointers.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              );
              return true;
            case "gotpointercapture":
              return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointerCaptures.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              ), true;
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (null !== targetInst) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (null !== nearestMounted) {
              if (targetInst = nearestMounted.tag, 13 === targetInst) {
                if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                  queuedTarget.blockedOn = targetInst;
                  runWithPriority(queuedTarget.priority, function() {
                    if (13 === nearestMounted.tag) {
                      var lane = requestUpdateLane(nearestMounted);
                      lane = getBumpedLaneForHydrationByLane(lane);
                      var root2 = enqueueConcurrentRenderForLane(
                        nearestMounted,
                        lane
                      );
                      null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane);
                      markRetryLaneIfNotHydrated(nearestMounted, lane);
                    }
                  });
                  return;
                }
              } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
                queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                return;
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (null !== queuedEvent.blockedOn) return false;
          for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
            if (null === nextBlockedOn) {
              nextBlockedOn = queuedEvent.nativeEvent;
              var nativeEventClone = new nextBlockedOn.constructor(
                nextBlockedOn.type,
                nextBlockedOn
              ), event = nativeEventClone;
              null !== currentReplayingEvent && console.error(
                "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = event;
              nextBlockedOn.target.dispatchEvent(nativeEventClone);
              null === currentReplayingEvent && console.error(
                "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = null;
            } else
              return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
          attemptReplayContinuousQueuedEvent(queuedEvent) && map2.delete(key);
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
          null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
          null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            replayUnblockedEvents
          )));
        }
        function scheduleReplayQueueIfNeeded(formReplayingQueue) {
          lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            function() {
              lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
              for (var i2 = 0; i2 < formReplayingQueue.length; i2 += 3) {
                var form = formReplayingQueue[i2], submitterOrAction = formReplayingQueue[i2 + 1], formData = formReplayingQueue[i2 + 2];
                if ("function" !== typeof submitterOrAction)
                  if (null === findInstanceBlockingTarget(submitterOrAction || form))
                    continue;
                  else break;
                var formInst = getInstanceFromNode(form);
                null !== formInst && (formReplayingQueue.splice(i2, 3), i2 -= 3, form = {
                  pending: true,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                }, Object.freeze(form), startHostTransition(
                  formInst,
                  form,
                  submitterOrAction,
                  formData
                ));
              }
            }
          ));
        }
        function retryIfBlockedOn(unblocked) {
          function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          }
          null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var i2 = 0; i2 < queuedExplicitHydrationTargets.length; i2++) {
            var queuedTarget = queuedExplicitHydrationTargets[i2];
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
          }
          for (; 0 < queuedExplicitHydrationTargets.length && (i2 = queuedExplicitHydrationTargets[0], null === i2.blockedOn); )
            attemptExplicitHydrationTarget(i2), null === i2.blockedOn && queuedExplicitHydrationTargets.shift();
          i2 = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
          if (null != i2)
            for (queuedTarget = 0; queuedTarget < i2.length; queuedTarget += 3) {
              var form = i2[queuedTarget], submitterOrAction = i2[queuedTarget + 1], formProps = form[internalPropsKey] || null;
              if ("function" === typeof submitterOrAction)
                formProps || scheduleReplayQueueIfNeeded(i2);
              else if (formProps) {
                var action = null;
                if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                  if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                    action = formProps.formAction;
                  else {
                    if (null !== findInstanceBlockingTarget(form)) continue;
                  }
                else action = formProps.action;
                "function" === typeof action ? i2[queuedTarget + 1] = action : (i2.splice(queuedTarget, 3), queuedTarget -= 3);
                scheduleReplayQueueIfNeeded(i2);
              }
            }
        }
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function warnIfReactDOMContainerInDEV(container) {
          container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error(
            "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
          ) : console.error(
            "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
          ));
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var Scheduler = require_scheduler(), React26 = require_react(), ReactDOM2 = require_react_dom(), assign2 = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
        Symbol.for("react.scope");
        var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
        Symbol.for("react.legacy_hidden");
        Symbol.for("react.tracing_marker");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        Symbol.for("react.view_transition");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, ReactSharedInternals = React26.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
          pending: false,
          data: null,
          method: null,
          action: null
        }), valueStack = [];
        var fiberStack = [];
        var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = false, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, nextTransitionLane = 256, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        }, VALID_ATTRIBUTE_NAME_REGEX = RegExp(
          "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        disabledLog.__reactDisabledLog = true;
        var prefix2, suffix, reentry = false;
        var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
        var current = null, isRendering = false, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
        var didWarnValueDefaultValue = false;
        var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
          " "
        ), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(
          " "
        ), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
          containerTagInScope: null,
          implicitRootScope: false
        }, didWarn = {}, shorthandToLonghand = {
          animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
            " "
          ),
          background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
            " "
          ),
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
            " "
          ),
          borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
          ],
          borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
          ],
          borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
          ],
          borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
          ],
          borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
          ],
          borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
          ],
          borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
          ],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
          ],
          borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
          ],
          borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
          ],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
          ],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
            " "
          ),
          fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
            " "
          ),
          gap: ["columnGap", "rowGap"],
          grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
            " "
          ),
          gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
          ],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
          ],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
            " "
          ),
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
          ],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
          ],
          wordWrap: ["overflowWrap"]
        }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set(
          "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
            " "
          )
        ), MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          ["crossOrigin", "crossorigin"],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]), possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          inert: "inert",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          popover: "popover",
          popovertarget: "popoverTarget",
          popovertargetaction: "popoverTargetAction",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        }, ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        }, warnedProperties$1 = {}, rARIA$1 = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel$1 = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
        if (canUseDOM)
          try {
            var options$jscomp$0 = {};
            Object.defineProperty(options$jscomp$0, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options$jscomp$0, options$jscomp$0);
            window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
          } catch (e2) {
            passiveBrowserEventsSupported = false;
          }
        var root = null, startText = null, fallbackText = null, EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign2({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
            return lastMovementX;
          },
          movementY: function(event) {
            return "movementY" in event ? event.movementY : lastMovementY;
          }
        }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign2({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign2({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign2({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(
          CompositionEventInterface
        ), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        }, translateToKey = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta"
        }, modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        }, KeyboardEventInterface = assign2({}, UIEventInterface, {
          key: function(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if ("Unidentified" !== key) return key;
            }
            return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
          },
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : 0;
          },
          keyCode: function(event) {
            return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          },
          which: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          }
        }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign2({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign2({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign2({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign2({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign2({}, EventInterface, {
          newState: 0,
          oldState: 0
        }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
        canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
        canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
        var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionrun: makePrefixMap("Transition", "TransitionRun"),
          transitionstart: makePrefixMap("Transition", "TransitionStart"),
          transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        }, prefixedEventNames = {}, style = {};
        canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
        var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
          " "
        );
        simpleEventPluginEvents.push("scrollEnd");
        var CapturedStacks = /* @__PURE__ */ new WeakMap(), OffscreenVisible = 1, OffscreenPassiveEffectsConnected = 2, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
        Object.freeze(emptyContextObject);
        var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, NoStrictPassiveEffectsMode = 64;
        var hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
          /* @__PURE__ */ new Set([nonExtensibleObject]);
        } catch (e$3) {
          hasBadMapPolyfill = true;
        }
        var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(
          "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), lastResetTime = 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          var getCurrentTime = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          getCurrentTime = function() {
            return localDate.now();
          };
        }
        var valueCursor = createCursor(null);
        var rendererCursorDEV = createCursor(null);
        var rendererSigil = {};
        var currentlyRenderingFiber$1 = null, lastContextDependency = null, isDisallowedContextReadInDEV = false, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
          var listeners = [], signal = this.signal = {
            aborted: false,
            addEventListener: function(type, listener) {
              listeners.push(listener);
            }
          };
          this.abort = function() {
            signal.aborted = true;
            listeners.forEach(function(listener) {
              return listener();
            });
          };
        }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Consumer: null,
          Provider: null,
          _currentValue: null,
          _currentValue2: null,
          _threadCount: 0,
          _currentRenderer: null,
          _currentRenderer2: null
        }, now = Scheduler.unstable_now, renderStartTime = -0, commitStartTime = -0, profilerStartTime = -1.1, profilerEffectDuration = -0, currentUpdateIsNested = false, nestedUpdateScheduled = false, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
        ReactSharedInternals.S = function(transition, returnValue) {
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
          null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
        };
        var resumedCache = createCursor(null), ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function() {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function() {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && true !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && true !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && true !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
            function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(
                getComponentNameFromFiber(fiber) || "Component"
              );
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            }
          ), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
          if (0 < UNSAFE_componentWillMountUniqueNames.size) {
            var sortedNames = setToSortedString(
              UNSAFE_componentWillMountUniqueNames
            );
            console.error(
              "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
              sortedNames
            );
          }
          0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillReceivePropsUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillUpdateUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn(
            "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            componentWillReceivePropsUniqueNames
          ), console.warn(
            "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn(
            "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = null;
          for (var node2 = fiber; null !== node2; )
            node2.mode & StrictLegacyMode && (strictRoot = node2), node2 = node2.return;
          null === strictRoot ? console.error(
            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
          ) : !didWarnAboutLegacyContext.has(fiber.type) && (node2 = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node2 && (node2 = [], pendingLegacyContextWarning.set(strictRoot, node2)), node2.push(fiber));
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray) {
            if (0 !== fiberArray.length) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              runWithFiberInDEV(firstFiber, function() {
                console.error(
                  "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
                  sortedNames
                );
              });
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
        var SuspenseException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
        ), SuspenseyCommitException = Error(
          "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), SuspenseActionException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
        ), noopSuspenseyCommitThenable = {
          then: function() {
            console.error(
              'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
            );
          }
        }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, NoFlags = 0, HasEffect = 1, Insertion4 = 2, Layout = 4, Passive = 8, UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
        var didWarnUpdateInsideUpdate = false;
        var currentlyProcessingQueue = null;
        var didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), didWarnUncachedGetSnapshot;
        var didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
        var didWarnAboutAsyncClientComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseFormState = /* @__PURE__ */ new Set();
        var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter$1 = 0, thenableState$1 = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false, ContextOnlyDispatcher = {
          readContext,
          use,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          useHostTransitionStatus: throwInvalidHookError,
          useFormState: throwInvalidHookError,
          useActionState: throwInvalidHookError,
          useOptimistic: throwInvalidHookError,
          useMemoCache: throwInvalidHookError,
          useCacheRefresh: throwInvalidHookError
        }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(createDeps);
            return mountEffect(create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            mountEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            mountHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            mountEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return mountActionState(action, initialState);
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return mountRefresh();
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            mountEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useMemoCache: function(size3) {
            warnInvalidHookAccess();
            return useMemoCache(size3);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size3) {
            warnInvalidHookAccess();
            return useMemoCache(size3);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, createDeps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion4, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe3, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe3,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size3) {
            warnInvalidHookAccess();
            return useMemoCache(size3);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        var callComponent = {
          "react-stack-bottom-frame": function(Component4, props26, secondArg) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return Component4(props26, secondArg);
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callComponentInDEV = callComponent["react-stack-bottom-frame"].bind(callComponent), callRender = {
          "react-stack-bottom-frame": function(instance) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return instance.render();
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender), callComponentDidMount = {
          "react-stack-bottom-frame": function(finishedWork, instance) {
            try {
              instance.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidMountInDEV = callComponentDidMount["react-stack-bottom-frame"].bind(callComponentDidMount), callComponentDidUpdate = {
          "react-stack-bottom-frame": function(finishedWork, instance, prevProps, prevState, snapshot2) {
            try {
              instance.componentDidUpdate(prevProps, prevState, snapshot2);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidUpdateInDEV = callComponentDidUpdate["react-stack-bottom-frame"].bind(callComponentDidUpdate), callComponentDidCatch = {
          "react-stack-bottom-frame": function(instance, errorInfo) {
            var stack = errorInfo.stack;
            instance.componentDidCatch(errorInfo.value, {
              componentStack: null !== stack ? stack : ""
            });
          }
        }, callComponentDidCatchInDEV = callComponentDidCatch["react-stack-bottom-frame"].bind(callComponentDidCatch), callComponentWillUnmount = {
          "react-stack-bottom-frame": function(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentWillUnmount();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callComponentWillUnmountInDEV = callComponentWillUnmount["react-stack-bottom-frame"].bind(callComponentWillUnmount), callCreate = {
          "react-stack-bottom-frame": function(effect) {
            null != effect.resourceKind && console.error(
              "Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",
              effect.resourceKind
            );
            var create = effect.create;
            effect = effect.inst;
            create = create();
            return effect.destroy = create;
          }
        }, callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate), callDestroy = {
          "react-stack-bottom-frame": function(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callDestroyInDEV = callDestroy["react-stack-bottom-frame"].bind(callDestroy), callLazyInit = {
          "react-stack-bottom-frame": function(lazy) {
            var init = lazy._init;
            return init(lazy._payload);
          }
        }, callLazyInitInDEV = callLazyInit["react-stack-bottom-frame"].bind(callLazyInit), thenableState = null, thenableIndexCounter = 0, currentDebugInfo = null, didWarnAboutMaps;
        var didWarnAboutGenerators = didWarnAboutMaps = false;
        var ownerHasKeyUseWarning = {};
        var ownerHasFunctionTypeWarning = {};
        var ownerHasSymbolTypeWarning = {};
        warnForMissingKey = function(returnFiber, workInProgress2, child) {
          if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
            if ("object" !== typeof child._store)
              throw Error(
                "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
              );
            child._store.validated = 1;
            var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
            if (!ownerHasKeyUseWarning[componentKey]) {
              ownerHasKeyUseWarning[componentKey] = true;
              child = child._owner;
              returnFiber = returnFiber._debugOwner;
              var currentComponentErrorInfo = "";
              returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
              currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName2 + ">.");
              var childOwnerAppendix = "";
              null != child && returnFiber !== child && (componentName2 = null, "number" === typeof child.tag ? componentName2 = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
              runWithFiberInDEV(workInProgress2, function() {
                console.error(
                  'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                  currentComponentErrorInfo,
                  childOwnerAppendix
                );
              });
            }
          }
        };
        var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
        var didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
        var didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutContextTypes$1 = /* @__PURE__ */ new Set();
        var didWarnAboutChildContextTypes = /* @__PURE__ */ new Set();
        var didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        Object.freeze(fakeInternalInstance);
        var classComponentUpdater = {
          enqueueSetState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ReplaceState;
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
          },
          enqueueForceUpdate: function(inst, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ForceUpdate;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            callback = enqueueUpdate(inst, update, lane);
            null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
          }
        }, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error(
          "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
        ), didReceiveUpdate = false;
        var didWarnAboutBadClass = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutContextTypes = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutRevealOrder = {};
        var didWarnAboutTailOptions = {};
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0,
          hydrationErrors: null
        }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher = {
          getCacheForType: function(resourceType) {
            var cache2 = readContext(CacheContext), cacheForType = cache2.data.get(resourceType);
            void 0 === cacheForType && (cacheForType = resourceType(), cache2.data.set(resourceType, cacheForType));
            return cacheForType;
          },
          getOwner: function() {
            return current;
          }
        };
        if ("function" === typeof Symbol && Symbol.for) {
          var symbolFor = Symbol.for;
          symbolFor("selector.component");
          symbolFor("selector.has_pseudo_class");
          symbolFor("selector.role");
          symbolFor("selector.test_id");
          symbolFor("selector.text");
        }
        var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootSuspendedAtTheShell = 6, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, SuspendedOnAction = 9, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, IMMEDIATE_COMMIT = 0, SUSPENDED_COMMIT = 1, THROTTLED_COMMIT = 2, NO_PENDING_EFFECTS = 0, PENDING_MUTATION_PHASE = 1, PENDING_LAYOUT_PHASE = 2, PENDING_AFTER_MUTATION_PHASE = 3, PENDING_SPAWNED_WORK = 4, PENDING_PASSIVE_PHASE = 5, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
        (function() {
          for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
            var eventName = simpleEventPluginEvents[i2], domEventName = eventName.toLowerCase();
            eventName = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + eventName);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
          registerSimpleEvent(TRANSITION_START, "onTransitionStart");
          registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        })();
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        registerTwoPhaseEvent(
          "onChange",
          "change click focusin focusout input keydown keyup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent(
          "onSelect",
          "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent("onBeforeInput", [
          "compositionend",
          "keypress",
          "textInput",
          "paste"
        ]);
        registerTwoPhaseEvent(
          "onCompositionEnd",
          "compositionend focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionStart",
          "compositionstart focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionUpdate",
          "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
        );
        var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
          " "
        ), nonDelegatedEvents = new Set(
          "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
        ), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
        var didWarnForNewBooleanPropsWithEmptyValue = {};
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", PREAMBLE_CONTRIBUTION_HTML = 1, PREAMBLE_CONTRIBUTION_BODY = 2, PREAMBLE_CONTRIBUTION_HEAD = 4, FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_COMPLETE = "complete", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout, previousHydratableOnEnteringScopedSingleton = null, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set(), previousDispatcher = ReactDOMSharedInternals.d;
        ReactDOMSharedInternals.d = {
          f: function() {
            var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
            return previousWasRendering || wasRendering;
          },
          r: function(form) {
            var formInst = getInstanceFromNode(form);
            null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
          },
          D: function(href) {
            previousDispatcher.D(href);
            preconnectAs("dns-prefetch", href, null);
          },
          C: function(href, crossOrigin) {
            previousDispatcher.C(href, crossOrigin);
            preconnectAs("preconnect", href, crossOrigin);
          },
          L: function(href, as, options) {
            previousDispatcher.L(href, as, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href && as) {
              var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
              "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSrcSet
              ) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSizes
              ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
              var key = preloadSelector;
              switch (as) {
                case "style":
                  key = getStyleKey(href);
                  break;
                case "script":
                  key = getScriptKey(href);
              }
              preloadPropsMap.has(key) || (href = assign2(
                {
                  rel: "preload",
                  href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                  as
                },
                options
              ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
            }
          },
          m: function(href, options) {
            previousDispatcher.m(href, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
              switch (as) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  key = getScriptKey(href);
              }
              if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
                switch (as) {
                  case "audioworklet":
                  case "paintworklet":
                  case "serviceworker":
                  case "sharedworker":
                  case "worker":
                  case "script":
                    if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                      return;
                }
                as = ownerDocument.createElement("link");
                setInitialProperties(as, "link", href);
                markNodeAsHoistable(as);
                ownerDocument.head.appendChild(as);
              }
            }
          },
          X: function(src, options) {
            previousDispatcher.X(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src = assign2({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          },
          S: function(href, precedence, options) {
            previousDispatcher.S(href, precedence, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
              precedence = precedence || "default";
              var resource = styles.get(key);
              if (!resource) {
                var state2 = { loading: NotLoaded, preload: null };
                if (resource = ownerDocument.querySelector(
                  getStylesheetSelectorFromKey(key)
                ))
                  state2.loading = Loaded | Inserted;
                else {
                  href = assign2(
                    {
                      rel: "stylesheet",
                      href,
                      "data-precedence": precedence
                    },
                    options
                  );
                  (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                  var link = resource = ownerDocument.createElement("link");
                  markNodeAsHoistable(link);
                  setInitialProperties(link, "link", href);
                  link._p = new Promise(function(resolve, reject) {
                    link.onload = resolve;
                    link.onerror = reject;
                  });
                  link.addEventListener("load", function() {
                    state2.loading |= Loaded;
                  });
                  link.addEventListener("error", function() {
                    state2.loading |= Errored;
                  });
                  state2.loading |= Inserted;
                  insertStylesheet(resource, precedence, ownerDocument);
                }
                resource = {
                  type: "stylesheet",
                  instance: resource,
                  count: 1,
                  state: state2
                };
                styles.set(key, resource);
              }
            }
          },
          M: function(src, options) {
            previousDispatcher.M(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src = assign2({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          }
        };
        var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, suspendedState = null, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Provider: null,
          Consumer: null,
          _currentValue: NotPendingTransition,
          _currentValue2: NotPendingTransition,
          _threadCount: 0
        }, badgeFormat = "%c%s%c ", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
        var didWarnAboutNestedUpdates = false;
        var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
        overrideHookState = function(fiber, id, path, value) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign2({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign2({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          id = findHook(fiber, id);
          null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign2({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(
            fiber.memoizedProps,
            oldPath,
            newPath
          );
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          oldPath = enqueueConcurrentRenderForLane(fiber, 2);
          null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
        var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
          " "
        ), lastScheduledReplayQueue = null;
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (null === root2) throw Error("Cannot update an unmounted root.");
          var args = arguments;
          "function" === typeof args[1] ? console.error(
            "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          ) : isValidContainer(args[1]) ? console.error(
            "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
          ) : "undefined" !== typeof args[1] && console.error(
            "You passed a second argument to root.render(...) but it only accepts one argument."
          );
          args = children;
          var current2 = root2.current, lane = requestUpdateLane(current2);
          updateContainerImpl(current2, lane, args, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          var args = arguments;
          "function" === typeof args[0] && console.error(
            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          );
          args = this._internalRoot;
          if (null !== args) {
            this._internalRoot = null;
            var container = args.containerInfo;
            (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error(
              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
            );
            updateContainerImpl(args.current, 2, null, args, null, null);
            flushSyncWork$1();
            container[internalContainerInstanceKey] = null;
          }
        };
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
          if (target) {
            var updatePriority = resolveUpdatePriority();
            target = { blockedOn: null, target, priority: updatePriority };
            for (var i2 = 0; i2 < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i2].priority; i2++) ;
            queuedExplicitHydrationTargets.splice(i2, 0, target);
            0 === i2 && attemptExplicitHydrationTarget(target);
          }
        };
        (function() {
          var isomorphicReactPackageVersion = React26.version;
          if ("19.1.0" !== isomorphicReactPackageVersion)
            throw Error(
              'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")
            );
        })();
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
        );
        ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
          var fiber = componentOrElement._reactInternals;
          if (void 0 === fiber) {
            if ("function" === typeof componentOrElement.render)
              throw Error("Unable to find node on an unmounted component.");
            componentOrElement = Object.keys(componentOrElement).join(",");
            throw Error(
              "Argument appears to not be a ReactComponent. Keys: " + componentOrElement
            );
          }
          componentOrElement = findCurrentFiberUsingSlowPath(fiber);
          componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
          componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
          return componentOrElement;
        };
        if (!function() {
          var internals = {
            bundleType: 1,
            version: "19.1.0",
            rendererPackageName: "react-dom",
            currentDispatcherRef: ReactSharedInternals,
            reconcilerVersion: "19.1.0"
          };
          internals.overrideHookState = overrideHookState;
          internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
          internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
          internals.overrideProps = overrideProps;
          internals.overridePropsDeletePath = overridePropsDeletePath;
          internals.overridePropsRenamePath = overridePropsRenamePath;
          internals.scheduleUpdate = scheduleUpdate;
          internals.setErrorHandler = setErrorHandler;
          internals.setSuspenseHandler = setSuspenseHandler;
          internals.scheduleRefresh = scheduleRefresh;
          internals.scheduleRoot = scheduleRoot;
          internals.setRefreshHandler = setRefreshHandler;
          internals.getCurrentFiber = getCurrentFiberForDevTools;
          internals.getLaneLabelMap = getLaneLabelMap;
          internals.injectProfilingHooks = injectProfilingHooks;
          return injectInternals(internals);
        }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
          var protocol = window.location.protocol;
          /^(https?|file):$/.test(protocol) && console.info(
            "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""),
            "font-weight:bold"
          );
        }
        exports.createRoot = function(container, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
          null !== options && void 0 !== options && (options.hydrate ? console.warn(
            "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
          ) : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && console.error(
            "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
          ), true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks));
          options = createFiberRoot(
            container,
            1,
            false,
            null,
            null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            null
          );
          container[internalContainerInstanceKey] = options.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMRoot(options);
        };
        exports.hydrateRoot = function(container, initialChildren, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          void 0 === initialChildren && console.error(
            "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
          );
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
          null !== options && void 0 !== options && (true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks), void 0 !== options.formState && (formState = options.formState));
          initialChildren = createFiberRoot(
            container,
            1,
            true,
            initialChildren,
            null != options ? options : null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            formState
          );
          initialChildren.context = getContextForSubtree(null);
          options = initialChildren.current;
          isStrictMode = requestUpdateLane(options);
          isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
          identifierPrefix = createUpdate(isStrictMode);
          identifierPrefix.callback = null;
          enqueueUpdate(options, identifierPrefix, isStrictMode);
          options = isStrictMode;
          initialChildren.current.lanes = options;
          markRootUpdated$1(initialChildren, options);
          ensureRootIsScheduled(initialChildren);
          container[internalContainerInstanceKey] = initialChildren.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMHydrationRoot(initialChildren);
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_client_development();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      (function() {
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x2) {
                }
            }
          return null;
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e2) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
          } catch (x2) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props26, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props26, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, self2, source, owner, props26, debugStack, debugTask) {
          self2 = props26.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props: props26,
            _owner: owner
          };
          null !== (void 0 !== self2 ? self2 : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self2, debugStack, debugTask) {
          var children = config.children;
          if (void 0 !== children)
            if (isStaticChildren)
              if (isArrayImpl(children)) {
                for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)
                  validateChildKeys(children[isStaticChildren]);
                Object.freeze && Object.freeze(children);
              } else
                console.error(
                  "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
                );
            else validateChildKeys(children);
          if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
              return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(
              'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
              isStaticChildren,
              children,
              keys,
              children
            ), didWarnAboutKeySpread[children + isStaticChildren] = true);
          }
          children = null;
          void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
          hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
          if ("key" in config) {
            maybeKey = {};
            for (var propName in config)
              "key" !== propName && (maybeKey[propName] = config[propName]);
          } else maybeKey = config;
          children && defineKeyPropWarningGetter(
            maybeKey,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          return ReactElement(
            type,
            children,
            self2,
            source,
            getOwner(),
            maybeKey,
            debugStack,
            debugTask
          );
        }
        function validateChildKeys(node2) {
          "object" === typeof node2 && null !== node2 && node2.$$typeof === REACT_ELEMENT_TYPE && node2._store && (node2._store.validated = 1);
        }
        var React26 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React26.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        React26 = {
          "react-stack-bottom-frame": function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = React26["react-stack-bottom-frame"].bind(
          React26,
          UnknownOwner
        )();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutKeySpread = {};
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = function(type, config, maybeKey, source, self2) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            false,
            source,
            self2,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.jsxs = function(type, config, maybeKey, source, self2) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            true,
            source,
            self2,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
      })();
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment16 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment16;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense2;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys.length; ++i2) {
            var key = keys[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/fast-safe-stringify/index.js
  var require_fast_safe_stringify = __commonJS({
    "node_modules/fast-safe-stringify/index.js"(exports, module) {
      module.exports = stringify3;
      stringify3.default = stringify3;
      stringify3.stable = deterministicStringify;
      stringify3.stableStringify = deterministicStringify;
      var LIMIT_REPLACE_NODE = "[...]";
      var CIRCULAR_REPLACE_NODE = "[Circular]";
      var arr = [];
      var replacerStack = [];
      function defaultOptions2() {
        return {
          depthLimit: Number.MAX_SAFE_INTEGER,
          edgesLimit: Number.MAX_SAFE_INTEGER
        };
      }
      function stringify3(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions2();
        }
        decirc(obj, "", 0, [], void 0, 0, options);
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(obj, replacer, spacer);
          } else {
            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
          }
        } catch (_2) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function setReplace(replace4, val, k, parent) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
        if (propertyDescriptor.get !== void 0) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: replace4 });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k, replace4]);
          }
        } else {
          parent[k] = replace4;
          arr.push([parent, k, val]);
        }
      }
      function decirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i2;
        if (typeof val === "object" && val !== null) {
          for (i2 = 0; i2 < stack.length; i2++) {
            if (stack[i2] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i2 = 0; i2 < val.length; i2++) {
              decirc(val[i2], i2, i2, stack, val, depth, options);
            }
          } else {
            var keys = Object.keys(val);
            for (i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              decirc(val[key], key, i2, stack, val, depth, options);
            }
          }
          stack.pop();
        }
      }
      function compareFunction(a, b2) {
        if (a < b2) {
          return -1;
        }
        if (a > b2) {
          return 1;
        }
        return 0;
      }
      function deterministicStringify(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions2();
        }
        var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options) || obj;
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(tmp, replacer, spacer);
          } else {
            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
          }
        } catch (_2) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i2;
        if (typeof val === "object" && val !== null) {
          for (i2 = 0; i2 < stack.length; i2++) {
            if (stack[i2] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          try {
            if (typeof val.toJSON === "function") {
              return;
            }
          } catch (_2) {
            return;
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i2 = 0; i2 < val.length; i2++) {
              deterministicDecirc(val[i2], i2, i2, stack, val, depth, options);
            }
          } else {
            var tmp = {};
            var keys = Object.keys(val).sort(compareFunction);
            for (i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              deterministicDecirc(val[key], key, i2, stack, val, depth, options);
              tmp[key] = val[key];
            }
            if (typeof parent !== "undefined") {
              arr.push([parent, k, val]);
              parent[k] = tmp;
            } else {
              return tmp;
            }
          }
          stack.pop();
        }
      }
      function replaceGetterValues(replacer) {
        replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
          return v;
        };
        return function(key, val) {
          if (replacerStack.length > 0) {
            for (var i2 = 0; i2 < replacerStack.length; i2++) {
              var part = replacerStack[i2];
              if (part[1] === key && part[0] === val) {
                val = part[2];
                replacerStack.splice(i2, 1);
                break;
              }
            }
          }
          return replacer.call(this, key, val);
        };
      }
    }
  });

  // src/index.jsx
  var import_client = __toESM(require_client());

  // src/app.jsx
  var import_react192 = __toESM(require_react());

  // node_modules/react-router/dist/development/chunk-EF7DTUVF.mjs
  var React = __toESM(require_react(), 1);
  var React2 = __toESM(require_react(), 1);
  var React3 = __toESM(require_react(), 1);
  var React4 = __toESM(require_react(), 1);
  var React9 = __toESM(require_react(), 1);
  var React8 = __toESM(require_react(), 1);
  var React7 = __toESM(require_react(), 1);
  var React6 = __toESM(require_react(), 1);
  var React5 = __toESM(require_react(), 1);
  var React10 = __toESM(require_react(), 1);
  var React11 = __toESM(require_react(), 1);
  var import_meta = {};
  var PopStateEventType = "popstate";
  function createBrowserHistory(options = {}) {
    function createBrowserLocation(window2, globalHistory) {
      let { pathname, search, hash: hash2 } = window2.location;
      return createLocation(
        "",
        { pathname, search, hash: hash2 },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(
      createBrowserLocation,
      createBrowserHref,
      null,
      options
    );
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined") console.warn(message);
      try {
        throw new Error(message);
      } catch (e2) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substring(2, 10);
  }
  function getHistoryState(location, index) {
    return {
      usr: location.state,
      key: location.key,
      idx: index
    };
  }
  function createLocation(current, to, state2 = null, key) {
    let location = {
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: "",
      ...typeof to === "string" ? parsePath(to) : to,
      state: state2,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    };
    return location;
  }
  function createPath({
    pathname = "/",
    search = "",
    hash: hash2 = ""
  }) {
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash2 && hash2 !== "#")
      pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substring(hashIndex);
        path = path.substring(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substring(searchIndex);
        path = path.substring(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
    let { window: window2 = document.defaultView, v5Compat = false } = options;
    let globalHistory = window2.history;
    let action = "POP";
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
    }
    function getIndex() {
      let state2 = globalHistory.state || { idx: null };
      return state2.idx;
    }
    function handlePop() {
      action = "POP";
      let nextIndex2 = getIndex();
      let delta = nextIndex2 == null ? null : nextIndex2 - index;
      index = nextIndex2;
      if (listener) {
        listener({ action, location: history.location, delta });
      }
    }
    function push(to, state2) {
      action = "PUSH";
      let location = createLocation(history.location, to, state2);
      if (validateLocation) validateLocation(location, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 1 });
      }
    }
    function replace22(to, state2) {
      action = "REPLACE";
      let location = createLocation(history.location, to, state2);
      if (validateLocation) validateLocation(location, to);
      index = getIndex();
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 0 });
      }
    }
    function createURL(to) {
      return createBrowserURLImpl(to);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref2(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace22,
      go(n2) {
        return globalHistory.go(n2);
      }
    };
    return history;
  }
  function createBrowserURLImpl(to, isAbsolute = false) {
    let base = "http://localhost";
    if (typeof window !== "undefined") {
      base = window.location.origin !== "null" ? window.location.origin : window.location.href;
    }
    invariant(base, "No window.location.(origin|href) available to create URL");
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    if (!isAbsolute && href.startsWith("//")) {
      href = base + href;
    }
    return new URL(href, base);
  }
  var _map;
  _map = /* @__PURE__ */ new WeakMap();
  function matchRoutes(routes, locationArg, basename = "/") {
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(
        branches[i2],
        decoded,
        allowPartial
      );
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match5, loaderData) {
    let { route, pathname, params } = match5;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(
          meta.relativePath.startsWith(parentPath),
          `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
        );
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      if (route.path === "" || !route.path?.includes("?")) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first2, ...rest] = segments;
    let isOptional = first2.endsWith("?");
    let required = first2.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(
      ...restExploded.map(
        (subpath) => subpath === "" ? required : [required, subpath].join("/")
      )
    );
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map(
      (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
    );
  }
  function rankRouteBranches(branches) {
    branches.sort(
      (a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(
        a.routesMeta.map((meta) => meta.childrenIndex),
        b2.routesMeta.map((meta) => meta.childrenIndex)
      )
    );
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s2) => s2 === "*";
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s2) => !isSplat(s2)).reduce(
      (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
      initialScore
    );
  }
  function compareIndexes(a, b2) {
    let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i2) => n2 === b2[i2]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b2[b2.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial = false) {
    let { routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i2 = 0; i2 < routesMeta.length; ++i2) {
      let meta = routesMeta[i2];
      let end = i2 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match5 = matchPath(
        { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
        remainingPathname
      );
      let route = meta.route;
      if (!match5 && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match5 = matchPath(
          {
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
          },
          remainingPathname
        );
      }
      if (!match5) {
        return null;
      }
      Object.assign(matchedParams, match5.params);
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match5.pathname]),
        pathnameBase: normalizePathname(
          joinPaths([matchedPathname, match5.pathnameBase])
        ),
        route
      });
      if (match5.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match5.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = { path: pattern, caseSensitive: false, end: true };
    }
    let [matcher, compiledParams] = compilePath(
      pattern.path,
      pattern.caseSensitive,
      pattern.end
    );
    let match5 = pathname.match(matcher);
    if (!match5) return null;
    let matchedPathname = match5[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match5.slice(1);
    let params = compiledParams.reduce(
      (memo22, { paramName, isOptional }, index) => {
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) {
          memo22[paramName] = void 0;
        } else {
          memo22[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo22;
      },
      {}
    );
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive = false, end = true) {
    warning(
      path === "*" || !path.endsWith("*") || path.endsWith("/*"),
      `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
    );
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
      /\/:([\w-]+)(\?)?/g,
      (_2, paramName, isOptional) => {
        params.push({ paramName, isOptional: isOptional != null });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      }
    );
    if (path.endsWith("*")) {
      params.push({ paramName: "*" });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else {
    }
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(
        false,
        `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
      );
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname = "/") {
    let {
      pathname: toPathname,
      search = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1) segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path) {
    return `Cannot include a '${char2}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
      path
    )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
  }
  function getPathContributingMatches(matches) {
    return matches.filter(
      (match5, index) => index === 0 || match5.route.path && match5.route.path.length > 0
    );
  }
  function getResolveToMatches(matches) {
    let pathMatches = getPathContributingMatches(matches);
    return pathMatches.map(
      (match5, idx) => idx === pathMatches.length - 1 ? match5.pathname : match5.pathnameBase
    );
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = { ...toArg };
      invariant(
        !to.pathname || !to.pathname.includes("?"),
        getInvalidPathError("?", "pathname", "search", to)
      );
      invariant(
        !to.pathname || !to.pathname.includes("#"),
        getInvalidPathError("#", "pathname", "hash", to)
      );
      invariant(
        !to.search || !to.search.includes("#"),
        getInvalidPathError("#", "search", "hash", to)
      );
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = [
    "POST",
    "PUT",
    "PATCH",
    "DELETE"
  ];
  var validMutationMethods = new Set(
    validMutationMethodsArr
  );
  var validRequestMethodsArr = [
    "GET",
    ...validMutationMethodsArr
  ];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
  var DataRouterContext = React.createContext(null);
  DataRouterContext.displayName = "DataRouter";
  var DataRouterStateContext = React.createContext(null);
  DataRouterStateContext.displayName = "DataRouterState";
  var RSCRouterContext = React.createContext(false);
  var ViewTransitionContext = React.createContext({
    isTransitioning: false
  });
  ViewTransitionContext.displayName = "ViewTransition";
  var FetchersContext = React.createContext(
    /* @__PURE__ */ new Map()
  );
  FetchersContext.displayName = "Fetchers";
  var AwaitContext = React.createContext(null);
  AwaitContext.displayName = "Await";
  var NavigationContext = React.createContext(
    null
  );
  NavigationContext.displayName = "Navigation";
  var LocationContext = React.createContext(
    null
  );
  LocationContext.displayName = "Location";
  var RouteContext = React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  RouteContext.displayName = "Route";
  var RouteErrorContext = React.createContext(null);
  RouteErrorContext.displayName = "RouteError";
  var ENABLE_DEV_WARNINGS = true;
  function useHref(to, { relative } = {}) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useHref() may be used only in the context of a <Router> component.`
    );
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { hash: hash2, pathname, search } = useResolvedPath(to, { relative });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({ pathname: joinedPathname, search, hash: hash2 });
  }
  function useInRouterContext() {
    return React2.useContext(LocationContext) != null;
  }
  function useLocation() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useLocation() may be used only in the context of a <Router> component.`
    );
    return React2.useContext(LocationContext).location;
  }
  var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React2.useContext(NavigationContext).static;
    if (!isStatic) {
      React2.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let { isDataRoute } = React2.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useNavigate() may be used only in the context of a <Router> component.`
    );
    let dataRouterContext = React2.useContext(DataRouterContext);
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          navigator2.go(to);
          return;
        }
        let path = resolveTo(
          to,
          JSON.parse(routePathnamesJson),
          locationPathname,
          options.relative === "path"
        );
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(
          path,
          options.state,
          options
        );
      },
      [
        basename,
        navigator2,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
      ]
    );
    return navigate;
  }
  var OutletContext = React2.createContext(null);
  function useParams() {
    let { matches } = React2.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, { relative } = {}) {
    let { matches } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
    return React2.useMemo(
      () => resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        relative === "path"
      ),
      [to, routePathnamesJson, locationPathname, relative]
    );
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useRoutes() may be used only in the context of a <Router> component.`
    );
    let { navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches: parentMatches } = React2.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (ENABLE_DEV_WARNINGS) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(
        parentPathname,
        !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
        `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
      );
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      invariant(
        parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
        `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
      );
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = matchRoutes(routes, { pathname: remainingPathname });
    if (ENABLE_DEV_WARNINGS) {
      warning(
        parentRoute || matches != null,
        `No routes matched location "${location.pathname}${location.search}${location.hash}" `
      );
      warning(
        matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
        `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
      );
    }
    let renderedMatches = _renderMatches(
      matches && matches.map(
        (match5) => Object.assign({}, match5, {
          params: Object.assign({}, parentParams, match5.params),
          pathname: joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match5.pathname).pathname : match5.pathname
          ]),
          pathnameBase: match5.pathnameBase === "/" ? parentPathnameBase : joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match5.pathnameBase).pathname : match5.pathnameBase
          ])
        })
      ),
      parentMatches,
      dataRouterState,
      future
    );
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React2.createElement(
        LocationContext.Provider,
        {
          value: {
            location: {
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default",
              ...location
            },
            navigationType: "POP"
            /* Pop */
          }
        },
        renderedMatches
      );
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
    let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
    let devInfo = null;
    if (ENABLE_DEV_WARNINGS) {
      console.error(
        "Error handled by React Router default ErrorBoundary:",
        error
      );
      devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React2.Component {
    constructor(props26) {
      super(props26);
      this.state = {
        location: props26.location,
        revalidation: props26.revalidation,
        error: props26.error
      };
    }
    static getDerivedStateFromError(error) {
      return { error };
    }
    static getDerivedStateFromProps(props26, state2) {
      if (state2.location !== props26.location || state2.revalidation !== "idle" && props26.revalidation === "idle") {
        return {
          error: props26.error,
          location: props26.location,
          revalidation: props26.revalidation
        };
      }
      return {
        error: props26.error !== void 0 ? props26.error : state2.error,
        location: state2.location,
        revalidation: props26.revalidation || state2.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error(
        "React Router caught the following error during render",
        error,
        errorInfo
      );
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
        RouteErrorContext.Provider,
        {
          value: this.state.error,
          children: this.props.component
        }
      )) : this.props.children;
    }
  };
  function RenderedRoute({ routeContext, match: match5, children }) {
    let dataRouterContext = React2.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match5.route.errorElement || match5.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match5.route.id;
    }
    return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
  }
  function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
    if (matches == null) {
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = dataRouterState?.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex(
        (m) => m.route.id && errors?.[m.route.id] !== void 0
      );
      invariant(
        errorIndex >= 0,
        `Could not find a matching route for errors on route IDs: ${Object.keys(
          errors
        ).join(",")}`
      );
      renderedMatches = renderedMatches.slice(
        0,
        Math.min(renderedMatches.length, errorIndex + 1)
      );
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState) {
      for (let i2 = 0; i2 < renderedMatches.length; i2++) {
        let match5 = renderedMatches[i2];
        if (match5.route.HydrateFallback || match5.route.hydrateFallbackElement) {
          fallbackIndex = i2;
        }
        if (match5.route.id) {
          let { loaderData, errors: errors2 } = dataRouterState;
          let needsToRunLoader = match5.route.loader && !loaderData.hasOwnProperty(match5.route.id) && (!errors2 || errors2[match5.route.id] === void 0);
          if (match5.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match5, index) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match5.route.id ? errors[match5.route.id] : void 0;
        errorElement = match5.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce(
              "route-fallback",
              false,
              "No `HydrateFallback` element provided to render during initial hydration"
            );
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match5.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match5.route.Component) {
          children = /* @__PURE__ */ React2.createElement(match5.route.Component, null);
        } else if (match5.route.element) {
          children = match5.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React2.createElement(
          RenderedRoute,
          {
            match: match5,
            routeContext: {
              outlet,
              matches: matches2,
              isDataRoute: dataRouterState != null
            },
            children
          }
        );
      };
      return dataRouterState && (match5.route.ErrorBoundary || match5.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(
        RenderErrorBoundary,
        {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error,
          children: getChildren(),
          routeContext: { outlet: null, matches: matches2, isDataRoute: true }
        }
      ) : getChildren();
    }, null);
  }
  function getDataRouterConsoleError(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError(hookName));
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state2 = React2.useContext(DataRouterStateContext);
    invariant(state2, getDataRouterConsoleError(hookName));
    return state2;
  }
  function useRouteContext(hookName) {
    let route = React2.useContext(RouteContext);
    invariant(route, getDataRouterConsoleError(hookName));
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    invariant(
      thisRoute.route.id,
      `${hookName} can only be used on routes that contain a unique "id"`
    );
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(
      "useRouteId"
      /* UseRouteId */
    );
  }
  function useNavigation() {
    let state2 = useDataRouterState(
      "useNavigation"
      /* UseNavigation */
    );
    return state2.navigation;
  }
  function useMatches() {
    let { matches, loaderData } = useDataRouterState(
      "useMatches"
      /* UseMatches */
    );
    return React2.useMemo(
      () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),
      [matches, loaderData]
    );
  }
  function useRouteError() {
    let error = React2.useContext(RouteErrorContext);
    let state2 = useDataRouterState(
      "useRouteError"
      /* UseRouteError */
    );
    let routeId = useCurrentRouteId(
      "useRouteError"
      /* UseRouteError */
    );
    if (error !== void 0) {
      return error;
    }
    return state2.errors?.[routeId];
  }
  function useNavigateStable() {
    let { router } = useDataRouterContext(
      "useNavigate"
      /* UseNavigateStable */
    );
    let id = useCurrentRouteId(
      "useNavigate"
      /* UseNavigateStable */
    );
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      async (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          router.navigate(to);
        } else {
          await router.navigate(to, { fromRouteId: id, ...options });
        }
      },
      [router, id]
    );
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      warning(false, message);
    }
  }
  var MemoizedDataRoutes = React3.memo(DataRoutes);
  function DataRoutes({
    routes,
    future,
    state: state2
  }) {
    return useRoutesImpl(routes, void 0, state2, future);
  }
  function Route(_props) {
    invariant(
      false,
      `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
    );
  }
  function Router({
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = "POP",
    navigator: navigator2,
    static: staticProp = false
  }) {
    invariant(
      !useInRouterContext(),
      `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
    );
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React3.useMemo(
      () => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: {}
      }),
      [basename, navigator2, staticProp]
    );
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash: hash2 = "",
      state: state2 = null,
      key = "default"
    } = locationProp;
    let locationContext = React3.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash: hash2,
          state: state2,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash2, state2, key, navigationType]);
    warning(
      locationContext != null,
      `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash2}" because it does not start with the basename, so the <Router> won't render anything.`
    );
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
  }
  function Routes({
    children,
    location
  }) {
    return useRoutes(createRoutesFromChildren(children), location);
  }
  function createRoutesFromChildren(children, parentPath = []) {
    let routes = [];
    React3.Children.forEach(children, (element, index) => {
      if (!React3.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index];
      if (element.type === React3.Fragment) {
        routes.push.apply(
          routes,
          createRoutesFromChildren(element.props.children, treePath)
        );
        return;
      }
      invariant(
        element.type === Route,
        `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
      );
      invariant(
        !element.props.index || !element.props.children,
        "An index route cannot have child routes."
      );
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        hydrateFallbackElement: element.props.hydrateFallbackElement,
        HydrateFallback: element.props.HydrateFallback,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(
          element.props.children,
          treePath
        );
      }
      routes.push(route);
    });
    return routes;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e2) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      warning(
        false,
        `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
      );
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error(
          `Cannot submit a <button> or <input type="submit"> without a <form>`
        );
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let { name, type, value } = target;
        if (type === "image") {
          let prefix2 = name ? `${name}.` : "";
          formData.append(`${prefix2}x`, "0");
          formData.append(`${prefix2}y`, "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error(
        `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
      );
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return { action, method: method.toLowerCase(), encType, formData, body };
  }
  var objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
  function invariant2(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
  function singleFetchUrl(reqUrl, basename, extension) {
    let url = typeof reqUrl === "string" ? new URL(
      reqUrl,
      // This can be called during the SSR flow via PrefetchPageLinksImpl so
      // don't assume window is available
      typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
    ) : reqUrl;
    if (url.pathname === "/") {
      url.pathname = `_root.${extension}`;
    } else if (basename && stripBasename(url.pathname, basename) === "/") {
      url.pathname = `${basename.replace(/\/$/, "")}/_root.${extension}`;
    } else {
      url.pathname = `${url.pathname.replace(/\/$/, "")}.${extension}`;
    }
    return url;
  }
  async function loadRouteModule(route, routeModulesCache) {
    if (route.id in routeModulesCache) {
      return routeModulesCache[route.id];
    }
    try {
      let routeModule = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        route.module
      );
      routeModulesCache[route.id] = routeModule;
      return routeModule;
    } catch (error) {
      console.error(
        `Error loading route module \`${route.module}\`, reloading page...`
      );
      console.error(error);
      if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
      import_meta.hot) {
        throw error;
      }
      window.location.reload();
      return new Promise(() => {
      });
    }
  }
  function isPageLinkDescriptor(object) {
    return object != null && typeof object.page === "string";
  }
  function isHtmlLinkDescriptor(object) {
    if (object == null) {
      return false;
    }
    if (object.href == null) {
      return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
    }
    return typeof object.rel === "string" && typeof object.href === "string";
  }
  async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
    let links = await Promise.all(
      matches.map(async (match5) => {
        let route = manifest.routes[match5.route.id];
        if (route) {
          let mod2 = await loadRouteModule(route, routeModules);
          return mod2.links ? mod2.links() : [];
        }
        return [];
      })
    );
    return dedupeLinkDescriptors(
      links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
        (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
      )
    );
  }
  function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
    let isNew = (match5, index) => {
      if (!currentMatches[index]) return true;
      return match5.route.id !== currentMatches[index].route.id;
    };
    let matchPathChanged = (match5, index) => {
      return (
        // param change, /users/123 -> /users/456
        currentMatches[index].pathname !== match5.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentMatches[index].route.path?.endsWith("*") && currentMatches[index].params["*"] !== match5.params["*"]
      );
    };
    if (mode === "assets") {
      return nextMatches.filter(
        (match5, index) => isNew(match5, index) || matchPathChanged(match5, index)
      );
    }
    if (mode === "data") {
      return nextMatches.filter((match5, index) => {
        let manifestRoute = manifest.routes[match5.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return false;
        }
        if (isNew(match5, index) || matchPathChanged(match5, index)) {
          return true;
        }
        if (match5.route.shouldRevalidate) {
          let routeChoice = match5.route.shouldRevalidate({
            currentUrl: new URL(
              location.pathname + location.search + location.hash,
              window.origin
            ),
            currentParams: currentMatches[0]?.params || {},
            nextUrl: new URL(page, window.origin),
            nextParams: match5.params,
            defaultShouldRevalidate: true
          });
          if (typeof routeChoice === "boolean") {
            return routeChoice;
          }
        }
        return true;
      });
    }
    return [];
  }
  function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
    return dedupeHrefs(
      matches.map((match5) => {
        let route = manifest.routes[match5.route.id];
        if (!route) return [];
        let hrefs = [route.module];
        if (route.clientActionModule) {
          hrefs = hrefs.concat(route.clientActionModule);
        }
        if (route.clientLoaderModule) {
          hrefs = hrefs.concat(route.clientLoaderModule);
        }
        if (includeHydrateFallback && route.hydrateFallbackModule) {
          hrefs = hrefs.concat(route.hydrateFallbackModule);
        }
        if (route.imports) {
          hrefs = hrefs.concat(route.imports);
        }
        return hrefs;
      }).flat(1)
    );
  }
  function dedupeHrefs(hrefs) {
    return [...new Set(hrefs)];
  }
  function sortKeys(obj) {
    let sorted = {};
    let keys = Object.keys(obj).sort();
    for (let key of keys) {
      sorted[key] = obj[key];
    }
    return sorted;
  }
  function dedupeLinkDescriptors(descriptors, preloads) {
    let set = /* @__PURE__ */ new Set();
    let preloadsSet = new Set(preloads);
    return descriptors.reduce((deduped, descriptor) => {
      let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
      if (alreadyModulePreload) {
        return deduped;
      }
      let key = JSON.stringify(sortKeys(descriptor));
      if (!set.has(key)) {
        set.add(key);
        deduped.push({ key, link: descriptor });
      }
      return deduped;
    }, []);
  }
  function useDataRouterContext2() {
    let context = React8.useContext(DataRouterContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterContext.Provider> element"
    );
    return context;
  }
  function useDataRouterStateContext() {
    let context = React8.useContext(DataRouterStateContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterStateContext.Provider> element"
    );
    return context;
  }
  var FrameworkContext = React8.createContext(void 0);
  FrameworkContext.displayName = "FrameworkContext";
  function useFrameworkContext() {
    let context = React8.useContext(FrameworkContext);
    invariant2(
      context,
      "You must render this element inside a <HydratedRouter> element"
    );
    return context;
  }
  function usePrefetchBehavior(prefetch, theirElementProps) {
    let frameworkContext = React8.useContext(FrameworkContext);
    let [maybePrefetch, setMaybePrefetch] = React8.useState(false);
    let [shouldPrefetch, setShouldPrefetch] = React8.useState(false);
    let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
    let ref = React8.useRef(null);
    React8.useEffect(() => {
      if (prefetch === "render") {
        setShouldPrefetch(true);
      }
      if (prefetch === "viewport") {
        let callback = (entries) => {
          entries.forEach((entry) => {
            setShouldPrefetch(entry.isIntersecting);
          });
        };
        let observer = new IntersectionObserver(callback, { threshold: 0.5 });
        if (ref.current) observer.observe(ref.current);
        return () => {
          observer.disconnect();
        };
      }
    }, [prefetch]);
    React8.useEffect(() => {
      if (maybePrefetch) {
        let id = setTimeout(() => {
          setShouldPrefetch(true);
        }, 100);
        return () => {
          clearTimeout(id);
        };
      }
    }, [maybePrefetch]);
    let setIntent = () => {
      setMaybePrefetch(true);
    };
    let cancelIntent = () => {
      setMaybePrefetch(false);
      setShouldPrefetch(false);
    };
    if (!frameworkContext) {
      return [false, ref, {}];
    }
    if (prefetch !== "intent") {
      return [shouldPrefetch, ref, {}];
    }
    return [
      shouldPrefetch,
      ref,
      {
        onFocus: composeEventHandlers(onFocus, setIntent),
        onBlur: composeEventHandlers(onBlur, cancelIntent),
        onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
        onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
        onTouchStart: composeEventHandlers(onTouchStart, setIntent)
      }
    ];
  }
  function composeEventHandlers(theirHandler, ourHandler) {
    return (event) => {
      theirHandler && theirHandler(event);
      if (!event.defaultPrevented) {
        ourHandler(event);
      }
    };
  }
  function PrefetchPageLinks({
    page,
    ...dataLinkProps
  }) {
    let { router } = useDataRouterContext2();
    let matches = React8.useMemo(
      () => matchRoutes(router.routes, page, router.basename),
      [router.routes, page, router.basename]
    );
    if (!matches) {
      return null;
    }
    return /* @__PURE__ */ React8.createElement(PrefetchPageLinksImpl, { page, matches, ...dataLinkProps });
  }
  function useKeyedPrefetchLinks(matches) {
    let { manifest, routeModules } = useFrameworkContext();
    let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React8.useState([]);
    React8.useEffect(() => {
      let interrupted = false;
      void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
        (links) => {
          if (!interrupted) {
            setKeyedPrefetchLinks(links);
          }
        }
      );
      return () => {
        interrupted = true;
      };
    }, [matches, manifest, routeModules]);
    return keyedPrefetchLinks;
  }
  function PrefetchPageLinksImpl({
    page,
    matches: nextMatches,
    ...linkProps
  }) {
    let location = useLocation();
    let { manifest, routeModules } = useFrameworkContext();
    let { basename } = useDataRouterContext2();
    let { loaderData, matches } = useDataRouterStateContext();
    let newMatchesForData = React8.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches,
        manifest,
        location,
        "data"
      ),
      [page, nextMatches, matches, manifest, location]
    );
    let newMatchesForAssets = React8.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches,
        manifest,
        location,
        "assets"
      ),
      [page, nextMatches, matches, manifest, location]
    );
    let dataHrefs = React8.useMemo(() => {
      if (page === location.pathname + location.search + location.hash) {
        return [];
      }
      let routesParams = /* @__PURE__ */ new Set();
      let foundOptOutRoute = false;
      nextMatches.forEach((m) => {
        let manifestRoute = manifest.routes[m.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return;
        }
        if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {
          foundOptOutRoute = true;
        } else if (manifestRoute.hasClientLoader) {
          foundOptOutRoute = true;
        } else {
          routesParams.add(m.route.id);
        }
      });
      if (routesParams.size === 0) {
        return [];
      }
      let url = singleFetchUrl(page, basename, "data");
      if (foundOptOutRoute && routesParams.size > 0) {
        url.searchParams.set(
          "_routes",
          nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(",")
        );
      }
      return [url.pathname + url.search];
    }, [
      basename,
      loaderData,
      location,
      manifest,
      newMatchesForData,
      nextMatches,
      page,
      routeModules
    ]);
    let moduleHrefs = React8.useMemo(
      () => getModuleLinkHrefs(newMatchesForAssets, manifest),
      [newMatchesForAssets, manifest]
    );
    let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
    return /* @__PURE__ */ React8.createElement(React8.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "prefetch", as: "fetch", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "modulepreload", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
      // these don't spread `linkProps` because they are full link descriptors
      // already with their own props
      /* @__PURE__ */ React8.createElement("link", { key, ...link })
    )));
  }
  function mergeRefs(...refs) {
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  try {
    if (isBrowser) {
      window.__reactRouterVersion = // @ts-expect-error
      "7.7.0";
    }
  } catch (e2) {
  }
  function BrowserRouter({
    basename,
    children,
    window: window2
  }) {
    let historyRef = React10.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });
    }
    let history = historyRef.current;
    let [state2, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state2.location,
        navigationType: state2.action,
        navigator: history
      }
    );
  }
  function HistoryRouter({
    basename,
    children,
    history
  }) {
    let [state2, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state2.location,
        navigationType: state2.action,
        navigator: history
      }
    );
  }
  HistoryRouter.displayName = "unstable_HistoryRouter";
  var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = React10.forwardRef(
    function LinkWithRef({
      onClick,
      discover = "render",
      prefetch = "none",
      relative,
      reloadDocument,
      replace: replace22,
      state: state2,
      target,
      to,
      preventScrollReset,
      viewTransition,
      ...rest
    }, forwardedRef) {
      let { basename } = React10.useContext(NavigationContext);
      let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
      let absoluteHref;
      let isExternal = false;
      if (typeof to === "string" && isAbsolute) {
        absoluteHref = to;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e2) {
            warning(
              false,
              `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
            );
          }
        }
      }
      let href = useHref(to, { relative });
      let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
        prefetch,
        rest
      );
      let internalOnClick = useLinkClickHandler(to, {
        replace: replace22,
        state: state2,
        target,
        preventScrollReset,
        relative,
        viewTransition
      });
      function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      let link = (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ React10.createElement(
          "a",
          {
            ...rest,
            ...prefetchHandlers,
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref: mergeRefs(forwardedRef, prefetchRef),
            target,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        )
      );
      return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link;
    }
  );
  Link.displayName = "Link";
  var NavLink = React10.forwardRef(
    function NavLinkWithRef({
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      viewTransition,
      children,
      ...rest
    }, ref) {
      let path = useResolvedPath(to, { relative: rest.relative });
      let location = useLocation();
      let routerState = React10.useContext(DataRouterStateContext);
      let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
      let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && viewTransition === true;
      let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
      let locationPathname = location.pathname;
      let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
      }
      if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
      }
      const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
      let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
      let renderProps = {
        isActive,
        isPending,
        isTransitioning
      };
      let ariaCurrent = isActive ? ariaCurrentProp : void 0;
      let className;
      if (typeof classNameProp === "function") {
        className = classNameProp(renderProps);
      } else {
        className = [
          classNameProp,
          isActive ? "active" : null,
          isPending ? "pending" : null,
          isTransitioning ? "transitioning" : null
        ].filter(Boolean).join(" ");
      }
      let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
      return /* @__PURE__ */ React10.createElement(
        Link,
        {
          ...rest,
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        },
        typeof children === "function" ? children(renderProps) : children
      );
    }
  );
  NavLink.displayName = "NavLink";
  var Form = React10.forwardRef(
    ({
      discover = "render",
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace22,
      state: state2,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      viewTransition,
      ...props26
    }, forwardedRef) => {
      let submit = useSubmit();
      let formAction = useFormAction(action, { relative });
      let formMethod = method.toLowerCase() === "get" ? "get" : "post";
      let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
      let submitHandler = (event) => {
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = submitter?.getAttribute("formmethod") || method;
        submit(submitter || event.currentTarget, {
          fetcherKey,
          method: submitMethod,
          navigate,
          replace: replace22,
          state: state2,
          relative,
          preventScrollReset,
          viewTransition
        });
      };
      return /* @__PURE__ */ React10.createElement(
        "form",
        {
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler,
          ...props26,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      );
    }
  );
  Form.displayName = "Form";
  function ScrollRestoration({
    getKey,
    storageKey,
    ...props26
  }) {
    let remixContext = React10.useContext(FrameworkContext);
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    useScrollRestoration({ getKey, storageKey });
    let ssrKey = React10.useMemo(
      () => {
        if (!remixContext || !getKey) return null;
        let userKey = getScrollRestorationKey(
          location,
          matches,
          basename,
          getKey
        );
        return userKey !== location.key ? userKey : null;
      },
      // Nah, we only need this the first time for the SSR render
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    if (!remixContext || remixContext.isSpaMode) {
      return null;
    }
    let restoreScroll = ((storageKey2, restoreKey) => {
      if (!window.history.state || !window.history.state.key) {
        let key = Math.random().toString(32).slice(2);
        window.history.replaceState({ key }, "");
      }
      try {
        let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
        let storedY = positions[restoreKey || window.history.state.key];
        if (typeof storedY === "number") {
          window.scrollTo(0, storedY);
        }
      } catch (error) {
        console.error(error);
        sessionStorage.removeItem(storageKey2);
      }
    }).toString();
    return /* @__PURE__ */ React10.createElement(
      "script",
      {
        ...props26,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: `(${restoreScroll})(${JSON.stringify(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          )}, ${JSON.stringify(ssrKey)})`
        }
      }
    );
  }
  ScrollRestoration.displayName = "ScrollRestoration";
  function getDataRouterConsoleError2(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext3(hookName) {
    let ctx = React10.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError2(hookName));
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state2 = React10.useContext(DataRouterStateContext);
    invariant(state2, getDataRouterConsoleError2(hookName));
    return state2;
  }
  function useLinkClickHandler(to, {
    target,
    replace: replaceProp,
    state: state2,
    preventScrollReset,
    relative,
    viewTransition
  } = {}) {
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, { relative });
    return React10.useCallback(
      (event) => {
        if (shouldProcessLinkClick(event, target)) {
          event.preventDefault();
          let replace22 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
          navigate(to, {
            replace: replace22,
            state: state2,
            preventScrollReset,
            relative,
            viewTransition
          });
        }
      },
      [
        location,
        navigate,
        path,
        replaceProp,
        state2,
        target,
        to,
        preventScrollReset,
        relative,
        viewTransition
      ]
    );
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
  function useSubmit() {
    let { router } = useDataRouterContext3(
      "useSubmit"
      /* UseSubmit */
    );
    let { basename } = React10.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React10.useCallback(
      async (target, options = {}) => {
        let { action, method, encType, formData, body } = getFormSubmissionInfo(
          target,
          basename
        );
        if (options.navigate === false) {
          let key = options.fetcherKey || getUniqueFetcherId();
          await router.fetch(key, currentRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            flushSync: options.flushSync
          });
        } else {
          await router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            flushSync: options.flushSync,
            viewTransition: options.viewTransition
          });
        }
      },
      [router, basename, currentRouteId]
    );
  }
  function useFormAction(action, { relative } = {}) {
    let { basename } = React10.useContext(NavigationContext);
    let routeContext = React10.useContext(RouteContext);
    invariant(routeContext, "useFormAction must be used inside a RouteContext");
    let [match5] = routeContext.matches.slice(-1);
    let path = { ...useResolvedPath(action ? action : ".", { relative }) };
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? `?${qs}` : "";
      }
    }
    if ((!action || action === ".") && match5.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function getScrollRestorationKey(location, matches, basename, getKey) {
    let key = null;
    if (getKey) {
      if (basename !== "/") {
        key = getKey(
          {
            ...location,
            pathname: stripBasename(location.pathname, basename) || location.pathname
          },
          matches
        );
      } else {
        key = getKey(location, matches);
      }
    }
    if (key == null) {
      key = location.key;
    }
    return key;
  }
  function useScrollRestoration({
    getKey,
    storageKey
  } = {}) {
    let { router } = useDataRouterContext3(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React10.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(
      React10.useCallback(() => {
        if (navigation.state === "idle") {
          let key = getScrollRestorationKey(location, matches, basename, getKey);
          savedScrollPositions[key] = window.scrollY;
        }
        try {
          sessionStorage.setItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY,
            JSON.stringify(savedScrollPositions)
          );
        } catch (error) {
          warning(
            false,
            `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`
          );
        }
        window.history.scrollRestoration = "auto";
      }, [navigation.state, getKey, basename, location, matches, storageKey])
    );
    if (typeof document !== "undefined") {
      React10.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          );
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e2) {
        }
      }, [storageKey]);
      React10.useLayoutEffect(() => {
        let disableScrollRestoration = router?.enableScrollRestoration(
          savedScrollPositions,
          () => window.scrollY,
          getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0
        );
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React10.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        try {
          if (location.hash) {
            let el = document.getElementById(
              decodeURIComponent(location.hash.slice(1))
            );
            if (el) {
              el.scrollIntoView();
              return;
            }
          }
        } catch {
          warning(
            false,
            `"${location.hash.slice(
              1
            )}" is not a decodable element ID. The view will not scroll to it.`
          );
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let { capture } = options || {};
    React10.useEffect(() => {
      let opts = capture != null ? { capture } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts = {}) {
    let vtContext = React10.useContext(ViewTransitionContext);
    invariant(
      vtContext != null,
      "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
    );
    let { basename } = useDataRouterContext3(
      "useViewTransitionState"
      /* useViewTransitionState */
    );
    let path = useResolvedPath(to, { relative: opts.relative });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }

  // src/components/layout.jsx
  var import_react171 = __toESM(require_react());

  // node_modules/@chakra-ui/react/dist/esm/styled-system/factory.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0) cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ memoize(
    function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
  );

  // node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var React13 = __toESM(require_react());
  var import_react = __toESM(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
  var isDevelopment = false;
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
    return void 0;
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert3(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e2) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush2() {
      this.tags.forEach(function(tag) {
        var _tag$parentNode;
        return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace2(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props26, children, length2) {
    return { value, root, parent, type, props: props26, children, line, column, length: length2, return: "" };
  }
  function copy(root, props26) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props26);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset3 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props26 = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace2(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset3:
              if (ampersand == -1) characters2 = replace2(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace2(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append(reference = ruleset(characters2, root, parent, index, offset3, rules, points, type, props26 = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset3 === 0)
                  parse(characters2, root, reference, reference, props26, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props26 = [], length2), children), rules, children, length2, points, rule ? props26 : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset3 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset3 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset3 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset3, rules, points, type, props26, children, length2) {
    var post = offset3 - 1;
    var rule = offset3 === 0 ? rules : [""];
    var size3 = sizeof(rule);
    for (var i2 = 0, j = 0, k = 0; i2 < index; ++i2)
      for (var x2 = 0, y = substr(value, post + 1, post = abs(j = points[i2])), z2 = value; x2 < size3; ++x2)
        if (z2 = trim(j > 0 ? rule[x2] + " " + y : replace2(y, /&\f/g, rule[x2])))
          props26[k++] = z2;
    return node(value, root, parent, offset3 === 0 ? RULESET : type, props26, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i2 = 0; i2 < length2; i2++)
      output += callback(children[i2], i2, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection4) {
    var length2 = sizeof(collection4);
    return function(element, index, children, callback) {
      var output = "";
      for (var i2 = 0; i2 < length2; i2++)
        output += collection4[i2](element, index, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(position - 1, points, index);
          break;
        case 2:
          parsed[index] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index] = peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        // fallthrough
        default:
          parsed[index] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value;
    var parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent) return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i2 = 0, k = 0; i2 < rules.length; i2++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      // align-items
      case 5187:
        return WEBKIT + value + replace2(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      // align-self
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace2(value, /flex-|-self/, "") + value;
      // align-content
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace2(value, /align-content|flex-|-self/, "") + value;
      // flex-shrink
      case 5548:
        return WEBKIT + value + MS + replace2(value, "shrink", "negative") + value;
      // flex-basis
      case 5292:
        return WEBKIT + value + MS + replace2(value, "basis", "preferred-size") + value;
      // flex-grow
      case 6060:
        return WEBKIT + "box-" + replace2(value, "-grow", "") + WEBKIT + value + MS + replace2(value, "grow", "positive") + value;
      // transition
      case 4554:
        return WEBKIT + replace2(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      // cursor
      case 6187:
        return replace2(replace2(replace2(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      // background, background-image
      case 5495:
      case 3959:
        return replace2(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // justify-content
      case 4968:
        return replace2(replace2(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace2(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            if (charat(value, length2 + 4) !== 45) break;
          // (f)ill-available, (f)it-content
          case 102:
            return replace2(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace2(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
      // position: sticky
      case 4949:
        if (charat(value, length2 + 1) !== 115) break;
      // display: (flex|inline-flex)
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          // stic(k)y
          case 107:
            return replace2(value, ":", ":" + WEBKIT) + value;
          // (inline-)?fl(e)x
          case 101:
            return replace2(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      // writing-mode
      case 5936:
        switch (charat(value, length2 + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          // vertical-r(l)
          case 108:
            return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          // horizontal(-)tb
          case 45:
            return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index, children, callback) {
    if (element.length > -1) {
      if (!element["return"]) switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace2(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length) return combine(element.props, function(value) {
            switch (match(value, /(::plac\w+|:read-\w+)/)) {
              // :read-(only|write)
              case ":read-only":
              case ":read-write":
                return serialize([copy(element, {
                  props: [replace2(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                })], callback);
              // :placeholder
              case "::placeholder":
                return serialize([copy(element, {
                  props: [replace2(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                }), copy(element, {
                  props: [replace2(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                }), copy(element, {
                  props: [replace2(value, /:(plac\w+)/, MS + "input-$1")]
                })], callback);
            }
            return "";
          });
      }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i2 = 1; i2 < attrib.length; i2++) {
            inserted[attrib[i2]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    {
      var currentSheet;
      var finalizingPlugins = [stringify, rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles) {
        return serialize(compile(styles), serializer);
      };
      _insert = function insert3(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache2.inserted[serialized.name] = true;
        }
      };
    }
    var cache2 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache2.sheet.hydrate(nodesToHydrate);
    return cache2;
  };

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser2 = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else if (className) {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache2, serialized, isStringTag) {
    var className = cache2.key + "-" + serialized.name;
    if (
      // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser2 === false) && cache2.registered[className] === void 0
    ) {
      cache2.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache2, serialized, isStringTag) {
    registerStyles(cache2, serialized, isStringTag);
    var className = cache2.key + "-" + serialized.name;
    if (cache2.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        cache2.insert(serialized === current ? "." + className : "", current, cache2.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i2) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    scale: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  // node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
  var isDevelopment2 = false;
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match5, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== void 0) {
      return componentSelector;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        var keyframes2 = interpolation;
        if (keyframes2.anim === 1) {
          cursor = {
            name: keyframes2.name,
            styles: keyframes2.styles,
            next: cursor
          };
          return keyframes2.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== void 0) {
          var next3 = serializedStyles.next;
          if (next3 !== void 0) {
            while (next3 !== void 0) {
              cursor = {
                name: next3.name,
                styles: next3.styles,
                next: cursor
              };
              next3 = next3.next;
            }
          }
          var styles = serializedStyles.styles + ";";
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    var asString = interpolation;
    if (registered == null) {
      return asString;
    }
    var cached = registered[asString];
    return cached !== void 0 ? cached : asString;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var key in obj) {
        var value = obj[key];
        if (typeof value !== "object") {
          var asString = value;
          if (registered != null && registered[asString] !== void 0) {
            string += key + "{" + registered[asString] + "}";
          } else if (isProcessableValue(asString)) {
            string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
          }
        } else {
          if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (key) {
              case "animation":
              case "animationName": {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string += key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
  var cursor;
  function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      var asTemplateStringsArr = strings;
      styles += asTemplateStringsArr[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        var templateStringsArr = strings;
        styles += templateStringsArr[i2];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match5;
    while ((match5 = labelPattern.exec(styles)) !== null) {
      identifierName += "-" + match5[1];
    }
    var name = murmur2(styles) + identifierName;
    return {
      name,
      styles,
      next: cursor
    };
  }

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React12 = __toESM(require_react());
  var syncFallback = function syncFallback2(create) {
    return create();
  };
  var useInsertionEffect2 = React12["useInsertionEffect"] ? React12["useInsertionEffect"] : false;
  var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
  var useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React12.useLayoutEffect;

  // node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var isDevelopment3 = false;
  var EmotionCacheContext = /* @__PURE__ */ React13.createContext(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
      key: "css"
    }) : null
  );
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react.forwardRef)(function(props26, ref) {
      var cache2 = (0, import_react.useContext)(EmotionCacheContext);
      return func(props26, cache2, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ React13.createContext({});
  var hasOwn = {}.hasOwnProperty;
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var createEmotionProps = function createEmotionProps2(type, props26) {
    var newProps = {};
    for (var _key in props26) {
      if (hasOwn.call(props26, _key)) {
        newProps[_key] = props26[_key];
      }
    }
    newProps[typePropName] = type;
    return newProps;
  };
  var Insertion = function Insertion2(_ref) {
    var cache2 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    registerStyles(cache2, serialized, isStringTag);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache2, serialized, isStringTag);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props26, cache2, ref) {
    var cssProp = props26.css;
    if (typeof cssProp === "string" && cache2.registered[cssProp] !== void 0) {
      cssProp = cache2.registered[cssProp];
    }
    var WrappedComponent = props26[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props26.className === "string") {
      className = getRegisteredStyles(cache2.registered, registeredStyles, props26.className);
    } else if (props26.className != null) {
      className = props26.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, React13.useContext(ThemeContext));
    className += cache2.key + "-" + serialized.name;
    var newProps = {};
    for (var _key2 in props26) {
      if (hasOwn.call(props26, _key2) && _key2 !== "css" && _key2 !== typePropName && !isDevelopment3) {
        newProps[_key2] = props26[_key2];
      }
    }
    newProps.className = className;
    if (ref) {
      newProps.ref = ref;
    }
    return /* @__PURE__ */ React13.createElement(React13.Fragment, null, /* @__PURE__ */ React13.createElement(Insertion, {
      cache: cache2,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ React13.createElement(WrappedComponent, newProps));
  });
  var Emotion$1 = Emotion;

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React14 = __toESM(require_react());
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var jsx = function jsx2(type, props26) {
    var args = arguments;
    if (props26 == null || !hasOwn.call(props26, "css")) {
      return React14.createElement.apply(void 0, args);
    }
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = Emotion$1;
    createElementArgArray[1] = createEmotionProps(type, props26);
    for (var i2 = 2; i2 < argsLength; i2++) {
      createElementArgArray[i2] = args[i2];
    }
    return React14.createElement.apply(null, createElementArgArray);
  };
  (function(_jsx) {
    var JSX;
    /* @__PURE__ */ (function(_JSX) {
    })(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
  })(jsx || (jsx = {}));
  var Global = /* @__PURE__ */ withEmotionCache(function(props26, cache2) {
    var styles = props26.styles;
    var serialized = serializeStyles([styles], void 0, React14.useContext(ThemeContext));
    var sheetRef = React14.useRef();
    useInsertionEffectWithLayoutFallback(function() {
      var key = cache2.key + "-global";
      var sheet = new cache2.sheet.constructor({
        key,
        nonce: cache2.sheet.nonce,
        container: cache2.sheet.container,
        speedy: cache2.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache2.sheet.tags.length) {
        sheet.before = cache2.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet.hydrate([node2]);
      }
      sheetRef.current = [sheet, rehydrating];
      return function() {
        sheet.flush();
      };
    }, [cache2]);
    useInsertionEffectWithLayoutFallback(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache2, serialized.next, true);
      }
      if (sheet.tags.length) {
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }
      cache2.insert("", serialized, sheet, false);
    }, [cache2, serialized.name]);
    return null;
  });

  // node_modules/@chakra-ui/react/dist/esm/styled-system/factory.js
  var React16 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/utils/call-all.js
  function callAll(...fns) {
    return function mergedFn(...args) {
      fns.forEach((fn) => fn?.(...args));
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/merge-props.js
  var clsx = (...args) => args.map((str) => str?.trim?.()).filter(Boolean).join(" ");
  var eventRegex = /^on[A-Z]/;
  function mergeProps(...args) {
    let result = {};
    for (let props26 of args) {
      for (let key in result) {
        if (eventRegex.test(key) && typeof result[key] === "function" && typeof props26[key] === "function") {
          result[key] = callAll(result[key], props26[key]);
          continue;
        }
        if (key === "className" || key === "class") {
          result[key] = clsx(result[key], props26[key]);
          continue;
        }
        if (key === "style") {
          result[key] = Object.assign({}, result[key] ?? {}, props26[key] ?? {});
          continue;
        }
        result[key] = props26[key] !== void 0 ? props26[key] : result[key];
      }
      for (let key in props26) {
        if (result[key] === void 0) {
          result[key] = props26[key];
        }
      }
    }
    return result;
  }

  // node_modules/@chakra-ui/react/dist/esm/merge-refs.js
  function assignRef(ref, value) {
    if (ref == null) return;
    if (typeof ref === "function") {
      ref(value);
      return;
    }
    try {
      ref.current = value;
    } catch (error) {
      throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
    }
  }
  function mergeRefs2(...refs) {
    return (node2) => {
      refs.forEach((ref) => {
        assignRef(ref, node2);
      });
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/compact.js
  function compact(object) {
    const clone2 = Object.assign({}, object);
    for (let key in clone2) {
      if (clone2[key] === void 0) delete clone2[key];
    }
    return clone2;
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/cx.js
  var cx = (...classNames) => classNames.filter(Boolean).map((r2) => r2.trim()).join(" ");

  // node_modules/@chakra-ui/react/dist/esm/utils/interop.js
  function interopDefault(mod2) {
    return mod2.default || mod2;
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/ref.js
  var React15 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/utils/is.js
  var isObject = (v) => v != null && typeof v === "object" && !Array.isArray(v);
  var isString = (v) => typeof v === "string";
  var isFunction = (v) => typeof v === "function";

  // node_modules/@chakra-ui/react/dist/esm/utils/ref.js
  function getElementRef(el) {
    const version2 = React15.version;
    if (!isString(version2)) return el?.ref;
    if (version2.startsWith("18.")) return el?.ref;
    return el?.props?.ref;
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/uniq.js
  var uniq = (...items) => {
    const set = items.reduce((acc, curr) => {
      if (curr != null) curr.forEach((item) => acc.add(item));
      return acc;
    }, /* @__PURE__ */ new Set([]));
    return Array.from(set);
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/provider.js
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

  // node_modules/@chakra-ui/react/dist/esm/create-context.js
  var import_react2 = __toESM(require_react(), 1);
  function getErrorMessage(hook, provider) {
    return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
  }
  function createContext5(options = {}) {
    const {
      name,
      strict = true,
      hookName = "useContext",
      providerName = "Provider",
      errorMessage,
      defaultValue
    } = options;
    const Context = (0, import_react2.createContext)(defaultValue);
    Context.displayName = name;
    function useContext$1() {
      const context = (0, import_react2.useContext)(Context);
      if (!context && strict) {
        const error = new Error(
          errorMessage ?? getErrorMessage(hookName, providerName)
        );
        error.name = "ContextError";
        Error.captureStackTrace?.(error, useContext$1);
        throw error;
      }
      return context;
    }
    return [Context.Provider, useContext$1, Context];
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/provider.js
  var [ChakraContextProvider, useChakraContext] = createContext5({
    name: "ChakraContext",
    strict: true,
    providerName: "<ChakraProvider />"
  });
  function ChakraProvider(props26) {
    const { value: sys, children } = props26;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(ChakraContextProvider, { value: sys, children: [
      !sys._config.disableLayers && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Global, { styles: sys.layers.atRule }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Global, { styles: sys._global }),
      children
    ] });
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/use-resolved-props.js
  var import_react4 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/utils/split-props.js
  var splitPropFn = (props26, predicate) => {
    const rest = {};
    const result = {};
    const allKeys = Object.keys(props26);
    for (const key of allKeys) {
      if (predicate(key)) {
        result[key] = props26[key];
      } else {
        rest[key] = props26[key];
      }
    }
    return [result, rest];
  };
  var splitProps = (props26, keys) => {
    const predicate = isFunction(keys) ? keys : (key) => keys.includes(key);
    return splitPropFn(props26, predicate);
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/use-resolved-props.js
  var htmlProps = /* @__PURE__ */ new Set([
    "htmlWidth",
    "htmlHeight",
    "htmlSize",
    "htmlTranslate"
  ]);
  function isHtmlProp(prop) {
    return typeof prop === "string" && htmlProps.has(prop);
  }
  function useResolvedProps(inProps, cvaRecipe, shouldForwardProps) {
    const { css: css2, isValidProperty } = useChakraContext();
    const { children, ...props26 } = inProps;
    const result = (0, import_react4.useMemo)(() => {
      const [forwardedProps, restProps_B] = splitProps(
        props26,
        (key) => shouldForwardProps(key, cvaRecipe.variantKeys)
      );
      const [variantProps, restProps_C] = splitProps(
        restProps_B,
        cvaRecipe.variantKeys
      );
      const [styleProps, elementProps] = splitProps(restProps_C, isValidProperty);
      return {
        forwardedProps,
        variantProps,
        styleProps,
        elementProps
      };
    }, [cvaRecipe.variantKeys, shouldForwardProps, props26, isValidProperty]);
    const { css: cssStyles, ...propStyles } = result.styleProps;
    const cvaStyles = (0, import_react4.useMemo)(() => {
      const variantProps = { ...result.variantProps };
      if (!cvaRecipe.variantKeys.includes("colorPalette")) {
        variantProps.colorPalette = props26.colorPalette;
      }
      if (!cvaRecipe.variantKeys.includes("orientation")) {
        variantProps.orientation = props26.orientation;
      }
      return cvaRecipe(variantProps);
    }, [cvaRecipe, result.variantProps, props26.colorPalette, props26.orientation]);
    const styles = (0, import_react4.useMemo)(() => {
      return css2(cvaStyles, ...toArray(cssStyles), propStyles);
    }, [css2, cvaStyles, cssStyles, propStyles]);
    return {
      styles,
      props: {
        ...result.forwardedProps,
        ...result.elementProps,
        children
      }
    };
  }
  var toArray = (val) => {
    const res = Array.isArray(val) ? val : [val];
    return res.filter(Boolean).flat();
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/factory.js
  var isPropValid2 = interopDefault(isPropValid);
  var testOmitPropsOnStringTag = isPropValid2;
  var testOmitPropsOnComponent = (key) => key !== "theme";
  var composeShouldForwardProps = (tag, options, isReal) => {
    let shouldForwardProp;
    if (options) {
      const optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? (propName) => tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName) : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== "function" && isReal) {
      shouldForwardProp = tag.__emotion_forwardProp;
    }
    return shouldForwardProp;
  };
  var isBrowser3 = typeof document !== "undefined";
  var Insertion3 = ({ cache: cache2, serialized, isStringTag }) => {
    registerStyles(cache2, serialized, isStringTag);
    const rules = useInsertionEffectAlwaysWithSyncFallback(
      () => insertStyles(cache2, serialized, isStringTag)
    );
    if (!isBrowser3 && rules !== void 0) {
      let serializedNames = serialized.name;
      let next3 = serialized.next;
      while (next3 !== void 0) {
        serializedNames = cx(serializedNames, next3.name);
        next3 = next3.next;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "style",
        {
          ...{
            [`data-emotion`]: cx(cache2.key, serializedNames),
            dangerouslySetInnerHTML: { __html: rules },
            nonce: cache2.sheet.nonce
          }
        }
      );
    }
    return null;
  };
  var exceptionPropMap = {
    path: ["d"],
    text: ["x", "y"],
    circle: ["cx", "cy", "r"],
    rect: ["width", "height", "x", "y", "rx", "ry"],
    ellipse: ["cx", "cy", "rx", "ry"],
    g: ["transform"],
    stop: ["offset", "stopOpacity"]
  };
  var hasProp = (obj, prop) => {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  };
  var createStyled = (tag, configOrCva = {}, options = {}) => {
    if (true) {
      if (tag === void 0) {
        throw new Error(
          "You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it."
        );
      }
    }
    if (hasProp(exceptionPropMap, tag)) {
      options.forwardProps || (options.forwardProps = []);
      const props26 = exceptionPropMap[tag];
      options.forwardProps = uniq([...options.forwardProps, ...props26]);
    }
    const isReal = tag.__emotion_real === tag;
    const baseTag = isReal && tag.__emotion_base || tag;
    let identifierName;
    let targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    let styles = [];
    const Styled = withEmotionCache((inProps, cache2, ref) => {
      const { cva, isValidProperty } = useChakraContext();
      const cvaFn = configOrCva.__cva__ ? configOrCva : cva(configOrCva);
      const cvaRecipe = mergeCva(tag.__emotion_cva, cvaFn);
      const createShouldForwardProps = (props27) => {
        return (prop, variantKeys) => {
          if (props27.includes(prop)) return true;
          return !variantKeys?.includes(prop) && !isValidProperty(prop);
        };
      };
      if (!options.shouldForwardProp && options.forwardProps) {
        options.shouldForwardProp = createShouldForwardProps(options.forwardProps);
      }
      const fallbackShouldForwardProp = (prop, variantKeys) => {
        const emotionSfp = typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
        const chakraSfp = !variantKeys?.includes(prop) && !isValidProperty(prop);
        return emotionSfp(prop) && chakraSfp;
      };
      const shouldForwardProp = composeShouldForwardProps(tag, options, isReal) || fallbackShouldForwardProp;
      const propsWithDefault = React16.useMemo(
        () => Object.assign({}, options.defaultProps, compact(inProps)),
        [inProps]
      );
      const { props: props26, styles: styleProps } = useResolvedProps(
        propsWithDefault,
        cvaRecipe,
        shouldForwardProp
      );
      let className = "";
      let classInterpolations = [styleProps];
      let mergedProps = props26;
      if (props26.theme == null) {
        mergedProps = {};
        for (let key in props26) {
          mergedProps[key] = props26[key];
        }
        mergedProps.theme = React16.useContext(ThemeContext);
      }
      if (typeof props26.className === "string") {
        className = getRegisteredStyles(
          cache2.registered,
          classInterpolations,
          props26.className
        );
      } else if (props26.className != null) {
        className = cx(className, props26.className);
      }
      const serialized = serializeStyles(
        styles.concat(classInterpolations),
        cache2.registered,
        mergedProps
      );
      if (serialized.styles) {
        className = cx(className, `${cache2.key}-${serialized.name}`);
      }
      if (targetClassName !== void 0) {
        className = cx(className, targetClassName);
      }
      const shouldUseAs = !shouldForwardProp("as");
      let FinalTag = shouldUseAs && props26.as || baseTag;
      let finalProps = {};
      for (let prop in props26) {
        if (shouldUseAs && prop === "as") continue;
        if (isHtmlProp(prop)) {
          const nativeProp = prop.replace("html", "").toLowerCase();
          finalProps[nativeProp] = props26[prop];
          continue;
        }
        if (shouldForwardProp(prop)) {
          finalProps[prop] = props26[prop];
        }
      }
      let classNameToUse = className.trim();
      if (classNameToUse) {
        finalProps.className = classNameToUse;
      } else {
        Reflect.deleteProperty(finalProps, "className");
      }
      finalProps.ref = ref;
      const forwardAsChild = options.forwardAsChild || options.forwardProps?.includes("asChild");
      if (props26.asChild && !forwardAsChild) {
        const child = React16.Children.only(props26.children);
        FinalTag = child.type;
        finalProps.children = null;
        Reflect.deleteProperty(finalProps, "asChild");
        finalProps = mergeProps(finalProps, child.props);
        finalProps.ref = mergeRefs2(ref, getElementRef(child));
      }
      if (finalProps.as && forwardAsChild) {
        finalProps.as = void 0;
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(React16.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            Insertion3,
            {
              cache: cache2,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(FinalTag, { asChild: true, ...finalProps, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(props26.as, { children: finalProps.children }) })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(React16.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          Insertion3,
          {
            cache: cache2,
            serialized,
            isStringTag: typeof FinalTag === "string"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(FinalTag, { ...finalProps })
      ] });
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : `chakra(${typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component"})`;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_forwardProp = options.shouldForwardProp;
    Styled.__emotion_cva = configOrCva;
    Object.defineProperty(Styled, "toString", {
      value() {
        if (targetClassName === void 0 && true) {
          return "NO_COMPONENT_SELECTOR";
        }
        return `.${targetClassName}`;
      }
    });
    return Styled;
  };
  var styledFn = createStyled.bind();
  var cache = /* @__PURE__ */ new Map();
  var chakraImpl = new Proxy(styledFn, {
    apply(_2, __, args) {
      return styledFn(...args);
    },
    get(_2, el) {
      if (!cache.has(el)) {
        cache.set(el, styledFn(el));
      }
      return cache.get(el);
    }
  });
  var chakra = chakraImpl;
  var mergeCva = (cvaA, cvaB) => {
    if (cvaA && !cvaB) return cvaA;
    if (!cvaA && cvaB) return cvaB;
    return cvaA.merge(cvaB);
  };

  // node_modules/@chakra-ui/react/dist/esm/components/box/index.js
  var Box = chakra("div");
  Box.displayName = "Box";

  // node_modules/@chakra-ui/react/dist/esm/components/circle/index.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var import_react7 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/square/index.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var import_react6 = __toESM(require_react(), 1);
  var Square = (0, import_react6.forwardRef)(
    function Square2(props26, ref) {
      const { size: size3, ...rest } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        Box,
        {
          ...rest,
          ref,
          boxSize: size3,
          css: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            flexShrink: 0,
            flexGrow: 0,
            ...props26.css
          }
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/circle/index.js
  var Circle = (0, import_react7.forwardRef)(
    function Circle2(props26, ref) {
      const { size: size3, ...rest } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Square, { size: size3, ref, borderRadius: "9999px", ...rest });
    }
  );

  // node_modules/@ark-ui/react/dist/utils/create-context.js
  var import_react8 = __toESM(require_react(), 1);
  function getErrorMessage2(hook, provider) {
    return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
  }
  function createContext6(options = {}) {
    const {
      name,
      strict = true,
      hookName = "useContext",
      providerName = "Provider",
      errorMessage,
      defaultValue
    } = options;
    const Context = (0, import_react8.createContext)(defaultValue);
    Context.displayName = name;
    function useContext$1() {
      const context = (0, import_react8.useContext)(Context);
      if (!context && strict) {
        const error = new Error(errorMessage ?? getErrorMessage2(hookName, providerName));
        error.name = "ContextError";
        Error.captureStackTrace?.(error, useContext$1);
        throw error;
      }
      return context;
    }
    return [Context.Provider, useContext$1, Context];
  }

  // node_modules/@zag-js/utils/dist/index.mjs
  function toArray2(v) {
    if (v == null) return [];
    return Array.isArray(v) ? v : [v];
  }
  var first = (v) => v[0];
  var last = (v) => v[v.length - 1];
  var has = (v, t3) => v.indexOf(t3) !== -1;
  var add = (v, ...items) => v.concat(items);
  var remove = (v, ...items) => v.filter((t3) => !items.includes(t3));
  var uniq2 = (v) => Array.from(new Set(v));
  var diff = (a, b2) => {
    const set = new Set(b2);
    return a.filter((t3) => !set.has(t3));
  };
  var addOrRemove = (v, item) => has(v, item) ? remove(v, item) : add(v, item);
  function nextIndex(v, idx, opts = {}) {
    const { step = 1, loop = true } = opts;
    const next22 = idx + step;
    const len = v.length;
    const last2 = len - 1;
    if (idx === -1) return step > 0 ? 0 : last2;
    if (next22 < 0) return loop ? last2 : 0;
    if (next22 >= len) return loop ? 0 : idx > len ? len : idx;
    return next22;
  }
  function next2(v, idx, opts = {}) {
    return v[nextIndex(v, idx, opts)];
  }
  function prevIndex(v, idx, opts = {}) {
    const { step = 1, loop = true } = opts;
    return nextIndex(v, idx, { step: -step, loop });
  }
  function prev2(v, index, opts = {}) {
    return v[prevIndex(v, index, opts)];
  }
  function flatArray(arr) {
    return arr.reduce((flat, item) => {
      if (Array.isArray(item)) {
        return flat.concat(flatArray(item));
      }
      return flat.concat(item);
    }, []);
  }
  function partition(arr, fn) {
    return arr.reduce(
      ([pass, fail], value) => {
        if (fn(value)) pass.push(value);
        else fail.push(value);
        return [pass, fail];
      },
      [[], []]
    );
  }
  var isArrayLike = (value) => value?.constructor.name === "Array";
  var isArrayEqual = (a, b2) => {
    if (a.length !== b2.length) return false;
    for (let i2 = 0; i2 < a.length; i2++) {
      if (!isEqual(a[i2], b2[i2])) return false;
    }
    return true;
  };
  var isEqual = (a, b2) => {
    if (Object.is(a, b2)) return true;
    if (a == null && b2 != null || a != null && b2 == null) return false;
    if (typeof a?.isEqual === "function" && typeof b2?.isEqual === "function") {
      return a.isEqual(b2);
    }
    if (typeof a === "function" && typeof b2 === "function") {
      return a.toString() === b2.toString();
    }
    if (isArrayLike(a) && isArrayLike(b2)) {
      return isArrayEqual(Array.from(a), Array.from(b2));
    }
    if (!(typeof a === "object") || !(typeof b2 === "object")) return false;
    const keys = Object.keys(b2 ?? /* @__PURE__ */ Object.create(null));
    const length2 = keys.length;
    for (let i2 = 0; i2 < length2; i2++) {
      const hasKey = Reflect.has(a, keys[i2]);
      if (!hasKey) return false;
    }
    for (let i2 = 0; i2 < length2; i2++) {
      const key = keys[i2];
      if (!isEqual(a[key], b2[key])) return false;
    }
    return true;
  };
  var isArray = (v) => Array.isArray(v);
  var isBoolean = (v) => v === true || v === false;
  var isObjectLike = (v) => v != null && typeof v === "object";
  var isObject2 = (v) => isObjectLike(v) && !isArray(v);
  var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
  var isString2 = (v) => typeof v === "string";
  var isFunction2 = (v) => typeof v === "function";
  var isNull = (v) => v == null;
  var hasProp2 = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
  var baseGetTag = (v) => Object.prototype.toString.call(v);
  var fnToString = Function.prototype.toString;
  var objectCtorString = fnToString.call(Object);
  var isPlainObject = (v) => {
    if (!isObjectLike(v) || baseGetTag(v) != "[object Object]" || isFrameworkElement(v)) return false;
    const proto = Object.getPrototypeOf(v);
    if (proto === null) return true;
    const Ctor = hasProp2(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && fnToString.call(Ctor) == objectCtorString;
  };
  var isReactElement = (x2) => typeof x2 === "object" && x2 !== null && "$$typeof" in x2 && "props" in x2;
  var isVueElement = (x2) => typeof x2 === "object" && x2 !== null && "__v_isVNode" in x2;
  var isFrameworkElement = (x2) => isReactElement(x2) || isVueElement(x2);
  var runIfFn = (v, ...a) => {
    const res = typeof v === "function" ? v(...a) : v;
    return res ?? void 0;
  };
  var identity = (v) => v();
  var noop = () => {
  };
  var callAll2 = (...fns) => (...a) => {
    fns.forEach(function(fn) {
      fn?.(...a);
    });
  };
  function match2(key, record, ...args) {
    if (key in record) {
      const fn = record[key];
      return isFunction2(fn) ? fn(...args) : fn;
    }
    const error = new Error(`No matching key: ${JSON.stringify(key)} in ${JSON.stringify(Object.keys(record))}`);
    Error.captureStackTrace?.(error, match2);
    throw error;
  }
  var tryCatch = (fn, fallback3) => {
    try {
      return fn();
    } catch (error) {
      if (error instanceof Error) {
        Error.captureStackTrace?.(error, tryCatch);
      }
      return fallback3?.();
    }
  };
  var { floor, abs: abs2, round, min, max, pow, sign } = Math;
  var isNaN2 = (v) => Number.isNaN(v);
  var nan = (v) => isNaN2(v) ? 0 : v;
  var mod = (v, m) => (v % m + m) % m;
  var wrap = (v, vmax) => (v % vmax + vmax) % vmax;
  var getMinValueAtIndex = (i2, v, vmin) => i2 === 0 ? vmin : v[i2 - 1];
  var getMaxValueAtIndex = (i2, v, vmax) => i2 === v.length - 1 ? vmax : v[i2 + 1];
  var isValueAtMax = (v, vmax) => nan(v) >= vmax;
  var isValueAtMin = (v, vmin) => nan(v) <= vmin;
  var isValueWithinRange = (v, vmin, vmax) => nan(v) >= vmin && nan(v) <= vmax;
  var roundValue = (v, vmin, step) => round((nan(v) - vmin) / step) * step + vmin;
  var clampValue = (v, vmin, vmax) => min(max(nan(v), vmin), vmax);
  var getValuePercent = (v, vmin, vmax) => (nan(v) - vmin) / (vmax - vmin);
  var getPercentValue = (p, vmin, vmax, step) => clampValue(roundValue(p * (vmax - vmin) + vmin, vmin, step), vmin, vmax);
  var roundToStepPrecision = (v, step) => {
    let rv = v;
    let ss = step.toString();
    let pi = ss.indexOf(".");
    let p = pi >= 0 ? ss.length - pi : 0;
    if (p > 0) {
      let pw = pow(10, p);
      rv = round(rv * pw) / pw;
    }
    return rv;
  };
  var roundToDpr = (v, dpr) => typeof dpr === "number" ? floor(v * dpr + 0.5) / dpr : round(v);
  var snapValueToStep = (v, vmin, vmax, step) => {
    const min23 = vmin != null ? Number(vmin) : 0;
    const max22 = Number(vmax);
    const remainder = (v - min23) % step;
    let snapped = abs2(remainder) * 2 >= step ? v + sign(remainder) * (step - abs2(remainder)) : v - remainder;
    snapped = roundToStepPrecision(snapped, step);
    if (!isNaN2(min23) && snapped < min23) {
      snapped = min23;
    } else if (!isNaN2(max22) && snapped > max22) {
      const stepsInRange = floor((max22 - min23) / step);
      const largestValidStep = min23 + stepsInRange * step;
      snapped = stepsInRange <= 0 || largestValidStep < min23 ? max22 : largestValidStep;
    }
    return roundToStepPrecision(snapped, step);
  };
  var setValueAtIndex = (vs, i2, v) => {
    if (vs[i2] === v) return vs;
    return [...vs.slice(0, i2), v, ...vs.slice(i2 + 1)];
  };
  function getValueSetterAtIndex(index, ctx) {
    const minValueAtIndex = getMinValueAtIndex(index, ctx.values, ctx.min);
    const maxValueAtIndex = getMaxValueAtIndex(index, ctx.values, ctx.max);
    let nextValues = ctx.values.slice();
    return function setValue(value) {
      let nextValue = snapValueToStep(value, minValueAtIndex, maxValueAtIndex, ctx.step);
      nextValues = setValueAtIndex(nextValues, index, value);
      nextValues[index] = nextValue;
      return nextValues;
    };
  }
  function getNextStepValue(index, ctx) {
    const nextValue = ctx.values[index] + ctx.step;
    return getValueSetterAtIndex(index, ctx)(nextValue);
  }
  function getPreviousStepValue(index, ctx) {
    const nextValue = ctx.values[index] - ctx.step;
    return getValueSetterAtIndex(index, ctx)(nextValue);
  }
  var getClosestValueIndex = (vs, t3) => {
    let i2 = vs.findIndex((v) => t3 - v < 0);
    if (i2 === 0) return i2;
    if (i2 === -1) return vs.length - 1;
    let vLeft = vs[i2 - 1];
    let vRight = vs[i2];
    if (abs2(vLeft - t3) < abs2(vRight - t3)) return i2 - 1;
    return i2;
  };
  var getValueRanges = (vs, vmin, vmax, gap) => vs.map((v, i2) => ({
    min: i2 === 0 ? vmin : vs[i2 - 1] + gap,
    max: i2 === vs.length - 1 ? vmax : vs[i2 + 1] - gap,
    value: v
  }));
  var toFixedNumber = (v, d = 0, b2 = 10) => {
    const pow2 = Math.pow(b2, d);
    return round(v * pow2) / pow2;
  };
  var countDecimals = (value) => {
    if (!Number.isFinite(value)) return 0;
    let e2 = 1, p = 0;
    while (Math.round(value * e2) / e2 !== value) {
      e2 *= 10;
      p += 1;
    }
    return p;
  };
  var decimalOp = (a, op, b2) => {
    let result = op === "+" ? a + b2 : a - b2;
    if (a % 1 !== 0 || b2 % 1 !== 0) {
      const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b2));
      a = Math.round(a * multiplier);
      b2 = Math.round(b2 * multiplier);
      result = op === "+" ? a + b2 : a - b2;
      result /= multiplier;
    }
    return result;
  };
  var incrementValue = (v, s2) => decimalOp(nan(v), "+", s2);
  var decrementValue = (v, s2) => decimalOp(nan(v), "-", s2);
  function compact2(obj) {
    if (!isPlainObject(obj) || obj === void 0) return obj;
    const keys = Reflect.ownKeys(obj).filter((key) => typeof key === "string");
    const filtered = {};
    for (const key of keys) {
      const value = obj[key];
      if (value !== void 0) {
        filtered[key] = compact2(value);
      }
    }
    return filtered;
  }
  function pick(obj, keys) {
    const filtered = {};
    for (const key of keys) {
      const value = obj[key];
      if (value !== void 0) {
        filtered[key] = value;
      }
    }
    return filtered;
  }
  function splitProps2(props26, keys) {
    const rest = {};
    const result = {};
    const keySet = new Set(keys);
    for (const key in props26) {
      if (keySet.has(key)) {
        result[key] = props26[key];
      } else {
        rest[key] = props26[key];
      }
    }
    return [result, rest];
  }
  var createSplitProps = (keys) => {
    return function split(props26) {
      return splitProps2(props26, keys);
    };
  };
  function setRafTimeout(callback, delay2) {
    const start = performance.now();
    let handle;
    function loop(now) {
      const delta = now - start;
      if (delta >= delay2) {
        callback();
        return;
      }
      handle = requestAnimationFrame(loop);
    }
    handle = requestAnimationFrame(loop);
    return () => cancelAnimationFrame(handle);
  }
  function warn(...a) {
    const m = a.length === 1 ? a[0] : a[1];
    const c = a.length === 2 ? a[0] : true;
    if (c && true) {
      console.warn(m);
    }
  }
  function ensure(c, m) {
    if (c == null) throw new Error(m());
  }

  // node_modules/@zag-js/dom-query/dist/index.mjs
  function setCaretToEnd(input) {
    if (!input) return;
    const start = input.selectionStart ?? 0;
    const end = input.selectionEnd ?? 0;
    if (Math.abs(end - start) !== 0) return;
    if (start !== 0) return;
    input.setSelectionRange(input.value.length, input.value.length);
  }
  var clamp = (value) => Math.max(0, Math.min(1, value));
  var wrap2 = (v, idx) => {
    return v.map((_2, index) => v[(Math.max(idx, 0) + index) % v.length]);
  };
  var pipe = (...fns) => (arg) => fns.reduce((acc, fn) => fn(acc), arg);
  var noop2 = () => void 0;
  var isObject3 = (v) => typeof v === "object" && v !== null;
  var MAX_Z_INDEX = 2147483647;
  var dataAttr = (guard) => guard ? "" : void 0;
  var ariaAttr = (guard) => guard ? "true" : void 0;
  var ELEMENT_NODE = 1;
  var DOCUMENT_NODE = 9;
  var DOCUMENT_FRAGMENT_NODE = 11;
  var isHTMLElement = (el) => isObject3(el) && el.nodeType === ELEMENT_NODE && typeof el.nodeName === "string";
  var isDocument = (el) => isObject3(el) && el.nodeType === DOCUMENT_NODE;
  var isWindow = (el) => isObject3(el) && el === el.window;
  var getNodeName = (node2) => {
    if (isHTMLElement(node2)) return node2.localName || "";
    return "#document";
  };
  function isRootElement(node2) {
    return ["html", "body", "#document"].includes(getNodeName(node2));
  }
  var isNode = (el) => isObject3(el) && el.nodeType !== void 0;
  var isShadowRoot = (el) => isNode(el) && el.nodeType === DOCUMENT_FRAGMENT_NODE && "host" in el;
  var isInputElement2 = (el) => isHTMLElement(el) && el.localName === "input";
  var isElementVisible = (el) => {
    if (!isHTMLElement(el)) return false;
    return el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length > 0;
  };
  var TEXTAREA_SELECT_REGEX = /(textarea|select)/;
  function isEditableElement(el) {
    if (el == null || !isHTMLElement(el)) return false;
    try {
      return isInputElement2(el) && el.selectionStart != null || TEXTAREA_SELECT_REGEX.test(el.localName) || el.isContentEditable || el.getAttribute("contenteditable") === "true" || el.getAttribute("contenteditable") === "";
    } catch {
      return false;
    }
  }
  function contains(parent, child) {
    if (!parent || !child) return false;
    if (!isHTMLElement(parent) || !isHTMLElement(child)) return false;
    const rootNode = child.getRootNode?.();
    if (parent === child) return true;
    if (parent.contains(child)) return true;
    if (rootNode && isShadowRoot(rootNode)) {
      let next3 = child;
      while (next3) {
        if (parent === next3) return true;
        next3 = next3.parentNode || next3.host;
      }
    }
    return false;
  }
  function getDocument(el) {
    if (isDocument(el)) return el;
    if (isWindow(el)) return el.document;
    return el?.ownerDocument ?? document;
  }
  function getDocumentElement(el) {
    return getDocument(el).documentElement;
  }
  function getWindow(el) {
    if (isShadowRoot(el)) return getWindow(el.host);
    if (isDocument(el)) return el.defaultView ?? window;
    if (isHTMLElement(el)) return el.ownerDocument?.defaultView ?? window;
    return window;
  }
  function getActiveElement(rootNode) {
    let activeElement = rootNode.activeElement;
    while (activeElement?.shadowRoot) {
      const el = activeElement.shadowRoot.activeElement;
      if (el === activeElement) break;
      else activeElement = el;
    }
    return activeElement;
  }
  function getParentNode(node2) {
    if (getNodeName(node2) === "html") return node2;
    const result = node2.assignedSlot || node2.parentNode || isShadowRoot(node2) && node2.host || getDocumentElement(node2);
    return isShadowRoot(result) ? result.host : result;
  }
  var styleCache = /* @__PURE__ */ new WeakMap();
  function getComputedStyle(el) {
    if (!styleCache.has(el)) {
      styleCache.set(el, getWindow(el).getComputedStyle(el));
    }
    return styleCache.get(el);
  }
  function getDataUrl(svg, opts) {
    const { type, quality = 0.92, background } = opts;
    if (!svg) throw new Error("[zag-js > getDataUrl]: Could not find the svg element");
    const win = getWindow(svg);
    const doc = win.document;
    const svgBounds = svg.getBoundingClientRect();
    const svgClone = svg.cloneNode(true);
    if (!svgClone.hasAttribute("viewBox")) {
      svgClone.setAttribute("viewBox", `0 0 ${svgBounds.width} ${svgBounds.height}`);
    }
    const serializer = new win.XMLSerializer();
    const source = '<?xml version="1.0" standalone="no"?>\r\n' + serializer.serializeToString(svgClone);
    const svgString = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(source);
    if (type === "image/svg+xml") {
      return Promise.resolve(svgString).then((str) => {
        svgClone.remove();
        return str;
      });
    }
    const dpr = win.devicePixelRatio || 1;
    const canvas = doc.createElement("canvas");
    const image = new win.Image();
    image.src = svgString;
    canvas.width = svgBounds.width * dpr;
    canvas.height = svgBounds.height * dpr;
    const context = canvas.getContext("2d");
    if (type === "image/jpeg" || background) {
      context.fillStyle = background || "white";
      context.fillRect(0, 0, canvas.width, canvas.height);
    }
    return new Promise((resolve) => {
      image.onload = () => {
        context?.drawImage(image, 0, 0, canvas.width, canvas.height);
        resolve(canvas.toDataURL(type, quality));
        svgClone.remove();
      };
    });
  }
  var isDom = () => typeof document !== "undefined";
  function getPlatform() {
    const agent = navigator.userAgentData;
    return agent?.platform ?? navigator.platform;
  }
  function getUserAgent() {
    const ua2 = navigator.userAgentData;
    if (ua2 && Array.isArray(ua2.brands)) {
      return ua2.brands.map(({ brand, version: version2 }) => `${brand}/${version2}`).join(" ");
    }
    return navigator.userAgent;
  }
  var pt = (v) => isDom() && v.test(getPlatform());
  var ua = (v) => isDom() && v.test(getUserAgent());
  var vn = (v) => isDom() && v.test(navigator.vendor);
  var isTouchDevice = () => isDom() && !!navigator.maxTouchPoints;
  var isIPhone = () => pt(/^iPhone/i);
  var isIPad = () => pt(/^iPad/i) || isMac() && navigator.maxTouchPoints > 1;
  var isIos = () => isIPhone() || isIPad();
  var isApple = () => isMac() || isIos();
  var isMac = () => pt(/^Mac/i);
  var isSafari = () => isApple() && vn(/apple/i);
  var isFirefox = () => ua(/Firefox/i);
  var isAndroid = () => ua(/Android/i);
  function getComposedPath(event) {
    return event.composedPath?.() ?? event.nativeEvent?.composedPath?.();
  }
  function getEventTarget(event) {
    const composedPath = getComposedPath(event);
    return composedPath?.[0] ?? event.target;
  }
  var isSelfTarget = (event) => {
    return contains(event.currentTarget, getEventTarget(event));
  };
  function isComposingEvent(event) {
    return getNativeEvent(event).isComposing || event.keyCode === 229;
  }
  function isVirtualClick(e2) {
    if (e2.mozInputSource === 0 && e2.isTrusted) return true;
    if (isAndroid() && e2.pointerType) {
      return e2.type === "click" && e2.buttons === 1;
    }
    return e2.detail === 0 && !e2.pointerType;
  }
  var isContextMenuEvent = (e2) => {
    return e2.button === 2 || isMac() && e2.ctrlKey && e2.button === 0;
  };
  var isTouchEvent = (event) => "touches" in event && event.touches.length > 0;
  var keyMap = {
    Up: "ArrowUp",
    Down: "ArrowDown",
    Esc: "Escape",
    " ": "Space",
    ",": "Comma",
    Left: "ArrowLeft",
    Right: "ArrowRight"
  };
  var rtlKeyMap = {
    ArrowLeft: "ArrowRight",
    ArrowRight: "ArrowLeft"
  };
  function getEventKey(event, options = {}) {
    const { dir = "ltr", orientation = "horizontal" } = options;
    let key = event.key;
    key = keyMap[key] ?? key;
    const isRtl = dir === "rtl" && orientation === "horizontal";
    if (isRtl && key in rtlKeyMap) key = rtlKeyMap[key];
    return key;
  }
  function getNativeEvent(event) {
    return event.nativeEvent ?? event;
  }
  function getEventPoint(event, type = "client") {
    const point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;
    return { x: point[`${type}X`], y: point[`${type}Y`] };
  }
  var addDomEvent = (target, eventName, handler, options) => {
    const node2 = typeof target === "function" ? target() : target;
    node2?.addEventListener(eventName, handler, options);
    return () => {
      node2?.removeEventListener(eventName, handler, options);
    };
  };
  function getDescriptor(el, options) {
    const { type = "HTMLInputElement", property = "value" } = options;
    const proto = getWindow(el)[type].prototype;
    return Object.getOwnPropertyDescriptor(proto, property) ?? {};
  }
  function getElementType(el) {
    if (el.localName === "input") return "HTMLInputElement";
    if (el.localName === "textarea") return "HTMLTextAreaElement";
    if (el.localName === "select") return "HTMLSelectElement";
  }
  function setElementValue(el, value, property = "value") {
    if (!el) return;
    const type = getElementType(el);
    if (type) {
      const descriptor = getDescriptor(el, { type, property });
      descriptor.set?.call(el, value);
    }
    el.setAttribute(property, value);
  }
  function setElementChecked(el, checked) {
    if (!el) return;
    const descriptor = getDescriptor(el, { type: "HTMLInputElement", property: "checked" });
    descriptor.set?.call(el, checked);
    if (checked) el.setAttribute("checked", "");
    else el.removeAttribute("checked");
  }
  function dispatchInputValueEvent(el, options) {
    const { value, bubbles = true } = options;
    if (!el) return;
    const win = getWindow(el);
    if (!(el instanceof win.HTMLInputElement)) return;
    setElementValue(el, `${value}`);
    el.dispatchEvent(new win.Event("input", { bubbles }));
  }
  function dispatchInputCheckedEvent(el, options) {
    const { checked, bubbles = true } = options;
    if (!el) return;
    const win = getWindow(el);
    if (!(el instanceof win.HTMLInputElement)) return;
    setElementChecked(el, checked);
    el.dispatchEvent(new win.Event("click", { bubbles }));
  }
  function getClosestForm(el) {
    return isFormElement2(el) ? el.form : el.closest("form");
  }
  function isFormElement2(el) {
    return el.matches("textarea, input, select, button");
  }
  function trackFormReset(el, callback) {
    if (!el) return;
    const form = getClosestForm(el);
    const onReset = (e2) => {
      if (e2.defaultPrevented) return;
      callback();
    };
    form?.addEventListener("reset", onReset, { passive: true });
    return () => form?.removeEventListener("reset", onReset);
  }
  function trackFieldsetDisabled(el, callback) {
    const fieldset = el?.closest("fieldset");
    if (!fieldset) return;
    callback(fieldset.disabled);
    const win = getWindow(fieldset);
    const obs = new win.MutationObserver(() => callback(fieldset.disabled));
    obs.observe(fieldset, {
      attributes: true,
      attributeFilter: ["disabled"]
    });
    return () => obs.disconnect();
  }
  function trackFormControl(el, options) {
    if (!el) return;
    const { onFieldsetDisabledChange, onFormReset } = options;
    const cleanups = [trackFormReset(el, onFormReset), trackFieldsetDisabled(el, onFieldsetDisabledChange)];
    return () => cleanups.forEach((cleanup) => cleanup?.());
  }
  var isFrame = (el) => isHTMLElement(el) && el.tagName === "IFRAME";
  var hasTabIndex = (el) => !Number.isNaN(parseInt(el.getAttribute("tabindex") || "0", 10));
  var hasNegativeTabIndex = (el) => parseInt(el.getAttribute("tabindex") || "0", 10) < 0;
  var focusableSelector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false']), details > summary:first-of-type";
  var getFocusables = (container, includeContainer = false) => {
    if (!container) return [];
    const elements = Array.from(container.querySelectorAll(focusableSelector));
    const include = includeContainer == true || includeContainer == "if-empty" && elements.length === 0;
    if (include && isHTMLElement(container) && isFocusable(container)) {
      elements.unshift(container);
    }
    const focusableElements = elements.filter(isFocusable);
    focusableElements.forEach((element, i2) => {
      if (isFrame(element) && element.contentDocument) {
        const frameBody = element.contentDocument.body;
        focusableElements.splice(i2, 1, ...getFocusables(frameBody));
      }
    });
    return focusableElements;
  };
  function isFocusable(element) {
    if (!element || element.closest("[inert]")) return false;
    return element.matches(focusableSelector) && isElementVisible(element);
  }
  function getTabbables(container, includeContainer) {
    if (!container) return [];
    const elements = Array.from(container.querySelectorAll(focusableSelector));
    const tabbableElements = elements.filter(isTabbable);
    if (includeContainer && isTabbable(container)) {
      tabbableElements.unshift(container);
    }
    tabbableElements.forEach((element, i2) => {
      if (isFrame(element) && element.contentDocument) {
        const frameBody = element.contentDocument.body;
        const allFrameTabbable = getTabbables(frameBody);
        tabbableElements.splice(i2, 1, ...allFrameTabbable);
      }
    });
    if (!tabbableElements.length && includeContainer) {
      return elements;
    }
    return tabbableElements;
  }
  function isTabbable(el) {
    if (el != null && el.tabIndex > 0) return true;
    return isFocusable(el) && !hasNegativeTabIndex(el);
  }
  function getTabbableEdges(container, includeContainer) {
    const elements = getTabbables(container, includeContainer);
    const first2 = elements[0] || null;
    const last2 = elements[elements.length - 1] || null;
    return [first2, last2];
  }
  function getNextTabbable(container, current) {
    const tabbables = getTabbables(container);
    const doc = container?.ownerDocument || document;
    const currentElement = current ?? doc.activeElement;
    if (!currentElement) return null;
    const index = tabbables.indexOf(currentElement);
    return tabbables[index + 1] || null;
  }
  function getTabIndex(node2) {
    if (node2.tabIndex < 0) {
      if ((/^(audio|video|details)$/.test(node2.localName) || isEditableElement(node2)) && !hasTabIndex(node2)) {
        return 0;
      }
    }
    return node2.tabIndex;
  }
  function getInitialFocus(options) {
    const { root, getInitialEl, filter: filter2, enabled = true } = options;
    if (!enabled) return;
    let node2 = null;
    node2 || (node2 = typeof getInitialEl === "function" ? getInitialEl() : getInitialEl);
    node2 || (node2 = root?.querySelector("[data-autofocus],[autofocus]"));
    if (!node2) {
      const tabbables = getTabbables(root);
      node2 = filter2 ? tabbables.filter(filter2)[0] : tabbables[0];
    }
    return node2 || root || void 0;
  }
  function isValidTabEvent(event) {
    const container = event.currentTarget;
    if (!container) return false;
    const [firstTabbable, lastTabbable] = getTabbableEdges(container);
    const doc = container.ownerDocument || document;
    if (doc.activeElement === firstTabbable && event.shiftKey) return false;
    if (doc.activeElement === lastTabbable && !event.shiftKey) return false;
    if (!firstTabbable && !lastTabbable) return false;
    return true;
  }
  function nextTick(fn) {
    const set = /* @__PURE__ */ new Set();
    function raf22(fn2) {
      const id = globalThis.requestAnimationFrame(fn2);
      set.add(() => globalThis.cancelAnimationFrame(id));
    }
    raf22(() => raf22(fn));
    return function cleanup() {
      set.forEach((fn2) => fn2());
    };
  }
  function raf(fn) {
    let cleanup;
    const id = globalThis.requestAnimationFrame(() => {
      cleanup = fn();
    });
    return () => {
      globalThis.cancelAnimationFrame(id);
      cleanup?.();
    };
  }
  function queueBeforeEvent(el, type, cb) {
    const cancelTimer = raf(() => {
      el.removeEventListener(type, exec, true);
      cb();
    });
    const exec = () => {
      cancelTimer();
      cb();
    };
    el.addEventListener(type, exec, { once: true, capture: true });
    return cancelTimer;
  }
  function observeAttributesImpl(node2, options) {
    if (!node2) return;
    const { attributes, callback: fn } = options;
    const win = node2.ownerDocument.defaultView || window;
    const obs = new win.MutationObserver((changes) => {
      for (const change of changes) {
        if (change.type === "attributes" && change.attributeName && attributes.includes(change.attributeName)) {
          fn(change);
        }
      }
    });
    obs.observe(node2, { attributes: true, attributeFilter: attributes });
    return () => obs.disconnect();
  }
  function observeAttributes(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(observeAttributesImpl(node2, options));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  function observeChildrenImpl(node2, options) {
    const { callback: fn } = options;
    if (!node2) return;
    const win = node2.ownerDocument.defaultView || window;
    const obs = new win.MutationObserver(fn);
    obs.observe(node2, { childList: true, subtree: true });
    return () => obs.disconnect();
  }
  function observeChildren(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(observeChildrenImpl(node2, options));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  function clickIfLink(el) {
    const click = () => {
      const win = getWindow(el);
      el.dispatchEvent(new win.MouseEvent("click"));
    };
    if (isFirefox()) {
      queueBeforeEvent(el, "keyup", click);
    } else {
      queueMicrotask(click);
    }
  }
  function getNearestOverflowAncestor(el) {
    const parentNode = getParentNode(el);
    if (isRootElement(parentNode)) return getDocument(parentNode).body;
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) return parentNode;
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(el, list = []) {
    const scrollableAncestor = getNearestOverflowAncestor(el);
    const isBody = scrollableAncestor === el.ownerDocument.body;
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, []));
  }
  var OVERFLOW_RE = /auto|scroll|overlay|hidden|clip/;
  var nonOverflowValues = /* @__PURE__ */ new Set(["inline", "contents"]);
  function isOverflowElement(el) {
    const win = getWindow(el);
    const { overflow, overflowX, overflowY, display } = win.getComputedStyle(el);
    return OVERFLOW_RE.test(overflow + overflowY + overflowX) && !nonOverflowValues.has(display);
  }
  function isScrollable(el) {
    return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;
  }
  function scrollIntoView(el, options) {
    const { rootEl, ...scrollOptions } = options || {};
    if (!el || !rootEl) return;
    if (!isOverflowElement(rootEl) || !isScrollable(rootEl)) return;
    el.scrollIntoView(scrollOptions);
  }
  function getRelativePoint(point, element) {
    const { left, top, width, height } = element.getBoundingClientRect();
    const offset3 = { x: point.x - left, y: point.y - top };
    const percent = { x: clamp(offset3.x / width), y: clamp(offset3.y / height) };
    function getPercentValue2(options = {}) {
      const { dir = "ltr", orientation = "horizontal", inverted } = options;
      const invertX = typeof inverted === "object" ? inverted.x : inverted;
      const invertY = typeof inverted === "object" ? inverted.y : inverted;
      if (orientation === "horizontal") {
        return dir === "rtl" || invertX ? 1 - percent.x : percent.x;
      }
      return invertY ? 1 - percent.y : percent.y;
    }
    return { offset: offset3, percent, getPercentValue: getPercentValue2 };
  }
  function requestPointerLock(doc, fn) {
    const body = doc.body;
    const supported = "pointerLockElement" in doc || "mozPointerLockElement" in doc;
    const isLocked = () => !!doc.pointerLockElement;
    function onPointerChange() {
      fn?.(isLocked());
    }
    function onPointerError(event) {
      if (isLocked()) fn?.(false);
      console.error("PointerLock error occurred:", event);
      doc.exitPointerLock();
    }
    if (!supported) return;
    try {
      body.requestPointerLock();
    } catch {
    }
    const cleanup = [
      addDomEvent(doc, "pointerlockchange", onPointerChange, false),
      addDomEvent(doc, "pointerlockerror", onPointerError, false)
    ];
    return () => {
      cleanup.forEach((cleanup2) => cleanup2());
      doc.exitPointerLock();
    };
  }
  var state = "default";
  var userSelect = "";
  var elementMap = /* @__PURE__ */ new WeakMap();
  function disableTextSelectionImpl(options = {}) {
    const { target, doc } = options;
    const docNode = doc ?? document;
    const rootEl = docNode.documentElement;
    if (isIos()) {
      if (state === "default") {
        userSelect = rootEl.style.webkitUserSelect;
        rootEl.style.webkitUserSelect = "none";
      }
      state = "disabled";
    } else if (target) {
      elementMap.set(target, target.style.userSelect);
      target.style.userSelect = "none";
    }
    return () => restoreTextSelection({ target, doc: docNode });
  }
  function restoreTextSelection(options = {}) {
    const { target, doc } = options;
    const docNode = doc ?? document;
    const rootEl = docNode.documentElement;
    if (isIos()) {
      if (state !== "disabled") return;
      state = "restoring";
      setTimeout(() => {
        nextTick(() => {
          if (state === "restoring") {
            if (rootEl.style.webkitUserSelect === "none") {
              rootEl.style.webkitUserSelect = userSelect || "";
            }
            userSelect = "";
            state = "default";
          }
        });
      }, 300);
    } else {
      if (target && elementMap.has(target)) {
        const prevUserSelect = elementMap.get(target);
        if (target.style.userSelect === "none") {
          target.style.userSelect = prevUserSelect ?? "";
        }
        if (target.getAttribute("style") === "") {
          target.removeAttribute("style");
        }
        elementMap.delete(target);
      }
    }
  }
  function disableTextSelection(options = {}) {
    const { defer, target, ...restOptions } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = typeof target === "function" ? target() : target;
        cleanups.push(disableTextSelectionImpl({ ...restOptions, target: node2 }));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  function trackPointerMove(doc, handlers) {
    const { onPointerMove, onPointerUp } = handlers;
    const handleMove = (event) => {
      const point = getEventPoint(event);
      const distance = Math.sqrt(point.x ** 2 + point.y ** 2);
      const moveBuffer = event.pointerType === "touch" ? 10 : 5;
      if (distance < moveBuffer) return;
      if (event.pointerType === "mouse" && event.button === 0) {
        onPointerUp();
        return;
      }
      onPointerMove({ point, event });
    };
    const cleanups = [
      addDomEvent(doc, "pointermove", handleMove, false),
      addDomEvent(doc, "pointerup", onPointerUp, false),
      addDomEvent(doc, "pointercancel", onPointerUp, false),
      addDomEvent(doc, "contextmenu", onPointerUp, false),
      disableTextSelection({ doc })
    ];
    return () => {
      cleanups.forEach((cleanup) => cleanup());
    };
  }
  function trackPress(options) {
    const {
      pointerNode,
      keyboardNode = pointerNode,
      onPress,
      onPressStart,
      onPressEnd,
      isValidKey: isValidKey2 = (e2) => e2.key === "Enter"
    } = options;
    if (!pointerNode) return noop2;
    const win = getWindow(pointerNode);
    const doc = getDocument(pointerNode);
    let removeStartListeners = noop2;
    let removeEndListeners = noop2;
    let removeAccessibleListeners = noop2;
    const getInfo = (event) => ({
      point: getEventPoint(event),
      event
    });
    function startPress(event) {
      onPressStart?.(getInfo(event));
    }
    function cancelPress(event) {
      onPressEnd?.(getInfo(event));
    }
    const startPointerPress = (startEvent) => {
      removeEndListeners();
      const endPointerPress = (endEvent) => {
        const target = getEventTarget(endEvent);
        if (contains(pointerNode, target)) {
          onPress?.(getInfo(endEvent));
        } else {
          onPressEnd?.(getInfo(endEvent));
        }
      };
      const removePointerUpListener = addDomEvent(win, "pointerup", endPointerPress, { passive: !onPress, once: true });
      const removePointerCancelListener = addDomEvent(win, "pointercancel", cancelPress, {
        passive: !onPressEnd,
        once: true
      });
      removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);
      if (doc.activeElement === keyboardNode && startEvent.pointerType === "mouse") {
        startEvent.preventDefault();
      }
      startPress(startEvent);
    };
    const removePointerListener = addDomEvent(pointerNode, "pointerdown", startPointerPress, { passive: !onPressStart });
    const removeFocusListener = addDomEvent(keyboardNode, "focus", startAccessiblePress);
    removeStartListeners = pipe(removePointerListener, removeFocusListener);
    function startAccessiblePress() {
      const handleKeydown = (keydownEvent) => {
        if (!isValidKey2(keydownEvent)) return;
        const handleKeyup = (keyupEvent) => {
          if (!isValidKey2(keyupEvent)) return;
          const evt2 = new win.PointerEvent("pointerup");
          const info = getInfo(evt2);
          onPress?.(info);
          onPressEnd?.(info);
        };
        removeEndListeners();
        removeEndListeners = addDomEvent(keyboardNode, "keyup", handleKeyup);
        const evt = new win.PointerEvent("pointerdown");
        startPress(evt);
      };
      const handleBlur = () => {
        const evt = new win.PointerEvent("pointercancel");
        cancelPress(evt);
      };
      const removeKeydownListener = addDomEvent(keyboardNode, "keydown", handleKeydown);
      const removeBlurListener = addDomEvent(keyboardNode, "blur", handleBlur);
      removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    }
    return () => {
      removeStartListeners();
      removeEndListeners();
      removeAccessibleListeners();
    };
  }
  function proxyTabFocusImpl(container, options = {}) {
    const { triggerElement, onFocus, onFocusEnter } = options;
    const doc = container?.ownerDocument || document;
    const body = doc.body;
    function onKeyDown(event) {
      if (event.key !== "Tab") return;
      let elementToFocus = null;
      const [firstTabbable, lastTabbable] = getTabbableEdges(container, true);
      const nextTabbableAfterTrigger = getNextTabbable(body, triggerElement);
      const noTabbableElements = !firstTabbable && !lastTabbable;
      if (event.shiftKey && nextTabbableAfterTrigger === doc.activeElement) {
        onFocusEnter?.();
        elementToFocus = lastTabbable;
      } else if (event.shiftKey && (doc.activeElement === firstTabbable || noTabbableElements)) {
        elementToFocus = triggerElement;
      } else if (!event.shiftKey && doc.activeElement === triggerElement) {
        onFocusEnter?.();
        elementToFocus = firstTabbable;
      } else if (!event.shiftKey && (doc.activeElement === lastTabbable || noTabbableElements)) {
        elementToFocus = nextTabbableAfterTrigger;
      }
      if (!elementToFocus) return;
      event.preventDefault();
      if (typeof onFocus === "function") {
        onFocus(elementToFocus);
      } else {
        elementToFocus.focus();
      }
    }
    return addDomEvent(doc, "keydown", onKeyDown, true);
  }
  function proxyTabFocus(container, options) {
    const { defer, triggerElement, ...restOptions } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = typeof container === "function" ? container() : container;
        const trigger = typeof triggerElement === "function" ? triggerElement() : triggerElement;
        cleanups.push(proxyTabFocusImpl(node2, { triggerElement: trigger, ...restOptions }));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  function queryAll(root, selector) {
    return Array.from(root?.querySelectorAll(selector) ?? []);
  }
  function query(root, selector) {
    return root?.querySelector(selector) ?? null;
  }
  var defaultItemToId = (v) => v.id;
  function itemById(v, id, itemToId = defaultItemToId) {
    return v.find((item) => itemToId(item) === id);
  }
  function indexOfId(v, id, itemToId = defaultItemToId) {
    const item = itemById(v, id, itemToId);
    return item ? v.indexOf(item) : -1;
  }
  function nextById(v, id, loop = true) {
    let idx = indexOfId(v, id);
    idx = loop ? (idx + 1) % v.length : Math.min(idx + 1, v.length - 1);
    return v[idx];
  }
  function prevById(v, id, loop = true) {
    let idx = indexOfId(v, id);
    if (idx === -1) return loop ? v[v.length - 1] : null;
    idx = loop ? (idx - 1 + v.length) % v.length : Math.max(0, idx - 1);
    return v[idx];
  }
  function trackElementRect(elements, options) {
    const { onEntry, measure, box = "border-box" } = options;
    const elems = (Array.isArray(elements) ? elements : [elements]).filter(isHTMLElement);
    const win = getWindow(elems[0]);
    const trigger = (entries) => {
      const rects = elems.map((el) => measure(el));
      onEntry({ rects, entries });
    };
    trigger([]);
    const obs = new win.ResizeObserver(trigger);
    elems.forEach((el) => obs.observe(el, { box }));
    return () => obs.disconnect();
  }
  var sanitize = (str) => str.split("").map((char2) => {
    const code = char2.charCodeAt(0);
    if (code > 0 && code < 128) return char2;
    if (code >= 128 && code <= 255) return `/x${code.toString(16)}`.replace("/", "\\");
    return "";
  }).join("").trim();
  var getValueText = (el) => {
    return sanitize(el.dataset?.valuetext ?? el.textContent ?? "");
  };
  var match3 = (valueText, query2) => {
    return valueText.trim().toLowerCase().startsWith(query2.toLowerCase());
  };
  function getByText(v, text, currentId, itemToId = defaultItemToId) {
    const index = currentId ? indexOfId(v, currentId, itemToId) : -1;
    let items = currentId ? wrap2(v, index) : v;
    const isSingleKey = text.length === 1;
    if (isSingleKey) {
      items = items.filter((item) => itemToId(item) !== currentId);
    }
    return items.find((item) => match3(getValueText(item), text));
  }
  function setStyle(el, style) {
    if (!el) return noop2;
    const prev3 = Object.keys(style).reduce((acc, key) => {
      acc[key] = el.style.getPropertyValue(key);
      return acc;
    }, {});
    Object.assign(el.style, style);
    return () => {
      Object.assign(el.style, prev3);
      if (el.style.length === 0) {
        el.removeAttribute("style");
      }
    };
  }
  function setStyleProperty(el, prop, value) {
    if (!el) return noop2;
    const prev3 = el.style.getPropertyValue(prop);
    el.style.setProperty(prop, value);
    return () => {
      el.style.setProperty(prop, prev3);
      if (el.style.length === 0) {
        el.removeAttribute("style");
      }
    };
  }
  function getByTypeaheadImpl(baseItems, options) {
    const { state: state2, activeId, key, timeout = 350, itemToId } = options;
    const search = state2.keysSoFar + key;
    const isRepeated = search.length > 1 && Array.from(search).every((char2) => char2 === search[0]);
    const query2 = isRepeated ? search[0] : search;
    let items = baseItems.slice();
    const next3 = getByText(items, query2, activeId, itemToId);
    function cleanup() {
      clearTimeout(state2.timer);
      state2.timer = -1;
    }
    function update(value) {
      state2.keysSoFar = value;
      cleanup();
      if (value !== "") {
        state2.timer = +setTimeout(() => {
          update("");
          cleanup();
        }, timeout);
      }
    }
    update(search);
    return next3;
  }
  var getByTypeahead = /* @__PURE__ */ Object.assign(getByTypeaheadImpl, {
    defaultOptions: { keysSoFar: "", timer: -1 },
    isValidEvent: isValidTypeaheadEvent
  });
  function isValidTypeaheadEvent(event) {
    return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
  }
  var visuallyHiddenStyle = {
    border: "0",
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    width: "1px",
    whiteSpace: "nowrap",
    wordWrap: "normal"
  };
  function waitForPromise(promise, controller, timeout) {
    const { signal } = controller;
    const wrappedPromise = new Promise((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        reject(new Error(`Timeout of ${timeout}ms exceeded`));
      }, timeout);
      signal.addEventListener("abort", () => {
        clearTimeout(timeoutId);
        reject(new Error("Promise aborted"));
      });
      promise.then((result) => {
        if (!signal.aborted) {
          clearTimeout(timeoutId);
          resolve(result);
        }
      }).catch((error) => {
        if (!signal.aborted) {
          clearTimeout(timeoutId);
          reject(error);
        }
      });
    });
    const abort = () => controller.abort();
    return [wrappedPromise, abort];
  }
  function waitForElement(target, options) {
    const { timeout, rootNode } = options;
    const win = getWindow(rootNode);
    const doc = getDocument(rootNode);
    const controller = new win.AbortController();
    return waitForPromise(
      new Promise((resolve) => {
        const el = target();
        if (el) {
          resolve(el);
          return;
        }
        const observer = new win.MutationObserver(() => {
          const el2 = target();
          if (el2 && el2.isConnected) {
            observer.disconnect();
            resolve(el2);
          }
        });
        observer.observe(doc.body, {
          childList: true,
          subtree: true
        });
      }),
      controller,
      timeout
    );
  }

  // node_modules/@zag-js/core/dist/index.mjs
  var clsx2 = (...args) => args.map((str) => str?.trim?.()).filter(Boolean).join(" ");
  var CSS_REGEX = /((?:--)?(?:\w+-?)+)\s*:\s*([^;]*)/g;
  var serialize2 = (style) => {
    const res = {};
    let match5;
    while (match5 = CSS_REGEX.exec(style)) {
      res[match5[1]] = match5[2];
    }
    return res;
  };
  var css = (a, b2) => {
    if (isString2(a)) {
      if (isString2(b2)) return `${a};${b2}`;
      a = serialize2(a);
    } else if (isString2(b2)) {
      b2 = serialize2(b2);
    }
    return Object.assign({}, a ?? {}, b2 ?? {});
  };
  function mergeProps2(...args) {
    let result = {};
    for (let props26 of args) {
      for (let key in result) {
        if (key.startsWith("on") && typeof result[key] === "function" && typeof props26[key] === "function") {
          result[key] = callAll2(props26[key], result[key]);
          continue;
        }
        if (key === "className" || key === "class") {
          result[key] = clsx2(result[key], props26[key]);
          continue;
        }
        if (key === "style") {
          result[key] = css(result[key], props26[key]);
          continue;
        }
        result[key] = props26[key] !== void 0 ? props26[key] : result[key];
      }
      for (let key in props26) {
        if (result[key] === void 0) {
          result[key] = props26[key];
        }
      }
    }
    return result;
  }
  function memo2(getDeps, fn, opts) {
    let deps = [];
    let result;
    return (depArgs) => {
      const newDeps = getDeps(depArgs);
      const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => !isEqual(deps[index], dep));
      if (!depsChanged) return result;
      deps = newDeps;
      result = fn(...newDeps);
      opts?.onChange?.(result);
      return result;
    };
  }
  function createGuards() {
    return {
      and: (...guards3) => {
        return function andGuard(params) {
          return guards3.every((str) => params.guard(str));
        };
      },
      or: (...guards3) => {
        return function orGuard(params) {
          return guards3.some((str) => params.guard(str));
        };
      },
      not: (guard) => {
        return function notGuard(params) {
          return !params.guard(guard);
        };
      }
    };
  }
  function createMachine(config) {
    return config;
  }
  function setup() {
    return {
      guards: createGuards(),
      createMachine: (config) => {
        return createMachine(config);
      },
      choose: (transitions) => {
        return function chooseFn({ choose: choose4 }) {
          return choose4(transitions)?.actions;
        };
      }
    };
  }
  var MachineStatus = /* @__PURE__ */ ((MachineStatus2) => {
    MachineStatus2["NotStarted"] = "Not Started";
    MachineStatus2["Started"] = "Started";
    MachineStatus2["Stopped"] = "Stopped";
    return MachineStatus2;
  })(MachineStatus || {});
  var INIT_STATE = "__init__";
  function createScope(props26) {
    const getRootNode = () => props26.getRootNode?.() ?? document;
    const getDoc = () => getDocument(getRootNode());
    const getWin = () => getDoc().defaultView ?? window;
    const getActiveElementFn = () => getActiveElement(getRootNode());
    const isActiveElement = (elem) => elem === getActiveElementFn();
    const getById = (id) => getRootNode().getElementById(id);
    return {
      ...props26,
      getRootNode,
      getDoc,
      getWin,
      getActiveElement: getActiveElementFn,
      isActiveElement,
      getById
    };
  }

  // node_modules/@zag-js/react/dist/index.mjs
  var React17 = __toESM(require_react(), 1);
  var import_react9 = __toESM(require_react(), 1);
  var import_react_dom = __toESM(require_react_dom(), 1);

  // node_modules/@zag-js/types/dist/index.mjs
  function createNormalizer(fn) {
    return new Proxy({}, {
      get(_target, key) {
        if (key === "style")
          return (props26) => {
            return fn({ style: props26 }).style;
          };
        return fn;
      }
    });
  }
  var createProps = () => (props26) => Array.from(new Set(props26));

  // node_modules/@zag-js/react/dist/index.mjs
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var useSafeLayoutEffect = typeof globalThis.document !== "undefined" ? import_react9.useLayoutEffect : import_react9.useEffect;
  function useBindable(props26) {
    const initial = props26().value ?? props26().defaultValue;
    const eq = props26().isEqual ?? Object.is;
    const [initialValue] = (0, import_react9.useState)(initial);
    const [value, setValue] = (0, import_react9.useState)(initialValue);
    const controlled = props26().value !== void 0;
    const valueRef = (0, import_react9.useRef)(value);
    valueRef.current = controlled ? props26().value : value;
    const prevValue = (0, import_react9.useRef)(valueRef.current);
    useSafeLayoutEffect(() => {
      prevValue.current = valueRef.current;
    }, [value, props26().value]);
    const setFn = (value2) => {
      const prev3 = prevValue.current;
      const next3 = isFunction2(value2) ? value2(prev3) : value2;
      if (props26().debug) {
        console.log(`[bindable > ${props26().debug}] setValue`, { next: next3, prev: prev3 });
      }
      if (!controlled) setValue(next3);
      if (!eq(next3, prev3)) {
        props26().onChange?.(next3, prev3);
      }
    };
    function get() {
      return controlled ? props26().value : value;
    }
    return {
      initial: initialValue,
      ref: valueRef,
      get,
      set(value2) {
        const exec = props26().sync ? import_react_dom.flushSync : identity;
        exec(() => setFn(value2));
      },
      invoke(nextValue, prevValue2) {
        props26().onChange?.(nextValue, prevValue2);
      },
      hash(value2) {
        return props26().hash?.(value2) ?? String(value2);
      }
    };
  }
  useBindable.cleanup = (fn) => {
    (0, import_react9.useEffect)(() => fn, []);
  };
  useBindable.ref = (defaultValue) => {
    const value = (0, import_react9.useRef)(defaultValue);
    return {
      get: () => value.current,
      set: (next3) => {
        value.current = next3;
      }
    };
  };
  function useRefs(refs) {
    const ref = (0, import_react9.useRef)(refs);
    return {
      get(key) {
        return ref.current[key];
      },
      set(key, value) {
        ref.current[key] = value;
      }
    };
  }
  var useTrack = (deps, effect) => {
    const render = (0, import_react9.useRef)(false);
    const called = (0, import_react9.useRef)(false);
    (0, import_react9.useEffect)(() => {
      const mounted = render.current;
      const run = mounted && called.current;
      if (run) return effect();
      called.current = true;
    }, [...(deps ?? []).map((d) => typeof d === "function" ? d() : d)]);
    (0, import_react9.useEffect)(() => {
      render.current = true;
      return () => {
        render.current = false;
      };
    }, []);
  };
  function useMachine(machine26, userProps = {}) {
    const scope = (0, import_react9.useMemo)(() => {
      const { id, ids, getRootNode } = userProps;
      return createScope({ id, ids, getRootNode });
    }, [userProps]);
    const debug = (...args) => {
      if (machine26.debug) console.log(...args);
    };
    const props26 = machine26.props?.({ props: compact2(userProps), scope }) ?? userProps;
    const prop = useProp(props26);
    const context = machine26.context?.({
      prop,
      bindable: useBindable,
      scope,
      flush,
      getContext() {
        return ctx;
      },
      getComputed() {
        return computed;
      },
      getRefs() {
        return refs;
      },
      getEvent() {
        return getEvent();
      }
    });
    const contextRef = useLiveRef(context);
    const ctx = {
      get(key) {
        return contextRef.current?.[key].ref.current;
      },
      set(key, value) {
        contextRef.current?.[key].set(value);
      },
      initial(key) {
        return contextRef.current?.[key].initial;
      },
      hash(key) {
        const current = contextRef.current?.[key].get();
        return contextRef.current?.[key].hash(current);
      }
    };
    const effects = (0, import_react9.useRef)(/* @__PURE__ */ new Map());
    const transitionRef = (0, import_react9.useRef)(null);
    const previousEventRef = (0, import_react9.useRef)(null);
    const eventRef = (0, import_react9.useRef)({ type: "" });
    const getEvent = () => ({
      ...eventRef.current,
      current() {
        return eventRef.current;
      },
      previous() {
        return previousEventRef.current;
      }
    });
    const getState = () => ({
      ...state2,
      matches(...values) {
        return values.includes(state2.ref.current);
      },
      hasTag(tag) {
        return !!machine26.states[state2.ref.current]?.tags?.includes(tag);
      }
    });
    const refs = useRefs(machine26.refs?.({ prop, context: ctx }) ?? {});
    const getParams = () => ({
      state: getState(),
      context: ctx,
      event: getEvent(),
      prop,
      send,
      action,
      guard,
      track: useTrack,
      refs,
      computed,
      flush,
      scope,
      choose: choose4
    });
    const action = (keys) => {
      const strs = isFunction2(keys) ? keys(getParams()) : keys;
      if (!strs) return;
      const fns = strs.map((s2) => {
        const fn = machine26.implementations?.actions?.[s2];
        if (!fn) warn(`[zag-js] No implementation found for action "${JSON.stringify(s2)}"`);
        return fn;
      });
      for (const fn of fns) {
        fn?.(getParams());
      }
    };
    const guard = (str) => {
      if (isFunction2(str)) return str(getParams());
      return machine26.implementations?.guards?.[str](getParams());
    };
    const effect = (keys) => {
      const strs = isFunction2(keys) ? keys(getParams()) : keys;
      if (!strs) return;
      const fns = strs.map((s2) => {
        const fn = machine26.implementations?.effects?.[s2];
        if (!fn) warn(`[zag-js] No implementation found for effect "${JSON.stringify(s2)}"`);
        return fn;
      });
      const cleanups = [];
      for (const fn of fns) {
        const cleanup = fn?.(getParams());
        if (cleanup) cleanups.push(cleanup);
      }
      return () => cleanups.forEach((fn) => fn?.());
    };
    const choose4 = (transitions) => {
      return toArray2(transitions).find((t3) => {
        let result = !t3.guard;
        if (isString2(t3.guard)) result = !!guard(t3.guard);
        else if (isFunction2(t3.guard)) result = t3.guard(getParams());
        return result;
      });
    };
    const computed = (key) => {
      ensure(machine26.computed, () => `[zag-js] No computed object found on machine`);
      const fn = machine26.computed[key];
      return fn({
        context: ctx,
        event: getEvent(),
        prop,
        refs,
        scope,
        computed
      });
    };
    const state2 = useBindable(() => ({
      defaultValue: machine26.initialState({ prop }),
      onChange(nextState, prevState) {
        if (prevState) {
          const exitEffects = effects.current.get(prevState);
          exitEffects?.();
          effects.current.delete(prevState);
        }
        if (prevState) {
          action(machine26.states[prevState]?.exit);
        }
        action(transitionRef.current?.actions);
        const cleanup = effect(machine26.states[nextState]?.effects);
        if (cleanup) effects.current.set(nextState, cleanup);
        if (prevState === INIT_STATE) {
          action(machine26.entry);
          const cleanup2 = effect(machine26.effects);
          if (cleanup2) effects.current.set(INIT_STATE, cleanup2);
        }
        action(machine26.states[nextState]?.entry);
      }
    }));
    const hydratedStateRef = (0, import_react9.useRef)(void 0);
    const statusRef = (0, import_react9.useRef)(MachineStatus.NotStarted);
    useSafeLayoutEffect(() => {
      queueMicrotask(() => {
        const started = statusRef.current === MachineStatus.Started;
        statusRef.current = MachineStatus.Started;
        debug(started ? "rehydrating..." : "initializing...");
        const initialState = hydratedStateRef.current ?? state2.initial;
        state2.invoke(initialState, started ? state2.get() : INIT_STATE);
      });
      const fns = effects.current;
      const currentState = state2.ref.current;
      return () => {
        debug("unmounting...");
        hydratedStateRef.current = currentState;
        statusRef.current = MachineStatus.Stopped;
        fns.forEach((fn) => fn?.());
        effects.current = /* @__PURE__ */ new Map();
        transitionRef.current = null;
        queueMicrotask(() => {
          action(machine26.exit);
        });
      };
    }, []);
    const getCurrentState = () => {
      if ("ref" in state2) return state2.ref.current;
      return state2.get();
    };
    const send = (event) => {
      queueMicrotask(() => {
        if (statusRef.current !== MachineStatus.Started) return;
        previousEventRef.current = eventRef.current;
        eventRef.current = event;
        debug("send", event);
        let currentState = getCurrentState();
        const transitions = (
          // @ts-ignore
          machine26.states[currentState].on?.[event.type] ?? // @ts-ignore
          machine26.on?.[event.type]
        );
        const transition = choose4(transitions);
        if (!transition) return;
        transitionRef.current = transition;
        const target = transition.target ?? currentState;
        debug("transition", transition);
        const changed = target !== currentState;
        if (changed) {
          (0, import_react_dom.flushSync)(() => state2.set(target));
        } else if (transition.reenter && !changed) {
          state2.invoke(currentState, currentState);
        } else {
          action(transition.actions ?? []);
        }
      });
    };
    machine26.watch?.(getParams());
    return {
      state: getState(),
      send,
      context: ctx,
      prop,
      scope,
      refs,
      computed,
      event: getEvent(),
      getStatus: () => statusRef.current
    };
  }
  function useLiveRef(value) {
    const ref = (0, import_react9.useRef)(value);
    ref.current = value;
    return ref;
  }
  function useProp(value) {
    const ref = useLiveRef(value);
    return function get(key) {
      return ref.current[key];
    };
  }
  function flush(fn) {
    queueMicrotask(() => {
      (0, import_react_dom.flushSync)(() => fn());
    });
  }
  var normalizeProps = createNormalizer((v) => v);

  // node_modules/@ark-ui/react/dist/components/factory.js
  var import_react10 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/utils/compose-refs.js
  function composeRefs(...refs) {
    return (node2) => {
      const cleanUps = [];
      for (const ref of refs) {
        if (typeof ref === "function") {
          const cb = ref(node2);
          if (typeof cb === "function") {
            cleanUps.push(cb);
          }
        } else if (ref) {
          ref.current = node2;
        }
      }
      if (cleanUps.length) {
        return () => {
          for (const cleanUp of cleanUps) {
            cleanUp();
          }
        };
      }
    };
  }

  // node_modules/@ark-ui/react/dist/components/factory.js
  function getRef(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }
  var withAsChild = (Component4) => {
    const Comp = (0, import_react10.memo)(
      (0, import_react10.forwardRef)((props26, ref) => {
        const { asChild, children, ...restProps } = props26;
        if (!asChild) {
          return (0, import_react10.createElement)(Component4, { ...restProps, ref }, children);
        }
        const onlyChild = import_react10.Children.only(children);
        if (!(0, import_react10.isValidElement)(onlyChild)) {
          return null;
        }
        const childRef = getRef(onlyChild);
        return (0, import_react10.cloneElement)(onlyChild, {
          ...mergeProps2(restProps, onlyChild.props),
          ref: ref ? composeRefs(ref, childRef) : childRef
        });
      })
    );
    Comp.displayName = Component4.displayName || Component4.name;
    return Comp;
  };
  var jsxFactory = () => {
    const cache2 = /* @__PURE__ */ new Map();
    return new Proxy(withAsChild, {
      apply(_target, _thisArg, argArray) {
        return withAsChild(argArray[0]);
      },
      get(_2, element) {
        const asElement = element;
        if (!cache2.has(asElement)) {
          cache2.set(asElement, withAsChild(asElement));
        }
        return cache2.get(asElement);
      }
    });
  };
  var ark = jsxFactory();

  // node_modules/@ark-ui/react/dist/utils/create-split-props.js
  var createSplitProps2 = () => (props26, keys) => keys.reduce(
    (previousValue, currentValue) => {
      const [target, source] = previousValue;
      const key = currentValue;
      if (source[key] !== void 0) {
        target[key] = source[key];
      }
      delete source[key];
      return [target, source];
    },
    [{}, { ...props26 }]
  );

  // node_modules/@zag-js/anatomy/dist/index.mjs
  var createAnatomy = (name, parts28 = []) => ({
    parts: (...values) => {
      if (isEmpty(parts28)) {
        return createAnatomy(name, values);
      }
      throw new Error("createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?");
    },
    extendWith: (...values) => createAnatomy(name, [...parts28, ...values]),
    omit: (...values) => createAnatomy(name, parts28.filter((part) => !values.includes(part))),
    rename: (newName) => createAnatomy(newName, parts28),
    keys: () => parts28,
    build: () => [...new Set(parts28)].reduce(
      (prev3, part) => Object.assign(prev3, {
        [part]: {
          selector: [
            `&[data-scope="${toKebabCase(name)}"][data-part="${toKebabCase(part)}"]`,
            `& [data-scope="${toKebabCase(name)}"][data-part="${toKebabCase(part)}"]`
          ].join(", "),
          attrs: { "data-scope": toKebabCase(name), "data-part": toKebabCase(part) }
        }
      }),
      {}
    )
  });
  var toKebabCase = (value) => value.replace(/([A-Z])([A-Z])/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
  var isEmpty = (v) => v.length === 0;

  // node_modules/@zag-js/collapsible/dist/index.mjs
  var anatomy = createAnatomy("collapsible").parts("root", "trigger", "content", "indicator");
  var parts = anatomy.build();
  var getContentId = (ctx) => ctx.ids?.content ?? `collapsible:${ctx.id}:content`;
  var getContentEl = (ctx) => ctx.getById(getContentId(ctx));
  var machine = createMachine({
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "closed";
    },
    context({ bindable }) {
      return {
        size: bindable(() => ({
          defaultValue: { height: 0, width: 0 },
          sync: true
        })),
        initial: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    refs() {
      return {
        cleanup: void 0,
        stylesRef: void 0
      };
    },
    watch({ track, prop, action }) {
      track([() => prop("open")], () => {
        action(["setInitial", "computeSize", "toggleVisibility"]);
      });
    },
    exit: ["clearInitial", "cleanupNode"],
    states: {
      closed: {
        on: {
          "controlled.open": {
            target: "open"
          },
          open: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitial", "computeSize", "invokeOnOpen"]
            }
          ]
        }
      },
      closing: {
        effects: ["trackExitAnimation"],
        on: {
          "controlled.close": {
            target: "closed"
          },
          "controlled.open": {
            target: "open"
          },
          open: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitial", "invokeOnOpen"]
            }
          ],
          close: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnExitComplete"]
            },
            {
              target: "closed",
              actions: ["setInitial", "computeSize", "invokeOnExitComplete"]
            }
          ],
          "animation.end": {
            target: "closed",
            actions: ["invokeOnExitComplete", "clearInitial"]
          }
        }
      },
      open: {
        effects: ["trackEnterAnimation"],
        on: {
          "controlled.close": {
            target: "closing"
          },
          close: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closing",
              actions: ["setInitial", "computeSize", "invokeOnClose"]
            }
          ],
          "size.measure": {
            actions: ["measureSize"]
          },
          "animation.end": {
            actions: ["clearInitial"]
          }
        }
      }
    },
    implementations: {
      guards: {
        isOpenControlled: ({ prop }) => prop("open") != void 0
      },
      effects: {
        trackEnterAnimation: ({ send, scope }) => {
          let cleanup;
          const rafCleanup = raf(() => {
            const contentEl = getContentEl(scope);
            if (!contentEl) return;
            const animationName = getComputedStyle(contentEl).animationName;
            const hasNoAnimation = !animationName || animationName === "none";
            if (hasNoAnimation) {
              send({ type: "animation.end" });
              return;
            }
            const onEnd = (event) => {
              const target = getEventTarget(event);
              if (target === contentEl) {
                send({ type: "animation.end" });
              }
            };
            contentEl.addEventListener("animationend", onEnd);
            cleanup = () => {
              contentEl.removeEventListener("animationend", onEnd);
            };
          });
          return () => {
            rafCleanup();
            cleanup?.();
          };
        },
        trackExitAnimation: ({ send, scope }) => {
          let cleanup;
          const rafCleanup = raf(() => {
            const contentEl = getContentEl(scope);
            if (!contentEl) return;
            const animationName = getComputedStyle(contentEl).animationName;
            const hasNoAnimation = !animationName || animationName === "none";
            if (hasNoAnimation) {
              send({ type: "animation.end" });
              return;
            }
            const onEnd = (event) => {
              const target = getEventTarget(event);
              if (target === contentEl) {
                send({ type: "animation.end" });
              }
            };
            contentEl.addEventListener("animationend", onEnd);
            const restoreStyles = setStyle(contentEl, {
              animationFillMode: "forwards"
            });
            cleanup = () => {
              contentEl.removeEventListener("animationend", onEnd);
              nextTick(() => restoreStyles());
            };
          });
          return () => {
            rafCleanup();
            cleanup?.();
          };
        }
      },
      actions: {
        setInitial: ({ context, flush: flush2 }) => {
          flush2(() => {
            context.set("initial", true);
          });
        },
        clearInitial: ({ context }) => {
          context.set("initial", false);
        },
        cleanupNode: ({ refs }) => {
          refs.set("stylesRef", null);
        },
        measureSize: ({ context, scope }) => {
          const contentEl = getContentEl(scope);
          if (!contentEl) return;
          const { height, width } = contentEl.getBoundingClientRect();
          context.set("size", { height, width });
        },
        computeSize: ({ refs, scope, context }) => {
          refs.get("cleanup")?.();
          const rafCleanup = raf(() => {
            const contentEl = getContentEl(scope);
            if (!contentEl) return;
            const hidden = contentEl.hidden;
            contentEl.style.animationName = "none";
            contentEl.style.animationDuration = "0s";
            contentEl.hidden = false;
            const rect = contentEl.getBoundingClientRect();
            context.set("size", { height: rect.height, width: rect.width });
            if (context.get("initial")) {
              contentEl.style.animationName = "";
              contentEl.style.animationDuration = "";
            }
            contentEl.hidden = hidden;
          });
          refs.set("cleanup", rafCleanup);
        },
        invokeOnOpen: ({ prop }) => {
          prop("onOpenChange")?.({ open: true });
        },
        invokeOnClose: ({ prop }) => {
          prop("onOpenChange")?.({ open: false });
        },
        invokeOnExitComplete: ({ prop }) => {
          prop("onExitComplete")?.();
        },
        toggleVisibility: ({ prop, send }) => {
          send({ type: prop("open") ? "controlled.open" : "controlled.close" });
        }
      }
    }
  });
  var props = createProps()([
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "onExitComplete",
    "onOpenChange",
    "defaultOpen",
    "open"
  ]);
  var splitProps3 = createSplitProps(props);

  // node_modules/@ark-ui/react/dist/providers/environment/use-environment-context.js
  var [EnvironmentContextProvider, useEnvironmentContext] = createContext6({
    name: "EnvironmentContext",
    hookName: "useEnvironmentContext",
    providerName: "<EnvironmentProvider />",
    strict: false,
    defaultValue: {
      getRootNode: () => document,
      getDocument: () => document,
      getWindow: () => window
    }
  });

  // node_modules/@ark-ui/react/dist/providers/locale/use-locale-context.js
  var [LocaleContextProvider, useLocaleContext] = createContext6({
    name: "LocaleContext",
    hookName: "useLocaleContext",
    providerName: "<LocaleProvider />",
    strict: false,
    defaultValue: { dir: "ltr", locale: "en-US" }
  });

  // node_modules/@zag-js/color-utils/dist/index.mjs
  var __defProp2 = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => __defNormalProp(obj, key + "", value);
  var isEqualObject = (a, b2) => {
    if (Object.keys(a).length !== Object.keys(b2).length) return false;
    for (let key in a) if (a[key] !== b2[key]) return false;
    return true;
  };
  var Color = class {
    toHexInt() {
      return this.toFormat("rgba").toHexInt();
    }
    getChannelValue(channel) {
      if (channel in this) return this[channel];
      throw new Error("Unsupported color channel: " + channel);
    }
    getChannelValuePercent(channel, valueToCheck) {
      const value = valueToCheck ?? this.getChannelValue(channel);
      const { minValue, maxValue: maxValue2 } = this.getChannelRange(channel);
      return getValuePercent(value, minValue, maxValue2);
    }
    getChannelPercentValue(channel, percentToCheck) {
      const { minValue, maxValue: maxValue2, step } = this.getChannelRange(channel);
      const percentValue = getPercentValue(percentToCheck, minValue, maxValue2, step);
      return snapValueToStep(percentValue, minValue, maxValue2, step);
    }
    withChannelValue(channel, value) {
      const { minValue, maxValue: maxValue2 } = this.getChannelRange(channel);
      if (channel in this) {
        let clone2 = this.clone();
        clone2[channel] = clampValue(value, minValue, maxValue2);
        return clone2;
      }
      throw new Error("Unsupported color channel: " + channel);
    }
    getColorAxes(xyChannels) {
      let { xChannel, yChannel } = xyChannels;
      let xCh = xChannel || this.getChannels().find((c) => c !== yChannel);
      let yCh = yChannel || this.getChannels().find((c) => c !== xCh);
      let zCh = this.getChannels().find((c) => c !== xCh && c !== yCh);
      return { xChannel: xCh, yChannel: yCh, zChannel: zCh };
    }
    incrementChannel(channel, stepSize) {
      const { minValue, maxValue: maxValue2, step } = this.getChannelRange(channel);
      const value = snapValueToStep(
        clampValue(this.getChannelValue(channel) + stepSize, minValue, maxValue2),
        minValue,
        maxValue2,
        step
      );
      return this.withChannelValue(channel, value);
    }
    decrementChannel(channel, stepSize) {
      return this.incrementChannel(channel, -stepSize);
    }
    isEqual(color) {
      const isSame = isEqualObject(this.toJSON(), color.toJSON());
      return isSame && this.getChannelValue("alpha") === color.getChannelValue("alpha");
    }
  };
  var HEX_COLOR_REGEX = /^#[\da-f]+$/i;
  var RGB_COLOR_REGEX = /^rgba?\((.*)\)$/;
  var HEX_STARTING_REGEX = /[^#]/gi;
  var _RGBColor = class _RGBColor2 extends Color {
    constructor(red, green, blue, alpha) {
      super();
      this.red = red;
      this.green = green;
      this.blue = blue;
      this.alpha = alpha;
    }
    static parse(value) {
      let colors2 = [];
      if (HEX_COLOR_REGEX.test(value) && [4, 5, 7, 9].includes(value.length)) {
        const values = (value.length < 6 ? value.replace(HEX_STARTING_REGEX, "$&$&") : value).slice(1).split("");
        while (values.length > 0) {
          colors2.push(parseInt(values.splice(0, 2).join(""), 16));
        }
        colors2[3] = colors2[3] !== void 0 ? colors2[3] / 255 : void 0;
      }
      const match5 = value.match(RGB_COLOR_REGEX);
      if (match5?.[1]) {
        colors2 = match5[1].split(",").map((value2) => Number(value2.trim())).map((num, i2) => clampValue(num, 0, i2 < 3 ? 255 : 1));
      }
      return colors2.length < 3 ? void 0 : new _RGBColor2(colors2[0], colors2[1], colors2[2], colors2[3] ?? 1);
    }
    toString(format) {
      switch (format) {
        case "hex":
          return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
        case "hexa":
          return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
        case "rgb":
          return `rgb(${this.red}, ${this.green}, ${this.blue})`;
        case "css":
        case "rgba":
          return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
        case "hsl":
          return this.toHSL().toString("hsl");
        case "hsb":
          return this.toHSB().toString("hsb");
        default:
          return this.toFormat(format).toString(format);
      }
    }
    toFormat(format) {
      switch (format) {
        case "rgba":
          return this;
        case "hsba":
          return this.toHSB();
        case "hsla":
          return this.toHSL();
        default:
          throw new Error("Unsupported color conversion: rgb -> " + format);
      }
    }
    toHexInt() {
      return this.red << 16 | this.green << 8 | this.blue;
    }
    /**
     * Converts an RGB color value to HSB.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
     * @returns An HSBColor object.
     */
    toHSB() {
      const red = this.red / 255;
      const green = this.green / 255;
      const blue = this.blue / 255;
      const min4 = Math.min(red, green, blue);
      const brightness = Math.max(red, green, blue);
      const chroma = brightness - min4;
      const saturation = brightness === 0 ? 0 : chroma / brightness;
      let hue = 0;
      if (chroma !== 0) {
        switch (brightness) {
          case red:
            hue = (green - blue) / chroma + (green < blue ? 6 : 0);
            break;
          case green:
            hue = (blue - red) / chroma + 2;
            break;
          case blue:
            hue = (red - green) / chroma + 4;
            break;
        }
        hue /= 6;
      }
      return new HSBColor(
        toFixedNumber(hue * 360, 2),
        toFixedNumber(saturation * 100, 2),
        toFixedNumber(brightness * 100, 2),
        toFixedNumber(this.alpha, 2)
      );
    }
    /**
     * Converts an RGB color value to HSL.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
     * @returns An HSLColor object.
     */
    toHSL() {
      const red = this.red / 255;
      const green = this.green / 255;
      const blue = this.blue / 255;
      const min4 = Math.min(red, green, blue);
      const max4 = Math.max(red, green, blue);
      const lightness = (max4 + min4) / 2;
      const chroma = max4 - min4;
      let hue = -1;
      let saturation = -1;
      if (chroma === 0) {
        hue = saturation = 0;
      } else {
        saturation = chroma / (lightness < 0.5 ? max4 + min4 : 2 - max4 - min4);
        switch (max4) {
          case red:
            hue = (green - blue) / chroma + (green < blue ? 6 : 0);
            break;
          case green:
            hue = (blue - red) / chroma + 2;
            break;
          case blue:
            hue = (red - green) / chroma + 4;
            break;
        }
        hue /= 6;
      }
      return new HSLColor(
        toFixedNumber(hue * 360, 2),
        toFixedNumber(saturation * 100, 2),
        toFixedNumber(lightness * 100, 2),
        toFixedNumber(this.alpha, 2)
      );
    }
    clone() {
      return new _RGBColor2(this.red, this.green, this.blue, this.alpha);
    }
    getChannelFormatOptions(channel) {
      switch (channel) {
        case "red":
        case "green":
        case "blue":
          return { style: "decimal" };
        case "alpha":
          return { style: "percent" };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    formatChannelValue(channel, locale) {
      let options = this.getChannelFormatOptions(channel);
      let value = this.getChannelValue(channel);
      return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
      switch (channel) {
        case "red":
        case "green":
        case "blue":
          return { minValue: 0, maxValue: 255, step: 1, pageSize: 17 };
        case "alpha":
          return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    toJSON() {
      return { r: this.red, g: this.green, b: this.blue, a: this.alpha };
    }
    getFormat() {
      return "rgba";
    }
    getChannels() {
      return _RGBColor2.colorChannels;
    }
  };
  __publicField(_RGBColor, "colorChannels", ["red", "green", "blue"]);
  var RGBColor = _RGBColor;
  var HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
  var _HSLColor = class _HSLColor2 extends Color {
    constructor(hue, saturation, lightness, alpha) {
      super();
      this.hue = hue;
      this.saturation = saturation;
      this.lightness = lightness;
      this.alpha = alpha;
    }
    static parse(value) {
      let m;
      if (m = value.match(HSL_REGEX)) {
        const [h, s2, l, a] = (m[1] ?? m[2]).split(",").map((n2) => Number(n2.trim().replace("%", "")));
        return new _HSLColor2(mod(h, 360), clampValue(s2, 0, 100), clampValue(l, 0, 100), clampValue(a ?? 1, 0, 1));
      }
    }
    toString(format) {
      switch (format) {
        case "hex":
          return this.toRGB().toString("hex");
        case "hexa":
          return this.toRGB().toString("hexa");
        case "hsl":
          return `hsl(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%)`;
        case "css":
        case "hsla":
          return `hsla(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%, ${this.alpha})`;
        case "hsb":
          return this.toHSB().toString("hsb");
        case "rgb":
          return this.toRGB().toString("rgb");
        default:
          return this.toFormat(format).toString(format);
      }
    }
    toFormat(format) {
      switch (format) {
        case "hsla":
          return this;
        case "hsba":
          return this.toHSB();
        case "rgba":
          return this.toRGB();
        default:
          throw new Error("Unsupported color conversion: hsl -> " + format);
      }
    }
    /**
     * Converts a HSL color to HSB.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
     * @returns An HSBColor object.
     */
    toHSB() {
      let saturation = this.saturation / 100;
      let lightness = this.lightness / 100;
      let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
      saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
      return new HSBColor(
        toFixedNumber(this.hue, 2),
        toFixedNumber(saturation * 100, 2),
        toFixedNumber(brightness * 100, 2),
        toFixedNumber(this.alpha, 2)
      );
    }
    /**
     * Converts a HSL color to RGB.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
     * @returns An RGBColor object.
     */
    toRGB() {
      let hue = this.hue;
      let saturation = this.saturation / 100;
      let lightness = this.lightness / 100;
      let a = saturation * Math.min(lightness, 1 - lightness);
      let fn = (n2, k = (n2 + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return new RGBColor(
        Math.round(fn(0) * 255),
        Math.round(fn(8) * 255),
        Math.round(fn(4) * 255),
        toFixedNumber(this.alpha, 2)
      );
    }
    clone() {
      return new _HSLColor2(this.hue, this.saturation, this.lightness, this.alpha);
    }
    getChannelFormatOptions(channel) {
      switch (channel) {
        case "hue":
          return { style: "unit", unit: "degree", unitDisplay: "narrow" };
        case "saturation":
        case "lightness":
        case "alpha":
          return { style: "percent" };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    formatChannelValue(channel, locale) {
      let options = this.getChannelFormatOptions(channel);
      let value = this.getChannelValue(channel);
      if (channel === "saturation" || channel === "lightness") {
        value /= 100;
      }
      return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
      switch (channel) {
        case "hue":
          return { minValue: 0, maxValue: 360, step: 1, pageSize: 15 };
        case "saturation":
        case "lightness":
          return { minValue: 0, maxValue: 100, step: 1, pageSize: 10 };
        case "alpha":
          return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    toJSON() {
      return { h: this.hue, s: this.saturation, l: this.lightness, a: this.alpha };
    }
    getFormat() {
      return "hsla";
    }
    getChannels() {
      return _HSLColor2.colorChannels;
    }
  };
  __publicField(_HSLColor, "colorChannels", ["hue", "saturation", "lightness"]);
  var HSLColor = _HSLColor;
  var HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
  var _HSBColor = class _HSBColor2 extends Color {
    constructor(hue, saturation, brightness, alpha) {
      super();
      this.hue = hue;
      this.saturation = saturation;
      this.brightness = brightness;
      this.alpha = alpha;
    }
    static parse(value) {
      let m;
      if (m = value.match(HSB_REGEX)) {
        const [h, s2, b2, a] = (m[1] ?? m[2]).split(",").map((n2) => Number(n2.trim().replace("%", "")));
        return new _HSBColor2(mod(h, 360), clampValue(s2, 0, 100), clampValue(b2, 0, 100), clampValue(a ?? 1, 0, 1));
      }
    }
    toString(format) {
      switch (format) {
        case "css":
          return this.toHSL().toString("css");
        case "hex":
          return this.toRGB().toString("hex");
        case "hexa":
          return this.toRGB().toString("hexa");
        case "hsb":
          return `hsb(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%)`;
        case "hsba":
          return `hsba(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%, ${this.alpha})`;
        case "hsl":
          return this.toHSL().toString("hsl");
        case "rgb":
          return this.toRGB().toString("rgb");
        default:
          return this.toFormat(format).toString(format);
      }
    }
    toFormat(format) {
      switch (format) {
        case "hsba":
          return this;
        case "hsla":
          return this.toHSL();
        case "rgba":
          return this.toRGB();
        default:
          throw new Error("Unsupported color conversion: hsb -> " + format);
      }
    }
    /**
     * Converts a HSB color to HSL.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
     * @returns An HSLColor object.
     */
    toHSL() {
      let saturation = this.saturation / 100;
      let brightness = this.brightness / 100;
      let lightness = brightness * (1 - saturation / 2);
      saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
      return new HSLColor(
        toFixedNumber(this.hue, 2),
        toFixedNumber(saturation * 100, 2),
        toFixedNumber(lightness * 100, 2),
        toFixedNumber(this.alpha, 2)
      );
    }
    /**
     * Converts a HSV color value to RGB.
     * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
     * @returns An RGBColor object.
     */
    toRGB() {
      let hue = this.hue;
      let saturation = this.saturation / 100;
      let brightness = this.brightness / 100;
      let fn = (n2, k = (n2 + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
      return new RGBColor(
        Math.round(fn(5) * 255),
        Math.round(fn(3) * 255),
        Math.round(fn(1) * 255),
        toFixedNumber(this.alpha, 2)
      );
    }
    clone() {
      return new _HSBColor2(this.hue, this.saturation, this.brightness, this.alpha);
    }
    getChannelFormatOptions(channel) {
      switch (channel) {
        case "hue":
          return { style: "unit", unit: "degree", unitDisplay: "narrow" };
        case "saturation":
        case "brightness":
        case "alpha":
          return { style: "percent" };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    formatChannelValue(channel, locale) {
      let options = this.getChannelFormatOptions(channel);
      let value = this.getChannelValue(channel);
      if (channel === "saturation" || channel === "brightness") {
        value /= 100;
      }
      return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
      switch (channel) {
        case "hue":
          return { minValue: 0, maxValue: 360, step: 1, pageSize: 15 };
        case "saturation":
        case "brightness":
          return { minValue: 0, maxValue: 100, step: 1, pageSize: 10 };
        case "alpha":
          return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 };
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    }
    toJSON() {
      return { h: this.hue, s: this.saturation, b: this.brightness, a: this.alpha };
    }
    getFormat() {
      return "hsba";
    }
    getChannels() {
      return _HSBColor2.colorChannels;
    }
  };
  __publicField(_HSBColor, "colorChannels", ["hue", "saturation", "brightness"]);
  var HSBColor = _HSBColor;
  var nativeColors = "aliceblue:f0f8ff,antiquewhite:faebd7,aqua:00ffff,aquamarine:7fffd4,azure:f0ffff,beige:f5f5dc,bisque:ffe4c4,black:000000,blanchedalmond:ffebcd,blue:0000ff,blueviolet:8a2be2,brown:a52a2a,burlywood:deb887,cadetblue:5f9ea0,chartreuse:7fff00,chocolate:d2691e,coral:ff7f50,cornflowerblue:6495ed,cornsilk:fff8dc,crimson:dc143c,cyan:00ffff,darkblue:00008b,darkcyan:008b8b,darkgoldenrod:b8860b,darkgray:a9a9a9,darkgreen:006400,darkkhaki:bdb76b,darkmagenta:8b008b,darkolivegreen:556b2f,darkorange:ff8c00,darkorchid:9932cc,darkred:8b0000,darksalmon:e9967a,darkseagreen:8fbc8f,darkslateblue:483d8b,darkslategray:2f4f4f,darkturquoise:00ced1,darkviolet:9400d3,deeppink:ff1493,deepskyblue:00bfff,dimgray:696969,dodgerblue:1e90ff,firebrick:b22222,floralwhite:fffaf0,forestgreen:228b22,fuchsia:ff00ff,gainsboro:dcdcdc,ghostwhite:f8f8ff,gold:ffd700,goldenrod:daa520,gray:808080,green:008000,greenyellow:adff2f,honeydew:f0fff0,hotpink:ff69b4,indianred:cd5c5c,indigo:4b0082,ivory:fffff0,khaki:f0e68c,lavender:e6e6fa,lavenderblush:fff0f5,lawngreen:7cfc00,lemonchiffon:fffacd,lightblue:add8e6,lightcoral:f08080,lightcyan:e0ffff,lightgoldenrodyellow:fafad2,lightgrey:d3d3d3,lightgreen:90ee90,lightpink:ffb6c1,lightsalmon:ffa07a,lightseagreen:20b2aa,lightskyblue:87cefa,lightslategray:778899,lightsteelblue:b0c4de,lightyellow:ffffe0,lime:00ff00,limegreen:32cd32,linen:faf0e6,magenta:ff00ff,maroon:800000,mediumaquamarine:66cdaa,mediumblue:0000cd,mediumorchid:ba55d3,mediumpurple:9370d8,mediumseagreen:3cb371,mediumslateblue:7b68ee,mediumspringgreen:00fa9a,mediumturquoise:48d1cc,mediumvioletred:c71585,midnightblue:191970,mintcream:f5fffa,mistyrose:ffe4e1,moccasin:ffe4b5,navajowhite:ffdead,navy:000080,oldlace:fdf5e6,olive:808000,olivedrab:6b8e23,orange:ffa500,orangered:ff4500,orchid:da70d6,palegoldenrod:eee8aa,palegreen:98fb98,paleturquoise:afeeee,palevioletred:d87093,papayawhip:ffefd5,peachpuff:ffdab9,peru:cd853f,pink:ffc0cb,plum:dda0dd,powderblue:b0e0e6,purple:800080,rebeccapurple:663399,red:ff0000,rosybrown:bc8f8f,royalblue:4169e1,saddlebrown:8b4513,salmon:fa8072,sandybrown:f4a460,seagreen:2e8b57,seashell:fff5ee,sienna:a0522d,silver:c0c0c0,skyblue:87ceeb,slateblue:6a5acd,slategray:708090,snow:fffafa,springgreen:00ff7f,steelblue:4682b4,tan:d2b48c,teal:008080,thistle:d8bfd8,tomato:ff6347,turquoise:40e0d0,violet:ee82ee,wheat:f5deb3,white:ffffff,whitesmoke:f5f5f5,yellow:ffff00,yellowgreen:9acd32";
  var makeMap = (str) => {
    const map2 = /* @__PURE__ */ new Map();
    const list = str.split(",");
    for (let i2 = 0; i2 < list.length; i2++) {
      const [key, val] = list[i2].split(":");
      map2.set(key, `#${val}`);
      if (key.includes("gray")) map2.set(key.replace("gray", "grey"), `#${val}`);
    }
    return map2;
  };
  var nativeColorMap = makeMap(nativeColors);
  var parseColor = (value) => {
    if (nativeColorMap.has(value)) {
      return parseColor(nativeColorMap.get(value));
    }
    const result = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value);
    if (!result) {
      const error = new Error("Invalid color value: " + value);
      Error.captureStackTrace?.(error, parseColor);
      throw error;
    }
    return result;
  };

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var sides = ["top", "right", "bottom", "left"];
  var min2 = Math.min;
  var max2 = Math.max;
  var round2 = Math.round;
  var floor2 = Math.floor;
  var createCoords = (v) => ({
    x: v,
    y: v
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp2(start, value, end) {
    return max2(start, min2(value, end));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  var yAxisSides = /* @__PURE__ */ new Set(["top", "bottom"]);
  function getSideAxis(placement) {
    return yAxisSides.has(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length2 = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length2] > rects.floating[length2]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  var lrPlacement = ["left", "right"];
  var rlPlacement = ["right", "left"];
  var tbPlacement = ["top", "bottom"];
  var btPlacement = ["bottom", "top"];
  function getSideList(side, isStart, rtl) {
    switch (side) {
      case "top":
      case "bottom":
        if (rtl) return isStart ? rlPlacement : lrPlacement;
        return isStart ? lrPlacement : rlPlacement;
      case "left":
      case "right":
        return isStart ? tbPlacement : btPlacement;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x: x2,
      y,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y,
      left: x2,
      right: x2 + width,
      bottom: y + height,
      x: x2,
      y
    };
  }

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware2.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x2,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data: data2,
        reset
      } = await fn({
        x: x2,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x2 = nextX != null ? nextX : x2;
      y = nextY != null ? nextY : y;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data2
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x: x2,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
      }
    }
    return {
      x: x2,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state2, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x2,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state2;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state2);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x: x2,
      y,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var arrow = (options) => ({
    name: "arrow",
    options,
    async fn(state2) {
      const {
        x: x2,
        y,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state2;
      const {
        element,
        padding = 0
      } = evaluate(options, state2) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x: x2,
        y
      };
      const axis = getAlignmentAxis(placement);
      const length2 = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length2];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
      const minPadding = min2(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min2(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max4 = clientSize - arrowDimensions[length2] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
      const offset3 = clamp2(min$1, center, max4);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max4 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset3,
          centerOffset: center - offset3 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  var flip = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state2) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state2);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex2 = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex2];
          if (nextPlacement) {
            const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
            if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis
            // overflows the main axis.
            overflowsData.every((d) => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {
              return {
                data: {
                  index: nextIndex2,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b2) => a.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b2) => a[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  var hide = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state2) {
        const {
          rects
        } = state2;
        const {
          strategy = "referenceHidden",
          ...detectOverflowOptions
        } = evaluate(options, state2);
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state2, {
              ...detectOverflowOptions,
              elementContext: "reference"
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow = await detectOverflow(state2, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  };
  var originSides = /* @__PURE__ */ new Set(["left", "top"]);
  async function convertValueToCoords(state2, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state2;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = originSides.has(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state2);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state2) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x: x2,
          y,
          placement,
          middlewareData
        } = state2;
        const diffCoords = await convertValueToCoords(state2, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x2 + diffCoords.x,
          y: y + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  var shift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state2) {
        const {
          x: x2,
          y,
          placement
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x3,
                y: y2
              } = _ref;
              return {
                x: x3,
                y: y2
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state2);
        const coords = {
          x: x2,
          y
        };
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min4 = mainAxisCoord + overflow[minSide];
          const max4 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp2(min4, mainAxisCoord, max4);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min4 = crossAxisCoord + overflow[minSide];
          const max4 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp2(min4, crossAxisCoord, max4);
        }
        const limitedCoords = limiter.fn({
          ...state2,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x2,
            y: limitedCoords.y - y,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  var limitShift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state2) {
        const {
          x: x2,
          y,
          placement,
          rects,
          middlewareData
        } = state2;
        const {
          offset: offset3 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state2);
        const coords = {
          x: x2,
          y
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset3, state2);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : {
          mainAxis: 0,
          crossAxis: 0,
          ...rawOffset
        };
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = originSides.has(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  var size = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state2) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state2;
        const {
          apply = () => {
          },
          ...detectOverflowOptions
        } = evaluate(options, state2);
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min2(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min2(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state2.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state2.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state2.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max2(overflow.left, 0);
          const xMax = max2(overflow.right, 0);
          const yMin = max2(overflow.top, 0);
          const yMax = max2(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max2(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max2(overflow.top, overflow.bottom));
          }
        }
        await apply({
          ...state2,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName2(node2) {
    if (isNode2(node2)) {
      return (node2.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow2(node2) {
    var _node$ownerDocument;
    return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement2(node2) {
    var _ref;
    return (_ref = (isNode2(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode2(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow2(value).Node;
  }
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow2(value).Element;
  }
  function isHTMLElement2(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;
  }
  function isShadowRoot2(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;
  }
  var invalidOverflowDisplayValues = /* @__PURE__ */ new Set(["inline", "contents"]);
  function isOverflowElement2(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle2(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
  }
  var tableElements = /* @__PURE__ */ new Set(["table", "td", "th"]);
  function isTableElement(element) {
    return tableElements.has(getNodeName2(element));
  }
  var topLayerSelectors = [":popover-open", ":modal"];
  function isTopLayer(element) {
    return topLayerSelectors.some((selector) => {
      try {
        return element.matches(selector);
      } catch (_e) {
        return false;
      }
    });
  }
  var transformProperties = ["transform", "translate", "scale", "rotate", "perspective"];
  var willChangeValues = ["transform", "translate", "scale", "rotate", "perspective", "filter"];
  var containValues = ["paint", "layout", "strict", "content"];
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css2 = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
    return transformProperties.some((value) => css2[value] ? css2[value] !== "none" : false) || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit && (css2.filter ? css2.filter !== "none" : false) || willChangeValues.some((value) => (css2.willChange || "").includes(value)) || containValues.some((value) => (css2.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode2(element);
    while (isHTMLElement2(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode2(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  var lastTraversableNodeNames = /* @__PURE__ */ new Set(["html", "body", "#document"]);
  function isLastTraversableNode(node2) {
    return lastTraversableNodeNames.has(getNodeName2(node2));
  }
  function getComputedStyle2(element) {
    return getWindow2(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode2(node2) {
    if (getNodeName2(node2) === "html") {
      return node2;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node2.assignedSlot || // DOM Element detected.
      node2.parentNode || // ShadowRoot detected.
      isShadowRoot2(node2) && node2.host || // Fallback.
      getDocumentElement2(node2)
    );
    return isShadowRoot2(result) ? result.host : result;
  }
  function getNearestOverflowAncestor2(node2) {
    const parentNode = getParentNode2(node2);
    if (isLastTraversableNode(parentNode)) {
      return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
    }
    if (isHTMLElement2(parentNode) && isOverflowElement2(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor2(parentNode);
  }
  function getOverflowAncestors2(node2, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor2(node2);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow2(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement2(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors2(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors2(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css2 = getComputedStyle2(element);
    let width = parseFloat(css2.width) || 0;
    let height = parseFloat(css2.height) || 0;
    const hasOffset = isHTMLElement2(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement2(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x2 = ($ ? round2(rect.width) : rect.width) / width;
    let y = ($ ? round2(rect.height) : rect.height) / height;
    if (!x2 || !Number.isFinite(x2)) {
      x2 = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x: x2,
      y
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow2(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x2 = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow2(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow2(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css2 = getComputedStyle2(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
        x2 *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x2 += left;
        y += top;
        currentWin = getWindow2(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x2,
      y
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement2(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y = htmlRect.top + scroll.scrollTop;
    return {
      x: x2,
      y
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement2(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement2(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || isOverflowElement2(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement2(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html = getDocumentElement2(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle2(body).direction === "rtl") {
      x2 += max2(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x2,
      y
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow2(element);
    const html = getDocumentElement2(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x2 = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y
    };
  }
  var absoluteOrFixed = /* @__PURE__ */ new Set(["absolute", "fixed"]);
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement2(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x2 = left * scale.x;
    const y = top * scale.y;
    return {
      width,
      height,
      x: x2,
      y
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement2(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode2(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache2) {
    const cachedResult = cache2.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors2(element, [], false).filter((el) => isElement(el) && getNodeName2(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle2(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode2(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle2(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement2(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode2(currentNode);
    }
    cache2.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max2(rect.top, accRect.top);
      accRect.right = min2(rect.right, accRect.right);
      accRect.bottom = min2(rect.bottom, accRect.bottom);
      accRect.left = max2(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement2(offsetParent);
    const documentElement = getDocumentElement2(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    function setLeftRTLScrollbarOffset() {
      offsets.x = getWindowScrollBarX(documentElement);
    }
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || isOverflowElement2(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        setLeftRTLScrollbarOffset();
      }
    }
    if (isFixed && !isOffsetParentAnElement && documentElement) {
      setLeftRTLScrollbarOffset();
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x: x2,
      y,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle2(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement2(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement2(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow2(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement2(element)) {
      let svgOffsetParent = getParentNode2(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode2(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data2) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data2.floating);
    return {
      reference: getRectRelativeToOffsetParent(data2.reference, await getOffsetParentFn(data2.floating), data2.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL(element) {
    return getComputedStyle2(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement: getDocumentElement2,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  function rectsAreEqual(a, b2) {
    return a.x === b2.x && a.y === b2.y && a.width === b2.width && a.height === b2.height;
  }
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement2(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const elementRectForRootMargin = element.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = elementRectForRootMargin;
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor2(top);
      const insetRight = floor2(root.clientWidth - (left + width));
      const insetBottom = floor2(root.clientHeight - (top + height));
      const insetLeft = floor2(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max2(0, min2(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
          refresh();
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (_e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors2(referenceEl) : [], ...getOverflowAncestors2(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var offset2 = offset;
  var shift2 = shift;
  var flip2 = flip;
  var size2 = size;
  var hide2 = hide;
  var arrow2 = arrow;
  var limitShift2 = limitShift;
  var computePosition2 = (reference, floating, options) => {
    const cache2 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache2
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // node_modules/@zag-js/popper/dist/index.mjs
  function createDOMRect(x2 = 0, y = 0, width = 0, height = 0) {
    if (typeof DOMRect === "function") {
      return new DOMRect(x2, y, width, height);
    }
    const rect = {
      x: x2,
      y,
      width,
      height,
      top: y,
      right: x2 + width,
      bottom: y + height,
      left: x2
    };
    return { ...rect, toJSON: () => rect };
  }
  function getDOMRect(anchorRect) {
    if (!anchorRect) return createDOMRect();
    const { x: x2, y, width, height } = anchorRect;
    return createDOMRect(x2, y, width, height);
  }
  function getAnchorElement(anchorElement, getAnchorRect) {
    return {
      contextElement: isHTMLElement(anchorElement) ? anchorElement : void 0,
      getBoundingClientRect: () => {
        const anchor = anchorElement;
        const anchorRect = getAnchorRect?.(anchor);
        if (anchorRect || !anchor) {
          return getDOMRect(anchorRect);
        }
        return anchor.getBoundingClientRect();
      }
    };
  }
  var toVar = (value) => ({ variable: value, reference: `var(${value})` });
  var cssVars = {
    arrowSize: toVar("--arrow-size"),
    arrowSizeHalf: toVar("--arrow-size-half"),
    arrowBg: toVar("--arrow-background"),
    transformOrigin: toVar("--transform-origin"),
    arrowOffset: toVar("--arrow-offset")
  };
  var getTransformOrigin = (arrow22) => ({
    top: "bottom center",
    "top-start": arrow22 ? `${arrow22.x}px bottom` : "left bottom",
    "top-end": arrow22 ? `${arrow22.x}px bottom` : "right bottom",
    bottom: "top center",
    "bottom-start": arrow22 ? `${arrow22.x}px top` : "top left",
    "bottom-end": arrow22 ? `${arrow22.x}px top` : "top right",
    left: "right center",
    "left-start": arrow22 ? `right ${arrow22.y}px` : "right top",
    "left-end": arrow22 ? `right ${arrow22.y}px` : "right bottom",
    right: "left center",
    "right-start": arrow22 ? `left ${arrow22.y}px` : "left top",
    "right-end": arrow22 ? `left ${arrow22.y}px` : "left bottom"
  });
  var transformOriginMiddleware = {
    name: "transformOrigin",
    fn({ placement, elements, middlewareData }) {
      const { arrow: arrow22 } = middlewareData;
      const transformOrigin = getTransformOrigin(arrow22)[placement];
      const { floating } = elements;
      floating.style.setProperty(cssVars.transformOrigin.variable, transformOrigin);
      return {
        data: { transformOrigin }
      };
    }
  };
  var rectMiddleware = {
    name: "rects",
    fn({ rects }) {
      return {
        data: rects
      };
    }
  };
  var shiftArrowMiddleware = (arrowEl) => {
    if (!arrowEl) return;
    return {
      name: "shiftArrow",
      fn({ placement, middlewareData }) {
        if (!middlewareData.arrow) return {};
        const { x: x2, y } = middlewareData.arrow;
        const dir = placement.split("-")[0];
        Object.assign(arrowEl.style, {
          left: x2 != null ? `${x2}px` : "",
          top: y != null ? `${y}px` : "",
          [dir]: `calc(100% + ${cssVars.arrowOffset.reference})`
        });
        return {};
      }
    };
  };
  function getPlacementDetails(placement) {
    const [side, align] = placement.split("-");
    return { side, align, hasAlign: align != null };
  }
  function getPlacementSide(placement) {
    return placement.split("-")[0];
  }
  var defaultOptions = {
    strategy: "absolute",
    placement: "bottom",
    listeners: true,
    gutter: 8,
    flip: true,
    slide: true,
    overlap: false,
    sameWidth: false,
    fitViewport: false,
    overflowPadding: 8,
    arrowPadding: 4
  };
  function roundByDpr(win, value) {
    const dpr = win.devicePixelRatio || 1;
    return Math.round(value * dpr) / dpr;
  }
  function getBoundaryMiddleware(opts) {
    return runIfFn(opts.boundary);
  }
  function getArrowMiddleware(arrowElement, opts) {
    if (!arrowElement) return;
    return arrow2({
      element: arrowElement,
      padding: opts.arrowPadding
    });
  }
  function getOffsetMiddleware(arrowElement, opts) {
    if (isNull(opts.offset ?? opts.gutter)) return;
    return offset2(({ placement }) => {
      const arrowOffset = (arrowElement?.clientHeight || 0) / 2;
      const gutter = opts.offset?.mainAxis ?? opts.gutter;
      const mainAxis = typeof gutter === "number" ? gutter + arrowOffset : gutter ?? arrowOffset;
      const { hasAlign } = getPlacementDetails(placement);
      const shift22 = !hasAlign ? opts.shift : void 0;
      const crossAxis = opts.offset?.crossAxis ?? shift22;
      return compact2({
        crossAxis,
        mainAxis,
        alignmentAxis: opts.shift
      });
    });
  }
  function getFlipMiddleware(opts) {
    if (!opts.flip) return;
    return flip2({
      boundary: getBoundaryMiddleware(opts),
      padding: opts.overflowPadding,
      fallbackPlacements: opts.flip === true ? void 0 : opts.flip
    });
  }
  function getShiftMiddleware(opts) {
    if (!opts.slide && !opts.overlap) return;
    return shift2({
      boundary: getBoundaryMiddleware(opts),
      mainAxis: opts.slide,
      crossAxis: opts.overlap,
      padding: opts.overflowPadding,
      limiter: limitShift2()
    });
  }
  function getSizeMiddleware(opts) {
    return size2({
      padding: opts.overflowPadding,
      apply({ elements, rects, availableHeight, availableWidth }) {
        const floating = elements.floating;
        const referenceWidth = Math.round(rects.reference.width);
        availableWidth = Math.floor(availableWidth);
        availableHeight = Math.floor(availableHeight);
        floating.style.setProperty("--reference-width", `${referenceWidth}px`);
        floating.style.setProperty("--available-width", `${availableWidth}px`);
        floating.style.setProperty("--available-height", `${availableHeight}px`);
      }
    });
  }
  function hideWhenDetachedMiddleware(opts) {
    if (!opts.hideWhenDetached) return;
    return hide2({ strategy: "referenceHidden", boundary: opts.boundary?.() ?? "clippingAncestors" });
  }
  function getAutoUpdateOptions(opts) {
    if (!opts) return {};
    if (opts === true) {
      return { ancestorResize: true, ancestorScroll: true, elementResize: true, layoutShift: true };
    }
    return opts;
  }
  function getPlacementImpl(referenceOrVirtual, floating, opts = {}) {
    const reference = getAnchorElement(referenceOrVirtual, opts.getAnchorRect);
    if (!floating || !reference) return;
    const options = Object.assign({}, defaultOptions, opts);
    const arrowEl = floating.querySelector("[data-part=arrow]");
    const middleware2 = [
      getOffsetMiddleware(arrowEl, options),
      getFlipMiddleware(options),
      getShiftMiddleware(options),
      getArrowMiddleware(arrowEl, options),
      shiftArrowMiddleware(arrowEl),
      transformOriginMiddleware,
      getSizeMiddleware(options),
      hideWhenDetachedMiddleware(options),
      rectMiddleware
    ];
    const { placement, strategy, onComplete, onPositioned } = options;
    const updatePosition = async () => {
      if (!reference || !floating) return;
      const pos = await computePosition2(reference, floating, {
        placement,
        middleware: middleware2,
        strategy
      });
      onComplete?.(pos);
      onPositioned?.({ placed: true });
      const win = getWindow(floating);
      const x2 = roundByDpr(win, pos.x);
      const y = roundByDpr(win, pos.y);
      floating.style.setProperty("--x", `${x2}px`);
      floating.style.setProperty("--y", `${y}px`);
      if (options.hideWhenDetached) {
        const isHidden = pos.middlewareData.hide?.referenceHidden;
        if (isHidden) {
          floating.style.setProperty("visibility", "hidden");
          floating.style.setProperty("pointer-events", "none");
        } else {
          floating.style.removeProperty("visibility");
          floating.style.removeProperty("pointer-events");
        }
      }
      const contentEl = floating.firstElementChild;
      if (contentEl) {
        const styles = getComputedStyle(contentEl);
        floating.style.setProperty("--z-index", styles.zIndex);
      }
    };
    const update = async () => {
      if (opts.updatePosition) {
        await opts.updatePosition({ updatePosition, floatingElement: floating });
        onPositioned?.({ placed: true });
      } else {
        await updatePosition();
      }
    };
    const autoUpdateOptions = getAutoUpdateOptions(options.listeners);
    const cancelAutoUpdate = options.listeners ? autoUpdate(reference, floating, update, autoUpdateOptions) : noop;
    update();
    return () => {
      cancelAutoUpdate?.();
      onPositioned?.({ placed: false });
    };
  }
  function getPlacement(referenceOrFn, floatingOrFn, opts = {}) {
    const { defer, ...options } = opts;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const reference = typeof referenceOrFn === "function" ? referenceOrFn() : referenceOrFn;
        const floating = typeof floatingOrFn === "function" ? floatingOrFn() : floatingOrFn;
        cleanups.push(getPlacementImpl(reference, floating, options));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  var ARROW_FLOATING_STYLE = {
    bottom: "rotate(45deg)",
    left: "rotate(135deg)",
    top: "rotate(225deg)",
    right: "rotate(315deg)"
  };
  function getPlacementStyles(options = {}) {
    const { placement, sameWidth, fitViewport, strategy = "absolute" } = options;
    return {
      arrow: {
        position: "absolute",
        width: cssVars.arrowSize.reference,
        height: cssVars.arrowSize.reference,
        [cssVars.arrowSizeHalf.variable]: `calc(${cssVars.arrowSize.reference} / 2)`,
        [cssVars.arrowOffset.variable]: `calc(${cssVars.arrowSizeHalf.reference} * -1)`
      },
      arrowTip: {
        // @ts-expect-error - Fix this
        transform: placement ? ARROW_FLOATING_STYLE[placement.split("-")[0]] : void 0,
        background: cssVars.arrowBg.reference,
        top: "0",
        left: "0",
        width: "100%",
        height: "100%",
        position: "absolute",
        zIndex: "inherit"
      },
      floating: {
        position: strategy,
        isolation: "isolate",
        minWidth: sameWidth ? void 0 : "max-content",
        width: sameWidth ? "var(--reference-width)" : void 0,
        maxWidth: fitViewport ? "var(--available-width)" : void 0,
        maxHeight: fitViewport ? "var(--available-height)" : void 0,
        pointerEvents: !placement ? "none" : void 0,
        top: "0px",
        left: "0px",
        // move off-screen if placement is not defined
        transform: placement ? "translate3d(var(--x), var(--y), 0)" : "translate3d(0, -100vh, 0)",
        zIndex: "var(--z-index)"
      }
    };
  }

  // node_modules/@zag-js/interact-outside/dist/index.mjs
  function getWindowFrames(win) {
    const frames = {
      each(cb) {
        for (let i2 = 0; i2 < win.frames?.length; i2 += 1) {
          const frame = win.frames[i2];
          if (frame) cb(frame);
        }
      },
      addEventListener(event, listener, options) {
        frames.each((frame) => {
          try {
            frame.document.addEventListener(event, listener, options);
          } catch {
          }
        });
        return () => {
          try {
            frames.removeEventListener(event, listener, options);
          } catch {
          }
        };
      },
      removeEventListener(event, listener, options) {
        frames.each((frame) => {
          try {
            frame.document.removeEventListener(event, listener, options);
          } catch {
          }
        });
      }
    };
    return frames;
  }
  function getParentWindow(win) {
    const parent = win.frameElement != null ? win.parent : null;
    return {
      addEventListener: (event, listener, options) => {
        try {
          parent?.addEventListener(event, listener, options);
        } catch {
        }
        return () => {
          try {
            parent?.removeEventListener(event, listener, options);
          } catch {
          }
        };
      },
      removeEventListener: (event, listener, options) => {
        try {
          parent?.removeEventListener(event, listener, options);
        } catch {
        }
      }
    };
  }
  var POINTER_OUTSIDE_EVENT = "pointerdown.outside";
  var FOCUS_OUTSIDE_EVENT = "focus.outside";
  function isComposedPathFocusable(composedPath) {
    for (const node2 of composedPath) {
      if (isHTMLElement(node2) && isFocusable(node2)) return true;
    }
    return false;
  }
  var isPointerEvent = (event) => "clientY" in event;
  function isEventPointWithin(node2, event) {
    if (!isPointerEvent(event) || !node2) return false;
    const rect = node2.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0) return false;
    return rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
  }
  function isPointInRect(rect, point) {
    return rect.y <= point.y && point.y <= rect.y + rect.height && rect.x <= point.x && point.x <= rect.x + rect.width;
  }
  function isEventWithinScrollbar(event, ancestor) {
    if (!ancestor || !isPointerEvent(event)) return false;
    const isScrollableY = ancestor.scrollHeight > ancestor.clientHeight;
    const onScrollbarY = isScrollableY && event.clientX > ancestor.offsetLeft + ancestor.clientWidth;
    const isScrollableX = ancestor.scrollWidth > ancestor.clientWidth;
    const onScrollbarX = isScrollableX && event.clientY > ancestor.offsetTop + ancestor.clientHeight;
    const rect = {
      x: ancestor.offsetLeft,
      y: ancestor.offsetTop,
      width: ancestor.clientWidth + (isScrollableY ? 16 : 0),
      height: ancestor.clientHeight + (isScrollableX ? 16 : 0)
    };
    const point = {
      x: event.clientX,
      y: event.clientY
    };
    if (!isPointInRect(rect, point)) return false;
    return onScrollbarY || onScrollbarX;
  }
  function trackInteractOutsideImpl(node2, options) {
    const { exclude, onFocusOutside, onPointerDownOutside, onInteractOutside, defer } = options;
    if (!node2) return;
    const doc = getDocument(node2);
    const win = getWindow(node2);
    const frames = getWindowFrames(win);
    const parentWin = getParentWindow(win);
    function isEventOutside(event, target) {
      if (!isHTMLElement(target)) return false;
      if (!target.isConnected) return false;
      if (contains(node2, target)) return false;
      if (isEventPointWithin(node2, event)) return false;
      const triggerEl = doc.querySelector(`[aria-controls="${node2.id}"]`);
      if (triggerEl) {
        const triggerAncestor = getNearestOverflowAncestor(triggerEl);
        if (isEventWithinScrollbar(event, triggerAncestor)) return false;
      }
      const nodeAncestor = getNearestOverflowAncestor(node2);
      if (isEventWithinScrollbar(event, nodeAncestor)) return false;
      return !exclude?.(target);
    }
    const pointerdownCleanups = /* @__PURE__ */ new Set();
    const isInShadowRoot = isShadowRoot(node2?.getRootNode());
    function onPointerDown(event) {
      function handler(clickEvent) {
        const func = defer && !isTouchDevice() ? raf : (v) => v();
        const evt = clickEvent ?? event;
        const composedPath = evt?.composedPath?.() ?? [evt?.target];
        func(() => {
          const target = isInShadowRoot ? composedPath[0] : getEventTarget(event);
          if (!node2 || !isEventOutside(event, target)) return;
          if (onPointerDownOutside || onInteractOutside) {
            const handler2 = callAll2(onPointerDownOutside, onInteractOutside);
            node2.addEventListener(POINTER_OUTSIDE_EVENT, handler2, { once: true });
          }
          fireCustomEvent(node2, POINTER_OUTSIDE_EVENT, {
            bubbles: false,
            cancelable: true,
            detail: {
              originalEvent: evt,
              contextmenu: isContextMenuEvent(evt),
              focusable: isComposedPathFocusable(composedPath),
              target
            }
          });
        });
      }
      if (event.pointerType === "touch") {
        pointerdownCleanups.forEach((fn) => fn());
        pointerdownCleanups.add(addDomEvent(doc, "click", handler, { once: true }));
        pointerdownCleanups.add(parentWin.addEventListener("click", handler, { once: true }));
        pointerdownCleanups.add(frames.addEventListener("click", handler, { once: true }));
      } else {
        handler();
      }
    }
    const cleanups = /* @__PURE__ */ new Set();
    const timer = setTimeout(() => {
      cleanups.add(addDomEvent(doc, "pointerdown", onPointerDown, true));
      cleanups.add(parentWin.addEventListener("pointerdown", onPointerDown, true));
      cleanups.add(frames.addEventListener("pointerdown", onPointerDown, true));
    }, 0);
    function onFocusin(event) {
      const func = defer ? raf : (v) => v();
      func(() => {
        const target = getEventTarget(event);
        if (!node2 || !isEventOutside(event, target)) return;
        if (onFocusOutside || onInteractOutside) {
          const handler = callAll2(onFocusOutside, onInteractOutside);
          node2.addEventListener(FOCUS_OUTSIDE_EVENT, handler, { once: true });
        }
        fireCustomEvent(node2, FOCUS_OUTSIDE_EVENT, {
          bubbles: false,
          cancelable: true,
          detail: {
            originalEvent: event,
            contextmenu: false,
            focusable: isFocusable(target),
            target
          }
        });
      });
    }
    if (!isTouchDevice()) {
      cleanups.add(addDomEvent(doc, "focusin", onFocusin, true));
      cleanups.add(parentWin.addEventListener("focusin", onFocusin, true));
      cleanups.add(frames.addEventListener("focusin", onFocusin, true));
    }
    return () => {
      clearTimeout(timer);
      pointerdownCleanups.forEach((fn) => fn());
      cleanups.forEach((fn) => fn());
    };
  }
  function trackInteractOutside(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(trackInteractOutsideImpl(node2, options));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }
  function fireCustomEvent(el, type, init) {
    const win = el.ownerDocument.defaultView || window;
    const event = new win.CustomEvent(type, init);
    return el.dispatchEvent(event);
  }

  // node_modules/@zag-js/dismissable/dist/index.mjs
  function trackEscapeKeydown(node2, fn) {
    const handleKeyDown = (event) => {
      if (event.key !== "Escape") return;
      if (event.isComposing) return;
      fn?.(event);
    };
    return addDomEvent(getDocument(node2), "keydown", handleKeyDown, { capture: true });
  }
  var layerStack = {
    layers: [],
    branches: [],
    count() {
      return this.layers.length;
    },
    pointerBlockingLayers() {
      return this.layers.filter((layer) => layer.pointerBlocking);
    },
    topMostPointerBlockingLayer() {
      return [...this.pointerBlockingLayers()].slice(-1)[0];
    },
    hasPointerBlockingLayer() {
      return this.pointerBlockingLayers().length > 0;
    },
    isBelowPointerBlockingLayer(node2) {
      const index = this.indexOf(node2);
      const highestBlockingIndex = this.topMostPointerBlockingLayer() ? this.indexOf(this.topMostPointerBlockingLayer()?.node) : -1;
      return index < highestBlockingIndex;
    },
    isTopMost(node2) {
      const layer = this.layers[this.count() - 1];
      return layer?.node === node2;
    },
    getNestedLayers(node2) {
      return Array.from(this.layers).slice(this.indexOf(node2) + 1);
    },
    isInNestedLayer(node2, target) {
      return this.getNestedLayers(node2).some((layer) => contains(layer.node, target));
    },
    isInBranch(target) {
      return Array.from(this.branches).some((branch) => contains(branch, target));
    },
    add(layer) {
      const num = this.layers.push(layer);
      layer.node.style.setProperty("--layer-index", `${num}`);
    },
    addBranch(node2) {
      this.branches.push(node2);
    },
    remove(node2) {
      const index = this.indexOf(node2);
      if (index < 0) return;
      if (index < this.count() - 1) {
        const _layers = this.getNestedLayers(node2);
        _layers.forEach((layer) => layer.dismiss());
      }
      this.layers.splice(index, 1);
      node2.style.removeProperty("--layer-index");
    },
    removeBranch(node2) {
      const index = this.branches.indexOf(node2);
      if (index >= 0) this.branches.splice(index, 1);
    },
    indexOf(node2) {
      return this.layers.findIndex((layer) => layer.node === node2);
    },
    dismiss(node2) {
      this.layers[this.indexOf(node2)]?.dismiss();
    },
    clear() {
      this.remove(this.layers[0].node);
    }
  };
  var originalBodyPointerEvents;
  function assignPointerEventToLayers() {
    layerStack.layers.forEach(({ node: node2 }) => {
      node2.style.pointerEvents = layerStack.isBelowPointerBlockingLayer(node2) ? "none" : "auto";
    });
  }
  function clearPointerEvent(node2) {
    node2.style.pointerEvents = "";
  }
  function disablePointerEventsOutside(node2, persistentElements) {
    const doc = getDocument(node2);
    const cleanups = [];
    if (layerStack.hasPointerBlockingLayer() && !doc.body.hasAttribute("data-inert")) {
      originalBodyPointerEvents = document.body.style.pointerEvents;
      queueMicrotask(() => {
        doc.body.style.pointerEvents = "none";
        doc.body.setAttribute("data-inert", "");
      });
    }
    persistentElements?.forEach((el) => {
      const [promise, abort] = waitForElement(
        () => {
          const node22 = el();
          return isHTMLElement(node22) ? node22 : null;
        },
        { timeout: 1e3 }
      );
      promise.then((el2) => cleanups.push(setStyle(el2, { pointerEvents: "auto" })));
      cleanups.push(abort);
    });
    return () => {
      if (layerStack.hasPointerBlockingLayer()) return;
      queueMicrotask(() => {
        doc.body.style.pointerEvents = originalBodyPointerEvents;
        doc.body.removeAttribute("data-inert");
        if (doc.body.style.length === 0) doc.body.removeAttribute("style");
      });
      cleanups.forEach((fn) => fn());
    };
  }
  function trackDismissableElementImpl(node2, options) {
    const { warnOnMissingNode = true } = options;
    if (warnOnMissingNode && !node2) {
      warn("[@zag-js/dismissable] node is `null` or `undefined`");
      return;
    }
    if (!node2) {
      return;
    }
    const { onDismiss, pointerBlocking, exclude: excludeContainers, debug } = options;
    const layer = { dismiss: onDismiss, node: node2, pointerBlocking };
    layerStack.add(layer);
    assignPointerEventToLayers();
    function onPointerDownOutside(event) {
      const target = getEventTarget(event.detail.originalEvent);
      if (layerStack.isBelowPointerBlockingLayer(node2) || layerStack.isInBranch(target)) return;
      options.onPointerDownOutside?.(event);
      options.onInteractOutside?.(event);
      if (event.defaultPrevented) return;
      if (debug) {
        console.log("onPointerDownOutside:", event.detail.originalEvent);
      }
      onDismiss?.();
    }
    function onFocusOutside(event) {
      const target = getEventTarget(event.detail.originalEvent);
      if (layerStack.isInBranch(target)) return;
      options.onFocusOutside?.(event);
      options.onInteractOutside?.(event);
      if (event.defaultPrevented) return;
      if (debug) {
        console.log("onFocusOutside:", event.detail.originalEvent);
      }
      onDismiss?.();
    }
    function onEscapeKeyDown(event) {
      if (!layerStack.isTopMost(node2)) return;
      options.onEscapeKeyDown?.(event);
      if (!event.defaultPrevented && onDismiss) {
        event.preventDefault();
        onDismiss();
      }
    }
    function exclude(target) {
      if (!node2) return false;
      const containers = typeof excludeContainers === "function" ? excludeContainers() : excludeContainers;
      const _containers = Array.isArray(containers) ? containers : [containers];
      const persistentElements = options.persistentElements?.map((fn) => fn()).filter(isHTMLElement);
      if (persistentElements) _containers.push(...persistentElements);
      return _containers.some((node22) => contains(node22, target)) || layerStack.isInNestedLayer(node2, target);
    }
    const cleanups = [
      pointerBlocking ? disablePointerEventsOutside(node2, options.persistentElements) : void 0,
      trackEscapeKeydown(node2, onEscapeKeyDown),
      trackInteractOutside(node2, { exclude, onFocusOutside, onPointerDownOutside, defer: options.defer })
    ];
    return () => {
      layerStack.remove(node2);
      assignPointerEventToLayers();
      clearPointerEvent(node2);
      cleanups.forEach((fn) => fn?.());
    };
  }
  function trackDismissableElement(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const node2 = isFunction2(nodeOrFn) ? nodeOrFn() : nodeOrFn;
        cleanups.push(trackDismissableElementImpl(node2, options));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }

  // node_modules/@zag-js/color-picker/dist/index.mjs
  var anatomy2 = createAnatomy("color-picker", [
    "root",
    "label",
    "control",
    "trigger",
    "positioner",
    "content",
    "area",
    "areaThumb",
    "valueText",
    "areaBackground",
    "channelSlider",
    "channelSliderLabel",
    "channelSliderTrack",
    "channelSliderThumb",
    "channelSliderValueText",
    "channelInput",
    "transparencyGrid",
    "swatchGroup",
    "swatchTrigger",
    "swatchIndicator",
    "swatch",
    "eyeDropperTrigger",
    "formatTrigger",
    "formatSelect"
  ]);
  var parts2 = anatomy2.build();
  var getHiddenInputId = (ctx) => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`;
  var getControlId = (ctx) => ctx.ids?.control ?? `color-picker:${ctx.id}:control`;
  var getTriggerId = (ctx) => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`;
  var getContentId2 = (ctx) => ctx.ids?.content ?? `color-picker:${ctx.id}:content`;
  var getPositionerId = (ctx) => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`;
  var getFormatSelectId = (ctx) => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`;
  var getAreaId = (ctx) => ctx.ids?.area ?? `color-picker:${ctx.id}:area`;
  var getAreaThumbId = (ctx) => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`;
  var getChannelSliderTrackId = (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`;
  var getChannelSliderThumbId = (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`;
  var getContentEl2 = (ctx) => ctx.getById(getContentId2(ctx));
  var getAreaThumbEl = (ctx) => ctx.getById(getAreaThumbId(ctx));
  var getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));
  var getFormatSelectEl = (ctx) => ctx.getById(getFormatSelectId(ctx));
  var getHiddenInputEl = (ctx) => ctx.getById(getHiddenInputId(ctx));
  var getAreaEl = (ctx) => ctx.getById(getAreaId(ctx));
  var getAreaValueFromPoint = (ctx, point) => {
    const areaEl = getAreaEl(ctx);
    if (!areaEl) return;
    const { percent } = getRelativePoint(point, areaEl);
    return percent;
  };
  var getControlEl = (ctx) => ctx.getById(getControlId(ctx));
  var getTriggerEl = (ctx) => ctx.getById(getTriggerId(ctx));
  var getPositionerEl = (ctx) => ctx.getById(getPositionerId(ctx));
  var getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));
  var getChannelSliderValueFromPoint = (ctx, point, channel) => {
    const trackEl = getChannelSliderTrackEl(ctx, channel);
    if (!trackEl) return;
    const { percent } = getRelativePoint(point, trackEl);
    return percent;
  };
  var getChannelInputEls = (ctx) => {
    return [
      ...queryAll(getContentEl2(ctx), "input[data-channel]"),
      ...queryAll(getControlEl(ctx), "input[data-channel]")
    ];
  };
  function getChannelValue(color, channel) {
    if (channel == null) return "";
    if (channel === "hex") {
      return color.toString("hex");
    }
    if (channel === "css") {
      return color.toString("css");
    }
    if (channel in color) {
      return color.getChannelValue(channel).toString();
    }
    const isHSL = color.getFormat() === "hsla";
    switch (channel) {
      case "hue":
        return isHSL ? color.toFormat("hsla").getChannelValue("hue").toString() : color.toFormat("hsba").getChannelValue("hue").toString();
      case "saturation":
        return isHSL ? color.toFormat("hsla").getChannelValue("saturation").toString() : color.toFormat("hsba").getChannelValue("saturation").toString();
      case "lightness":
        return color.toFormat("hsla").getChannelValue("lightness").toString();
      case "brightness":
        return color.toFormat("hsba").getChannelValue("brightness").toString();
      case "red":
      case "green":
      case "blue":
        return color.toFormat("rgba").getChannelValue(channel).toString();
      default:
        return color.getChannelValue(channel).toString();
    }
  }
  var formats = ["hsba", "hsla", "rgba"];
  var formatRegex = new RegExp(`^(${formats.join("|")})$`);
  var parse2 = (colorString) => {
    return parseColor(colorString);
  };
  var HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;
  function isValidHex(value) {
    return HEX_REGEX.test(value);
  }
  function prefixHex(value) {
    if (value.startsWith("#")) return value;
    if (isValidHex(value)) return `#${value}`;
    return value;
  }
  var { and } = createGuards();
  var machine2 = createMachine({
    props({ props: props26 }) {
      return {
        dir: "ltr",
        defaultValue: parse2("#000000"),
        defaultFormat: "rgba",
        openAutoFocus: true,
        ...props26,
        positioning: {
          placement: "bottom",
          ...props26.positioning
        }
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen") || prop("inline");
      return open ? "open" : "idle";
    },
    context({ prop, bindable, getContext }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          isEqual(a, b2) {
            return a.toString("css") === b2?.toString("css");
          },
          hash(a) {
            return a.toString("css");
          },
          onChange(value) {
            const ctx = getContext();
            const valueAsString = value.toString(ctx.get("format"));
            prop("onValueChange")?.({ value, valueAsString });
          }
        })),
        format: bindable(() => ({
          defaultValue: prop("defaultFormat"),
          value: prop("format"),
          onChange(format) {
            prop("onFormatChange")?.({ format });
          }
        })),
        activeId: bindable(() => ({ defaultValue: null })),
        activeChannel: bindable(() => ({ defaultValue: null })),
        activeOrientation: bindable(() => ({ defaultValue: null })),
        fieldsetDisabled: bindable(() => ({ defaultValue: false })),
        restoreFocus: bindable(() => ({ defaultValue: true })),
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        }))
      };
    },
    computed: {
      rtl: ({ prop }) => prop("dir") === "rtl",
      disabled: ({ prop, context }) => !!prop("disabled") || context.get("fieldsetDisabled"),
      interactive: ({ prop }) => !(prop("disabled") || prop("readOnly")),
      valueAsString: ({ context }) => context.get("value").toString(context.get("format")),
      areaValue: ({ context }) => {
        const format = context.get("format").startsWith("hsl") ? "hsla" : "hsba";
        return context.get("value").toFormat(format);
      }
    },
    effects: ["trackFormControl"],
    watch({ prop, context, action, track }) {
      track([() => context.hash("value")], () => {
        action(["syncInputElements", "dispatchChangeEvent"]);
      });
      track([() => context.get("format")], () => {
        action(["syncFormatSelectElement"]);
      });
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    on: {
      "VALUE.SET": {
        actions: ["setValue"]
      },
      "FORMAT.SET": {
        actions: ["setFormat"]
      },
      "CHANNEL_INPUT.CHANGE": {
        actions: ["setChannelColorFromInput"]
      },
      "EYEDROPPER.CLICK": {
        actions: ["openEyeDropper"]
      },
      "SWATCH_TRIGGER.CLICK": {
        actions: ["setValue"]
      }
    },
    states: {
      idle: {
        tags: ["closed"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open",
            actions: ["setInitialFocus"]
          },
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ],
          "CHANNEL_INPUT.FOCUS": {
            target: "focused",
            actions: ["setActiveChannel"]
          }
        }
      },
      focused: {
        tags: ["closed", "focused"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open",
            actions: ["setInitialFocus"]
          },
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ],
          "CHANNEL_INPUT.FOCUS": {
            actions: ["setActiveChannel"]
          },
          "CHANNEL_INPUT.BLUR": {
            target: "idle",
            actions: ["setChannelColorFromInput"]
          },
          "TRIGGER.BLUR": {
            target: "idle"
          }
        }
      },
      open: {
        tags: ["open"],
        effects: ["trackPositioning", "trackDismissableElement"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              guard: "shouldRestoreFocus",
              target: "focused",
              actions: ["setReturnFocus"]
            },
            {
              target: "idle"
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          "AREA.POINTER_DOWN": {
            target: "open:dragging",
            actions: ["setActiveChannel", "setAreaColorFromPoint", "focusAreaThumb"]
          },
          "AREA.FOCUS": {
            actions: ["setActiveChannel"]
          },
          "CHANNEL_SLIDER.POINTER_DOWN": {
            target: "open:dragging",
            actions: ["setActiveChannel", "setChannelColorFromPoint", "focusChannelThumb"]
          },
          "CHANNEL_SLIDER.FOCUS": {
            actions: ["setActiveChannel"]
          },
          "AREA.ARROW_LEFT": {
            actions: ["decrementAreaXChannel"]
          },
          "AREA.ARROW_RIGHT": {
            actions: ["incrementAreaXChannel"]
          },
          "AREA.ARROW_UP": {
            actions: ["incrementAreaYChannel"]
          },
          "AREA.ARROW_DOWN": {
            actions: ["decrementAreaYChannel"]
          },
          "AREA.PAGE_UP": {
            actions: ["incrementAreaXChannel"]
          },
          "AREA.PAGE_DOWN": {
            actions: ["decrementAreaXChannel"]
          },
          "CHANNEL_SLIDER.ARROW_LEFT": {
            actions: ["decrementChannel"]
          },
          "CHANNEL_SLIDER.ARROW_RIGHT": {
            actions: ["incrementChannel"]
          },
          "CHANNEL_SLIDER.ARROW_UP": {
            actions: ["incrementChannel"]
          },
          "CHANNEL_SLIDER.ARROW_DOWN": {
            actions: ["decrementChannel"]
          },
          "CHANNEL_SLIDER.PAGE_UP": {
            actions: ["incrementChannel"]
          },
          "CHANNEL_SLIDER.PAGE_DOWN": {
            actions: ["decrementChannel"]
          },
          "CHANNEL_SLIDER.HOME": {
            actions: ["setChannelToMin"]
          },
          "CHANNEL_SLIDER.END": {
            actions: ["setChannelToMax"]
          },
          "CHANNEL_INPUT.BLUR": {
            actions: ["setChannelColorFromInput"]
          },
          INTERACT_OUTSIDE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              guard: "shouldRestoreFocus",
              target: "focused",
              actions: ["invokeOnClose", "setReturnFocus"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          "SWATCH_TRIGGER.CLICK": [
            {
              guard: and("isOpenControlled", "closeOnSelect"),
              actions: ["setValue", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["setValue", "invokeOnClose", "setReturnFocus"]
            },
            {
              actions: ["setValue"]
            }
          ]
        }
      },
      "open:dragging": {
        tags: ["open"],
        exit: ["clearActiveChannel"],
        effects: ["trackPointerMove", "disableTextSelection", "trackPositioning", "trackDismissableElement"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              guard: "shouldRestoreFocus",
              target: "focused",
              actions: ["setReturnFocus"]
            },
            {
              target: "idle"
            }
          ],
          "AREA.POINTER_MOVE": {
            actions: ["setAreaColorFromPoint", "focusAreaThumb"]
          },
          "AREA.POINTER_UP": {
            target: "open",
            actions: ["invokeOnChangeEnd"]
          },
          "CHANNEL_SLIDER.POINTER_MOVE": {
            actions: ["setChannelColorFromPoint", "focusChannelThumb"]
          },
          "CHANNEL_SLIDER.POINTER_UP": {
            target: "open",
            actions: ["invokeOnChangeEnd"]
          },
          INTERACT_OUTSIDE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              guard: "shouldRestoreFocus",
              target: "focused",
              actions: ["invokeOnClose", "setReturnFocus"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ]
        }
      }
    },
    implementations: {
      guards: {
        closeOnSelect: ({ prop }) => !!prop("closeOnSelect"),
        isOpenControlled: ({ prop }) => prop("open") != null || !!prop("inline"),
        shouldRestoreFocus: ({ context }) => !!context.get("restoreFocus")
      },
      effects: {
        trackPositioning({ context, prop, scope }) {
          if (prop("inline")) return;
          if (!context.get("currentPlacement")) {
            context.set("currentPlacement", prop("positioning")?.placement);
          }
          const anchorEl = getTriggerEl(scope);
          const getPositionerEl22 = () => getPositionerEl(scope);
          return getPlacement(anchorEl, getPositionerEl22, {
            ...prop("positioning"),
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        trackDismissableElement({ context, scope, prop, send }) {
          if (prop("inline")) return;
          const getContentEl22 = () => getContentEl2(scope);
          return trackDismissableElement(getContentEl22, {
            exclude: getTriggerEl(scope),
            defer: true,
            onInteractOutside(event) {
              prop("onInteractOutside")?.(event);
              if (event.defaultPrevented) return;
              context.set("restoreFocus", !(event.detail.focusable || event.detail.contextmenu));
            },
            onPointerDownOutside: prop("onPointerDownOutside"),
            onFocusOutside: prop("onFocusOutside"),
            onDismiss() {
              send({ type: "INTERACT_OUTSIDE" });
            }
          });
        },
        trackFormControl({ context, scope, send }) {
          const inputEl = getHiddenInputEl(scope);
          return trackFormControl(inputEl, {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              send({ type: "VALUE.SET", value: context.initial("value"), src: "form.reset" });
            }
          });
        },
        trackPointerMove({ context, scope, event, send }) {
          return trackPointerMove(scope.getDoc(), {
            onPointerMove({ point }) {
              const type = context.get("activeId") === "area" ? "AREA.POINTER_MOVE" : "CHANNEL_SLIDER.POINTER_MOVE";
              send({ type, point, format: event.format });
            },
            onPointerUp() {
              const type = context.get("activeId") === "area" ? "AREA.POINTER_UP" : "CHANNEL_SLIDER.POINTER_UP";
              send({ type });
            }
          });
        },
        disableTextSelection({ scope }) {
          return disableTextSelection({
            doc: scope.getDoc(),
            target: getContentEl2(scope)
          });
        }
      },
      actions: {
        openEyeDropper({ scope, context }) {
          const win = scope.getWin();
          const isSupported = "EyeDropper" in win;
          if (!isSupported) return;
          const picker = new win.EyeDropper();
          picker.open().then(({ sRGBHex }) => {
            const format = context.get("value").getFormat();
            const color = parseColor(sRGBHex).toFormat(format);
            context.set("value", color);
          }).catch(() => void 0);
        },
        setActiveChannel({ context, event }) {
          context.set("activeId", event.id);
          if (event.channel) context.set("activeChannel", event.channel);
          if (event.orientation) context.set("activeOrientation", event.orientation);
        },
        clearActiveChannel({ context }) {
          context.set("activeChannel", null);
          context.set("activeId", null);
          context.set("activeOrientation", null);
        },
        setAreaColorFromPoint({ context, event, computed, scope }) {
          const v = event.format ? context.get("value").toFormat(event.format) : computed("areaValue");
          const { xChannel, yChannel } = event.channel || context.get("activeChannel");
          const percent = getAreaValueFromPoint(scope, event.point);
          if (!percent) return;
          const xValue = v.getChannelPercentValue(xChannel, percent.x);
          const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);
          const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);
          context.set("value", color);
        },
        setChannelColorFromPoint({ context, event, computed, scope }) {
          const channel = event.channel || context.get("activeId");
          const normalizedValue = event.format ? context.get("value").toFormat(event.format) : computed("areaValue");
          const percent = getChannelSliderValueFromPoint(scope, event.point, channel);
          if (!percent) return;
          const orientation = context.get("activeOrientation") || "horizontal";
          const channelPercent = orientation === "horizontal" ? percent.x : percent.y;
          const value = normalizedValue.getChannelPercentValue(channel, channelPercent);
          const color = normalizedValue.withChannelValue(channel, value);
          context.set("value", color);
        },
        setValue({ context, event }) {
          context.set("value", event.value);
        },
        setFormat({ context, event }) {
          context.set("format", event.format);
        },
        dispatchChangeEvent({ scope, computed }) {
          dispatchInputValueEvent(getHiddenInputEl(scope), { value: computed("valueAsString") });
        },
        syncInputElements({ context, scope }) {
          syncChannelInputs(scope, context.get("value"));
        },
        invokeOnChangeEnd({ context, prop, computed }) {
          prop("onValueChangeEnd")?.({
            value: context.get("value"),
            valueAsString: computed("valueAsString")
          });
        },
        setChannelColorFromInput({ context, event, scope, prop }) {
          const { channel, isTextField, value } = event;
          const currentAlpha = context.get("value").getChannelValue("alpha");
          let color;
          if (channel === "alpha") {
            let valueAsNumber = parseFloat(value);
            valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;
            color = context.get("value").withChannelValue("alpha", valueAsNumber);
          } else if (isTextField) {
            color = tryCatch(
              () => {
                const parseValue2 = channel === "hex" ? prefixHex(value) : value;
                return parse2(parseValue2).withChannelValue("alpha", currentAlpha);
              },
              () => context.get("value")
            );
          } else {
            const current = context.get("value").toFormat(context.get("format"));
            const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;
            color = current.withChannelValue(channel, valueAsNumber);
          }
          syncChannelInputs(scope, context.get("value"), color);
          context.set("value", color);
          prop("onValueChangeEnd")?.({
            value: color,
            valueAsString: color.toString(context.get("format"))
          });
        },
        incrementChannel({ context, event }) {
          const color = context.get("value").incrementChannel(event.channel, event.step);
          context.set("value", color);
        },
        decrementChannel({ context, event }) {
          const color = context.get("value").decrementChannel(event.channel, event.step);
          context.set("value", color);
        },
        incrementAreaXChannel({ context, event, computed }) {
          const { xChannel } = event.channel;
          const color = computed("areaValue").incrementChannel(xChannel, event.step);
          context.set("value", color);
        },
        decrementAreaXChannel({ context, event, computed }) {
          const { xChannel } = event.channel;
          const color = computed("areaValue").decrementChannel(xChannel, event.step);
          context.set("value", color);
        },
        incrementAreaYChannel({ context, event, computed }) {
          const { yChannel } = event.channel;
          const color = computed("areaValue").incrementChannel(yChannel, event.step);
          context.set("value", color);
        },
        decrementAreaYChannel({ context, event, computed }) {
          const { yChannel } = event.channel;
          const color = computed("areaValue").decrementChannel(yChannel, event.step);
          context.set("value", color);
        },
        setChannelToMax({ context, event }) {
          const value = context.get("value");
          const range = value.getChannelRange(event.channel);
          const color = value.withChannelValue(event.channel, range.maxValue);
          context.set("value", color);
        },
        setChannelToMin({ context, event }) {
          const value = context.get("value");
          const range = value.getChannelRange(event.channel);
          const color = value.withChannelValue(event.channel, range.minValue);
          context.set("value", color);
        },
        focusAreaThumb({ scope }) {
          raf(() => {
            getAreaThumbEl(scope)?.focus({ preventScroll: true });
          });
        },
        focusChannelThumb({ event, scope }) {
          raf(() => {
            getChannelSliderThumbEl(scope, event.channel)?.focus({ preventScroll: true });
          });
        },
        setInitialFocus({ prop, scope }) {
          if (!prop("openAutoFocus")) return;
          raf(() => {
            const element = getInitialFocus({
              root: getContentEl2(scope),
              getInitialEl: prop("initialFocusEl")
            });
            element?.focus({ preventScroll: true });
          });
        },
        setReturnFocus({ scope }) {
          raf(() => {
            getTriggerEl(scope)?.focus({ preventScroll: true });
          });
        },
        syncFormatSelectElement({ context, scope }) {
          syncFormatSelect(scope, context.get("format"));
        },
        invokeOnOpen({ prop }) {
          if (prop("inline")) return;
          prop("onOpenChange")?.({ open: true });
        },
        invokeOnClose({ prop }) {
          if (prop("inline")) return;
          prop("onOpenChange")?.({ open: false });
        },
        toggleVisibility({ prop, event, send }) {
          send({ type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE", previousEvent: event });
        }
      }
    }
  });
  function syncChannelInputs(scope, currentValue, nextValue) {
    const channelInputEls = getChannelInputEls(scope);
    raf(() => {
      channelInputEls.forEach((inputEl) => {
        const channel = inputEl.dataset.channel;
        setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));
      });
    });
  }
  function syncFormatSelect(scope, format) {
    const selectEl = getFormatSelectEl(scope);
    if (!selectEl) return;
    raf(() => setElementValue(selectEl, format));
  }
  var props2 = createProps()([
    "closeOnSelect",
    "dir",
    "disabled",
    "format",
    "defaultFormat",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "inline",
    "name",
    "positioning",
    "onFocusOutside",
    "onFormatChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onValueChange",
    "onValueChangeEnd",
    "defaultOpen",
    "open",
    "positioning",
    "required",
    "readOnly",
    "value",
    "defaultValue",
    "invalid",
    "openAutoFocus"
  ]);
  var splitProps4 = createSplitProps(props2);
  var areaProps = createProps()(["xChannel", "yChannel"]);
  var splitAreaProps = createSplitProps(areaProps);
  var channelProps = createProps()(["channel", "orientation"]);
  var splitChannelProps = createSplitProps(channelProps);
  var swatchTriggerProps = createProps()(["value", "disabled"]);
  var splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);
  var swatchProps = createProps()(["value", "respectAlpha"]);
  var splitSwatchProps = createSplitProps(swatchProps);
  var transparencyGridProps = createProps()(["size"]);
  var splitTransparencyGridProps = createSplitProps(transparencyGridProps);

  // node_modules/@ark-ui/react/dist/utils/render-strategy.js
  var [RenderStrategyPropsProvider, useRenderStrategyPropsContext] = createContext6({
    name: "RenderStrategyContext",
    hookName: "useRenderStrategyContext",
    providerName: "<RenderStrategyPropsProvider />"
  });
  var splitRenderStrategyProps = (props26) => createSplitProps2()(props26, ["lazyMount", "unmountOnExit"]);

  // node_modules/@zag-js/accordion/dist/index.mjs
  var anatomy3 = createAnatomy("accordion").parts("root", "item", "itemTrigger", "itemContent", "itemIndicator");
  var parts3 = anatomy3.build();
  var getRootId = (ctx) => ctx.ids?.root ?? `accordion:${ctx.id}`;
  var getItemTriggerId = (ctx, value) => ctx.ids?.itemTrigger?.(value) ?? `accordion:${ctx.id}:trigger:${value}`;
  var getRootEl = (ctx) => ctx.getById(getRootId(ctx));
  var getTriggerEls = (ctx) => {
    const ownerId = CSS.escape(getRootId(ctx));
    const selector = `[aria-controls][data-ownedby='${ownerId}']:not([disabled])`;
    return queryAll(getRootEl(ctx), selector);
  };
  var getFirstTriggerEl = (ctx) => first(getTriggerEls(ctx));
  var getLastTriggerEl = (ctx) => last(getTriggerEls(ctx));
  var getNextTriggerEl = (ctx, id) => nextById(getTriggerEls(ctx), getItemTriggerId(ctx, id));
  var getPrevTriggerEl = (ctx, id) => prevById(getTriggerEls(ctx), getItemTriggerId(ctx, id));
  var { and: and2, not } = createGuards();
  var machine3 = createMachine({
    props({ props: props26 }) {
      return {
        collapsible: false,
        multiple: false,
        orientation: "vertical",
        defaultValue: [],
        ...props26
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        focusedValue: bindable(() => ({
          defaultValue: null,
          sync: true,
          onChange(value) {
            prop("onFocusChange")?.({ value });
          }
        })),
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        }))
      };
    },
    computed: {
      isHorizontal: ({ prop }) => prop("orientation") === "horizontal"
    },
    on: {
      "VALUE.SET": {
        actions: ["setValue"]
      }
    },
    states: {
      idle: {
        on: {
          "TRIGGER.FOCUS": {
            target: "focused",
            actions: ["setFocusedValue"]
          }
        }
      },
      focused: {
        on: {
          "GOTO.NEXT": {
            actions: ["focusNextTrigger"]
          },
          "GOTO.PREV": {
            actions: ["focusPrevTrigger"]
          },
          "TRIGGER.CLICK": [
            {
              guard: and2("isExpanded", "canToggle"),
              actions: ["collapse"]
            },
            {
              guard: not("isExpanded"),
              actions: ["expand"]
            }
          ],
          "GOTO.FIRST": {
            actions: ["focusFirstTrigger"]
          },
          "GOTO.LAST": {
            actions: ["focusLastTrigger"]
          },
          "TRIGGER.BLUR": {
            target: "idle",
            actions: ["clearFocusedValue"]
          }
        }
      }
    },
    implementations: {
      guards: {
        canToggle: ({ prop }) => !!prop("collapsible") || !!prop("multiple"),
        isExpanded: ({ context, event }) => context.get("value").includes(event.value)
      },
      actions: {
        collapse({ context, prop, event }) {
          const next3 = prop("multiple") ? remove(context.get("value"), event.value) : [];
          context.set("value", next3);
        },
        expand({ context, prop, event }) {
          const next3 = prop("multiple") ? add(context.get("value"), event.value) : [event.value];
          context.set("value", next3);
        },
        focusFirstTrigger({ scope }) {
          getFirstTriggerEl(scope)?.focus();
        },
        focusLastTrigger({ scope }) {
          getLastTriggerEl(scope)?.focus();
        },
        focusNextTrigger({ context, scope }) {
          const focusedValue = context.get("focusedValue");
          if (!focusedValue) return;
          const triggerEl = getNextTriggerEl(scope, focusedValue);
          triggerEl?.focus();
        },
        focusPrevTrigger({ context, scope }) {
          const focusedValue = context.get("focusedValue");
          if (!focusedValue) return;
          const triggerEl = getPrevTriggerEl(scope, focusedValue);
          triggerEl?.focus();
        },
        setFocusedValue({ context, event }) {
          context.set("focusedValue", event.value);
        },
        clearFocusedValue({ context }) {
          context.set("focusedValue", null);
        },
        setValue({ context, event }) {
          context.set("value", event.value);
        },
        coarseValue({ context, prop }) {
          if (!prop("multiple") && context.get("value").length > 1) {
            warn(`The value of accordion should be a single value when multiple is false.`);
            context.set("value", [context.get("value")[0]]);
          }
        }
      }
    }
  });
  var props3 = createProps()([
    "collapsible",
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "multiple",
    "onFocusChange",
    "onValueChange",
    "orientation",
    "value",
    "defaultValue"
  ]);
  var splitProps5 = createSplitProps(props3);
  var itemProps = createProps()(["value", "disabled"]);
  var splitItemProps = createSplitProps(itemProps);

  // node_modules/@zag-js/rect-utils/dist/index.mjs
  var createPoint = (x2, y) => ({ x: x2, y });
  function createRect(r2) {
    const { x: x2, y, width, height } = r2;
    const midX = x2 + width / 2;
    const midY = y + height / 2;
    return {
      x: x2,
      y,
      width,
      height,
      minX: x2,
      minY: y,
      maxX: x2 + width,
      maxY: y + height,
      midX,
      midY,
      center: createPoint(midX, midY)
    };
  }
  function getRectCorners(v) {
    const top = createPoint(v.minX, v.minY);
    const right = createPoint(v.maxX, v.minY);
    const bottom = createPoint(v.maxX, v.maxY);
    const left = createPoint(v.minX, v.maxY);
    return { top, right, bottom, left };
  }
  var { min: min3, max: max3 } = Math;
  function getElementPolygon(rectValue, placement) {
    const rect = createRect(rectValue);
    const { top, right, left, bottom } = getRectCorners(rect);
    const [base] = placement.split("-");
    return {
      top: [left, top, right, bottom],
      right: [top, right, bottom, left],
      bottom: [top, left, bottom, right],
      left: [right, top, left, bottom]
    }[base];
  }
  function isPointInPolygon(polygon, point) {
    const { x: x2, y } = point;
    let c = false;
    for (let i2 = 0, j = polygon.length - 1; i2 < polygon.length; j = i2++) {
      const xi = polygon[i2].x;
      const yi = polygon[i2].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;
      if (yi > y !== yj > y && x2 < (xj - xi) * (y - yi) / (yj - yi) + xi) {
        c = !c;
      }
    }
    return c;
  }
  var { sign: sign2, abs: abs3, min: min22 } = Math;

  // node_modules/@zag-js/avatar/dist/index.mjs
  var anatomy4 = createAnatomy("avatar").parts("root", "image", "fallback");
  var parts4 = anatomy4.build();
  var getRootId2 = (ctx) => ctx.ids?.root ?? `avatar:${ctx.id}`;
  var getImageId = (ctx) => ctx.ids?.image ?? `avatar:${ctx.id}:image`;
  var getRootEl2 = (ctx) => ctx.getById(getRootId2(ctx));
  var getImageEl = (ctx) => ctx.getById(getImageId(ctx));
  var machine4 = createMachine({
    initialState() {
      return "loading";
    },
    effects: ["trackImageRemoval", "trackSrcChange"],
    on: {
      "src.change": {
        target: "loading"
      },
      "img.unmount": {
        target: "error"
      }
    },
    states: {
      loading: {
        entry: ["checkImageStatus"],
        on: {
          "img.loaded": {
            target: "loaded",
            actions: ["invokeOnLoad"]
          },
          "img.error": {
            target: "error",
            actions: ["invokeOnError"]
          }
        }
      },
      error: {
        on: {
          "img.loaded": {
            target: "loaded",
            actions: ["invokeOnLoad"]
          }
        }
      },
      loaded: {
        on: {
          "img.error": {
            target: "error",
            actions: ["invokeOnError"]
          }
        }
      }
    },
    implementations: {
      actions: {
        invokeOnLoad({ prop }) {
          prop("onStatusChange")?.({ status: "loaded" });
        },
        invokeOnError({ prop }) {
          prop("onStatusChange")?.({ status: "error" });
        },
        checkImageStatus({ send, scope }) {
          const imageEl = getImageEl(scope);
          if (!imageEl?.complete) return;
          const type = hasLoaded(imageEl) ? "img.loaded" : "img.error";
          send({ type, src: "ssr" });
        }
      },
      effects: {
        trackImageRemoval({ send, scope }) {
          const rootEl = getRootEl2(scope);
          return observeChildren(rootEl, {
            callback(records) {
              const removedNodes = Array.from(records[0].removedNodes);
              const removed = removedNodes.find(
                (node2) => node2.nodeType === Node.ELEMENT_NODE && node2.matches("[data-scope=avatar][data-part=image]")
              );
              if (removed) {
                send({ type: "img.unmount" });
              }
            }
          });
        },
        trackSrcChange({ send, scope }) {
          const imageEl = getImageEl(scope);
          return observeAttributes(imageEl, {
            attributes: ["src", "srcset"],
            callback() {
              send({ type: "src.change" });
            }
          });
        }
      }
    }
  });
  function hasLoaded(image) {
    return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;
  }
  var props4 = createProps()(["dir", "id", "ids", "onStatusChange", "getRootNode"]);
  var splitProps6 = createSplitProps(props4);

  // node_modules/@zag-js/focus-visible/dist/index.mjs
  function isValidKey(e2) {
    return !(e2.metaKey || !isMac() && e2.altKey || e2.ctrlKey || e2.key === "Control" || e2.key === "Shift" || e2.key === "Meta");
  }
  var nonTextInputTypes = /* @__PURE__ */ new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
  function isKeyboardFocusEvent(isTextInput, modality, e2) {
    const target = e2 ? getEventTarget(e2) : null;
    const win = getWindow(target);
    isTextInput = isTextInput || target instanceof win.HTMLInputElement && !nonTextInputTypes.has(target?.type) || target instanceof win.HTMLTextAreaElement || target instanceof win.HTMLElement && target.isContentEditable;
    return !(isTextInput && modality === "keyboard" && e2 instanceof win.KeyboardEvent && !Reflect.has(FOCUS_VISIBLE_INPUT_KEYS, e2.key));
  }
  var currentModality = null;
  var changeHandlers = /* @__PURE__ */ new Set();
  var listenerMap = /* @__PURE__ */ new Map();
  var hasEventBeforeFocus = false;
  var hasBlurredWindowRecently = false;
  var FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
  };
  function triggerChangeHandlers(modality, e2) {
    for (let handler of changeHandlers) {
      handler(modality, e2);
    }
  }
  function handleKeyboardEvent(e2) {
    hasEventBeforeFocus = true;
    if (isValidKey(e2)) {
      currentModality = "keyboard";
      triggerChangeHandlers("keyboard", e2);
    }
  }
  function handlePointerEvent(e2) {
    currentModality = "pointer";
    if (e2.type === "mousedown" || e2.type === "pointerdown") {
      hasEventBeforeFocus = true;
      triggerChangeHandlers("pointer", e2);
    }
  }
  function handleClickEvent(e2) {
    if (isVirtualClick(e2)) {
      hasEventBeforeFocus = true;
      currentModality = "virtual";
    }
  }
  function handleFocusEvent(e2) {
    const target = getEventTarget(e2);
    if (target === getWindow(target) || target === getDocument(target)) {
      return;
    }
    if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
      currentModality = "virtual";
      triggerChangeHandlers("virtual", e2);
    }
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = false;
  }
  function handleWindowBlur() {
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = true;
  }
  function setupGlobalFocusEvents(root) {
    if (typeof window === "undefined" || listenerMap.get(getWindow(root))) {
      return;
    }
    const win = getWindow(root);
    const doc = getDocument(root);
    let focus = win.HTMLElement.prototype.focus;
    function patchedFocus() {
      currentModality = "virtual";
      triggerChangeHandlers("virtual", null);
      hasEventBeforeFocus = true;
      focus.apply(this, arguments);
    }
    Object.defineProperty(win.HTMLElement.prototype, "focus", {
      configurable: true,
      value: patchedFocus
    });
    doc.addEventListener("keydown", handleKeyboardEvent, true);
    doc.addEventListener("keyup", handleKeyboardEvent, true);
    doc.addEventListener("click", handleClickEvent, true);
    win.addEventListener("focus", handleFocusEvent, true);
    win.addEventListener("blur", handleWindowBlur, false);
    if (typeof win.PointerEvent !== "undefined") {
      doc.addEventListener("pointerdown", handlePointerEvent, true);
      doc.addEventListener("pointermove", handlePointerEvent, true);
      doc.addEventListener("pointerup", handlePointerEvent, true);
    } else {
      doc.addEventListener("mousedown", handlePointerEvent, true);
      doc.addEventListener("mousemove", handlePointerEvent, true);
      doc.addEventListener("mouseup", handlePointerEvent, true);
    }
    win.addEventListener(
      "beforeunload",
      () => {
        tearDownWindowFocusTracking(root);
      },
      { once: true }
    );
    listenerMap.set(win, { focus });
  }
  var tearDownWindowFocusTracking = (root, loadListener) => {
    const win = getWindow(root);
    const doc = getDocument(root);
    if (!listenerMap.has(win)) {
      return;
    }
    win.HTMLElement.prototype.focus = listenerMap.get(win).focus;
    doc.removeEventListener("keydown", handleKeyboardEvent, true);
    doc.removeEventListener("keyup", handleKeyboardEvent, true);
    doc.removeEventListener("click", handleClickEvent, true);
    win.removeEventListener("focus", handleFocusEvent, true);
    win.removeEventListener("blur", handleWindowBlur, false);
    if (typeof win.PointerEvent !== "undefined") {
      doc.removeEventListener("pointerdown", handlePointerEvent, true);
      doc.removeEventListener("pointermove", handlePointerEvent, true);
      doc.removeEventListener("pointerup", handlePointerEvent, true);
    } else {
      doc.removeEventListener("mousedown", handlePointerEvent, true);
      doc.removeEventListener("mousemove", handlePointerEvent, true);
      doc.removeEventListener("mouseup", handlePointerEvent, true);
    }
    listenerMap.delete(win);
  };
  function isFocusVisible() {
    return currentModality === "keyboard";
  }
  function trackFocusVisible(props26 = {}) {
    const { isTextInput, autoFocus, onChange, root } = props26;
    setupGlobalFocusEvents(root);
    onChange?.({ isFocusVisible: autoFocus || isFocusVisible(), modality: currentModality });
    const handler = (modality, e2) => {
      if (!isKeyboardFocusEvent(!!isTextInput, modality, e2)) return;
      onChange?.({ isFocusVisible: isFocusVisible(), modality });
    };
    changeHandlers.add(handler);
    return () => {
      changeHandlers.delete(handler);
    };
  }

  // node_modules/@zag-js/checkbox/dist/index.mjs
  var anatomy5 = createAnatomy("checkbox").parts("root", "label", "control", "indicator");
  var parts5 = anatomy5.build();
  var getRootId3 = (ctx) => ctx.ids?.root ?? `checkbox:${ctx.id}`;
  var getHiddenInputId2 = (ctx) => ctx.ids?.hiddenInput ?? `checkbox:${ctx.id}:input`;
  var getRootEl3 = (ctx) => ctx.getById(getRootId3(ctx));
  var getHiddenInputEl2 = (ctx) => ctx.getById(getHiddenInputId2(ctx));
  var { not: not2 } = createGuards();
  var machine5 = createMachine({
    props({ props: props26 }) {
      return {
        value: "on",
        ...props26,
        defaultChecked: !!props26.defaultChecked
      };
    },
    initialState() {
      return "ready";
    },
    context({ prop, bindable }) {
      return {
        checked: bindable(() => ({
          defaultValue: prop("defaultChecked"),
          value: prop("checked"),
          onChange(checked) {
            prop("onCheckedChange")?.({ checked });
          }
        })),
        fieldsetDisabled: bindable(() => ({ defaultValue: false })),
        focusVisible: bindable(() => ({ defaultValue: false })),
        active: bindable(() => ({ defaultValue: false })),
        focused: bindable(() => ({ defaultValue: false })),
        hovered: bindable(() => ({ defaultValue: false }))
      };
    },
    watch({ track, context, prop, action }) {
      track([() => prop("disabled")], () => {
        action(["removeFocusIfNeeded"]);
      });
      track([() => context.get("checked")], () => {
        action(["syncInputElement"]);
      });
    },
    effects: ["trackFormControlState", "trackPressEvent", "trackFocusVisible"],
    on: {
      "CHECKED.TOGGLE": [
        {
          guard: not2("isTrusted"),
          actions: ["toggleChecked", "dispatchChangeEvent"]
        },
        {
          actions: ["toggleChecked"]
        }
      ],
      "CHECKED.SET": [
        {
          guard: not2("isTrusted"),
          actions: ["setChecked", "dispatchChangeEvent"]
        },
        {
          actions: ["setChecked"]
        }
      ],
      "CONTEXT.SET": {
        actions: ["setContext"]
      }
    },
    computed: {
      indeterminate: ({ context }) => isIndeterminate(context.get("checked")),
      checked: ({ context }) => isChecked(context.get("checked")),
      disabled: ({ context, prop }) => !!prop("disabled") || context.get("fieldsetDisabled")
    },
    states: {
      ready: {}
    },
    implementations: {
      guards: {
        isTrusted: ({ event }) => !!event.isTrusted
      },
      effects: {
        trackPressEvent({ context, computed, scope }) {
          if (computed("disabled")) return;
          return trackPress({
            pointerNode: getRootEl3(scope),
            keyboardNode: getHiddenInputEl2(scope),
            isValidKey: (event) => event.key === " ",
            onPress: () => context.set("active", false),
            onPressStart: () => context.set("active", true),
            onPressEnd: () => context.set("active", false)
          });
        },
        trackFocusVisible({ computed, scope }) {
          if (computed("disabled")) return;
          return trackFocusVisible({ root: scope.getRootNode?.() });
        },
        trackFormControlState({ context, scope }) {
          return trackFormControl(getHiddenInputEl2(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              context.set("checked", context.initial("checked"));
            }
          });
        }
      },
      actions: {
        setContext({ context, event }) {
          for (const key in event.context) {
            context.set(key, event.context[key]);
          }
        },
        syncInputElement({ context, computed, scope }) {
          const inputEl = getHiddenInputEl2(scope);
          if (!inputEl) return;
          setElementChecked(inputEl, computed("checked"));
          inputEl.indeterminate = isIndeterminate(context.get("checked"));
        },
        removeFocusIfNeeded({ context, prop }) {
          if (prop("disabled") && context.get("focused")) {
            context.set("focused", false);
            context.set("focusVisible", false);
          }
        },
        setChecked({ context, event }) {
          context.set("checked", event.checked);
        },
        toggleChecked({ context, computed }) {
          const checked = isIndeterminate(computed("checked")) ? true : !computed("checked");
          context.set("checked", checked);
        },
        dispatchChangeEvent({ computed, scope }) {
          queueMicrotask(() => {
            const inputEl = getHiddenInputEl2(scope);
            dispatchInputCheckedEvent(inputEl, { checked: computed("checked") });
          });
        }
      }
    }
  });
  function isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  function isChecked(checked) {
    return isIndeterminate(checked) ? false : !!checked;
  }
  var props5 = createProps()([
    "defaultChecked",
    "checked",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "name",
    "onCheckedChange",
    "readOnly",
    "required",
    "value"
  ]);
  var splitProps7 = createSplitProps(props5);

  // node_modules/@ark-ui/react/dist/components/checkbox/checkbox.anatomy.js
  var checkboxAnatomy = anatomy5.extendWith("group");

  // node_modules/@ark-ui/react/dist/utils/use-event.js
  var import_react11 = __toESM(require_react(), 1);
  function useEvent(callback, opts = {}) {
    const { sync = false } = opts;
    const callbackRef = useLatestRef(callback);
    return (0, import_react11.useCallback)(
      // biome-ignore lint/suspicious/noExplicitAny: <explanation>
      (...args) => {
        if (sync) return queueMicrotask(() => callbackRef.current?.(...args));
        return callbackRef.current?.(...args);
      },
      [sync, callbackRef]
    );
  }
  function useLatestRef(value) {
    const ref = (0, import_react11.useRef)(value);
    ref.current = value;
    return ref;
  }

  // node_modules/@ark-ui/react/dist/components/field/use-field-context.js
  var [FieldProvider, useFieldContext] = createContext6({
    name: "FieldContext",
    hookName: "useFieldContext",
    providerName: "<FieldProvider />",
    strict: false
  });

  // node_modules/@zag-js/clipboard/dist/index.mjs
  var anatomy6 = createAnatomy("clipboard").parts("root", "control", "trigger", "indicator", "input", "label");
  var parts6 = anatomy6.build();
  var getInputId = (ctx) => ctx.ids?.input ?? `clip:${ctx.id}:input`;
  var getInputEl = (ctx) => ctx.getById(getInputId(ctx));
  var writeToClipboard = (ctx, value) => copyText(ctx.getDoc(), value);
  function createNode(doc, text) {
    const node2 = doc.createElement("pre");
    Object.assign(node2.style, {
      width: "1px",
      height: "1px",
      position: "fixed",
      top: "5px"
    });
    node2.textContent = text;
    return node2;
  }
  function copyNode(node2) {
    const win = getWindow(node2);
    const selection = win.getSelection();
    if (selection == null) {
      return Promise.reject(new Error());
    }
    selection.removeAllRanges();
    const doc = node2.ownerDocument;
    const range = doc.createRange();
    range.selectNodeContents(node2);
    selection.addRange(range);
    doc.execCommand("copy");
    selection.removeAllRanges();
    return Promise.resolve();
  }
  function copyText(doc, text) {
    const win = doc.defaultView || window;
    if (win.navigator.clipboard?.writeText !== void 0) {
      return win.navigator.clipboard.writeText(text);
    }
    if (!doc.body) {
      return Promise.reject(new Error());
    }
    const node2 = createNode(doc, text);
    doc.body.appendChild(node2);
    copyNode(node2);
    doc.body.removeChild(node2);
    return Promise.resolve();
  }
  var machine6 = createMachine({
    props({ props: props26 }) {
      return {
        timeout: 3e3,
        defaultValue: "",
        ...props26
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        }))
      };
    },
    watch({ track, context, action }) {
      track([() => context.get("value")], () => {
        action(["syncInputElement"]);
      });
    },
    on: {
      "VALUE.SET": {
        actions: ["setValue"]
      },
      COPY: {
        target: "copied",
        actions: ["copyToClipboard", "invokeOnCopy"]
      }
    },
    states: {
      idle: {
        on: {
          "INPUT.COPY": {
            target: "copied",
            actions: ["invokeOnCopy"]
          }
        }
      },
      copied: {
        effects: ["waitForTimeout"],
        on: {
          "COPY.DONE": {
            target: "idle"
          },
          COPY: {
            target: "copied",
            actions: ["copyToClipboard", "invokeOnCopy"]
          },
          "INPUT.COPY": {
            actions: ["invokeOnCopy"]
          }
        }
      }
    },
    implementations: {
      effects: {
        waitForTimeout({ prop, send }) {
          return setRafTimeout(() => {
            send({ type: "COPY.DONE" });
          }, prop("timeout"));
        }
      },
      actions: {
        setValue({ context, event }) {
          context.set("value", event.value);
        },
        copyToClipboard({ context, scope }) {
          writeToClipboard(scope, context.get("value"));
        },
        invokeOnCopy({ prop }) {
          prop("onStatusChange")?.({ copied: true });
        },
        syncInputElement({ context, scope }) {
          const inputEl = getInputEl(scope);
          if (!inputEl) return;
          setElementValue(inputEl, context.get("value"));
        }
      }
    }
  });
  var props6 = createProps()([
    "getRootNode",
    "id",
    "ids",
    "value",
    "defaultValue",
    "timeout",
    "onStatusChange",
    "onValueChange"
  ]);
  var contextProps = createSplitProps(props6);
  var indicatorProps = createProps()(["copied"]);
  var splitIndicatorProps = createSplitProps(indicatorProps);

  // node_modules/@ark-ui/react/dist/components/presence/use-presence-context.js
  var [PresenceProvider, usePresenceContext] = createContext6({
    name: "PresenceContext",
    hookName: "usePresenceContext",
    providerName: "<PresenceProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/presence/split-presence-props.js
  var splitPresenceProps = (props26) => createSplitProps2()(props26, [
    "immediate",
    "lazyMount",
    "onExitComplete",
    "present",
    "skipAnimationOnMount",
    "unmountOnExit"
  ]);

  // node_modules/@zag-js/presence/dist/index.mjs
  function connect(service, _normalize) {
    const { state: state2, send, context } = service;
    const present = state2.matches("mounted", "unmountSuspended");
    return {
      skip: !context.get("initial"),
      present,
      setNode(node2) {
        if (!node2) return;
        send({ type: "NODE.SET", node: node2 });
      },
      unmount() {
        send({ type: "UNMOUNT" });
      }
    };
  }
  var machine7 = createMachine({
    props({ props: props26 }) {
      return { ...props26, present: !!props26.present };
    },
    initialState({ prop }) {
      return prop("present") ? "mounted" : "unmounted";
    },
    refs() {
      return {
        node: null,
        styles: null
      };
    },
    context({ bindable }) {
      return {
        unmountAnimationName: bindable(() => ({ defaultValue: null })),
        prevAnimationName: bindable(() => ({ defaultValue: null })),
        present: bindable(() => ({ defaultValue: false })),
        initial: bindable(() => ({
          sync: true,
          defaultValue: false
        }))
      };
    },
    exit: ["clearInitial", "cleanupNode"],
    watch({ track, action, prop }) {
      track([() => prop("present")], () => {
        action(["setInitial", "syncPresence"]);
      });
    },
    on: {
      "NODE.SET": {
        actions: ["setNode", "setStyles"]
      }
    },
    states: {
      mounted: {
        on: {
          UNMOUNT: {
            target: "unmounted",
            actions: ["clearPrevAnimationName", "invokeOnExitComplete"]
          },
          "UNMOUNT.SUSPEND": {
            target: "unmountSuspended"
          }
        }
      },
      unmountSuspended: {
        effects: ["trackAnimationEvents"],
        on: {
          MOUNT: {
            target: "mounted",
            actions: ["setPrevAnimationName"]
          },
          UNMOUNT: {
            target: "unmounted",
            actions: ["clearPrevAnimationName", "invokeOnExitComplete"]
          }
        }
      },
      unmounted: {
        on: {
          MOUNT: {
            target: "mounted",
            actions: ["setPrevAnimationName"]
          }
        }
      }
    },
    implementations: {
      actions: {
        setInitial: ({ context }) => {
          if (context.get("initial")) return;
          queueMicrotask(() => {
            context.set("initial", true);
          });
        },
        clearInitial: ({ context }) => {
          context.set("initial", false);
        },
        cleanupNode: ({ refs }) => {
          refs.set("node", null);
          refs.set("styles", null);
        },
        invokeOnExitComplete: ({ prop }) => {
          prop("onExitComplete")?.();
        },
        setNode: ({ refs, event }) => {
          refs.set("node", event.node);
        },
        setStyles: ({ refs, event }) => {
          refs.set("styles", getComputedStyle(event.node));
        },
        syncPresence: ({ context, refs, send, prop }) => {
          const presentProp = prop("present");
          if (presentProp) {
            return send({ type: "MOUNT", src: "presence.changed" });
          }
          const node2 = refs.get("node");
          if (!presentProp && node2?.ownerDocument.visibilityState === "hidden") {
            return send({ type: "UNMOUNT", src: "visibilitychange" });
          }
          raf(() => {
            const animationName = getAnimationName(refs.get("styles"));
            context.set("unmountAnimationName", animationName);
            if (animationName === "none" || animationName === context.get("prevAnimationName") || refs.get("styles")?.display === "none" || refs.get("styles")?.animationDuration === "0s") {
              send({ type: "UNMOUNT", src: "presence.changed" });
            } else {
              send({ type: "UNMOUNT.SUSPEND" });
            }
          });
        },
        setPrevAnimationName: ({ context, refs }) => {
          raf(() => {
            context.set("prevAnimationName", getAnimationName(refs.get("styles")));
          });
        },
        clearPrevAnimationName: ({ context }) => {
          context.set("prevAnimationName", null);
        }
      },
      effects: {
        trackAnimationEvents: ({ context, refs, send }) => {
          const node2 = refs.get("node");
          if (!node2) return;
          const onStart = (event) => {
            const target = event.composedPath?.()?.[0] ?? event.target;
            if (target === node2) {
              context.set("prevAnimationName", getAnimationName(refs.get("styles")));
            }
          };
          const onEnd = (event) => {
            const animationName = getAnimationName(refs.get("styles"));
            const target = getEventTarget(event);
            if (target === node2 && animationName === context.get("unmountAnimationName")) {
              send({ type: "UNMOUNT", src: "animationend" });
            }
          };
          node2.addEventListener("animationstart", onStart);
          node2.addEventListener("animationcancel", onEnd);
          node2.addEventListener("animationend", onEnd);
          const cleanupStyles = setStyle(node2, { animationFillMode: "forwards" });
          return () => {
            node2.removeEventListener("animationstart", onStart);
            node2.removeEventListener("animationcancel", onEnd);
            node2.removeEventListener("animationend", onEnd);
            nextTick(() => cleanupStyles());
          };
        }
      }
    }
  });
  function getAnimationName(styles) {
    return styles?.animationName || "none";
  }
  var props7 = createProps()(["onExitComplete", "present", "immediate"]);

  // node_modules/@ark-ui/react/dist/components/presence/use-presence.js
  var import_react13 = __toESM(require_react(), 1);
  var usePresence = (props26 = {}) => {
    const { lazyMount, unmountOnExit, present, skipAnimationOnMount = false, ...rest } = props26;
    const wasEverPresent = (0, import_react13.useRef)(false);
    const machineProps = {
      ...rest,
      present,
      onExitComplete: useEvent(props26.onExitComplete)
    };
    const service = useMachine(machine7, machineProps);
    const api = connect(service, normalizeProps);
    if (api.present) {
      wasEverPresent.current = true;
    }
    const unmounted = !api.present && !wasEverPresent.current && lazyMount || unmountOnExit && !api.present && wasEverPresent.current;
    const getPresenceProps = () => ({
      "data-state": api.skip && skipAnimationOnMount ? void 0 : present ? "open" : "closed",
      hidden: !api.present
    });
    return {
      ref: api.setNode,
      getPresenceProps,
      present: api.present,
      unmounted
    };
  };

  // node_modules/@ark-ui/react/dist/components/color-picker/color-picker.anatomy.js
  var colorPickerAnatomy = anatomy2.extendWith("view");

  // node_modules/@zag-js/collection/dist/index.mjs
  var __defProp3 = Object.defineProperty;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField2 = (obj, key, value) => __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  var fallback = {
    itemToValue(item) {
      if (typeof item === "string") return item;
      if (isObject2(item) && hasProp2(item, "value")) return item.value;
      return "";
    },
    itemToString(item) {
      if (typeof item === "string") return item;
      if (isObject2(item) && hasProp2(item, "label")) return item.label;
      return fallback.itemToValue(item);
    },
    isItemDisabled(item) {
      if (isObject2(item) && hasProp2(item, "disabled")) return !!item.disabled;
      return false;
    }
  };
  var ListCollection = class _ListCollection {
    constructor(options) {
      this.options = options;
      __publicField2(this, "items");
      __publicField2(this, "copy", (items) => {
        return new _ListCollection({ ...this.options, items: items ?? [...this.items] });
      });
      __publicField2(this, "isEqual", (other) => {
        return isEqual(this.items, other.items);
      });
      __publicField2(this, "setItems", (items) => {
        return this.copy(items);
      });
      __publicField2(this, "getValues", (items = this.items) => {
        return Array.from(items).map((item) => this.getItemValue(item)).filter(Boolean);
      });
      __publicField2(this, "find", (value) => {
        if (value == null) return null;
        const index = this.indexOf(value);
        return index != null ? this.at(index) : null;
      });
      __publicField2(this, "findMany", (values) => {
        return Array.from(values).map((value) => this.find(value)).filter((item) => item != null);
      });
      __publicField2(this, "at", (index) => {
        if (!this.options.groupBy && !this.options.groupSort) {
          return this.items[index] ?? null;
        }
        let idx = 0;
        const groups = this.group();
        for (const [, items] of groups) {
          for (const item of items) {
            if (idx === index) return item;
            idx++;
          }
        }
        return null;
      });
      __publicField2(this, "sortFn", (valueA, valueB) => {
        const indexA = this.indexOf(valueA);
        const indexB = this.indexOf(valueB);
        return (indexA ?? 0) - (indexB ?? 0);
      });
      __publicField2(this, "sort", (values) => {
        return [...values].sort(this.sortFn.bind(this));
      });
      __publicField2(this, "getItemValue", (item) => {
        if (item == null) return null;
        return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);
      });
      __publicField2(this, "getItemDisabled", (item) => {
        if (item == null) return false;
        return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);
      });
      __publicField2(this, "stringifyItem", (item) => {
        if (item == null) return null;
        return this.options.itemToString?.(item) ?? fallback.itemToString(item);
      });
      __publicField2(this, "stringify", (value) => {
        if (value == null) return null;
        return this.stringifyItem(this.find(value));
      });
      __publicField2(this, "stringifyItems", (items, separator = ", ") => {
        return Array.from(items).map((item) => this.stringifyItem(item)).filter(Boolean).join(separator);
      });
      __publicField2(this, "stringifyMany", (value, separator) => {
        return this.stringifyItems(this.findMany(value), separator);
      });
      __publicField2(this, "has", (value) => {
        return this.indexOf(value) !== -1;
      });
      __publicField2(this, "hasItem", (item) => {
        if (item == null) return false;
        return this.has(this.getItemValue(item));
      });
      __publicField2(this, "group", () => {
        const { groupBy, groupSort } = this.options;
        if (!groupBy) return [["", [...this.items]]];
        const groups = /* @__PURE__ */ new Map();
        this.items.forEach((item, index) => {
          const groupKey = groupBy(item, index);
          if (!groups.has(groupKey)) {
            groups.set(groupKey, []);
          }
          groups.get(groupKey).push(item);
        });
        let entries = Array.from(groups.entries());
        if (groupSort) {
          entries.sort(([a], [b2]) => {
            if (typeof groupSort === "function") return groupSort(a, b2);
            if (Array.isArray(groupSort)) {
              const indexA = groupSort.indexOf(a);
              const indexB = groupSort.indexOf(b2);
              if (indexA === -1) return 1;
              if (indexB === -1) return -1;
              return indexA - indexB;
            }
            if (groupSort === "asc") return a.localeCompare(b2);
            if (groupSort === "desc") return b2.localeCompare(a);
            return 0;
          });
        }
        return entries;
      });
      __publicField2(this, "getNextValue", (value, step = 1, clamp3 = false) => {
        let index = this.indexOf(value);
        if (index === -1) return null;
        index = clamp3 ? Math.min(index + step, this.size - 1) : index + step;
        while (index <= this.size && this.getItemDisabled(this.at(index))) index++;
        return this.getItemValue(this.at(index));
      });
      __publicField2(this, "getPreviousValue", (value, step = 1, clamp3 = false) => {
        let index = this.indexOf(value);
        if (index === -1) return null;
        index = clamp3 ? Math.max(index - step, 0) : index - step;
        while (index >= 0 && this.getItemDisabled(this.at(index))) index--;
        return this.getItemValue(this.at(index));
      });
      __publicField2(this, "indexOf", (value) => {
        if (value == null) return -1;
        if (!this.options.groupBy && !this.options.groupSort) {
          return this.items.findIndex((item) => this.getItemValue(item) === value);
        }
        let idx = 0;
        const groups = this.group();
        for (const [, items] of groups) {
          for (const item of items) {
            if (this.getItemValue(item) === value) return idx;
            idx++;
          }
        }
        return -1;
      });
      __publicField2(this, "getByText", (text, current) => {
        let items = current != null ? wrap3(this.items, this.indexOf(current)) : this.items;
        const isSingleKey = text.length === 1;
        if (isSingleKey) items = items.filter((item) => this.getItemValue(item) !== current);
        return items.find((item) => match4(this.stringifyItem(item), text));
      });
      __publicField2(this, "search", (queryString, options2) => {
        const { state: state2, currentValue, timeout = 350 } = options2;
        const search = state2.keysSoFar + queryString;
        const isRepeated = search.length > 1 && Array.from(search).every((char2) => char2 === search[0]);
        const query2 = isRepeated ? search[0] : search;
        const item = this.getByText(query2, currentValue);
        const value = this.getItemValue(item);
        function cleanup() {
          clearTimeout(state2.timer);
          state2.timer = -1;
        }
        function update(value2) {
          state2.keysSoFar = value2;
          cleanup();
          if (value2 !== "") {
            state2.timer = +setTimeout(() => {
              update("");
              cleanup();
            }, timeout);
          }
        }
        update(search);
        return value;
      });
      __publicField2(this, "update", (value, item) => {
        let index = this.indexOf(value);
        if (index === -1) return this;
        return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);
      });
      __publicField2(this, "upsert", (value, item, mode = "append") => {
        let index = this.indexOf(value);
        if (index === -1) {
          const fn = mode === "append" ? this.append : this.prepend;
          return fn(item);
        }
        return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);
      });
      __publicField2(this, "insert", (index, ...items) => {
        return this.copy(insert(this.items, index, ...items));
      });
      __publicField2(this, "insertBefore", (value, ...items) => {
        let toIndex = this.indexOf(value);
        if (toIndex === -1) {
          if (this.items.length === 0) toIndex = 0;
          else return this;
        }
        return this.copy(insert(this.items, toIndex, ...items));
      });
      __publicField2(this, "insertAfter", (value, ...items) => {
        let toIndex = this.indexOf(value);
        if (toIndex === -1) {
          if (this.items.length === 0) toIndex = 0;
          else return this;
        }
        return this.copy(insert(this.items, toIndex + 1, ...items));
      });
      __publicField2(this, "prepend", (...items) => {
        return this.copy(insert(this.items, 0, ...items));
      });
      __publicField2(this, "append", (...items) => {
        return this.copy(insert(this.items, this.items.length, ...items));
      });
      __publicField2(this, "filter", (fn) => {
        const filteredItems = this.items.filter((item, index) => fn(this.stringifyItem(item), index, item));
        return this.copy(filteredItems);
      });
      __publicField2(this, "remove", (...itemsOrValues) => {
        const values = itemsOrValues.map(
          (itemOrValue) => typeof itemOrValue === "string" ? itemOrValue : this.getItemValue(itemOrValue)
        );
        return this.copy(
          this.items.filter((item) => {
            const value = this.getItemValue(item);
            if (value == null) return false;
            return !values.includes(value);
          })
        );
      });
      __publicField2(this, "move", (value, toIndex) => {
        const fromIndex = this.indexOf(value);
        if (fromIndex === -1) return this;
        return this.copy(move(this.items, [fromIndex], toIndex));
      });
      __publicField2(this, "moveBefore", (value, ...values) => {
        let toIndex = this.items.findIndex((item) => this.getItemValue(item) === value);
        if (toIndex === -1) return this;
        let indices = values.map((value2) => this.items.findIndex((item) => this.getItemValue(item) === value2)).sort((a, b2) => a - b2);
        return this.copy(move(this.items, indices, toIndex));
      });
      __publicField2(this, "moveAfter", (value, ...values) => {
        let toIndex = this.items.findIndex((item) => this.getItemValue(item) === value);
        if (toIndex === -1) return this;
        let indices = values.map((value2) => this.items.findIndex((item) => this.getItemValue(item) === value2)).sort((a, b2) => a - b2);
        return this.copy(move(this.items, indices, toIndex + 1));
      });
      __publicField2(this, "reorder", (fromIndex, toIndex) => {
        return this.copy(move(this.items, [fromIndex], toIndex));
      });
      __publicField2(this, "compareValue", (a, b2) => {
        const indexA = this.indexOf(a);
        const indexB = this.indexOf(b2);
        if (indexA < indexB) return -1;
        if (indexA > indexB) return 1;
        return 0;
      });
      __publicField2(this, "range", (from2, to) => {
        let keys = [];
        let key = from2;
        while (key != null) {
          let item = this.find(key);
          if (item) keys.push(key);
          if (key === to) return keys;
          key = this.getNextValue(key);
        }
        return [];
      });
      __publicField2(this, "getValueRange", (from2, to) => {
        if (from2 && to) {
          if (this.compareValue(from2, to) <= 0) {
            return this.range(from2, to);
          }
          return this.range(to, from2);
        }
        return [];
      });
      __publicField2(this, "toString", () => {
        let result = "";
        for (const item of this.items) {
          const value = this.getItemValue(item);
          const label = this.stringifyItem(item);
          const disabled = this.getItemDisabled(item);
          const itemString = [value, label, disabled].filter(Boolean).join(":");
          result += itemString + ",";
        }
        return result;
      });
      __publicField2(this, "toJSON", () => {
        return {
          size: this.size,
          first: this.firstValue,
          last: this.lastValue
        };
      });
      this.items = [...options.items];
    }
    /**
     * Returns the number of items in the collection
     */
    get size() {
      return this.items.length;
    }
    /**
     * Returns the first value in the collection
     */
    get firstValue() {
      let index = 0;
      while (this.getItemDisabled(this.at(index))) index++;
      return this.getItemValue(this.at(index));
    }
    /**
     * Returns the last value in the collection
     */
    get lastValue() {
      let index = this.size - 1;
      while (this.getItemDisabled(this.at(index))) index--;
      return this.getItemValue(this.at(index));
    }
    *[Symbol.iterator]() {
      yield* this.items;
    }
  };
  var match4 = (label, query2) => {
    return !!label?.toLowerCase().startsWith(query2.toLowerCase());
  };
  var wrap3 = (v, idx) => {
    return v.map((_2, index) => v[(Math.max(idx, 0) + index) % v.length]);
  };
  function insert(items, index, ...values) {
    return [...items.slice(0, index), ...values, ...items.slice(index)];
  }
  function move(items, indices, toIndex) {
    indices = [...indices].sort((a, b2) => a - b2);
    const itemsToMove = indices.map((i2) => items[i2]);
    for (let i2 = indices.length - 1; i2 >= 0; i2--) {
      items = [...items.slice(0, indices[i2]), ...items.slice(indices[i2] + 1)];
    }
    toIndex = Math.max(0, toIndex - indices.filter((i2) => i2 < toIndex).length);
    return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];
  }
  function access(node2, indexPath, options) {
    for (let i2 = 0; i2 < indexPath.length; i2++) node2 = options.getChildren(node2, indexPath.slice(i2 + 1))[indexPath[i2]];
    return node2;
  }
  function ancestorIndexPaths(indexPaths) {
    const sortedPaths = sortIndexPaths(indexPaths);
    const result = [];
    const seen = /* @__PURE__ */ new Set();
    for (const indexPath of sortedPaths) {
      const key = indexPath.join();
      if (!seen.has(key)) {
        seen.add(key);
        result.push(indexPath);
      }
    }
    return result;
  }
  function compareIndexPaths(a, b2) {
    for (let i2 = 0; i2 < Math.min(a.length, b2.length); i2++) {
      if (a[i2] < b2[i2]) return -1;
      if (a[i2] > b2[i2]) return 1;
    }
    return a.length - b2.length;
  }
  function sortIndexPaths(indexPaths) {
    return indexPaths.sort(compareIndexPaths);
  }
  function find(node2, options) {
    let found;
    visit(node2, {
      ...options,
      onEnter: (child, indexPath) => {
        if (options.predicate(child, indexPath)) {
          found = child;
          return "stop";
        }
      }
    });
    return found;
  }
  function findAll(node2, options) {
    const found = [];
    visit(node2, {
      onEnter: (child, indexPath) => {
        if (options.predicate(child, indexPath)) found.push(child);
      },
      getChildren: options.getChildren
    });
    return found;
  }
  function findIndexPath(node2, options) {
    let found;
    visit(node2, {
      onEnter: (child, indexPath) => {
        if (options.predicate(child, indexPath)) {
          found = [...indexPath];
          return "stop";
        }
      },
      getChildren: options.getChildren
    });
    return found;
  }
  function reduce(node2, options) {
    let result = options.initialResult;
    visit(node2, {
      ...options,
      onEnter: (child, indexPath) => {
        result = options.nextResult(result, child, indexPath);
      }
    });
    return result;
  }
  function flatMap(node2, options) {
    return reduce(node2, {
      ...options,
      initialResult: [],
      nextResult: (result, child, indexPath) => {
        result.push(...options.transform(child, indexPath));
        return result;
      }
    });
  }
  function filter(node2, options) {
    const { predicate, create, getChildren } = options;
    const filterRecursive = (node22, indexPath) => {
      const children = getChildren(node22, indexPath);
      const filteredChildren = [];
      children.forEach((child, index) => {
        const childIndexPath = [...indexPath, index];
        const filteredChild = filterRecursive(child, childIndexPath);
        if (filteredChild) filteredChildren.push(filteredChild);
      });
      const isRoot = indexPath.length === 0;
      const nodeMatches = predicate(node22, indexPath);
      const hasFilteredChildren = filteredChildren.length > 0;
      if (isRoot || nodeMatches || hasFilteredChildren) {
        return create(node22, filteredChildren, indexPath);
      }
      return null;
    };
    return filterRecursive(node2, []) || create(node2, [], []);
  }
  function flatten(rootNode, options) {
    const nodes = [];
    let idx = 0;
    const idxMap = /* @__PURE__ */ new Map();
    const parentMap = /* @__PURE__ */ new Map();
    visit(rootNode, {
      getChildren: options.getChildren,
      onEnter: (node2, indexPath) => {
        if (!idxMap.has(node2)) {
          idxMap.set(node2, idx++);
        }
        const children = options.getChildren(node2, indexPath);
        children.forEach((child) => {
          if (!parentMap.has(child)) {
            parentMap.set(child, node2);
          }
          if (!idxMap.has(child)) {
            idxMap.set(child, idx++);
          }
        });
        const _children = children.length > 0 ? children.map((child) => idxMap.get(child)) : void 0;
        const parent = parentMap.get(node2);
        const _parent = parent ? idxMap.get(parent) : void 0;
        const _index = idxMap.get(node2);
        nodes.push({ ...node2, _children, _parent, _index });
      }
    });
    return nodes;
  }
  function insertOperation(index, nodes) {
    return { type: "insert", index, nodes };
  }
  function removeOperation(indexes) {
    return { type: "remove", indexes };
  }
  function replaceOperation() {
    return { type: "replace" };
  }
  function splitIndexPath(indexPath) {
    return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];
  }
  function getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */ new Map()) {
    const [parentIndexPath, index] = splitIndexPath(indexPath);
    for (let i2 = parentIndexPath.length - 1; i2 >= 0; i2--) {
      const parentKey = parentIndexPath.slice(0, i2).join();
      switch (operations.get(parentKey)?.type) {
        case "remove":
          continue;
      }
      operations.set(parentKey, replaceOperation());
    }
    const operation = operations.get(parentIndexPath.join());
    switch (operation?.type) {
      case "remove":
        operations.set(parentIndexPath.join(), {
          type: "removeThenInsert",
          removeIndexes: operation.indexes,
          insertIndex: index,
          insertNodes: nodes
        });
        break;
      default:
        operations.set(parentIndexPath.join(), insertOperation(index, nodes));
    }
    return operations;
  }
  function getRemovalOperations(indexPaths) {
    const operations = /* @__PURE__ */ new Map();
    const indexesToRemove = /* @__PURE__ */ new Map();
    for (const indexPath of indexPaths) {
      const parentKey = indexPath.slice(0, -1).join();
      const value = indexesToRemove.get(parentKey) ?? [];
      value.push(indexPath[indexPath.length - 1]);
      indexesToRemove.set(
        parentKey,
        value.sort((a, b2) => a - b2)
      );
    }
    for (const indexPath of indexPaths) {
      for (let i2 = indexPath.length - 2; i2 >= 0; i2--) {
        const parentKey = indexPath.slice(0, i2).join();
        if (!operations.has(parentKey)) {
          operations.set(parentKey, replaceOperation());
        }
      }
    }
    for (const [parentKey, indexes] of indexesToRemove) {
      operations.set(parentKey, removeOperation(indexes));
    }
    return operations;
  }
  function getReplaceOperations(indexPath, node2) {
    const operations = /* @__PURE__ */ new Map();
    const [parentIndexPath, index] = splitIndexPath(indexPath);
    for (let i2 = parentIndexPath.length - 1; i2 >= 0; i2--) {
      const parentKey = parentIndexPath.slice(0, i2).join();
      operations.set(parentKey, replaceOperation());
    }
    operations.set(parentIndexPath.join(), {
      type: "removeThenInsert",
      removeIndexes: [index],
      insertIndex: index,
      insertNodes: [node2]
    });
    return operations;
  }
  function mutate(node2, operations, options) {
    return map(node2, {
      ...options,
      getChildren: (node22, indexPath) => {
        const key = indexPath.join();
        const operation = operations.get(key);
        switch (operation?.type) {
          case "replace":
          case "remove":
          case "removeThenInsert":
          case "insert":
            return options.getChildren(node22, indexPath);
          default:
            return [];
        }
      },
      transform: (node22, children, indexPath) => {
        const key = indexPath.join();
        const operation = operations.get(key);
        switch (operation?.type) {
          case "remove":
            return options.create(
              node22,
              children.filter((_2, index) => !operation.indexes.includes(index)),
              indexPath
            );
          case "removeThenInsert":
            const updatedChildren = children.filter((_2, index) => !operation.removeIndexes.includes(index));
            const adjustedIndex = operation.removeIndexes.reduce(
              (index, removedIndex) => removedIndex < index ? index - 1 : index,
              operation.insertIndex
            );
            return options.create(node22, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);
          case "insert":
            return options.create(node22, splice(children, operation.index, 0, ...operation.nodes), indexPath);
          case "replace":
            return options.create(node22, children, indexPath);
          default:
            return node22;
        }
      }
    });
  }
  function splice(array, start, deleteCount, ...items) {
    return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];
  }
  function map(node2, options) {
    const childrenMap = {};
    visit(node2, {
      ...options,
      onLeave: (child, indexPath) => {
        const keyIndexPath = [0, ...indexPath];
        const key = keyIndexPath.join();
        const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);
        const parentKey = keyIndexPath.slice(0, -1).join();
        const parentChildren = childrenMap[parentKey] ?? [];
        parentChildren.push(transformed);
        childrenMap[parentKey] = parentChildren;
      }
    });
    return childrenMap[""][0];
  }
  function insert2(node2, options) {
    const { nodes, at } = options;
    if (at.length === 0) throw new Error(`Can't insert nodes at the root`);
    const state2 = getInsertionOperations(at, nodes);
    return mutate(node2, state2, options);
  }
  function replace3(node2, options) {
    if (options.at.length === 0) return options.node;
    const operations = getReplaceOperations(options.at, options.node);
    return mutate(node2, operations, options);
  }
  function remove2(node2, options) {
    if (options.indexPaths.length === 0) return node2;
    for (const indexPath of options.indexPaths) {
      if (indexPath.length === 0) throw new Error(`Can't remove the root node`);
    }
    const operations = getRemovalOperations(options.indexPaths);
    return mutate(node2, operations, options);
  }
  function move2(node2, options) {
    if (options.indexPaths.length === 0) return node2;
    for (const indexPath of options.indexPaths) {
      if (indexPath.length === 0) throw new Error(`Can't move the root node`);
    }
    if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);
    const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);
    const nodesToInsert = _ancestorIndexPaths.map((indexPath) => access(node2, indexPath, options));
    const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));
    return mutate(node2, operations, options);
  }
  function visit(node2, options) {
    const { onEnter, onLeave, getChildren } = options;
    let indexPath = [];
    let stack = [{ node: node2 }];
    const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();
    while (stack.length > 0) {
      let wrapper = stack[stack.length - 1];
      if (wrapper.state === void 0) {
        const enterResult = onEnter?.(wrapper.node, getIndexPath());
        if (enterResult === "stop") return;
        wrapper.state = enterResult === "skip" ? -1 : 0;
      }
      const children = wrapper.children || getChildren(wrapper.node, getIndexPath());
      wrapper.children || (wrapper.children = children);
      if (wrapper.state !== -1) {
        if (wrapper.state < children.length) {
          let currentIndex = wrapper.state;
          indexPath.push(currentIndex);
          stack.push({ node: children[currentIndex] });
          wrapper.state = currentIndex + 1;
          continue;
        }
        const leaveResult = onLeave?.(wrapper.node, getIndexPath());
        if (leaveResult === "stop") return;
      }
      indexPath.pop();
      stack.pop();
    }
  }
  var TreeCollection = class _TreeCollection {
    constructor(options) {
      this.options = options;
      __publicField2(this, "rootNode");
      __publicField2(this, "isEqual", (other) => {
        return isEqual(this.rootNode, other.rootNode);
      });
      __publicField2(this, "getNodeChildren", (node2) => {
        return this.options.nodeToChildren?.(node2) ?? fallbackMethods.nodeToChildren(node2) ?? [];
      });
      __publicField2(this, "resolveIndexPath", (valueOrIndexPath) => {
        return typeof valueOrIndexPath === "string" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;
      });
      __publicField2(this, "resolveNode", (valueOrIndexPath) => {
        const indexPath = this.resolveIndexPath(valueOrIndexPath);
        return indexPath ? this.at(indexPath) : void 0;
      });
      __publicField2(this, "getNodeChildrenCount", (node2) => {
        return this.options.nodeToChildrenCount?.(node2) ?? fallbackMethods.nodeToChildrenCount(node2);
      });
      __publicField2(this, "getNodeValue", (node2) => {
        return this.options.nodeToValue?.(node2) ?? fallbackMethods.nodeToValue(node2);
      });
      __publicField2(this, "getNodeDisabled", (node2) => {
        return this.options.isNodeDisabled?.(node2) ?? fallbackMethods.isNodeDisabled(node2);
      });
      __publicField2(this, "stringify", (value) => {
        const node2 = this.findNode(value);
        if (!node2) return null;
        return this.stringifyNode(node2);
      });
      __publicField2(this, "stringifyNode", (node2) => {
        return this.options.nodeToString?.(node2) ?? fallbackMethods.nodeToString(node2);
      });
      __publicField2(this, "getFirstNode", (rootNode = this.rootNode) => {
        let firstChild;
        visit(rootNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node2)) {
              firstChild = node2;
              return "stop";
            }
          }
        });
        return firstChild;
      });
      __publicField2(this, "getLastNode", (rootNode = this.rootNode, opts = {}) => {
        let lastChild;
        visit(rootNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (this.isSameNode(node2, rootNode)) return;
            if (opts.skip?.({ value: this.getNodeValue(node2), node: node2, indexPath })) return "skip";
            if (indexPath.length > 0 && !this.getNodeDisabled(node2)) {
              lastChild = node2;
            }
          }
        });
        return lastChild;
      });
      __publicField2(this, "at", (indexPath) => {
        return access(this.rootNode, indexPath, {
          getChildren: this.getNodeChildren
        });
      });
      __publicField2(this, "findNode", (value, rootNode = this.rootNode) => {
        return find(rootNode, {
          getChildren: this.getNodeChildren,
          predicate: (node2) => this.getNodeValue(node2) === value
        });
      });
      __publicField2(this, "findNodes", (values, rootNode = this.rootNode) => {
        const v = new Set(values.filter((v2) => v2 != null));
        return findAll(rootNode, {
          getChildren: this.getNodeChildren,
          predicate: (node2) => v.has(this.getNodeValue(node2))
        });
      });
      __publicField2(this, "sort", (values) => {
        return values.reduce((acc, value) => {
          const indexPath = this.getIndexPath(value);
          if (indexPath) acc.push({ value, indexPath });
          return acc;
        }, []).sort((a, b2) => compareIndexPaths(a.indexPath, b2.indexPath)).map(({ value }) => value);
      });
      __publicField2(this, "getIndexPath", (value) => {
        return findIndexPath(this.rootNode, {
          getChildren: this.getNodeChildren,
          predicate: (node2) => this.getNodeValue(node2) === value
        });
      });
      __publicField2(this, "getValue", (indexPath) => {
        const node2 = this.at(indexPath);
        return node2 ? this.getNodeValue(node2) : void 0;
      });
      __publicField2(this, "getValuePath", (indexPath) => {
        if (!indexPath) return [];
        const valuePath = [];
        let currentPath = [...indexPath];
        while (currentPath.length > 0) {
          const node2 = this.at(currentPath);
          if (node2) valuePath.unshift(this.getNodeValue(node2));
          currentPath.pop();
        }
        return valuePath;
      });
      __publicField2(this, "getDepth", (value) => {
        const indexPath = findIndexPath(this.rootNode, {
          getChildren: this.getNodeChildren,
          predicate: (node2) => this.getNodeValue(node2) === value
        });
        return indexPath?.length ?? 0;
      });
      __publicField2(this, "isSameNode", (node2, other) => {
        return this.getNodeValue(node2) === this.getNodeValue(other);
      });
      __publicField2(this, "isRootNode", (node2) => {
        return this.isSameNode(node2, this.rootNode);
      });
      __publicField2(this, "contains", (parentIndexPath, valueIndexPath) => {
        if (!parentIndexPath || !valueIndexPath) return false;
        return valueIndexPath.slice(0, parentIndexPath.length).every((_2, i2) => parentIndexPath[i2] === valueIndexPath[i2]);
      });
      __publicField2(this, "getNextNode", (value, opts = {}) => {
        let found = false;
        let nextNode;
        visit(this.rootNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (this.isRootNode(node2)) return;
            const nodeValue = this.getNodeValue(node2);
            if (opts.skip?.({ value: nodeValue, node: node2, indexPath })) {
              if (nodeValue === value) {
                found = true;
              }
              return "skip";
            }
            if (found && !this.getNodeDisabled(node2)) {
              nextNode = node2;
              return "stop";
            }
            if (nodeValue === value) {
              found = true;
            }
          }
        });
        return nextNode;
      });
      __publicField2(this, "getPreviousNode", (value, opts = {}) => {
        let previousNode;
        let found = false;
        visit(this.rootNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (this.isRootNode(node2)) return;
            const nodeValue = this.getNodeValue(node2);
            if (opts.skip?.({ value: nodeValue, node: node2, indexPath })) {
              return "skip";
            }
            if (nodeValue === value) {
              found = true;
              return "stop";
            }
            if (!this.getNodeDisabled(node2)) {
              previousNode = node2;
            }
          }
        });
        return found ? previousNode : void 0;
      });
      __publicField2(this, "getParentNodes", (valueOrIndexPath) => {
        const indexPath = this.resolveIndexPath(valueOrIndexPath)?.slice();
        if (!indexPath) return [];
        const result = [];
        while (indexPath.length > 0) {
          indexPath.pop();
          const parentNode = this.at(indexPath);
          if (parentNode && !this.isRootNode(parentNode)) {
            result.unshift(parentNode);
          }
        }
        return result;
      });
      __publicField2(this, "getDescendantNodes", (valueOrIndexPath, options2) => {
        const parentNode = this.resolveNode(valueOrIndexPath);
        if (!parentNode) return [];
        const result = [];
        visit(parentNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, nodeIndexPath) => {
            if (nodeIndexPath.length === 0) return;
            if (!options2?.withBranch && this.isBranchNode(node2)) return;
            result.push(node2);
          }
        });
        return result;
      });
      __publicField2(this, "getDescendantValues", (valueOrIndexPath, options2) => {
        const children = this.getDescendantNodes(valueOrIndexPath, options2);
        return children.map((child) => this.getNodeValue(child));
      });
      __publicField2(this, "getParentIndexPath", (indexPath) => {
        return indexPath.slice(0, -1);
      });
      __publicField2(this, "getParentNode", (valueOrIndexPath) => {
        const indexPath = this.resolveIndexPath(valueOrIndexPath);
        return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;
      });
      __publicField2(this, "visit", (opts) => {
        const { skip, ...rest } = opts;
        visit(this.rootNode, {
          ...rest,
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (this.isRootNode(node2)) return;
            if (skip?.({ value: this.getNodeValue(node2), node: node2, indexPath })) return "skip";
            return rest.onEnter?.(node2, indexPath);
          }
        });
      });
      __publicField2(this, "getPreviousSibling", (indexPath) => {
        const parentNode = this.getParentNode(indexPath);
        if (!parentNode) return;
        const siblings = this.getNodeChildren(parentNode);
        let idx = indexPath[indexPath.length - 1];
        while (--idx >= 0) {
          const sibling = siblings[idx];
          if (!this.getNodeDisabled(sibling)) return sibling;
        }
        return;
      });
      __publicField2(this, "getNextSibling", (indexPath) => {
        const parentNode = this.getParentNode(indexPath);
        if (!parentNode) return;
        const siblings = this.getNodeChildren(parentNode);
        let idx = indexPath[indexPath.length - 1];
        while (++idx < siblings.length) {
          const sibling = siblings[idx];
          if (!this.getNodeDisabled(sibling)) return sibling;
        }
        return;
      });
      __publicField2(this, "getSiblingNodes", (indexPath) => {
        const parentNode = this.getParentNode(indexPath);
        return parentNode ? this.getNodeChildren(parentNode) : [];
      });
      __publicField2(this, "getValues", (rootNode = this.rootNode) => {
        const values = flatMap(rootNode, {
          getChildren: this.getNodeChildren,
          transform: (node2) => [this.getNodeValue(node2)]
        });
        return values.slice(1);
      });
      __publicField2(this, "isValidDepth", (indexPath, depth) => {
        if (depth == null) return true;
        if (typeof depth === "function") return depth(indexPath.length);
        return indexPath.length === depth;
      });
      __publicField2(this, "isBranchNode", (node2) => {
        return this.getNodeChildren(node2).length > 0 || this.getNodeChildrenCount(node2) != null;
      });
      __publicField2(this, "getBranchValues", (rootNode = this.rootNode, opts = {}) => {
        let values = [];
        visit(rootNode, {
          getChildren: this.getNodeChildren,
          onEnter: (node2, indexPath) => {
            if (indexPath.length === 0) return;
            const nodeValue = this.getNodeValue(node2);
            if (opts.skip?.({ value: nodeValue, node: node2, indexPath })) return "skip";
            if (this.isBranchNode(node2) && this.isValidDepth(indexPath, opts.depth)) {
              values.push(this.getNodeValue(node2));
            }
          }
        });
        return values;
      });
      __publicField2(this, "flatten", (rootNode = this.rootNode) => {
        return flatten(rootNode, { getChildren: this.getNodeChildren });
      });
      __publicField2(this, "_create", (node2, children) => {
        if (this.getNodeChildren(node2).length > 0 || children.length > 0) {
          return { ...node2, children };
        }
        return { ...node2 };
      });
      __publicField2(this, "_insert", (rootNode, indexPath, nodes) => {
        return this.copy(
          insert2(rootNode, { at: indexPath, nodes, getChildren: this.getNodeChildren, create: this._create })
        );
      });
      __publicField2(this, "copy", (rootNode) => {
        return new _TreeCollection({ ...this.options, rootNode });
      });
      __publicField2(this, "_replace", (rootNode, indexPath, node2) => {
        return this.copy(
          replace3(rootNode, { at: indexPath, node: node2, getChildren: this.getNodeChildren, create: this._create })
        );
      });
      __publicField2(this, "_move", (rootNode, indexPaths, to) => {
        return this.copy(move2(rootNode, { indexPaths, to, getChildren: this.getNodeChildren, create: this._create }));
      });
      __publicField2(this, "_remove", (rootNode, indexPaths) => {
        return this.copy(remove2(rootNode, { indexPaths, getChildren: this.getNodeChildren, create: this._create }));
      });
      __publicField2(this, "replace", (indexPath, node2) => {
        return this._replace(this.rootNode, indexPath, node2);
      });
      __publicField2(this, "remove", (indexPaths) => {
        return this._remove(this.rootNode, indexPaths);
      });
      __publicField2(this, "insertBefore", (indexPath, nodes) => {
        const parentNode = this.getParentNode(indexPath);
        return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;
      });
      __publicField2(this, "insertAfter", (indexPath, nodes) => {
        const parentNode = this.getParentNode(indexPath);
        if (!parentNode) return;
        const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];
        return this._insert(this.rootNode, nextIndex2, nodes);
      });
      __publicField2(this, "move", (fromIndexPaths, toIndexPath) => {
        return this._move(this.rootNode, fromIndexPaths, toIndexPath);
      });
      __publicField2(this, "filter", (predicate) => {
        const filteredRoot = filter(this.rootNode, {
          predicate,
          getChildren: this.getNodeChildren,
          create: this._create
        });
        return this.copy(filteredRoot);
      });
      __publicField2(this, "toJSON", () => {
        return this.getValues(this.rootNode);
      });
      this.rootNode = options.rootNode;
    }
  };
  var fallbackMethods = {
    nodeToValue(node2) {
      if (typeof node2 === "string") return node2;
      if (isObject2(node2) && hasProp2(node2, "value")) return node2.value;
      return "";
    },
    nodeToString(node2) {
      if (typeof node2 === "string") return node2;
      if (isObject2(node2) && hasProp2(node2, "label")) return node2.label;
      return fallbackMethods.nodeToValue(node2);
    },
    isNodeDisabled(node2) {
      if (isObject2(node2) && hasProp2(node2, "disabled")) return !!node2.disabled;
      return false;
    },
    nodeToChildren(node2) {
      return node2.children;
    },
    nodeToChildrenCount(node2) {
      if (isObject2(node2) && hasProp2(node2, "childrenCount")) return node2.childrenCount;
    }
  };

  // node_modules/@ark-ui/react/dist/components/collection/list-collection.js
  var createListCollection = (options) => new ListCollection(options);

  // node_modules/@zag-js/aria-hidden/dist/index.mjs
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var unwrapHost = (node2) => node2 && (node2.host || unwrapHost(node2.parentNode));
  var correctTargets = (parent, targets) => targets.map((target) => {
    if (parent.contains(target)) return target;
    const correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("[zag-js > ariaHidden] target", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter((x2) => Boolean(x2));
  var ignoreableNodes = /* @__PURE__ */ new Set(["script", "output", "status", "next-route-announcer"]);
  var isIgnoredNode = (node2) => {
    if (ignoreableNodes.has(node2.localName)) return true;
    if (node2.role === "status") return true;
    if (node2.hasAttribute("aria-live")) return true;
    return node2.matches("[data-live-announcer]");
  };
  var walkTreeOutside = (originalTarget, props26) => {
    const { parentNode, markerName, controlAttribute } = props26;
    const targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    markerMap[markerName] || (markerMap[markerName] = /* @__PURE__ */ new WeakMap());
    const markerCounter = markerMap[markerName];
    const hiddenNodes = [];
    const elementsToKeep = /* @__PURE__ */ new Set();
    const elementsToStop = new Set(targets);
    const keep = (el) => {
      if (!el || elementsToKeep.has(el)) return;
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    const deep = (parent) => {
      if (!parent || elementsToStop.has(parent)) {
        return;
      }
      Array.prototype.forEach.call(parent.children, (node2) => {
        if (elementsToKeep.has(node2)) {
          deep(node2);
        } else {
          try {
            if (isIgnoredNode(node2)) return;
            const attr = node2.getAttribute(controlAttribute);
            const alreadyHidden = attr === "true";
            const counterValue = (counterMap.get(node2) || 0) + 1;
            const markerValue = (markerCounter.get(node2) || 0) + 1;
            counterMap.set(node2, counterValue);
            markerCounter.set(node2, markerValue);
            hiddenNodes.push(node2);
            if (counterValue === 1 && alreadyHidden) {
              uncontrolledNodes.set(node2, true);
            }
            if (markerValue === 1) {
              node2.setAttribute(markerName, "");
            }
            if (!alreadyHidden) {
              node2.setAttribute(controlAttribute, "true");
            }
          } catch (e2) {
            console.error("[zag-js > ariaHidden] cannot operate on ", node2, e2);
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return () => {
      hiddenNodes.forEach((node2) => {
        const counterValue = counterMap.get(node2) - 1;
        const markerValue = markerCounter.get(node2) - 1;
        counterMap.set(node2, counterValue);
        markerCounter.set(node2, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node2)) {
            node2.removeAttribute(controlAttribute);
          }
          uncontrolledNodes.delete(node2);
        }
        if (!markerValue) {
          node2.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };
  var getParentNode3 = (originalTarget) => {
    const target = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return target.ownerDocument.body;
  };
  var hideOthers = (originalTarget, parentNode = getParentNode3(originalTarget), markerName = "data-aria-hidden") => {
    if (!parentNode) return;
    return walkTreeOutside(originalTarget, {
      parentNode,
      markerName,
      controlAttribute: "aria-hidden"
    });
  };
  var raf2 = (fn) => {
    const frameId = requestAnimationFrame(() => fn());
    return () => cancelAnimationFrame(frameId);
  };
  function ariaHidden(targetsOrFn, options = {}) {
    const { defer = true } = options;
    const func = defer ? raf2 : (v) => v();
    const cleanups = [];
    cleanups.push(
      func(() => {
        const targets = typeof targetsOrFn === "function" ? targetsOrFn() : targetsOrFn;
        const elements = targets.filter(Boolean);
        if (elements.length === 0) return;
        cleanups.push(hideOthers(elements));
      })
    );
    return () => {
      cleanups.forEach((fn) => fn?.());
    };
  }

  // node_modules/@zag-js/combobox/dist/index.mjs
  var anatomy7 = createAnatomy("combobox").parts(
    "root",
    "clearTrigger",
    "content",
    "control",
    "input",
    "item",
    "itemGroup",
    "itemGroupLabel",
    "itemIndicator",
    "itemText",
    "label",
    "list",
    "positioner",
    "trigger"
  );
  var parts7 = anatomy7.build();
  var collection = (options) => {
    return new ListCollection(options);
  };
  collection.empty = () => {
    return new ListCollection({ items: [] });
  };
  var getControlId2 = (ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`;
  var getInputId2 = (ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`;
  var getContentId3 = (ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:content`;
  var getPositionerId2 = (ctx) => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`;
  var getTriggerId2 = (ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`;
  var getClearTriggerId = (ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`;
  var getContentEl3 = (ctx) => ctx.getById(getContentId3(ctx));
  var getInputEl2 = (ctx) => ctx.getById(getInputId2(ctx));
  var getPositionerEl2 = (ctx) => ctx.getById(getPositionerId2(ctx));
  var getControlEl2 = (ctx) => ctx.getById(getControlId2(ctx));
  var getTriggerEl2 = (ctx) => ctx.getById(getTriggerId2(ctx));
  var getClearTriggerEl = (ctx) => ctx.getById(getClearTriggerId(ctx));
  var getItemEl = (ctx, value) => {
    if (value == null) return;
    const selector = `[role=option][data-value="${CSS.escape(value)}"]`;
    return query(getContentEl3(ctx), selector);
  };
  var focusInputEl = (ctx) => {
    const inputEl = getInputEl2(ctx);
    if (ctx.isActiveElement(inputEl)) return;
    inputEl?.focus({ preventScroll: true });
  };
  var focusTriggerEl = (ctx) => {
    const triggerEl = getTriggerEl2(ctx);
    if (ctx.isActiveElement(triggerEl)) return;
    triggerEl?.focus({ preventScroll: true });
  };
  var { guards, createMachine: createMachine2, choose } = setup();
  var { and: and3, not: not3 } = guards;
  var machine8 = createMachine2({
    props({ props: props26 }) {
      return {
        loopFocus: true,
        openOnClick: false,
        defaultValue: [],
        closeOnSelect: !props26.multiple,
        allowCustomValue: false,
        inputBehavior: "none",
        selectionBehavior: props26.multiple ? "clear" : "replace",
        openOnKeyPress: true,
        openOnChange: true,
        composite: true,
        navigate({ node: node2 }) {
          clickIfLink(node2);
        },
        collection: collection.empty(),
        ...props26,
        positioning: {
          placement: "bottom",
          sameWidth: true,
          ...props26.positioning
        },
        translations: {
          triggerLabel: "Toggle suggestions",
          clearTriggerLabel: "Clear value",
          ...props26.translations
        }
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "suggesting" : "idle";
    },
    context({ prop, bindable, getContext, getEvent }) {
      return {
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        })),
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          isEqual,
          hash(value) {
            return value.join(",");
          },
          onChange(value) {
            const context = getContext();
            const prevSelectedItems = context.get("selectedItems");
            const collection22 = prop("collection");
            const nextItems = value.map((v) => {
              const item = prevSelectedItems.find((item2) => collection22.getItemValue(item2) === v);
              return item || collection22.find(v);
            });
            context.set("selectedItems", nextItems);
            prop("onValueChange")?.({ value, items: nextItems });
          }
        })),
        highlightedValue: bindable(() => ({
          defaultValue: prop("defaultHighlightedValue") || null,
          value: prop("highlightedValue"),
          onChange(value) {
            const item = prop("collection").find(value);
            prop("onHighlightChange")?.({ highlightedValue: value, highlightedItem: item });
          }
        })),
        inputValue: bindable(() => {
          let inputValue = prop("inputValue") || prop("defaultInputValue") || "";
          const value = prop("defaultValue") || prop("value") || [];
          if (!inputValue.trim() && !prop("multiple")) {
            const valueAsString = prop("collection").stringifyMany(value);
            inputValue = match2(prop("selectionBehavior"), {
              preserve: inputValue || valueAsString,
              replace: valueAsString,
              clear: ""
            });
          }
          return {
            defaultValue: inputValue,
            value: prop("inputValue"),
            onChange(value2) {
              const event = getEvent();
              const reason = (event.previousEvent || event).src;
              prop("onInputValueChange")?.({ inputValue: value2, reason });
            }
          };
        }),
        highlightedItem: bindable(() => {
          const highlightedValue = prop("highlightedValue");
          const highlightedItem = prop("collection").find(highlightedValue);
          return { defaultValue: highlightedItem };
        }),
        selectedItems: bindable(() => {
          const value = prop("value") || prop("defaultValue") || [];
          const selectedItems = prop("collection").findMany(value);
          return { defaultValue: selectedItems };
        })
      };
    },
    computed: {
      isInputValueEmpty: ({ context }) => context.get("inputValue").length === 0,
      isInteractive: ({ prop }) => !(prop("readOnly") || prop("disabled")),
      autoComplete: ({ prop }) => prop("inputBehavior") === "autocomplete",
      autoHighlight: ({ prop }) => prop("inputBehavior") === "autohighlight",
      hasSelectedItems: ({ context }) => context.get("value").length > 0,
      valueAsString: ({ context, prop }) => prop("collection").stringifyItems(context.get("selectedItems")),
      isCustomValue: ({ context, computed }) => context.get("inputValue") !== computed("valueAsString")
    },
    watch({ context, prop, track, action, send }) {
      track([() => context.hash("value")], () => {
        action(["syncSelectedItems"]);
      });
      track([() => context.get("inputValue")], () => {
        action(["syncInputValue"]);
      });
      track([() => context.get("highlightedValue")], () => {
        action(["syncHighlightedItem", "autofillInputValue"]);
      });
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
      track([() => prop("collection").toString()], () => {
        send({ type: "CHILDREN_CHANGE" });
      });
    },
    on: {
      "SELECTED_ITEMS.SYNC": {
        actions: ["syncSelectedItems"]
      },
      "HIGHLIGHTED_VALUE.SET": {
        actions: ["setHighlightedValue"]
      },
      "HIGHLIGHTED_VALUE.CLEAR": {
        actions: ["clearHighlightedValue"]
      },
      "ITEM.SELECT": {
        actions: ["selectItem"]
      },
      "ITEM.CLEAR": {
        actions: ["clearItem"]
      },
      "VALUE.SET": {
        actions: ["setValue"]
      },
      "INPUT_VALUE.SET": {
        actions: ["setInputValue"]
      },
      "POSITIONING.SET": {
        actions: ["reposition"]
      }
    },
    entry: choose([
      {
        guard: "autoFocus",
        actions: ["setInitialFocus"]
      }
    ]),
    states: {
      idle: {
        tags: ["idle", "closed"],
        entry: ["scrollContentToTop", "clearHighlightedValue"],
        on: {
          "CONTROLLED.OPEN": {
            target: "interacting"
          },
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["setInitialFocus", "highlightFirstSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["setInitialFocus", "highlightFirstSelectedItem", "invokeOnOpen"]
            }
          ],
          "INPUT.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["highlightFirstSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["highlightFirstSelectedItem", "invokeOnOpen"]
            }
          ],
          "INPUT.FOCUS": {
            target: "focused"
          },
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["invokeOnOpen"]
            }
          ],
          "VALUE.CLEAR": {
            target: "focused",
            actions: ["clearInputValue", "clearSelectedItems", "setInitialFocus"]
          }
        }
      },
      focused: {
        tags: ["focused", "closed"],
        entry: ["scrollContentToTop", "clearHighlightedValue"],
        on: {
          "CONTROLLED.OPEN": [
            {
              guard: "isChangeEvent",
              target: "suggesting"
            },
            {
              target: "interacting"
            }
          ],
          "INPUT.CHANGE": [
            {
              guard: and3("isOpenControlled", "openOnChange"),
              actions: ["setInputValue", "invokeOnOpen", "highlightFirstItemIfNeeded"]
            },
            {
              guard: "openOnChange",
              target: "suggesting",
              actions: ["setInputValue", "invokeOnOpen", "highlightFirstItemIfNeeded"]
            },
            {
              actions: ["setInputValue"]
            }
          ],
          "LAYER.INTERACT_OUTSIDE": {
            target: "idle"
          },
          "INPUT.ESCAPE": {
            guard: and3("isCustomValue", not3("allowCustomValue")),
            actions: ["revertInputValue"]
          },
          "INPUT.BLUR": {
            target: "idle"
          },
          "INPUT.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["highlightFirstSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["highlightFirstSelectedItem", "invokeOnOpen"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["setInitialFocus", "highlightFirstSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["setInitialFocus", "highlightFirstSelectedItem", "invokeOnOpen"]
            }
          ],
          "INPUT.ARROW_DOWN": [
            // == group 1 ==
            {
              guard: and3("isOpenControlled", "autoComplete"),
              actions: ["invokeOnOpen"]
            },
            {
              guard: "autoComplete",
              target: "interacting",
              actions: ["invokeOnOpen"]
            },
            // == group 2 ==
            {
              guard: "isOpenControlled",
              actions: ["highlightFirstOrSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["highlightFirstOrSelectedItem", "invokeOnOpen"]
            }
          ],
          "INPUT.ARROW_UP": [
            // == group 1 ==
            {
              guard: "autoComplete",
              target: "interacting",
              actions: ["invokeOnOpen"]
            },
            {
              guard: "autoComplete",
              target: "interacting",
              actions: ["invokeOnOpen"]
            },
            // == group 2 ==
            {
              target: "interacting",
              actions: ["highlightLastOrSelectedItem", "invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["highlightLastOrSelectedItem", "invokeOnOpen"]
            }
          ],
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "interacting",
              actions: ["invokeOnOpen"]
            }
          ],
          "VALUE.CLEAR": {
            actions: ["clearInputValue", "clearSelectedItems"]
          }
        }
      },
      interacting: {
        tags: ["open", "focused"],
        entry: ["setInitialFocus"],
        effects: ["scrollToHighlightedItem", "trackDismissableLayer", "trackPlacement", "hideOtherElements"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              guard: "restoreFocus",
              target: "focused",
              actions: ["setFinalFocus"]
            },
            {
              target: "idle"
            }
          ],
          CHILDREN_CHANGE: [
            {
              guard: "isHighlightedItemRemoved",
              actions: ["clearHighlightedValue"]
            },
            {
              actions: ["scrollToHighlightedItem"]
            }
          ],
          "INPUT.HOME": {
            actions: ["highlightFirstItem"]
          },
          "INPUT.END": {
            actions: ["highlightLastItem"]
          },
          "INPUT.ARROW_DOWN": [
            {
              guard: and3("autoComplete", "isLastItemHighlighted"),
              actions: ["clearHighlightedValue", "scrollContentToTop"]
            },
            {
              actions: ["highlightNextItem"]
            }
          ],
          "INPUT.ARROW_UP": [
            {
              guard: and3("autoComplete", "isFirstItemHighlighted"),
              actions: ["clearHighlightedValue"]
            },
            {
              actions: ["highlightPrevItem"]
            }
          ],
          "INPUT.ENTER": [
            // == group 1 ==
            {
              guard: and3("isOpenControlled", "isCustomValue", not3("hasHighlightedItem"), not3("allowCustomValue")),
              actions: ["revertInputValue", "invokeOnClose"]
            },
            {
              guard: and3("isCustomValue", not3("hasHighlightedItem"), not3("allowCustomValue")),
              target: "focused",
              actions: ["revertInputValue", "invokeOnClose"]
            },
            // == group 2 ==
            {
              guard: and3("isOpenControlled", "closeOnSelect"),
              actions: ["selectHighlightedItem", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["selectHighlightedItem", "invokeOnClose", "setFinalFocus"]
            },
            {
              actions: ["selectHighlightedItem"]
            }
          ],
          "INPUT.CHANGE": [
            {
              guard: "autoComplete",
              target: "suggesting",
              actions: ["setInputValue"]
            },
            {
              target: "suggesting",
              actions: ["clearHighlightedValue", "setInputValue"]
            }
          ],
          "ITEM.POINTER_MOVE": {
            actions: ["setHighlightedValue"]
          },
          "ITEM.POINTER_LEAVE": {
            actions: ["clearHighlightedValue"]
          },
          "ITEM.CLICK": [
            {
              guard: and3("isOpenControlled", "closeOnSelect"),
              actions: ["selectItem", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["selectItem", "invokeOnClose", "setFinalFocus"]
            },
            {
              actions: ["selectItem"]
            }
          ],
          "LAYER.ESCAPE": [
            {
              guard: and3("isOpenControlled", "autoComplete"),
              actions: ["syncInputValue", "invokeOnClose"]
            },
            {
              guard: "autoComplete",
              target: "focused",
              actions: ["syncInputValue", "invokeOnClose"]
            },
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose", "setFinalFocus"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose"]
            }
          ],
          "LAYER.INTERACT_OUTSIDE": [
            // == group 1 ==
            {
              guard: and3("isOpenControlled", "isCustomValue", not3("allowCustomValue")),
              actions: ["revertInputValue", "invokeOnClose"]
            },
            {
              guard: and3("isCustomValue", not3("allowCustomValue")),
              target: "idle",
              actions: ["revertInputValue", "invokeOnClose"]
            },
            // == group 2 ==
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose", "setFinalFocus"]
            }
          ],
          "VALUE.CLEAR": [
            {
              guard: "isOpenControlled",
              actions: ["clearInputValue", "clearSelectedItems", "invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["clearInputValue", "clearSelectedItems", "invokeOnClose", "setFinalFocus"]
            }
          ]
        }
      },
      suggesting: {
        tags: ["open", "focused"],
        effects: ["trackDismissableLayer", "scrollToHighlightedItem", "trackPlacement", "hideOtherElements"],
        entry: ["setInitialFocus"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              guard: "restoreFocus",
              target: "focused",
              actions: ["setFinalFocus"]
            },
            {
              target: "idle"
            }
          ],
          CHILDREN_CHANGE: [
            {
              guard: "autoHighlight",
              actions: ["highlightFirstItem"]
            },
            {
              guard: "isHighlightedItemRemoved",
              actions: ["clearHighlightedValue"]
            }
          ],
          "INPUT.ARROW_DOWN": {
            target: "interacting",
            actions: ["highlightNextItem"]
          },
          "INPUT.ARROW_UP": {
            target: "interacting",
            actions: ["highlightPrevItem"]
          },
          "INPUT.HOME": {
            target: "interacting",
            actions: ["highlightFirstItem"]
          },
          "INPUT.END": {
            target: "interacting",
            actions: ["highlightLastItem"]
          },
          "INPUT.ENTER": [
            // == group 1 ==
            {
              guard: and3("isOpenControlled", "isCustomValue", not3("hasHighlightedItem"), not3("allowCustomValue")),
              actions: ["revertInputValue", "invokeOnClose"]
            },
            {
              guard: and3("isCustomValue", not3("hasHighlightedItem"), not3("allowCustomValue")),
              target: "focused",
              actions: ["revertInputValue", "invokeOnClose"]
            },
            // == group 2 ==
            {
              guard: and3("isOpenControlled", "closeOnSelect"),
              actions: ["selectHighlightedItem", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["selectHighlightedItem", "invokeOnClose", "setFinalFocus"]
            },
            {
              actions: ["selectHighlightedItem"]
            }
          ],
          "INPUT.CHANGE": {
            actions: ["setInputValue"]
          },
          "LAYER.ESCAPE": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose"]
            }
          ],
          "ITEM.POINTER_MOVE": {
            target: "interacting",
            actions: ["setHighlightedValue"]
          },
          "ITEM.POINTER_LEAVE": {
            actions: ["clearHighlightedValue"]
          },
          "LAYER.INTERACT_OUTSIDE": [
            // == group 1 ==
            {
              guard: and3("isOpenControlled", "isCustomValue", not3("allowCustomValue")),
              actions: ["revertInputValue", "invokeOnClose"]
            },
            {
              guard: and3("isCustomValue", not3("allowCustomValue")),
              target: "idle",
              actions: ["revertInputValue", "invokeOnClose"]
            },
            // == group 2 ==
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose"]
            }
          ],
          "ITEM.CLICK": [
            {
              guard: and3("isOpenControlled", "closeOnSelect"),
              actions: ["selectItem", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["selectItem", "invokeOnClose", "setFinalFocus"]
            },
            {
              actions: ["selectItem"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose", "setFinalFocus"]
            }
          ],
          "VALUE.CLEAR": [
            {
              guard: "isOpenControlled",
              actions: ["clearInputValue", "clearSelectedItems", "invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["clearInputValue", "clearSelectedItems", "invokeOnClose", "setFinalFocus"]
            }
          ]
        }
      }
    },
    implementations: {
      guards: {
        isInputValueEmpty: ({ computed }) => computed("isInputValueEmpty"),
        autoComplete: ({ computed, prop }) => computed("autoComplete") && !prop("multiple"),
        autoHighlight: ({ computed }) => computed("autoHighlight"),
        isFirstItemHighlighted: ({ prop, context }) => prop("collection").firstValue === context.get("highlightedValue"),
        isLastItemHighlighted: ({ prop, context }) => prop("collection").lastValue === context.get("highlightedValue"),
        isCustomValue: ({ computed }) => computed("isCustomValue"),
        allowCustomValue: ({ prop }) => !!prop("allowCustomValue"),
        hasHighlightedItem: ({ context }) => context.get("highlightedValue") != null,
        closeOnSelect: ({ prop }) => !!prop("closeOnSelect"),
        isOpenControlled: ({ prop }) => prop("open") != null,
        openOnChange: ({ prop, context }) => {
          const openOnChange = prop("openOnChange");
          if (isBoolean(openOnChange)) return openOnChange;
          return !!openOnChange?.({ inputValue: context.get("inputValue") });
        },
        restoreFocus: ({ event }) => event.restoreFocus == null ? true : !!event.restoreFocus,
        isChangeEvent: ({ event }) => event.previousEvent?.type === "INPUT.CHANGE",
        autoFocus: ({ prop }) => !!prop("autoFocus"),
        isHighlightedItemRemoved: ({ prop, context }) => !prop("collection").has(context.get("highlightedValue"))
      },
      effects: {
        trackDismissableLayer({ send, prop, scope }) {
          if (prop("disableLayer")) return;
          const contentEl = () => getContentEl3(scope);
          return trackDismissableElement(contentEl, {
            defer: true,
            exclude: () => [getInputEl2(scope), getTriggerEl2(scope), getClearTriggerEl(scope)],
            onFocusOutside: prop("onFocusOutside"),
            onPointerDownOutside: prop("onPointerDownOutside"),
            onInteractOutside: prop("onInteractOutside"),
            onEscapeKeyDown(event) {
              event.preventDefault();
              event.stopPropagation();
              send({ type: "LAYER.ESCAPE", src: "escape-key" });
            },
            onDismiss() {
              send({ type: "LAYER.INTERACT_OUTSIDE", src: "interact-outside", restoreFocus: false });
            }
          });
        },
        hideOtherElements({ scope }) {
          return ariaHidden([
            getInputEl2(scope),
            getContentEl3(scope),
            getTriggerEl2(scope),
            getClearTriggerEl(scope)
          ]);
        },
        trackPlacement({ context, prop, scope }) {
          const anchorEl = () => getControlEl2(scope) || getTriggerEl2(scope);
          const positionerEl = () => getPositionerEl2(scope);
          context.set("currentPlacement", prop("positioning").placement);
          return getPlacement(anchorEl, positionerEl, {
            ...prop("positioning"),
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        scrollToHighlightedItem({ context, prop, scope, event }) {
          const inputEl = getInputEl2(scope);
          let cleanups = [];
          const exec = (immediate) => {
            const pointer = event.current().type.includes("POINTER");
            const highlightedValue = context.get("highlightedValue");
            if (pointer || !highlightedValue) return;
            const itemEl = getItemEl(scope, highlightedValue);
            const contentEl = getContentEl3(scope);
            const scrollToIndexFn = prop("scrollToIndexFn");
            if (scrollToIndexFn) {
              const highlightedIndex = prop("collection").indexOf(highlightedValue);
              scrollToIndexFn({ index: highlightedIndex, immediate });
              return;
            }
            const raf_cleanup = raf(() => {
              scrollIntoView(itemEl, { rootEl: contentEl, block: "nearest" });
            });
            cleanups.push(raf_cleanup);
          };
          const rafCleanup = raf(() => exec(true));
          cleanups.push(rafCleanup);
          const observerCleanup = observeAttributes(inputEl, {
            attributes: ["aria-activedescendant"],
            callback: () => exec(false)
          });
          cleanups.push(observerCleanup);
          return () => {
            cleanups.forEach((cleanup) => cleanup());
          };
        }
      },
      actions: {
        reposition({ context, prop, scope, event }) {
          const controlEl = () => getControlEl2(scope);
          const positionerEl = () => getPositionerEl2(scope);
          getPlacement(controlEl, positionerEl, {
            ...prop("positioning"),
            ...event.options,
            defer: true,
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        setHighlightedValue({ context, event }) {
          if (event.value == null) return;
          context.set("highlightedValue", event.value);
        },
        clearHighlightedValue({ context }) {
          context.set("highlightedValue", null);
        },
        selectHighlightedItem(params) {
          const { context, prop } = params;
          const collection22 = prop("collection");
          const highlightedValue = context.get("highlightedValue");
          if (!highlightedValue || !collection22.has(highlightedValue)) return;
          const nextValue = prop("multiple") ? addOrRemove(context.get("value"), highlightedValue) : [highlightedValue];
          prop("onSelect")?.({ value: nextValue, itemValue: highlightedValue });
          context.set("value", nextValue);
          const inputValue = match2(prop("selectionBehavior"), {
            preserve: context.get("inputValue"),
            replace: collection22.stringifyMany(nextValue),
            clear: ""
          });
          context.set("inputValue", inputValue);
        },
        scrollToHighlightedItem({ context, prop, scope }) {
          nextTick(() => {
            const highlightedValue = context.get("highlightedValue");
            if (highlightedValue == null) return;
            const itemEl = getItemEl(scope, highlightedValue);
            const contentEl = getContentEl3(scope);
            const scrollToIndexFn = prop("scrollToIndexFn");
            if (scrollToIndexFn) {
              const highlightedIndex = prop("collection").indexOf(highlightedValue);
              scrollToIndexFn({ index: highlightedIndex, immediate: true });
              return;
            }
            scrollIntoView(itemEl, { rootEl: contentEl, block: "nearest" });
          });
        },
        selectItem(params) {
          const { context, event, flush: flush2, prop } = params;
          if (event.value == null) return;
          flush2(() => {
            const nextValue = prop("multiple") ? addOrRemove(context.get("value"), event.value) : [event.value];
            prop("onSelect")?.({ value: nextValue, itemValue: event.value });
            context.set("value", nextValue);
            const inputValue = match2(prop("selectionBehavior"), {
              preserve: context.get("inputValue"),
              replace: prop("collection").stringifyMany(nextValue),
              clear: ""
            });
            context.set("inputValue", inputValue);
          });
        },
        clearItem(params) {
          const { context, event, flush: flush2, prop } = params;
          if (event.value == null) return;
          flush2(() => {
            const nextValue = remove(context.get("value"), event.value);
            context.set("value", nextValue);
            const inputValue = match2(prop("selectionBehavior"), {
              preserve: context.get("inputValue"),
              replace: prop("collection").stringifyMany(nextValue),
              clear: ""
            });
            context.set("inputValue", inputValue);
          });
        },
        setInitialFocus({ scope }) {
          raf(() => {
            focusInputEl(scope);
          });
        },
        setFinalFocus({ scope }) {
          raf(() => {
            const triggerEl = getTriggerEl2(scope);
            if (triggerEl?.dataset.focusable == null) {
              focusInputEl(scope);
            } else {
              focusTriggerEl(scope);
            }
          });
        },
        syncInputValue({ context, scope, event }) {
          const inputEl = getInputEl2(scope);
          if (!inputEl) return;
          inputEl.value = context.get("inputValue");
          queueMicrotask(() => {
            if (event.current().type === "INPUT.CHANGE") return;
            setCaretToEnd(inputEl);
          });
        },
        setInputValue({ context, event }) {
          context.set("inputValue", event.value);
        },
        clearInputValue({ context }) {
          context.set("inputValue", "");
        },
        revertInputValue({ context, prop, computed }) {
          const selectionBehavior = prop("selectionBehavior");
          const inputValue = match2(selectionBehavior, {
            replace: computed("hasSelectedItems") ? computed("valueAsString") : "",
            preserve: context.get("inputValue"),
            clear: ""
          });
          context.set("inputValue", inputValue);
        },
        setValue(params) {
          const { context, flush: flush2, event, prop } = params;
          flush2(() => {
            context.set("value", event.value);
            const inputValue = match2(prop("selectionBehavior"), {
              preserve: context.get("inputValue"),
              replace: prop("collection").stringifyMany(event.value),
              clear: ""
            });
            context.set("inputValue", inputValue);
          });
        },
        clearSelectedItems(params) {
          const { context, flush: flush2, prop } = params;
          flush2(() => {
            context.set("value", []);
            const inputValue = match2(prop("selectionBehavior"), {
              preserve: context.get("inputValue"),
              replace: prop("collection").stringifyMany([]),
              clear: ""
            });
            context.set("inputValue", inputValue);
          });
        },
        scrollContentToTop({ prop, scope }) {
          const scrollToIndexFn = prop("scrollToIndexFn");
          if (scrollToIndexFn) {
            scrollToIndexFn({ index: 0, immediate: true });
          } else {
            const contentEl = getContentEl3(scope);
            if (!contentEl) return;
            contentEl.scrollTop = 0;
          }
        },
        invokeOnOpen({ prop, event }) {
          const reason = getOpenChangeReason(event);
          prop("onOpenChange")?.({ open: true, reason });
        },
        invokeOnClose({ prop, event }) {
          const reason = getOpenChangeReason(event);
          prop("onOpenChange")?.({ open: false, reason });
        },
        highlightFirstItem({ context, prop, scope }) {
          const exec = getContentEl3(scope) ? queueMicrotask : raf;
          exec(() => {
            const value = prop("collection").firstValue;
            if (value) context.set("highlightedValue", value);
          });
        },
        highlightFirstItemIfNeeded({ computed, action }) {
          if (!computed("autoHighlight")) return;
          action(["highlightFirstItem"]);
        },
        highlightLastItem({ context, prop, scope }) {
          const exec = getContentEl3(scope) ? queueMicrotask : raf;
          exec(() => {
            const value = prop("collection").lastValue;
            if (value) context.set("highlightedValue", value);
          });
        },
        highlightNextItem({ context, prop }) {
          let value = null;
          const highlightedValue = context.get("highlightedValue");
          const collection22 = prop("collection");
          if (highlightedValue) {
            value = collection22.getNextValue(highlightedValue);
            if (!value && prop("loopFocus")) value = collection22.firstValue;
          } else {
            value = collection22.firstValue;
          }
          if (value) context.set("highlightedValue", value);
        },
        highlightPrevItem({ context, prop }) {
          let value = null;
          const highlightedValue = context.get("highlightedValue");
          const collection22 = prop("collection");
          if (highlightedValue) {
            value = collection22.getPreviousValue(highlightedValue);
            if (!value && prop("loopFocus")) value = collection22.lastValue;
          } else {
            value = collection22.lastValue;
          }
          if (value) context.set("highlightedValue", value);
        },
        highlightFirstSelectedItem({ context, prop }) {
          raf(() => {
            const [value] = prop("collection").sort(context.get("value"));
            if (value) context.set("highlightedValue", value);
          });
        },
        highlightFirstOrSelectedItem({ context, prop, computed }) {
          raf(() => {
            let value = null;
            if (computed("hasSelectedItems")) {
              value = prop("collection").sort(context.get("value"))[0];
            } else {
              value = prop("collection").firstValue;
            }
            if (value) context.set("highlightedValue", value);
          });
        },
        highlightLastOrSelectedItem({ context, prop, computed }) {
          raf(() => {
            const collection22 = prop("collection");
            let value = null;
            if (computed("hasSelectedItems")) {
              value = collection22.sort(context.get("value"))[0];
            } else {
              value = collection22.lastValue;
            }
            if (value) context.set("highlightedValue", value);
          });
        },
        autofillInputValue({ context, computed, prop, event, scope }) {
          const inputEl = getInputEl2(scope);
          const collection22 = prop("collection");
          if (!computed("autoComplete") || !inputEl || !event.keypress) return;
          const valueText = collection22.stringify(context.get("highlightedValue"));
          raf(() => {
            inputEl.value = valueText || context.get("inputValue");
          });
        },
        syncSelectedItems(params) {
          queueMicrotask(() => {
            const { context, prop } = params;
            const collection22 = prop("collection");
            const value = context.get("value");
            const selectedItems = value.map((v) => {
              const item = context.get("selectedItems").find((item2) => collection22.getItemValue(item2) === v);
              return item || collection22.find(v);
            });
            context.set("selectedItems", selectedItems);
            const inputValue = match2(prop("selectionBehavior"), {
              preserve: context.get("inputValue"),
              replace: collection22.stringifyMany(value),
              clear: ""
            });
            context.set("inputValue", inputValue);
          });
        },
        syncHighlightedItem({ context, prop }) {
          const item = prop("collection").find(context.get("highlightedValue"));
          context.set("highlightedItem", item);
        },
        toggleVisibility({ event, send, prop }) {
          send({ type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE", previousEvent: event });
        }
      }
    }
  });
  function getOpenChangeReason(event) {
    return (event.previousEvent || event).src;
  }
  var props8 = createProps()([
    "allowCustomValue",
    "autoFocus",
    "closeOnSelect",
    "collection",
    "composite",
    "defaultHighlightedValue",
    "defaultInputValue",
    "defaultOpen",
    "defaultValue",
    "dir",
    "disabled",
    "disableLayer",
    "form",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "inputBehavior",
    "inputValue",
    "invalid",
    "loopFocus",
    "multiple",
    "name",
    "navigate",
    "onFocusOutside",
    "onHighlightChange",
    "onInputValueChange",
    "onInteractOutside",
    "onOpenChange",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "open",
    "openOnChange",
    "openOnClick",
    "openOnKeyPress",
    "placeholder",
    "positioning",
    "readOnly",
    "required",
    "scrollToIndexFn",
    "selectionBehavior",
    "translations",
    "value"
  ]);
  var splitProps8 = createSplitProps(props8);
  var itemGroupLabelProps = createProps()(["htmlFor"]);
  var splitItemGroupLabelProps = createSplitProps(itemGroupLabelProps);
  var itemGroupProps = createProps()(["id"]);
  var splitItemGroupProps = createSplitProps(itemGroupProps);
  var itemProps2 = createProps()(["item", "persistFocus"]);
  var splitItemProps2 = createSplitProps(itemProps2);

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-backdrop.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var import_react15 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/dialog/use-dialog-context.js
  var [DialogProvider, useDialogContext] = createContext6({
    name: "DialogContext",
    hookName: "useDialogContext",
    providerName: "<DialogProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-backdrop.js
  var DialogBackdrop = (0, import_react15.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const renderStrategyProps = useRenderStrategyPropsContext();
    const presence = usePresence({ ...renderStrategyProps, present: dialog.open });
    const mergedProps = mergeProps2(dialog.getBackdropProps(), presence.getPresenceProps(), props26);
    if (presence.unmounted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ark.div, { ...mergedProps, ref: composeRefs(presence.ref, ref) });
  });
  DialogBackdrop.displayName = "DialogBackdrop";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-close-trigger.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var import_react17 = __toESM(require_react(), 1);
  var DialogCloseTrigger = (0, import_react17.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const mergedProps = mergeProps2(dialog.getCloseTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ark.button, { ...mergedProps, ref });
  });
  DialogCloseTrigger.displayName = "DialogCloseTrigger";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-content.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var import_react19 = __toESM(require_react(), 1);
  var DialogContent = (0, import_react19.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const presence = usePresenceContext();
    const mergedProps = mergeProps2(dialog.getContentProps(), presence.getPresenceProps(), props26);
    if (presence.unmounted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ark.div, { ...mergedProps, ref: composeRefs(presence.ref, ref) });
  });
  DialogContent.displayName = "DialogContent";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-context.js
  var DialogContext = (props26) => props26.children(useDialogContext());

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-description.js
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var import_react21 = __toESM(require_react(), 1);
  var DialogDescription = (0, import_react21.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const mergedProps = mergeProps2(dialog.getDescriptionProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ark.div, { ...mergedProps, ref });
  });
  DialogDescription.displayName = "DialogDescription";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-positioner.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var import_react23 = __toESM(require_react(), 1);
  var DialogPositioner = (0, import_react23.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const mergedProps = mergeProps2(dialog.getPositionerProps(), props26);
    const presence = usePresenceContext();
    if (presence.unmounted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ark.div, { ...mergedProps, ref });
  });
  DialogPositioner.displayName = "DialogPositioner";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-root.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@zag-js/focus-trap/dist/index.mjs
  var __defProp4 = Object.defineProperty;
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField3 = (obj, key, value) => __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
  var activeFocusTraps = {
    activateTrap(trapStack, trap) {
      if (trapStack.length > 0) {
        const activeTrap = trapStack[trapStack.length - 1];
        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }
      const trapIndex = trapStack.indexOf(trap);
      if (trapIndex === -1) {
        trapStack.push(trap);
      } else {
        trapStack.splice(trapIndex, 1);
        trapStack.push(trap);
      }
    },
    deactivateTrap(trapStack, trap) {
      const trapIndex = trapStack.indexOf(trap);
      if (trapIndex !== -1) {
        trapStack.splice(trapIndex, 1);
      }
      if (trapStack.length > 0) {
        trapStack[trapStack.length - 1].unpause();
      }
    }
  };
  var sharedTrapStack = [];
  var FocusTrap = class {
    constructor(elements, options) {
      __publicField3(this, "trapStack");
      __publicField3(this, "config");
      __publicField3(this, "doc");
      __publicField3(this, "state", {
        containers: [],
        containerGroups: [],
        tabbableGroups: [],
        nodeFocusedBeforeActivation: null,
        mostRecentlyFocusedNode: null,
        active: false,
        paused: false,
        delayInitialFocusTimer: void 0,
        recentNavEvent: void 0
      });
      __publicField3(this, "listenerCleanups", []);
      __publicField3(this, "handleFocus", (event) => {
        const target = getEventTarget(event);
        const targetContained = this.findContainerIndex(target, event) >= 0;
        if (targetContained || isDocument(target)) {
          if (targetContained) {
            this.state.mostRecentlyFocusedNode = target;
          }
        } else {
          event.stopImmediatePropagation();
          let nextNode;
          let navAcrossContainers = true;
          if (this.state.mostRecentlyFocusedNode) {
            if (getTabIndex(this.state.mostRecentlyFocusedNode) > 0) {
              const mruContainerIdx = this.findContainerIndex(this.state.mostRecentlyFocusedNode);
              const { tabbableNodes } = this.state.containerGroups[mruContainerIdx];
              if (tabbableNodes.length > 0) {
                const mruTabIdx = tabbableNodes.findIndex((node2) => node2 === this.state.mostRecentlyFocusedNode);
                if (mruTabIdx >= 0) {
                  if (this.config.isKeyForward(this.state.recentNavEvent)) {
                    if (mruTabIdx + 1 < tabbableNodes.length) {
                      nextNode = tabbableNodes[mruTabIdx + 1];
                      navAcrossContainers = false;
                    }
                  } else {
                    if (mruTabIdx - 1 >= 0) {
                      nextNode = tabbableNodes[mruTabIdx - 1];
                      navAcrossContainers = false;
                    }
                  }
                }
              }
            } else {
              if (!this.state.containerGroups.some((g) => g.tabbableNodes.some((n2) => getTabIndex(n2) > 0))) {
                navAcrossContainers = false;
              }
            }
          } else {
            navAcrossContainers = false;
          }
          if (navAcrossContainers) {
            nextNode = this.findNextNavNode({
              // move FROM the MRU node, not event-related node (which will be the node that is
              //  outside the trap causing the focus escape we're trying to fix)
              target: this.state.mostRecentlyFocusedNode,
              isBackward: this.config.isKeyBackward(this.state.recentNavEvent)
            });
          }
          if (nextNode) {
            this.tryFocus(nextNode);
          } else {
            this.tryFocus(this.state.mostRecentlyFocusedNode || this.getInitialFocusNode());
          }
        }
        this.state.recentNavEvent = void 0;
      });
      __publicField3(this, "handlePointerDown", (event) => {
        const target = getEventTarget(event);
        if (this.findContainerIndex(target, event) >= 0) {
          return;
        }
        if (valueOrHandler(this.config.clickOutsideDeactivates, event)) {
          this.deactivate({ returnFocus: this.config.returnFocusOnDeactivate });
          return;
        }
        if (valueOrHandler(this.config.allowOutsideClick, event)) {
          return;
        }
        event.preventDefault();
      });
      __publicField3(this, "handleClick", (event) => {
        const target = getEventTarget(event);
        if (this.findContainerIndex(target, event) >= 0) {
          return;
        }
        if (valueOrHandler(this.config.clickOutsideDeactivates, event)) {
          return;
        }
        if (valueOrHandler(this.config.allowOutsideClick, event)) {
          return;
        }
        event.preventDefault();
        event.stopImmediatePropagation();
      });
      __publicField3(this, "handleTabKey", (event) => {
        if (this.config.isKeyForward(event) || this.config.isKeyBackward(event)) {
          this.state.recentNavEvent = event;
          const isBackward = this.config.isKeyBackward(event);
          const destinationNode = this.findNextNavNode({ event, isBackward });
          if (!destinationNode) return;
          if (isTabEvent(event)) {
            event.preventDefault();
          }
          this.tryFocus(destinationNode);
        }
      });
      __publicField3(this, "handleEscapeKey", (event) => {
        if (isEscapeEvent(event) && valueOrHandler(this.config.escapeDeactivates, event) !== false) {
          event.preventDefault();
          this.deactivate();
        }
      });
      __publicField3(this, "_mutationObserver");
      __publicField3(this, "setupMutationObserver", () => {
        const win = this.doc.defaultView || window;
        this._mutationObserver = new win.MutationObserver((mutations) => {
          const isFocusedNodeRemoved = mutations.some((mutation) => {
            const removedNodes = Array.from(mutation.removedNodes);
            return removedNodes.some((node2) => node2 === this.state.mostRecentlyFocusedNode);
          });
          if (isFocusedNodeRemoved) {
            this.tryFocus(this.getInitialFocusNode());
          }
        });
      });
      __publicField3(this, "updateObservedNodes", () => {
        this._mutationObserver?.disconnect();
        if (this.state.active && !this.state.paused) {
          this.state.containers.map((container) => {
            this._mutationObserver?.observe(container, { subtree: true, childList: true });
          });
        }
      });
      __publicField3(this, "getInitialFocusNode", () => {
        let node2 = this.getNodeForOption("initialFocus", { hasFallback: true });
        if (node2 === false) {
          return false;
        }
        if (node2 === void 0 || node2 && !isFocusable(node2)) {
          if (this.findContainerIndex(this.doc.activeElement) >= 0) {
            node2 = this.doc.activeElement;
          } else {
            const firstTabbableGroup = this.state.tabbableGroups[0];
            const firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
            node2 = firstTabbableNode || this.getNodeForOption("fallbackFocus");
          }
        } else if (node2 === null) {
          node2 = this.getNodeForOption("fallbackFocus");
        }
        if (!node2) {
          throw new Error("Your focus-trap needs to have at least one focusable element");
        }
        if (!node2.isConnected) {
          node2 = this.getNodeForOption("fallbackFocus");
        }
        return node2;
      });
      __publicField3(this, "tryFocus", (node2) => {
        if (node2 === false) return;
        if (node2 === getActiveElement(this.doc)) return;
        if (!node2 || !node2.focus) {
          this.tryFocus(this.getInitialFocusNode());
          return;
        }
        node2.focus({ preventScroll: !!this.config.preventScroll });
        this.state.mostRecentlyFocusedNode = node2;
        if (isSelectableInput(node2)) {
          node2.select();
        }
      });
      __publicField3(this, "deactivate", (deactivateOptions) => {
        if (!this.state.active) return this;
        const options2 = {
          onDeactivate: this.config.onDeactivate,
          onPostDeactivate: this.config.onPostDeactivate,
          checkCanReturnFocus: this.config.checkCanReturnFocus,
          ...deactivateOptions
        };
        clearTimeout(this.state.delayInitialFocusTimer);
        this.state.delayInitialFocusTimer = void 0;
        this.removeListeners();
        this.state.active = false;
        this.state.paused = false;
        this.updateObservedNodes();
        activeFocusTraps.deactivateTrap(this.trapStack, this);
        const onDeactivate = this.getOption(options2, "onDeactivate");
        const onPostDeactivate = this.getOption(options2, "onPostDeactivate");
        const checkCanReturnFocus = this.getOption(options2, "checkCanReturnFocus");
        const returnFocus = this.getOption(options2, "returnFocus", "returnFocusOnDeactivate");
        onDeactivate?.();
        const finishDeactivation = () => {
          delay(() => {
            if (returnFocus) {
              const returnFocusNode = this.getReturnFocusNode(this.state.nodeFocusedBeforeActivation);
              this.tryFocus(returnFocusNode);
            }
            onPostDeactivate?.();
          });
        };
        if (returnFocus && checkCanReturnFocus) {
          const returnFocusNode = this.getReturnFocusNode(this.state.nodeFocusedBeforeActivation);
          checkCanReturnFocus(returnFocusNode).then(finishDeactivation, finishDeactivation);
          return this;
        }
        finishDeactivation();
        return this;
      });
      __publicField3(this, "pause", (pauseOptions) => {
        if (this.state.paused || !this.state.active) {
          return this;
        }
        const onPause = this.getOption(pauseOptions, "onPause");
        const onPostPause = this.getOption(pauseOptions, "onPostPause");
        this.state.paused = true;
        onPause?.();
        this.removeListeners();
        this.updateObservedNodes();
        onPostPause?.();
        return this;
      });
      __publicField3(this, "unpause", (unpauseOptions) => {
        if (!this.state.paused || !this.state.active) {
          return this;
        }
        const onUnpause = this.getOption(unpauseOptions, "onUnpause");
        const onPostUnpause = this.getOption(unpauseOptions, "onPostUnpause");
        this.state.paused = false;
        onUnpause?.();
        this.updateTabbableNodes();
        this.addListeners();
        this.updateObservedNodes();
        onPostUnpause?.();
        return this;
      });
      __publicField3(this, "updateContainerElements", (containerElements) => {
        this.state.containers = Array.isArray(containerElements) ? containerElements.filter(Boolean) : [containerElements].filter(Boolean);
        if (this.state.active) {
          this.updateTabbableNodes();
        }
        this.updateObservedNodes();
        return this;
      });
      __publicField3(this, "getReturnFocusNode", (previousActiveElement) => {
        const node2 = this.getNodeForOption("setReturnFocus", {
          params: [previousActiveElement]
        });
        return node2 ? node2 : node2 === false ? false : previousActiveElement;
      });
      __publicField3(this, "getOption", (configOverrideOptions, optionName, configOptionName) => {
        return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : (
          // @ts-expect-error
          this.config[configOptionName || optionName]
        );
      });
      __publicField3(this, "getNodeForOption", (optionName, { hasFallback = false, params = [] } = {}) => {
        let optionValue = this.config[optionName];
        if (typeof optionValue === "function") optionValue = optionValue(...params);
        if (optionValue === true) optionValue = void 0;
        if (!optionValue) {
          if (optionValue === void 0 || optionValue === false) {
            return optionValue;
          }
          throw new Error(`\`${optionName}\` was specified but was not a node, or did not return a node`);
        }
        let node2 = optionValue;
        if (typeof optionValue === "string") {
          try {
            node2 = this.doc.querySelector(optionValue);
          } catch (err) {
            throw new Error(`\`${optionName}\` appears to be an invalid selector; error="${err.message}"`);
          }
          if (!node2) {
            if (!hasFallback) {
              throw new Error(`\`${optionName}\` as selector refers to no known node`);
            }
          }
        }
        return node2;
      });
      __publicField3(this, "findNextNavNode", (opts) => {
        const { event, isBackward = false } = opts;
        const target = opts.target || getEventTarget(event);
        this.updateTabbableNodes();
        let destinationNode = null;
        if (this.state.tabbableGroups.length > 0) {
          const containerIndex = this.findContainerIndex(target, event);
          const containerGroup = containerIndex >= 0 ? this.state.containerGroups[containerIndex] : void 0;
          if (containerIndex < 0) {
            if (isBackward) {
              destinationNode = this.state.tabbableGroups[this.state.tabbableGroups.length - 1].lastTabbableNode;
            } else {
              destinationNode = this.state.tabbableGroups[0].firstTabbableNode;
            }
          } else if (isBackward) {
            let startOfGroupIndex = this.state.tabbableGroups.findIndex(
              ({ firstTabbableNode }) => target === firstTabbableNode
            );
            if (startOfGroupIndex < 0 && (containerGroup?.container === target || isFocusable(target) && !isTabbable(target) && !containerGroup?.nextTabbableNode(target, false))) {
              startOfGroupIndex = containerIndex;
            }
            if (startOfGroupIndex >= 0) {
              const destinationGroupIndex = startOfGroupIndex === 0 ? this.state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
              const destinationGroup = this.state.tabbableGroups[destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup?.nextTabbableNode(target, false);
            }
          } else {
            let lastOfGroupIndex = this.state.tabbableGroups.findIndex(
              ({ lastTabbableNode }) => target === lastTabbableNode
            );
            if (lastOfGroupIndex < 0 && (containerGroup?.container === target || isFocusable(target) && !isTabbable(target) && !containerGroup?.nextTabbableNode(target))) {
              lastOfGroupIndex = containerIndex;
            }
            if (lastOfGroupIndex >= 0) {
              const destinationGroupIndex = lastOfGroupIndex === this.state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
              const destinationGroup = this.state.tabbableGroups[destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? destinationGroup.firstTabbableNode : destinationGroup.firstDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup?.nextTabbableNode(target);
            }
          }
        } else {
          destinationNode = this.getNodeForOption("fallbackFocus");
        }
        return destinationNode;
      });
      this.trapStack = options.trapStack || sharedTrapStack;
      const config = {
        returnFocusOnDeactivate: true,
        escapeDeactivates: true,
        delayInitialFocus: true,
        isKeyForward(e2) {
          return isTabEvent(e2) && !e2.shiftKey;
        },
        isKeyBackward(e2) {
          return isTabEvent(e2) && e2.shiftKey;
        },
        ...options
      };
      this.doc = config.document || getDocument(Array.isArray(elements) ? elements[0] : elements);
      this.config = config;
      this.updateContainerElements(elements);
      this.setupMutationObserver();
    }
    get active() {
      return this.state.active;
    }
    get paused() {
      return this.state.paused;
    }
    findContainerIndex(element, event) {
      const composedPath = typeof event?.composedPath === "function" ? event.composedPath() : void 0;
      return this.state.containerGroups.findIndex(
        ({ container, tabbableNodes }) => container.contains(element) || composedPath?.includes(container) || tabbableNodes.find((node2) => node2 === element)
      );
    }
    updateTabbableNodes() {
      this.state.containerGroups = this.state.containers.map((container) => {
        const tabbableNodes = getTabbables(container);
        const focusableNodes = getFocusables(container);
        const firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
        const lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
        const firstDomTabbableNode = focusableNodes.find((node2) => isTabbable(node2));
        const lastDomTabbableNode = focusableNodes.slice().reverse().find((node2) => isTabbable(node2));
        const posTabIndexesFound = !!tabbableNodes.find((node2) => getTabIndex(node2) > 0);
        function nextTabbableNode(node2, forward = true) {
          const nodeIdx = tabbableNodes.indexOf(node2);
          if (nodeIdx < 0) {
            if (forward) {
              return focusableNodes.slice(focusableNodes.indexOf(node2) + 1).find((el) => isTabbable(el));
            }
            return focusableNodes.slice(0, focusableNodes.indexOf(node2)).reverse().find((el) => isTabbable(el));
          }
          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
        }
        return {
          container,
          tabbableNodes,
          focusableNodes,
          posTabIndexesFound,
          firstTabbableNode,
          lastTabbableNode,
          firstDomTabbableNode,
          lastDomTabbableNode,
          nextTabbableNode
        };
      });
      this.state.tabbableGroups = this.state.containerGroups.filter((group) => group.tabbableNodes.length > 0);
      if (this.state.tabbableGroups.length <= 0 && !this.getNodeForOption("fallbackFocus")) {
        throw new Error(
          "Your focus-trap must have at least one container with at least one tabbable node in it at all times"
        );
      }
      if (this.state.containerGroups.find((g) => g.posTabIndexesFound) && this.state.containerGroups.length > 1) {
        throw new Error(
          "At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps."
        );
      }
    }
    addListeners() {
      if (!this.state.active) return;
      activeFocusTraps.activateTrap(this.trapStack, this);
      this.state.delayInitialFocusTimer = this.config.delayInitialFocus ? delay(() => {
        this.tryFocus(this.getInitialFocusNode());
      }) : this.tryFocus(this.getInitialFocusNode());
      this.listenerCleanups.push(
        addDomEvent(this.doc, "focusin", this.handleFocus, true),
        addDomEvent(this.doc, "mousedown", this.handlePointerDown, { capture: true, passive: false }),
        addDomEvent(this.doc, "touchstart", this.handlePointerDown, { capture: true, passive: false }),
        addDomEvent(this.doc, "click", this.handleClick, { capture: true, passive: false }),
        addDomEvent(this.doc, "keydown", this.handleTabKey, { capture: true, passive: false }),
        addDomEvent(this.doc, "keydown", this.handleEscapeKey)
      );
      return this;
    }
    removeListeners() {
      if (!this.state.active) return;
      this.listenerCleanups.forEach((cleanup) => cleanup());
      this.listenerCleanups = [];
      return this;
    }
    activate(activateOptions) {
      if (this.state.active) {
        return this;
      }
      const onActivate = this.getOption(activateOptions, "onActivate");
      const onPostActivate = this.getOption(activateOptions, "onPostActivate");
      const checkCanFocusTrap = this.getOption(activateOptions, "checkCanFocusTrap");
      if (!checkCanFocusTrap) {
        this.updateTabbableNodes();
      }
      this.state.active = true;
      this.state.paused = false;
      this.state.nodeFocusedBeforeActivation = this.doc.activeElement || null;
      onActivate?.();
      const finishActivation = () => {
        if (checkCanFocusTrap) {
          this.updateTabbableNodes();
        }
        this.addListeners();
        this.updateObservedNodes();
        onPostActivate?.();
      };
      if (checkCanFocusTrap) {
        checkCanFocusTrap(this.state.containers.concat()).then(finishActivation, finishActivation);
        return this;
      }
      finishActivation();
      return this;
    }
  };
  var isTabEvent = (event) => event.key === "Tab";
  var valueOrHandler = (value, ...params) => typeof value === "function" ? value(...params) : value;
  var isEscapeEvent = (event) => !event.isComposing && event.key === "Escape";
  var delay = (fn) => setTimeout(fn, 0);
  var isSelectableInput = (node2) => node2.localName === "input" && "select" in node2 && typeof node2.select === "function";
  function trapFocus(el, options = {}) {
    let trap;
    const cleanup = raf(() => {
      const contentEl = typeof el === "function" ? el() : el;
      if (!contentEl) return;
      trap = new FocusTrap(contentEl, {
        escapeDeactivates: false,
        allowOutsideClick: true,
        preventScroll: true,
        returnFocusOnDeactivate: true,
        delayInitialFocus: false,
        fallbackFocus: contentEl,
        ...options,
        document: getDocument(contentEl)
      });
      try {
        trap.activate();
      } catch {
      }
    });
    return function destroy() {
      trap?.deactivate();
      cleanup();
    };
  }

  // node_modules/@zag-js/remove-scroll/dist/index.mjs
  var LOCK_CLASSNAME = "data-scroll-lock";
  function getPaddingProperty(documentElement) {
    const documentLeft = documentElement.getBoundingClientRect().left;
    const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;
    return scrollbarX ? "paddingLeft" : "paddingRight";
  }
  function preventBodyScroll(_document) {
    const doc = _document ?? document;
    const win = doc.defaultView ?? window;
    const { documentElement, body } = doc;
    const locked = body.hasAttribute(LOCK_CLASSNAME);
    if (locked) return;
    const scrollbarWidth = win.innerWidth - documentElement.clientWidth;
    body.setAttribute(LOCK_CLASSNAME, "");
    const setScrollbarWidthProperty = () => setStyleProperty(documentElement, "--scrollbar-width", `${scrollbarWidth}px`);
    const paddingProperty = getPaddingProperty(documentElement);
    const setBodyStyle = () => setStyle(body, {
      overflow: "hidden",
      [paddingProperty]: `${scrollbarWidth}px`
    });
    const setBodyStyleIOS = () => {
      const { scrollX, scrollY, visualViewport } = win;
      const offsetLeft = visualViewport?.offsetLeft ?? 0;
      const offsetTop = visualViewport?.offsetTop ?? 0;
      const restoreStyle = setStyle(body, {
        position: "fixed",
        overflow: "hidden",
        top: `${-(scrollY - Math.floor(offsetTop))}px`,
        left: `${-(scrollX - Math.floor(offsetLeft))}px`,
        right: "0",
        [paddingProperty]: `${scrollbarWidth}px`
      });
      return () => {
        restoreStyle?.();
        win.scrollTo({ left: scrollX, top: scrollY, behavior: "instant" });
      };
    };
    const cleanups = [setScrollbarWidthProperty(), isIos() ? setBodyStyleIOS() : setBodyStyle()];
    return () => {
      cleanups.forEach((fn) => fn?.());
      body.removeAttribute(LOCK_CLASSNAME);
    };
  }

  // node_modules/@zag-js/dialog/dist/index.mjs
  var anatomy8 = createAnatomy("dialog").parts(
    "trigger",
    "backdrop",
    "positioner",
    "content",
    "title",
    "description",
    "closeTrigger"
  );
  var parts8 = anatomy8.build();
  var getPositionerId3 = (ctx) => ctx.ids?.positioner ?? `dialog:${ctx.id}:positioner`;
  var getBackdropId = (ctx) => ctx.ids?.backdrop ?? `dialog:${ctx.id}:backdrop`;
  var getContentId4 = (ctx) => ctx.ids?.content ?? `dialog:${ctx.id}:content`;
  var getTriggerId3 = (ctx) => ctx.ids?.trigger ?? `dialog:${ctx.id}:trigger`;
  var getTitleId = (ctx) => ctx.ids?.title ?? `dialog:${ctx.id}:title`;
  var getDescriptionId = (ctx) => ctx.ids?.description ?? `dialog:${ctx.id}:description`;
  var getCloseTriggerId = (ctx) => ctx.ids?.closeTrigger ?? `dialog:${ctx.id}:close`;
  var getContentEl4 = (ctx) => ctx.getById(getContentId4(ctx));
  var getPositionerEl3 = (ctx) => ctx.getById(getPositionerId3(ctx));
  var getBackdropEl = (ctx) => ctx.getById(getBackdropId(ctx));
  var getTriggerEl3 = (ctx) => ctx.getById(getTriggerId3(ctx));
  var getTitleEl = (ctx) => ctx.getById(getTitleId(ctx));
  var getDescriptionEl = (ctx) => ctx.getById(getDescriptionId(ctx));
  var getCloseTriggerEl = (ctx) => ctx.getById(getCloseTriggerId(ctx));
  function connect2(service, normalize3) {
    const { state: state2, send, context, prop, scope } = service;
    const ariaLabel = prop("aria-label");
    const open = state2.matches("open");
    return {
      open,
      setOpen(nextOpen) {
        const open2 = state2.matches("open");
        if (open2 === nextOpen) return;
        send({ type: nextOpen ? "OPEN" : "CLOSE" });
      },
      getTriggerProps() {
        return normalize3.button({
          ...parts8.trigger.attrs,
          dir: prop("dir"),
          id: getTriggerId3(scope),
          "aria-haspopup": "dialog",
          type: "button",
          "aria-expanded": open,
          "data-state": open ? "open" : "closed",
          "aria-controls": getContentId4(scope),
          onClick(event) {
            if (event.defaultPrevented) return;
            send({ type: "TOGGLE" });
          }
        });
      },
      getBackdropProps() {
        return normalize3.element({
          ...parts8.backdrop.attrs,
          dir: prop("dir"),
          hidden: !open,
          id: getBackdropId(scope),
          "data-state": open ? "open" : "closed"
        });
      },
      getPositionerProps() {
        return normalize3.element({
          ...parts8.positioner.attrs,
          dir: prop("dir"),
          id: getPositionerId3(scope),
          style: {
            pointerEvents: open ? void 0 : "none"
          }
        });
      },
      getContentProps() {
        const rendered = context.get("rendered");
        return normalize3.element({
          ...parts8.content.attrs,
          dir: prop("dir"),
          role: prop("role"),
          hidden: !open,
          id: getContentId4(scope),
          tabIndex: -1,
          "data-state": open ? "open" : "closed",
          "aria-modal": true,
          "aria-label": ariaLabel || void 0,
          "aria-labelledby": ariaLabel || !rendered.title ? void 0 : getTitleId(scope),
          "aria-describedby": rendered.description ? getDescriptionId(scope) : void 0
        });
      },
      getTitleProps() {
        return normalize3.element({
          ...parts8.title.attrs,
          dir: prop("dir"),
          id: getTitleId(scope)
        });
      },
      getDescriptionProps() {
        return normalize3.element({
          ...parts8.description.attrs,
          dir: prop("dir"),
          id: getDescriptionId(scope)
        });
      },
      getCloseTriggerProps() {
        return normalize3.button({
          ...parts8.closeTrigger.attrs,
          dir: prop("dir"),
          id: getCloseTriggerId(scope),
          type: "button",
          onClick(event) {
            if (event.defaultPrevented) return;
            event.stopPropagation();
            send({ type: "CLOSE" });
          }
        });
      }
    };
  }
  var machine9 = createMachine({
    props({ props: props26, scope }) {
      const alertDialog = props26.role === "alertdialog";
      const initialFocusEl = alertDialog ? () => getCloseTriggerEl(scope) : void 0;
      const modal = typeof props26.modal === "boolean" ? props26.modal : true;
      return {
        role: "dialog",
        modal,
        trapFocus: modal,
        preventScroll: modal,
        closeOnInteractOutside: !alertDialog,
        closeOnEscape: true,
        restoreFocus: true,
        initialFocusEl,
        ...props26
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "closed";
    },
    context({ bindable }) {
      return {
        rendered: bindable(() => ({
          defaultValue: { title: true, description: true }
        }))
      };
    },
    watch({ track, action, prop }) {
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    states: {
      open: {
        entry: ["checkRenderedElements", "syncZIndex"],
        effects: ["trackDismissableElement", "trapFocus", "preventScroll", "hideContentBelow"],
        on: {
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          TOGGLE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ]
        }
      },
      closed: {
        on: {
          "CONTROLLED.OPEN": {
            target: "open"
          },
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          TOGGLE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ]
        }
      }
    },
    implementations: {
      guards: {
        isOpenControlled: ({ prop }) => prop("open") != void 0
      },
      effects: {
        trackDismissableElement({ scope, send, prop }) {
          const getContentEl22 = () => getContentEl4(scope);
          return trackDismissableElement(getContentEl22, {
            defer: true,
            pointerBlocking: prop("modal"),
            exclude: [getTriggerEl3(scope)],
            onInteractOutside(event) {
              prop("onInteractOutside")?.(event);
              if (!prop("closeOnInteractOutside")) {
                event.preventDefault();
              }
            },
            persistentElements: prop("persistentElements"),
            onFocusOutside: prop("onFocusOutside"),
            onPointerDownOutside: prop("onPointerDownOutside"),
            onEscapeKeyDown(event) {
              prop("onEscapeKeyDown")?.(event);
              if (!prop("closeOnEscape")) {
                event.preventDefault();
              }
            },
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside" });
            }
          });
        },
        preventScroll({ scope, prop }) {
          if (!prop("preventScroll")) return;
          return preventBodyScroll(scope.getDoc());
        },
        trapFocus({ scope, prop }) {
          if (!prop("trapFocus")) return;
          const contentEl = () => getContentEl4(scope);
          return trapFocus(contentEl, {
            preventScroll: true,
            returnFocusOnDeactivate: !!prop("restoreFocus"),
            initialFocus: prop("initialFocusEl"),
            setReturnFocus: (el) => prop("finalFocusEl")?.() ?? el
          });
        },
        hideContentBelow({ scope, prop }) {
          if (!prop("modal")) return;
          const getElements2 = () => [getContentEl4(scope)];
          return ariaHidden(getElements2, { defer: true });
        }
      },
      actions: {
        checkRenderedElements({ context, scope }) {
          raf(() => {
            context.set("rendered", {
              title: !!getTitleEl(scope),
              description: !!getDescriptionEl(scope)
            });
          });
        },
        syncZIndex({ scope }) {
          raf(() => {
            const contentEl = getContentEl4(scope);
            if (!contentEl) return;
            const styles = getComputedStyle(contentEl);
            const elems = [getPositionerEl3(scope), getBackdropEl(scope)];
            elems.forEach((node2) => {
              node2?.style.setProperty("--z-index", styles.zIndex);
              node2?.style.setProperty("--layer-index", styles.getPropertyValue("--layer-index"));
            });
          });
        },
        invokeOnClose({ prop }) {
          prop("onOpenChange")?.({ open: false });
        },
        invokeOnOpen({ prop }) {
          prop("onOpenChange")?.({ open: true });
        },
        toggleVisibility({ prop, send, event }) {
          send({
            type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
            previousEvent: event
          });
        }
      }
    }
  });
  var props9 = createProps()([
    "aria-label",
    "closeOnEscape",
    "closeOnInteractOutside",
    "dir",
    "finalFocusEl",
    "getRootNode",
    "getRootNode",
    "id",
    "id",
    "ids",
    "initialFocusEl",
    "modal",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "defaultOpen",
    "open",
    "persistentElements",
    "preventScroll",
    "restoreFocus",
    "role",
    "trapFocus"
  ]);
  var splitProps9 = createSplitProps(props9);

  // node_modules/@ark-ui/react/dist/components/dialog/use-dialog.js
  var import_react25 = __toESM(require_react(), 1);
  var useDialog = (props26) => {
    const id = (0, import_react25.useId)();
    const { getRootNode } = useEnvironmentContext();
    const { dir } = useLocaleContext();
    const machineProps = {
      id,
      getRootNode,
      dir,
      ...props26
    };
    const service = useMachine(machine9, machineProps);
    return connect2(service, normalizeProps);
  };

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-root.js
  var DialogRoot = (props26) => {
    const [presenceProps, { children, ...localProps }] = splitPresenceProps(props26);
    const [renderStrategyProps] = splitRenderStrategyProps(presenceProps);
    const dialog = useDialog(localProps);
    const presence = usePresence(mergeProps2({ present: dialog.open }, presenceProps));
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(DialogProvider, { value: dialog, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(RenderStrategyPropsProvider, { value: renderStrategyProps, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(PresenceProvider, { value: presence, children }) }) });
  };

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-root-provider.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var DialogRootProvider = (props26) => {
    const [presenceProps, { value: dialog, children }] = splitPresenceProps(props26);
    const [renderStrategyProps] = splitRenderStrategyProps(presenceProps);
    const presence = usePresence(mergeProps2({ present: dialog.open }, presenceProps));
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogProvider, { value: dialog, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(RenderStrategyPropsProvider, { value: renderStrategyProps, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PresenceProvider, { value: presence, children }) }) });
  };

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-title.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  var import_react29 = __toESM(require_react(), 1);
  var DialogTitle = (0, import_react29.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const mergedProps = mergeProps2(dialog.getTitleProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ark.h2, { ...mergedProps, ref });
  });
  DialogTitle.displayName = "DialogTitle";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog-trigger.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var import_react31 = __toESM(require_react(), 1);
  var DialogTrigger = (0, import_react31.forwardRef)((props26, ref) => {
    const dialog = useDialogContext();
    const presence = usePresenceContext();
    const mergedProps = mergeProps2(
      {
        ...dialog.getTriggerProps(),
        "aria-controls": presence.unmounted ? void 0 : dialog.getTriggerProps()["aria-controls"]
      },
      props26
    );
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(ark.button, { ...mergedProps, ref });
  });
  DialogTrigger.displayName = "DialogTrigger";

  // node_modules/@ark-ui/react/dist/components/dialog/dialog.js
  var dialog_exports = {};
  __export(dialog_exports, {
    Backdrop: () => DialogBackdrop,
    CloseTrigger: () => DialogCloseTrigger,
    Content: () => DialogContent,
    Context: () => DialogContext,
    Description: () => DialogDescription,
    Positioner: () => DialogPositioner,
    Root: () => DialogRoot,
    RootProvider: () => DialogRootProvider,
    Title: () => DialogTitle,
    Trigger: () => DialogTrigger
  });

  // node_modules/@zag-js/file-utils/dist/index.mjs
  var getItemEntry = (item) => typeof item.getAsEntry === "function" ? item.getAsEntry() : typeof item.webkitGetAsEntry === "function" ? item.webkitGetAsEntry() : null;
  var isDirectoryEntry = (entry) => entry.isDirectory;
  var isFileEntry = (entry) => entry.isFile;
  var addRelativePath = (file, path) => {
    Object.defineProperty(file, "relativePath", { value: path ? `${path}/${file.name}` : file.name });
    return file;
  };
  var getFileEntries = (items, traverseDirectories) => Promise.all(
    Array.from(items).filter((item) => item.kind === "file").map((item) => {
      const entry = getItemEntry(item);
      if (!entry) return null;
      if (isDirectoryEntry(entry) && traverseDirectories) {
        return getDirectoryFiles(entry.createReader(), `${entry.name}`);
      }
      if (isFileEntry(entry) && typeof item.getAsFile === "function") {
        const file = item.getAsFile();
        return Promise.resolve(file ? addRelativePath(file, "") : null);
      }
      if (isFileEntry(entry)) {
        return new Promise((resolve) => {
          entry.file((file) => {
            resolve(addRelativePath(file, ""));
          });
        });
      }
    }).filter((b2) => b2)
  );
  var getDirectoryFiles = (reader, path = "") => new Promise((resolve) => {
    const entryPromises = [];
    const readDirectoryEntries = () => {
      reader.readEntries((entries) => {
        if (entries.length === 0) {
          resolve(Promise.all(entryPromises).then((entries2) => entries2.flat()));
          return;
        }
        const promises = entries.map((entry) => {
          if (!entry) return null;
          if (isDirectoryEntry(entry)) {
            return getDirectoryFiles(entry.createReader(), `${path}${entry.name}`);
          }
          if (isFileEntry(entry)) {
            return new Promise((resolve2) => {
              entry.file((file) => {
                resolve2(addRelativePath(file, path));
              });
            });
          }
        }).filter((b2) => b2);
        entryPromises.push(Promise.all(promises));
        readDirectoryEntries();
      });
    };
    readDirectoryEntries();
  });
  function isMIMEType(v) {
    return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
  }
  function isExt(v) {
    return /^.*\.[\w]+$/.test(v);
  }
  var isValidMIME = (v) => isMIMEType(v) || isExt(v);
  function getAcceptAttrString(accept) {
    if (accept == null) return;
    if (typeof accept === "string") {
      return accept;
    }
    if (Array.isArray(accept)) {
      return accept.filter(isValidMIME).join(",");
    }
    return Object.entries(accept).reduce((a, [mimeType, ext]) => [...a, mimeType, ...ext], []).filter(isValidMIME).join(",");
  }
  var isFileEqual = (file1, file2) => {
    return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type;
  };
  var isDefined = (v) => v !== void 0 && v !== null;
  function isValidFileSize(file, minSize, maxSize) {
    if (isDefined(file.size)) {
      if (isDefined(minSize) && isDefined(maxSize)) {
        if (file.size > maxSize) return [false, "FILE_TOO_LARGE"];
        if (file.size < minSize) return [false, "FILE_TOO_SMALL"];
      } else if (isDefined(minSize) && file.size < minSize) {
        return [false, "FILE_TOO_SMALL"];
      } else if (isDefined(maxSize) && file.size > maxSize) {
        return [false, "FILE_TOO_LARGE"];
      }
    }
    return [true, null];
  }
  var mimeTypes = "3g2_video/3gpp2[3gp,3gpp_video/3gpp[3mf_model/3mf[7z_application/x-7z-compressed[aac_audio/aac[ac_application/pkix-attr-cert[adp_audio/adpcm[adts_audio/aac[ai_application/postscript[aml_application/automationml-aml+xml[amlx_application/automationml-amlx+zip[amr_audio/amr[apk_application/vnd.android.package-archive[apng_image/apng[appcache,manifest_text/cache-manifest[appinstaller_application/appinstaller[appx_application/appx[appxbundle_application/appxbundle[asc_application/pgp-keys[atom_application/atom+xml[atomcat_application/atomcat+xml[atomdeleted_application/atomdeleted+xml[atomsvc_application/atomsvc+xml[au,snd_audio/basic[avi_video/x-msvideo[avci_image/avci[avcs_image/avcs[avif_image/avif[aw_application/applixware[bdoc_application/bdoc[bin,bpk,buffer,deb,deploy,dist,distz,dll,dmg,dms,dump,elc,exe,img,iso,lrf,mar,msi,msm,msp,pkg,so_application/octet-stream[bmp,dib_image/bmp[btf,btif_image/prs.btif[bz2_application/x-bzip2[c_text/x-c[ccxml_application/ccxml+xml[cdfx_application/cdfx+xml[cdmia_application/cdmi-capability[cdmic_application/cdmi-container[cdmid_application/cdmi-domain[cdmio_application/cdmi-object[cdmiq_application/cdmi-queue[cer_application/pkix-cert[cgm_image/cgm[cjs_application/node[class_application/java-vm[coffee,litcoffee_text/coffeescript[conf,def,in,ini,list,log,text,txt_text/plain[cpp,cxx,cc_text/x-c++src[cpl_application/cpl+xml[cpt_application/mac-compactpro[crl_application/pkix-crl[css_text/css[csv_text/csv[cu_application/cu-seeme[cwl_application/cwl[cww_application/prs.cww[davmount_application/davmount+xml[dbk_application/docbook+xml[doc_application/msword[docx_application/vnd.openxmlformats-officedocument.wordprocessingml.document[dsc_text/prs.lines.tag[dssc_application/dssc+der[dtd_application/xml-dtd[dwd_application/atsc-dwd+xml[ear,jar,war_application/java-archive[ecma_application/ecmascript[emf_image/emf[eml,mime_message/rfc822[emma_application/emma+xml[emotionml_application/emotionml+xml[eot_application/vnd.ms-fontobject[eps,ps_application/postscript[epub_application/epub+zip[exi_application/exi[exp_application/express[exr_image/aces[ez_application/andrew-inset[fdf_application/fdf[fdt_application/fdt+xml[fits_image/fits[flac_audio/flac[flv_video/x-flv[g3_image/g3fax[geojson_application/geo+json[gif_image/gif[glb_model/gltf-binary[gltf_model/gltf+json[gml_application/gml+xml[go_text/x-go[gpx_application/gpx+xml[gz_application/gzip[h_text/x-h[h261_video/h261[h263_video/h263[h264_video/h264[heic_image/heic[heics_image/heic-sequence[heif_image/heif[heifs_image/heif-sequence[htm,html,shtml_text/html[ico_image/x-icon[icns_image/x-icns[ics,ifb_text/calendar[iges,igs_model/iges[ink,inkml_application/inkml+xml[ipa_application/octet-stream[java_text/x-java-source[jp2,jpg2_image/jp2[jpeg,jpe,jpg_image/jpeg[jpf,jpx_image/jpx[jpm,jpgm_image/jpm[jpgv_video/jpeg[jph_image/jph[js,mjs_text/javascript[json_application/json[json5_application/json5[jsonld_application/ld+json[jsx_text/jsx[jxl_image/jxl[jxr_image/jxr[ktx_image/ktx[ktx2_image/ktx2[less_text/less[m1v,m2v,mpe,mpeg,mpg_video/mpeg[m4a_audio/mp4[m4v_video/x-m4v[md,markdown_text/markdown[mid,midi,kar,rmi_audio/midi[mkv_video/x-matroska[mp2,mp2a,mp3,mpga,m3a,m2a_audio/mpeg[mp4,mp4v,mpg4_video/mp4[mp4a_audio/mp4[mp4s,m4p_application/mp4[odp_application/vnd.oasis.opendocument.presentation[oda_application/oda[ods_application/vnd.oasis.opendocument.spreadsheet[odt_application/vnd.oasis.opendocument.text[oga,ogg,opus,spx_audio/ogg[ogv_video/ogg[ogx_application/ogg[otf_font/otf[p12,pfx_application/x-pkcs12[pdf_application/pdf[pem_application/x-pem-file[php_text/x-php[png_image/png[ppt_application/vnd.ms-powerpoint[pptx_application/vnd.openxmlformats-officedocument.presentationml.presentation[pskcxml_application/pskc+xml[psd_image/vnd.adobe.photoshop[py_text/x-python[qt,mov_video/quicktime[rar_application/vnd.rar[rdf_application/rdf+xml[rtf_text/rtf[sass_text/x-sass[scss_text/x-scss[sgm,sgml_text/sgml[sh_application/x-sh[svg,svgz_image/svg+xml[swf_application/x-shockwave-flash[tar_application/x-tar[tif,tiff_image/tiff[toml_application/toml[ts_video/mp2t[tsx_text/tsx[tsv_text/tab-separated-values[ttc_font/collection[ttf_font/ttf[vtt_text/vtt[wasm_application/wasm[wav_audio/wav[weba_audio/webm[webm_video/webm[webmanifest_application/manifest+json[webp_image/webp[wma_audio/x-ms-wma[wmv_video/x-ms-wmv[woff_font/woff[woff2_font/woff2[xls_application/vnd.ms-excel[xlsx_application/vnd.openxmlformats-officedocument.spreadsheetml.sheet[xml_application/xml[xz_application/x-xz[yaml,yml_text/yaml[zip_application/zip";
  var mimeTypesMap = new Map(
    mimeTypes.split("[").flatMap((mime) => {
      const [extensions, mimeType] = mime.split("_");
      return extensions.split(",").map((ext) => [ext, mimeType]);
    })
  );
  function getFileMimeType(name) {
    const extension = name.split(".").pop();
    return extension ? mimeTypesMap.get(extension) || null : null;
  }
  function isFileAccepted(file, accept) {
    if (file && accept) {
      const types = Array.isArray(accept) ? accept : typeof accept === "string" ? accept.split(",") : [];
      if (types.length === 0) return true;
      const fileName = file.name || "";
      const mimeType = (file.type || getFileMimeType(fileName) || "").toLowerCase();
      const baseMimeType = mimeType.replace(/\/.*$/, "");
      return types.some((type) => {
        const validType = type.trim().toLowerCase();
        if (validType.charAt(0) === ".") {
          return fileName.toLowerCase().endsWith(validType);
        }
        if (validType.endsWith("/*")) {
          return baseMimeType === validType.replace(/\/.*$/, "");
        }
        return mimeType === validType;
      });
    }
    return true;
  }
  function isValidFileType(file, accept) {
    const isAcceptable = file.type === "application/x-moz-file" || isFileAccepted(file, accept);
    return [isAcceptable, isAcceptable ? null : "FILE_INVALID_TYPE"];
  }

  // node_modules/@ark-ui/react/dist/components/editable/editable-area.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var import_react33 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/editable/use-editable-context.js
  var [EditableProvider, useEditableContext] = createContext6({
    name: "EditableContext",
    hookName: "useEditableContext",
    providerName: "<EditableProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/editable/editable-area.js
  var EditableArea = (0, import_react33.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getAreaProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ark.div, { ...mergedProps, ref });
  });
  EditableArea.displayName = "EditableArea";

  // node_modules/@ark-ui/react/dist/components/editable/editable-cancel-trigger.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var import_react35 = __toESM(require_react(), 1);
  var EditableCancelTrigger = (0, import_react35.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getCancelTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ark.button, { ...mergedProps, ref });
  });
  EditableCancelTrigger.displayName = "EditableCancelTrigger";

  // node_modules/@ark-ui/react/dist/components/editable/editable-context.js
  var EditableContext = (props26) => props26.children(useEditableContext());

  // node_modules/@ark-ui/react/dist/components/editable/editable-control.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var import_react37 = __toESM(require_react(), 1);
  var EditableControl = (0, import_react37.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getControlProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ark.div, { ...mergedProps, ref });
  });
  EditableControl.displayName = "EditableControl";

  // node_modules/@ark-ui/react/dist/components/editable/editable-edit-trigger.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var import_react39 = __toESM(require_react(), 1);
  var EditableEditTrigger = (0, import_react39.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getEditTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ark.button, { ...mergedProps, ref });
  });
  EditableEditTrigger.displayName = "EditableEditTrigger";

  // node_modules/@ark-ui/react/dist/components/editable/editable-input.js
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var import_react41 = __toESM(require_react(), 1);
  var EditableInput = (0, import_react41.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getInputProps(), props26);
    const field = useFieldContext();
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ark.input, { "aria-describedby": field?.ariaDescribedby, ...mergedProps, ref });
  });
  EditableInput.displayName = "EditableInput";

  // node_modules/@ark-ui/react/dist/components/editable/editable-label.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var import_react43 = __toESM(require_react(), 1);
  var EditableLabel = (0, import_react43.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getLabelProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ark.label, { ...mergedProps, ref });
  });
  EditableLabel.displayName = "EditableLabel";

  // node_modules/@ark-ui/react/dist/components/editable/editable-preview.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var import_react45 = __toESM(require_react(), 1);
  var EditablePreview = (0, import_react45.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getPreviewProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ark.span, { ...mergedProps, ref });
  });
  EditablePreview.displayName = "EditablePreview";

  // node_modules/@ark-ui/react/dist/components/editable/editable-root.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var import_react49 = __toESM(require_react(), 1);

  // node_modules/@zag-js/editable/dist/index.mjs
  var anatomy9 = createAnatomy("editable").parts(
    "root",
    "area",
    "label",
    "preview",
    "input",
    "editTrigger",
    "submitTrigger",
    "cancelTrigger",
    "control"
  );
  var parts9 = anatomy9.build();
  var getRootId4 = (ctx) => ctx.ids?.root ?? `editable:${ctx.id}`;
  var getAreaId2 = (ctx) => ctx.ids?.area ?? `editable:${ctx.id}:area`;
  var getLabelId = (ctx) => ctx.ids?.label ?? `editable:${ctx.id}:label`;
  var getPreviewId = (ctx) => ctx.ids?.preview ?? `editable:${ctx.id}:preview`;
  var getInputId3 = (ctx) => ctx.ids?.input ?? `editable:${ctx.id}:input`;
  var getControlId3 = (ctx) => ctx.ids?.control ?? `editable:${ctx.id}:control`;
  var getSubmitTriggerId = (ctx) => ctx.ids?.submitTrigger ?? `editable:${ctx.id}:submit`;
  var getCancelTriggerId = (ctx) => ctx.ids?.cancelTrigger ?? `editable:${ctx.id}:cancel`;
  var getEditTriggerId = (ctx) => ctx.ids?.editTrigger ?? `editable:${ctx.id}:edit`;
  var getInputEl3 = (ctx) => ctx.getById(getInputId3(ctx));
  var getPreviewEl = (ctx) => ctx.getById(getPreviewId(ctx));
  var getSubmitTriggerEl = (ctx) => ctx.getById(getSubmitTriggerId(ctx));
  var getCancelTriggerEl = (ctx) => ctx.getById(getCancelTriggerId(ctx));
  var getEditTriggerEl = (ctx) => ctx.getById(getEditTriggerId(ctx));
  function connect3(service, normalize3) {
    const { state: state2, context, send, prop, scope, computed } = service;
    const disabled = prop("disabled");
    const interactive = computed("isInteractive");
    const readOnly = prop("readOnly");
    const invalid = prop("invalid");
    const autoResize = prop("autoResize");
    const translations = prop("translations");
    const editing = state2.matches("edit");
    const placeholderProp = prop("placeholder");
    const placeholder = typeof placeholderProp === "string" ? { edit: placeholderProp, preview: placeholderProp } : placeholderProp;
    const value = context.get("value");
    const empty2 = value.trim() === "";
    const valueText = empty2 ? placeholder?.preview ?? "" : value;
    return {
      editing,
      empty: empty2,
      value,
      valueText,
      setValue(value2) {
        send({ type: "VALUE.SET", value: value2, src: "setValue" });
      },
      clearValue() {
        send({ type: "VALUE.SET", value: "", src: "clearValue" });
      },
      edit() {
        if (!interactive) return;
        send({ type: "EDIT" });
      },
      cancel() {
        if (!interactive) return;
        send({ type: "CANCEL" });
      },
      submit() {
        if (!interactive) return;
        send({ type: "SUBMIT" });
      },
      getRootProps() {
        return normalize3.element({
          ...parts9.root.attrs,
          id: getRootId4(scope),
          dir: prop("dir")
        });
      },
      getAreaProps() {
        return normalize3.element({
          ...parts9.area.attrs,
          id: getAreaId2(scope),
          dir: prop("dir"),
          style: autoResize ? { display: "inline-grid" } : void 0,
          "data-focus": dataAttr(editing),
          "data-disabled": dataAttr(disabled),
          "data-placeholder-shown": dataAttr(empty2)
        });
      },
      getLabelProps() {
        return normalize3.label({
          ...parts9.label.attrs,
          id: getLabelId(scope),
          dir: prop("dir"),
          htmlFor: getInputId3(scope),
          "data-focus": dataAttr(editing),
          "data-invalid": dataAttr(invalid),
          onClick() {
            if (editing) return;
            const previewEl = getPreviewEl(scope);
            previewEl?.focus({ preventScroll: true });
          }
        });
      },
      getInputProps() {
        return normalize3.input({
          ...parts9.input.attrs,
          dir: prop("dir"),
          "aria-label": translations?.input,
          name: prop("name"),
          form: prop("form"),
          id: getInputId3(scope),
          hidden: autoResize ? void 0 : !editing,
          placeholder: placeholder?.edit,
          maxLength: prop("maxLength"),
          required: prop("required"),
          disabled,
          "data-disabled": dataAttr(disabled),
          readOnly,
          "data-readonly": dataAttr(readOnly),
          "aria-invalid": ariaAttr(invalid),
          "data-invalid": dataAttr(invalid),
          "data-autoresize": dataAttr(autoResize),
          defaultValue: value,
          size: autoResize ? 1 : void 0,
          onChange(event) {
            send({
              type: "VALUE.SET",
              src: "input.change",
              value: event.currentTarget.value
            });
          },
          onKeyDown(event) {
            if (event.defaultPrevented) return;
            if (isComposingEvent(event)) return;
            const keyMap2 = {
              Escape() {
                send({ type: "CANCEL" });
                event.preventDefault();
              },
              Enter(event2) {
                if (!computed("submitOnEnter")) return;
                const { localName } = event2.currentTarget;
                if (localName === "textarea") {
                  const submitMod = isApple() ? event2.metaKey : event2.ctrlKey;
                  if (!submitMod) return;
                  send({ type: "SUBMIT", src: "keydown.enter" });
                  return;
                }
                if (localName === "input" && !event2.shiftKey && !event2.metaKey) {
                  send({ type: "SUBMIT", src: "keydown.enter" });
                  event2.preventDefault();
                }
              }
            };
            const exec = keyMap2[event.key];
            if (exec) {
              exec(event);
            }
          },
          style: autoResize ? {
            gridArea: "1 / 1 / auto / auto",
            visibility: !editing ? "hidden" : void 0
          } : void 0
        });
      },
      getPreviewProps() {
        return normalize3.element({
          id: getPreviewId(scope),
          ...parts9.preview.attrs,
          dir: prop("dir"),
          "data-placeholder-shown": dataAttr(empty2),
          "aria-readonly": ariaAttr(readOnly),
          "data-readonly": dataAttr(disabled),
          "data-disabled": dataAttr(disabled),
          "aria-disabled": ariaAttr(disabled),
          "aria-invalid": ariaAttr(invalid),
          "data-invalid": dataAttr(invalid),
          "aria-label": translations?.edit,
          "data-autoresize": dataAttr(autoResize),
          children: valueText,
          hidden: autoResize ? void 0 : editing,
          tabIndex: interactive ? 0 : void 0,
          onClick() {
            if (!interactive) return;
            if (prop("activationMode") !== "click") return;
            send({ type: "EDIT", src: "click" });
          },
          onFocus() {
            if (!interactive) return;
            if (prop("activationMode") !== "focus") return;
            send({ type: "EDIT", src: "focus" });
          },
          onDoubleClick(event) {
            if (event.defaultPrevented) return;
            if (!interactive) return;
            if (prop("activationMode") !== "dblclick") return;
            send({ type: "EDIT", src: "dblclick" });
          },
          style: autoResize ? {
            whiteSpace: "pre",
            userSelect: "none",
            gridArea: "1 / 1 / auto / auto",
            visibility: editing ? "hidden" : void 0,
            // in event the preview overflow's the parent element
            overflow: "hidden",
            textOverflow: "ellipsis"
          } : void 0
        });
      },
      getEditTriggerProps() {
        return normalize3.button({
          ...parts9.editTrigger.attrs,
          id: getEditTriggerId(scope),
          dir: prop("dir"),
          "aria-label": translations?.edit,
          hidden: editing,
          type: "button",
          disabled,
          onClick(event) {
            if (event.defaultPrevented) return;
            if (!interactive) return;
            send({ type: "EDIT", src: "edit.click" });
          }
        });
      },
      getControlProps() {
        return normalize3.element({
          id: getControlId3(scope),
          ...parts9.control.attrs,
          dir: prop("dir")
        });
      },
      getSubmitTriggerProps() {
        return normalize3.button({
          ...parts9.submitTrigger.attrs,
          dir: prop("dir"),
          id: getSubmitTriggerId(scope),
          "aria-label": translations?.submit,
          hidden: !editing,
          disabled,
          type: "button",
          onClick(event) {
            if (event.defaultPrevented) return;
            if (!interactive) return;
            send({ type: "SUBMIT", src: "submit.click" });
          }
        });
      },
      getCancelTriggerProps() {
        return normalize3.button({
          ...parts9.cancelTrigger.attrs,
          dir: prop("dir"),
          "aria-label": translations?.cancel,
          id: getCancelTriggerId(scope),
          hidden: !editing,
          type: "button",
          disabled,
          onClick(event) {
            if (event.defaultPrevented) return;
            if (!interactive) return;
            send({ type: "CANCEL", src: "cancel.click" });
          }
        });
      }
    };
  }
  var machine10 = createMachine({
    props({ props: props26 }) {
      return {
        activationMode: "focus",
        submitMode: "both",
        defaultValue: "",
        selectOnFocus: true,
        ...props26,
        translations: {
          input: "editable input",
          edit: "edit",
          submit: "submit",
          cancel: "cancel",
          ...props26.translations
        }
      };
    },
    initialState({ prop }) {
      const edit = prop("edit") || prop("defaultEdit");
      return edit ? "edit" : "preview";
    },
    entry: ["focusInputIfNeeded"],
    context: ({ bindable, prop }) => {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            return prop("onValueChange")?.({ value });
          }
        })),
        previousValue: bindable(() => ({
          defaultValue: ""
        }))
      };
    },
    watch({ track, action, context, prop }) {
      track([() => context.get("value")], () => {
        action(["syncInputValue"]);
      });
      track([() => prop("edit")], () => {
        action(["toggleEditing"]);
      });
    },
    computed: {
      submitOnEnter({ prop }) {
        const submitMode = prop("submitMode");
        return submitMode === "both" || submitMode === "enter";
      },
      submitOnBlur({ prop }) {
        const submitMode = prop("submitMode");
        return submitMode === "both" || submitMode === "blur";
      },
      isInteractive({ prop }) {
        return !(prop("disabled") || prop("readOnly"));
      }
    },
    on: {
      "VALUE.SET": {
        actions: ["setValue"]
      }
    },
    states: {
      preview: {
        entry: ["blurInputIfNeeded"],
        on: {
          "CONTROLLED.EDIT": {
            target: "edit",
            actions: ["setPreviousValue", "focusInput"]
          },
          EDIT: [
            {
              guard: "isEditControlled",
              actions: ["invokeOnEdit"]
            },
            {
              target: "edit",
              actions: ["setPreviousValue", "focusInput", "invokeOnEdit"]
            }
          ]
        }
      },
      edit: {
        effects: ["trackInteractOutside"],
        on: {
          "CONTROLLED.PREVIEW": [
            {
              guard: "isSubmitEvent",
              target: "preview",
              actions: ["setPreviousValue", "restoreFocus", "invokeOnSubmit"]
            },
            {
              target: "preview",
              actions: ["revertValue", "restoreFocus", "invokeOnCancel"]
            }
          ],
          CANCEL: [
            {
              guard: "isEditControlled",
              actions: ["invokeOnPreview"]
            },
            {
              target: "preview",
              actions: ["revertValue", "restoreFocus", "invokeOnCancel", "invokeOnPreview"]
            }
          ],
          SUBMIT: [
            {
              guard: "isEditControlled",
              actions: ["invokeOnPreview"]
            },
            {
              target: "preview",
              actions: ["setPreviousValue", "restoreFocus", "invokeOnSubmit", "invokeOnPreview"]
            }
          ]
        }
      }
    },
    implementations: {
      guards: {
        isEditControlled: ({ prop }) => prop("edit") != void 0,
        isSubmitEvent: ({ event }) => event.previousEvent?.type === "SUBMIT"
      },
      effects: {
        trackInteractOutside({ send, scope, prop, computed }) {
          return trackInteractOutside(getInputEl3(scope), {
            exclude(target) {
              const ignore = [getCancelTriggerEl(scope), getSubmitTriggerEl(scope)];
              return ignore.some((el) => contains(el, target));
            },
            onFocusOutside: prop("onFocusOutside"),
            onPointerDownOutside: prop("onPointerDownOutside"),
            onInteractOutside(event) {
              prop("onInteractOutside")?.(event);
              if (event.defaultPrevented) return;
              const { focusable } = event.detail;
              send({
                type: computed("submitOnBlur") ? "SUBMIT" : "CANCEL",
                src: "interact-outside",
                focusable
              });
            }
          });
        }
      },
      actions: {
        restoreFocus({ event, scope, prop }) {
          if (event.focusable) return;
          raf(() => {
            const finalEl = prop("finalFocusEl")?.() ?? getEditTriggerEl(scope);
            finalEl?.focus({ preventScroll: true });
          });
        },
        clearValue({ context }) {
          context.set("value", "");
        },
        focusInputIfNeeded({ action, prop }) {
          const edit = prop("edit") || prop("defaultEdit");
          if (!edit) return;
          action(["focusInput"]);
        },
        focusInput({ scope, prop }) {
          raf(() => {
            const inputEl = getInputEl3(scope);
            if (!inputEl) return;
            if (prop("selectOnFocus")) {
              inputEl.select();
            } else {
              inputEl.focus({ preventScroll: true });
            }
          });
        },
        invokeOnCancel({ prop, context }) {
          const prev3 = context.get("previousValue");
          prop("onValueRevert")?.({ value: prev3 });
        },
        invokeOnSubmit({ prop, context }) {
          const value = context.get("value");
          prop("onValueCommit")?.({ value });
        },
        invokeOnEdit({ prop }) {
          prop("onEditChange")?.({ edit: true });
        },
        invokeOnPreview({ prop }) {
          prop("onEditChange")?.({ edit: false });
        },
        toggleEditing({ prop, send, event }) {
          send({
            type: prop("edit") ? "CONTROLLED.EDIT" : "CONTROLLED.PREVIEW",
            previousEvent: event
          });
        },
        syncInputValue({ context, scope }) {
          const inputEl = getInputEl3(scope);
          if (!inputEl) return;
          setElementValue(inputEl, context.get("value"));
        },
        setValue({ context, prop, event }) {
          const max4 = prop("maxLength");
          const value = max4 != null ? event.value.slice(0, max4) : event.value;
          context.set("value", value);
        },
        setPreviousValue({ context }) {
          context.set("previousValue", context.get("value"));
        },
        revertValue({ context }) {
          const value = context.get("previousValue");
          if (!value) return;
          context.set("value", value);
        },
        blurInputIfNeeded({ scope }) {
          getInputEl3(scope)?.blur();
        }
      }
    }
  });
  var props10 = createProps()([
    "activationMode",
    "autoResize",
    "dir",
    "disabled",
    "finalFocusEl",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "maxLength",
    "name",
    "onEditChange",
    "onFocusOutside",
    "onInteractOutside",
    "onPointerDownOutside",
    "onValueChange",
    "onValueCommit",
    "onValueRevert",
    "placeholder",
    "readOnly",
    "required",
    "selectOnFocus",
    "edit",
    "defaultEdit",
    "submitMode",
    "translations",
    "defaultValue",
    "value"
  ]);
  var splitProps10 = createSplitProps(props10);

  // node_modules/@ark-ui/react/dist/components/editable/use-editable.js
  var import_react47 = __toESM(require_react(), 1);
  var useEditable = (props26) => {
    const id = (0, import_react47.useId)();
    const { getRootNode } = useEnvironmentContext();
    const { dir } = useLocaleContext();
    const field = useFieldContext();
    const machineProps = {
      id,
      ids: {
        label: field?.ids.label,
        input: field?.ids.control
      },
      dir,
      disabled: field?.disabled,
      invalid: field?.invalid,
      readOnly: field?.readOnly,
      required: field?.required,
      getRootNode,
      ...props26
    };
    const service = useMachine(machine10, machineProps);
    return connect3(service, normalizeProps);
  };

  // node_modules/@ark-ui/react/dist/components/editable/editable-root.js
  var EditableRoot = (0, import_react49.forwardRef)((props26, ref) => {
    const [useEditableProps, localProps] = createSplitProps2()(props26, [
      "activationMode",
      "autoResize",
      "defaultEdit",
      "defaultValue",
      "disabled",
      "edit",
      "finalFocusEl",
      "form",
      "id",
      "ids",
      "invalid",
      "maxLength",
      "name",
      "onEditChange",
      "onFocusOutside",
      "onInteractOutside",
      "onPointerDownOutside",
      "onValueChange",
      "onValueCommit",
      "onValueRevert",
      "placeholder",
      "readOnly",
      "required",
      "selectOnFocus",
      "submitMode",
      "translations",
      "value"
    ]);
    const editable = useEditable(useEditableProps);
    const mergedProps = mergeProps2(editable.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(EditableProvider, { value: editable, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  EditableRoot.displayName = "EditableRoot";

  // node_modules/@ark-ui/react/dist/components/editable/editable-root-provider.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var import_react51 = __toESM(require_react(), 1);
  var EditableRootProvider = (0, import_react51.forwardRef)((props26, ref) => {
    const [{ value: editable }, localProps] = createSplitProps2()(props26, ["value"]);
    const mergedProps = mergeProps2(editable.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(EditableProvider, { value: editable, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  EditableRootProvider.displayName = "EditableRootProvider";

  // node_modules/@ark-ui/react/dist/components/editable/editable-submit-trigger.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var import_react53 = __toESM(require_react(), 1);
  var EditableSubmitTrigger = (0, import_react53.forwardRef)((props26, ref) => {
    const editable = useEditableContext();
    const mergedProps = mergeProps2(editable.getSubmitTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ark.button, { ...mergedProps, ref });
  });
  EditableSubmitTrigger.displayName = "EditableSubmitTrigger";

  // node_modules/@ark-ui/react/dist/components/editable/editable.js
  var editable_exports = {};
  __export(editable_exports, {
    Area: () => EditableArea,
    CancelTrigger: () => EditableCancelTrigger,
    Context: () => EditableContext,
    Control: () => EditableControl,
    EditTrigger: () => EditableEditTrigger,
    Input: () => EditableInput,
    Label: () => EditableLabel,
    Preview: () => EditablePreview,
    Root: () => EditableRoot,
    RootProvider: () => EditableRootProvider,
    SubmitTrigger: () => EditableSubmitTrigger
  });

  // node_modules/@ark-ui/react/dist/components/field/field-context.js
  var FieldContext = (props26) => props26.children(useFieldContext());

  // node_modules/@ark-ui/react/dist/components/field/field-error-text.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var import_react55 = __toESM(require_react(), 1);
  var FieldErrorText = (0, import_react55.forwardRef)((props26, ref) => {
    const field = useFieldContext();
    const mergedProps = mergeProps2(field.getErrorTextProps(), props26);
    if (field?.invalid) {
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(ark.span, { ...mergedProps, ref });
    }
    return null;
  });
  FieldErrorText.displayName = "FieldErrorText";

  // node_modules/@ark-ui/react/dist/components/field/field-helper-text.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  var import_react57 = __toESM(require_react(), 1);
  var FieldHelperText = (0, import_react57.forwardRef)((props26, ref) => {
    const field = useFieldContext();
    const mergedProps = mergeProps2(field?.getHelperTextProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ark.span, { ...mergedProps, ref });
  });
  FieldHelperText.displayName = "FieldHelperText";

  // node_modules/@ark-ui/react/dist/components/field/field-input.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var import_react59 = __toESM(require_react(), 1);
  var FieldInput = (0, import_react59.forwardRef)((props26, ref) => {
    const field = useFieldContext();
    const mergedProps = mergeProps2(field?.getInputProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ark.input, { ...mergedProps, ref });
  });
  FieldInput.displayName = "FieldInput";

  // node_modules/@ark-ui/react/dist/components/field/field-label.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var import_react61 = __toESM(require_react(), 1);
  var FieldLabel = (0, import_react61.forwardRef)((props26, ref) => {
    const field = useFieldContext();
    const mergedProps = mergeProps2(field?.getLabelProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ark.label, { ...mergedProps, ref });
  });
  FieldLabel.displayName = "FieldLabel";

  // node_modules/@ark-ui/react/dist/components/field/field-required-indicator.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var import_react62 = __toESM(require_react(), 1);
  var FieldRequiredIndicator = (0, import_react62.forwardRef)(
    ({ fallback: fallback3, ...props26 }, ref) => {
      const field = useFieldContext();
      if (!field.required) {
        return fallback3;
      }
      const mergedProps = mergeProps2(field.getRequiredIndicatorProps(), props26);
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ark.span, { ...mergedProps, ref, children: props26.children ?? "*" });
    }
  );
  FieldRequiredIndicator.displayName = "FieldRequiredIndicator";

  // node_modules/@ark-ui/react/dist/components/field/field-root.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
  var import_react66 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/field/use-field.js
  var import_react64 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/utils/use-safe-layout-effect.js
  var import_react63 = __toESM(require_react(), 1);
  var useSafeLayoutEffect2 = typeof window !== "undefined" ? import_react63.useLayoutEffect : import_react63.useEffect;

  // node_modules/@ark-ui/react/dist/components/fieldset/use-fieldset-context.js
  var [FieldsetProvider, useFieldsetContext] = createContext6({
    name: "FieldsetContext",
    hookName: "useFieldsetContext",
    providerName: "<FieldsetProvider />",
    strict: false
  });

  // node_modules/@ark-ui/react/dist/components/field/field.anatomy.js
  var fieldAnatomy = createAnatomy("field").parts(
    "root",
    "errorText",
    "helperText",
    "input",
    "label",
    "select",
    "textarea",
    "requiredIndicator"
  );
  var parts10 = fieldAnatomy.build();

  // node_modules/@ark-ui/react/dist/components/field/use-field.js
  var useField = (props26 = {}) => {
    const fieldset = useFieldsetContext();
    const env = useEnvironmentContext();
    const { ids, disabled = Boolean(fieldset?.disabled), invalid = false, readOnly = false, required = false } = props26;
    const [hasErrorText, setHasErrorText] = (0, import_react64.useState)(false);
    const [hasHelperText, setHasHelperText] = (0, import_react64.useState)(false);
    const uid = (0, import_react64.useId)();
    const id = props26.id ?? uid;
    const rootRef = (0, import_react64.useRef)(null);
    const rootId = ids?.control ?? `field::${id}`;
    const errorTextId = ids?.errorText ?? `field::${id}::error-text`;
    const helperTextId = ids?.helperText ?? `field::${id}::helper-text`;
    const labelId = ids?.label ?? `field::${id}::label`;
    useSafeLayoutEffect2(() => {
      const rootNode = rootRef.current;
      if (!rootNode) return;
      const checkTextElements = () => {
        const docOrShadowRoot = env.getRootNode();
        setHasErrorText(!!docOrShadowRoot.getElementById(errorTextId));
        setHasHelperText(!!docOrShadowRoot.getElementById(helperTextId));
      };
      checkTextElements();
      const win = env.getWindow();
      const observer = new win.MutationObserver(checkTextElements);
      observer.observe(rootNode, { childList: true, subtree: true });
      return () => observer.disconnect();
    }, [env, errorTextId, helperTextId]);
    const labelIds = (0, import_react64.useMemo)(() => {
      const ids2 = [];
      if (hasErrorText && invalid) ids2.push(errorTextId);
      if (hasHelperText) ids2.push(helperTextId);
      return ids2.join(" ") || void 0;
    }, [invalid, errorTextId, helperTextId, hasErrorText, hasHelperText]);
    const getRootProps = (0, import_react64.useMemo)(
      () => () => ({
        ...parts10.root.attrs,
        id: rootId,
        ref: rootRef,
        role: "group",
        "data-disabled": dataAttr(disabled),
        "data-invalid": dataAttr(invalid),
        "data-readonly": dataAttr(readOnly)
      }),
      [disabled, invalid, readOnly, rootId]
    );
    const getLabelProps = (0, import_react64.useMemo)(
      () => () => ({
        ...parts10.label.attrs,
        id: labelId,
        "data-disabled": dataAttr(disabled),
        "data-invalid": dataAttr(invalid),
        "data-readonly": dataAttr(readOnly),
        htmlFor: id
      }),
      [disabled, invalid, readOnly, id, labelId]
    );
    const getControlProps = (0, import_react64.useMemo)(
      () => () => ({
        "aria-describedby": labelIds,
        "aria-invalid": ariaAttr(invalid),
        "data-invalid": dataAttr(invalid),
        "data-required": dataAttr(required),
        "data-readonly": dataAttr(readOnly),
        id,
        required,
        disabled,
        readOnly
      }),
      [labelIds, invalid, required, readOnly, id, disabled]
    );
    const getInputProps = (0, import_react64.useMemo)(
      () => () => ({
        ...getControlProps(),
        ...parts10.input.attrs
      }),
      [getControlProps]
    );
    const getTextareaProps = (0, import_react64.useMemo)(
      () => () => ({
        ...getControlProps(),
        ...parts10.textarea.attrs
      }),
      [getControlProps]
    );
    const getSelectProps = (0, import_react64.useMemo)(
      () => () => ({
        ...getControlProps(),
        ...parts10.select.attrs
      }),
      [getControlProps]
    );
    const getHelperTextProps = (0, import_react64.useMemo)(
      () => () => ({
        id: helperTextId,
        ...parts10.helperText.attrs,
        "data-disabled": dataAttr(disabled)
      }),
      [disabled, helperTextId]
    );
    const getErrorTextProps = (0, import_react64.useMemo)(
      () => () => ({
        id: errorTextId,
        ...parts10.errorText.attrs,
        "aria-live": "polite"
      }),
      [errorTextId]
    );
    const getRequiredIndicatorProps = (0, import_react64.useMemo)(
      () => () => ({
        "aria-hidden": true,
        ...parts10.requiredIndicator.attrs
      }),
      []
    );
    return {
      ariaDescribedby: labelIds,
      ids: {
        root: rootId,
        control: id,
        label: labelId,
        errorText: errorTextId,
        helperText: helperTextId
      },
      refs: {
        rootRef
      },
      disabled,
      invalid,
      readOnly,
      required,
      getLabelProps,
      getRootProps,
      getInputProps,
      getTextareaProps,
      getSelectProps,
      getHelperTextProps,
      getErrorTextProps,
      getRequiredIndicatorProps
    };
  };

  // node_modules/@ark-ui/react/dist/components/field/field-root.js
  var FieldRoot = (0, import_react66.forwardRef)((props26, ref) => {
    const [useFieldProps, localProps] = createSplitProps2()(props26, [
      "id",
      "ids",
      "disabled",
      "invalid",
      "readOnly",
      "required"
    ]);
    const field = useField(useFieldProps);
    const mergedProps = mergeProps2(field.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(FieldProvider, { value: field, children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ark.div, { ...mergedProps, ref: composeRefs(ref, field.refs.rootRef) }) });
  });
  FieldRoot.displayName = "FieldRoot";

  // node_modules/@ark-ui/react/dist/components/field/field-root-provider.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
  var import_react68 = __toESM(require_react(), 1);
  var FieldRootProvider = (0, import_react68.forwardRef)((props26, ref) => {
    const [{ value: field }, localProps] = createSplitProps2()(props26, ["value"]);
    const mergedProps = mergeProps2(field.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(FieldProvider, { value: field, children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  FieldRootProvider.displayName = "FieldRootProvider";

  // node_modules/@ark-ui/react/dist/components/field/field-select.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var import_react70 = __toESM(require_react(), 1);
  var FieldSelect = (0, import_react70.forwardRef)((props26, ref) => {
    const field = useFieldContext();
    const mergedProps = mergeProps2(field?.getSelectProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ark.select, { ...mergedProps, ref });
  });
  FieldSelect.displayName = "FieldSelect";

  // node_modules/@ark-ui/react/dist/components/field/field-textarea.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@zag-js/auto-resize/dist/index.mjs
  var autoresizeTextarea = (el) => {
    if (!el) return;
    const style = getComputedStyle(el);
    const win = getWindow(el);
    const doc = getDocument(el);
    const resize = () => {
      requestAnimationFrame(() => {
        el.style.height = "auto";
        let newHeight;
        if (style.boxSizing === "content-box") {
          newHeight = el.scrollHeight - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
        } else {
          newHeight = el.scrollHeight + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
        }
        if (style.maxHeight !== "none" && newHeight > parseFloat(style.maxHeight)) {
          if (style.overflowY === "hidden") {
            el.style.overflowY = "scroll";
          }
          newHeight = parseFloat(style.maxHeight);
        } else if (style.overflowY !== "hidden") {
          el.style.overflowY = "hidden";
        }
        el.style.height = `${newHeight}px`;
      });
    };
    el.addEventListener("input", resize);
    el.form?.addEventListener("reset", resize);
    const elementPrototype = Object.getPrototypeOf(el);
    const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, "value");
    Object.defineProperty(el, "value", {
      ...descriptor,
      set() {
        descriptor?.set?.apply(this, arguments);
        resize();
      }
    });
    const resizeObserver = new win.ResizeObserver(() => {
      requestAnimationFrame(() => resize());
    });
    resizeObserver.observe(el);
    const attrObserver = new win.MutationObserver(() => resize());
    attrObserver.observe(el, { attributes: true, attributeFilter: ["rows", "placeholder"] });
    doc.fonts?.addEventListener("loadingdone", resize);
    return () => {
      el.removeEventListener("input", resize);
      el.form?.removeEventListener("reset", resize);
      doc.fonts?.removeEventListener("loadingdone", resize);
      resizeObserver.disconnect();
      attrObserver.disconnect();
    };
  };

  // node_modules/@ark-ui/react/dist/components/field/field-textarea.js
  var import_react72 = __toESM(require_react(), 1);
  var FieldTextarea = (0, import_react72.forwardRef)((props26, ref) => {
    const { autoresize, ...textareaProps } = props26;
    const textareaRef = (0, import_react72.useRef)(null);
    const field = useFieldContext();
    const mergedProps = mergeProps2(
      field?.getTextareaProps(),
      { style: { resize: autoresize ? "none" : void 0 } },
      textareaProps
    );
    (0, import_react72.useEffect)(() => {
      if (!autoresize) return;
      return autoresizeTextarea(textareaRef.current);
    }, [autoresize]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ark.textarea, { ...mergedProps, ref: composeRefs(ref, textareaRef) });
  });
  FieldTextarea.displayName = "FieldTextarea";

  // node_modules/@ark-ui/react/dist/components/field/field.js
  var field_exports = {};
  __export(field_exports, {
    Context: () => FieldContext,
    ErrorText: () => FieldErrorText,
    HelperText: () => FieldHelperText,
    Input: () => FieldInput,
    Label: () => FieldLabel,
    RequiredIndicator: () => FieldRequiredIndicator,
    Root: () => FieldRoot,
    RootProvider: () => FieldRootProvider,
    Select: () => FieldSelect,
    Textarea: () => FieldTextarea
  });

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-context.js
  var FieldsetContext = (props26) => props26.children(useFieldsetContext());

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-error-text.js
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var import_react74 = __toESM(require_react(), 1);
  var FieldsetErrorText = (0, import_react74.forwardRef)((props26, ref) => {
    const fieldset = useFieldsetContext();
    const mergedProps = mergeProps2(fieldset.getErrorTextProps(), props26);
    return fieldset.invalid ? /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ark.span, { ...mergedProps, ref }) : null;
  });
  FieldsetErrorText.displayName = "FieldsetErrorText";

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-helper-text.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var import_react76 = __toESM(require_react(), 1);
  var FieldsetHelperText = (0, import_react76.forwardRef)((props26, ref) => {
    const fieldset = useFieldsetContext();
    const mergedProps = mergeProps2(fieldset.getHelperTextProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ark.span, { ...mergedProps, ref });
  });
  FieldsetHelperText.displayName = "FieldsetHelperText";

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-legend.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var import_react78 = __toESM(require_react(), 1);
  var FieldsetLegend = (0, import_react78.forwardRef)((props26, ref) => {
    const fieldset = useFieldsetContext();
    const mergedProps = mergeProps2(fieldset.getLegendProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(ark.legend, { ...mergedProps, ref });
  });
  FieldsetLegend.displayName = "FieldsetLegend";

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-root.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var import_react81 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/fieldset/use-fieldset.js
  var import_react79 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset.anatomy.js
  var fieldsetAnatomy = createAnatomy("fieldset").parts("root", "errorText", "helperText", "legend");
  var parts11 = fieldsetAnatomy.build();

  // node_modules/@ark-ui/react/dist/components/fieldset/use-fieldset.js
  var useFieldset = (props26 = {}) => {
    const { disabled = false, invalid = false } = props26;
    const env = useEnvironmentContext();
    const hasErrorText = (0, import_react79.useRef)(false);
    const hasHelperText = (0, import_react79.useRef)(false);
    const uid = (0, import_react79.useId)();
    const id = props26.id ?? uid;
    const rootRef = (0, import_react79.useRef)(null);
    const errorTextId = `fieldset::${id}::error-text`;
    const helperTextId = `fieldset::${id}::helper-text`;
    useSafeLayoutEffect2(() => {
      const rootNode = rootRef.current;
      if (!rootNode) return;
      const checkTextElements = () => {
        const docOrShadowRoot = env.getRootNode();
        hasErrorText.current = !!docOrShadowRoot.getElementById(errorTextId);
        hasHelperText.current = !!docOrShadowRoot.getElementById(helperTextId);
      };
      checkTextElements();
      const win = env.getWindow();
      const observer = new win.MutationObserver(checkTextElements);
      observer.observe(rootNode, { childList: true, subtree: true });
      return () => observer.disconnect();
    }, [env, errorTextId, helperTextId]);
    const labelIds = (0, import_react79.useMemo)(() => {
      const ids = [];
      if (hasErrorText.current && invalid) ids.push(errorTextId);
      if (hasHelperText.current) ids.push(helperTextId);
      return ids.join(" ") || void 0;
    }, [invalid, errorTextId, helperTextId]);
    const getRootProps = (0, import_react79.useMemo)(
      () => () => ({
        ...parts11.root.attrs,
        ref: rootRef,
        disabled,
        "data-disabled": dataAttr(disabled),
        "data-invalid": dataAttr(invalid),
        "aria-describedby": labelIds
      }),
      [disabled, invalid, labelIds]
    );
    const getLegendProps = (0, import_react79.useMemo)(
      () => () => ({
        ...parts11.legend.attrs,
        "data-disabled": dataAttr(disabled),
        "data-invalid": dataAttr(invalid)
      }),
      [disabled, invalid]
    );
    const getHelperTextProps = (0, import_react79.useMemo)(
      () => () => ({
        id: helperTextId,
        ...parts11.helperText.attrs
      }),
      [helperTextId]
    );
    const getErrorTextProps = (0, import_react79.useMemo)(
      () => () => ({
        id: errorTextId,
        ...parts11.errorText.attrs,
        "aria-live": "polite"
      }),
      [errorTextId]
    );
    return {
      refs: {
        rootRef
      },
      disabled,
      invalid,
      getRootProps,
      getLegendProps,
      getHelperTextProps,
      getErrorTextProps
    };
  };

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-root.js
  var FieldsetRoot = (0, import_react81.forwardRef)((props26, ref) => {
    const [useFieldsetProps, localProps] = createSplitProps2()(props26, ["id", "disabled", "invalid"]);
    const fieldset = useFieldset(useFieldsetProps);
    const mergedProps = mergeProps2(fieldset.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(FieldsetProvider, { value: fieldset, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(ark.fieldset, { ...mergedProps, ref: composeRefs(ref, fieldset.refs.rootRef) }) });
  });
  FieldsetRoot.displayName = "FieldsetRoot";

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset-root-provider.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var import_react83 = __toESM(require_react(), 1);
  var FieldsetRootProvider = (0, import_react83.forwardRef)((props26, ref) => {
    const [{ value: fieldset }, localProps] = createSplitProps2()(props26, ["value"]);
    const mergedProps = mergeProps2(fieldset.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(FieldsetProvider, { value: fieldset, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ark.fieldset, { ...mergedProps, ref }) });
  });
  FieldsetRootProvider.displayName = "FieldsetRootProvider";

  // node_modules/@ark-ui/react/dist/components/fieldset/fieldset.js
  var fieldset_exports = {};
  __export(fieldset_exports, {
    Context: () => FieldsetContext,
    ErrorText: () => FieldsetErrorText,
    HelperText: () => FieldsetHelperText,
    Legend: () => FieldsetLegend,
    Root: () => FieldsetRoot,
    RootProvider: () => FieldsetRootProvider
  });

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-clear-trigger.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  var import_react85 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/file-upload/use-file-upload-context.js
  var [FileUploadProvider, useFileUploadContext] = createContext6({
    name: "FileUploadContext",
    hookName: "useFileUploadContext",
    providerName: "<FileUploadProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-clear-trigger.js
  var FileUploadClearTrigger = (0, import_react85.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getClearTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ark.button, { ...mergedProps, ref });
  });
  FileUploadClearTrigger.displayName = "FileUploadClearTrigger";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-context.js
  var FileUploadContext = (props26) => props26.children(useFileUploadContext());

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-dropzone.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var import_react87 = __toESM(require_react(), 1);
  var FileUploadDropzone = (0, import_react87.forwardRef)((props26, ref) => {
    const [dropzoneProps, localProps] = createSplitProps2()(props26, ["disableClick"]);
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getDropzoneProps(dropzoneProps), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ark.div, { ...mergedProps, ref });
  });
  FileUploadDropzone.displayName = "FileUploadDropzone";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-hidden-input.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var import_react89 = __toESM(require_react(), 1);
  var FileUploadHiddenInput = (0, import_react89.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getHiddenInputProps(), props26);
    const field = useFieldContext();
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ark.input, { "aria-describedby": field?.ariaDescribedby, ...mergedProps, ref });
  });
  FileUploadHiddenInput.displayName = "FileUploadHiddenInput";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  var import_react91 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/file-upload/use-file-upload-item-props-context.js
  var [FileUploadItemPropsProvider, useFileUploadItemPropsContext] = createContext6({
    name: "FileUploadItemPropsContext",
    hookName: "useFileUploadItemPropsContext",
    providerName: "<FileUploadItemPropsProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item.js
  var FileUploadItem = (0, import_react91.forwardRef)((props26, ref) => {
    const [itemProps9, localProps] = createSplitProps2()(props26, ["file"]);
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getItemProps(itemProps9), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(FileUploadItemPropsProvider, { value: itemProps9, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ark.li, { ...mergedProps, ref }) });
  });
  FileUploadItem.displayName = "FileUploadItem";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-delete-trigger.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var import_react93 = __toESM(require_react(), 1);
  var FileUploadItemDeleteTrigger = (0, import_react93.forwardRef)(
    (props26, ref) => {
      const fileUpload = useFileUploadContext();
      const itemProps9 = useFileUploadItemPropsContext();
      const mergedProps = mergeProps2(fileUpload.getItemDeleteTriggerProps(itemProps9), props26);
      return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ark.button, { ...mergedProps, ref });
    }
  );
  FileUploadItemDeleteTrigger.displayName = "FileUploadItemDeleteTrigger";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-group.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var import_react95 = __toESM(require_react(), 1);
  var FileUploadItemGroup = (0, import_react95.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getItemGroupProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ark.ul, { ...mergedProps, ref });
  });
  FileUploadItemGroup.displayName = "FileUploadItemGroup";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-name.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var import_react97 = __toESM(require_react(), 1);
  var FileUploadItemName = (0, import_react97.forwardRef)((props26, ref) => {
    const { children, ...rest } = props26;
    const fileUpload = useFileUploadContext();
    const itemProps9 = useFileUploadItemPropsContext();
    const mergedProps = mergeProps2(fileUpload.getItemNameProps(itemProps9), rest);
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ark.div, { ...mergedProps, ref, children: children || itemProps9.file.name });
  });
  FileUploadItemName.displayName = "FileUploadItemName";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-preview.js
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var import_react99 = __toESM(require_react(), 1);
  var FileUploadItemPreview = (0, import_react99.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const itemProps9 = useFileUploadItemPropsContext();
    const mergedProps = mergeProps2(fileUpload.getItemPreviewProps(itemProps9), props26);
    if (!itemProps9.file.type.match(props26.type ?? ".*")) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ark.div, { ...mergedProps, ref });
  });
  FileUploadItemPreview.displayName = "FileUploadItemPreview";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-preview-image.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var import_react101 = __toESM(require_react(), 1);
  var FileUploadItemPreviewImage = (0, import_react101.forwardRef)(
    (props26, ref) => {
      const [url, setUrl] = (0, import_react101.useState)("");
      const fileUpload = useFileUploadContext();
      const itemProps9 = useFileUploadItemPropsContext();
      const mergedProps = mergeProps2(fileUpload.getItemPreviewImageProps({ ...itemProps9, url }), props26);
      (0, import_react101.useEffect)(() => {
        return fileUpload.createFileUrl(itemProps9.file, (url2) => setUrl(url2));
      }, [itemProps9, fileUpload]);
      if (!url) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ark.img, { ...mergedProps, ref });
    }
  );
  FileUploadItemPreviewImage.displayName = "FileUploadItemPreviewImage";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-item-size-text.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var import_react103 = __toESM(require_react(), 1);
  var FileUploadItemSizeText = (0, import_react103.forwardRef)((props26, ref) => {
    const { children, ...rest } = props26;
    const fileUpload = useFileUploadContext();
    const itemProps9 = useFileUploadItemPropsContext();
    const mergedProps = mergeProps2(fileUpload.getItemSizeTextProps(itemProps9), rest);
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ark.div, { ...mergedProps, ref, children: children || fileUpload.getFileSize(itemProps9.file) });
  });
  FileUploadItemSizeText.displayName = "FileUploadItemSizeText";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-label.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var import_react105 = __toESM(require_react(), 1);
  var FileUploadLabel = (0, import_react105.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getLabelProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ark.label, { ...mergedProps, ref });
  });
  FileUploadLabel.displayName = "FileUploadLabel";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-root.js
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  var import_react109 = __toESM(require_react(), 1);

  // node_modules/@zag-js/i18n-utils/dist/index.mjs
  function i18nCache(Ins) {
    const formatterCache = /* @__PURE__ */ new Map();
    return function create(locale, options) {
      const cacheKey = locale + (options ? Object.entries(options).sort((a, b2) => a[0] < b2[0] ? -1 : 1).join() : "");
      if (formatterCache.has(cacheKey)) {
        return formatterCache.get(cacheKey);
      }
      let formatter = new Ins(locale, options);
      formatterCache.set(cacheKey, formatter);
      return formatter;
    };
  }
  var getCollator = i18nCache(Intl.Collator);
  var collatorCache = i18nCache(Intl.Collator);
  var getNumberFormatter = i18nCache(Intl.NumberFormat);
  function formatNumber(v, locale, options = {}) {
    const formatter = getNumberFormatter(locale, options);
    return formatter.format(v);
  }
  var bitPrefixes = ["", "kilo", "mega", "giga", "tera"];
  var bytePrefixes = ["", "kilo", "mega", "giga", "tera", "peta"];
  var formatBytes = (bytes, locale = "en-US", options = {}) => {
    if (isNaN(bytes)) return "";
    if (bytes === 0) return "0 B";
    const { unit = "byte", unitDisplay = "short" } = options;
    const prefix2 = unit === "bit" ? bitPrefixes : bytePrefixes;
    const index = Math.max(0, Math.min(Math.floor(Math.log10(bytes) / 3), prefix2.length - 1));
    const _unit = prefix2[index] + unit;
    const _unitDisplay = unitDisplay || "short";
    const v = parseFloat((bytes / Math.pow(1e3, index)).toPrecision(3));
    return formatNumber(v, locale, {
      style: "unit",
      unit: _unit,
      unitDisplay: _unitDisplay
    });
  };
  var getListFormatter = i18nCache(Intl.ListFormat);
  var getRelativeTimeFormatter = i18nCache(Intl.RelativeTimeFormat);
  var MINUTE_TO_MS = 1e3 * 60;
  var HOUR_TO_MS = 1e3 * 60 * 60;
  var DAY_TO_MS = 1e3 * 60 * 60 * 24;
  var WEEK_TO_MS = 1e3 * 60 * 60 * 24 * 7;
  var MONTH_TO_MS = 1e3 * 60 * 60 * 24 * 30;
  var YEAR_TO_MS = 1e3 * 60 * 60 * 24 * 365;

  // node_modules/@zag-js/file-upload/dist/index.mjs
  var anatomy10 = createAnatomy("file-upload").parts(
    "root",
    "dropzone",
    "item",
    "itemDeleteTrigger",
    "itemGroup",
    "itemName",
    "itemPreview",
    "itemPreviewImage",
    "itemSizeText",
    "label",
    "trigger",
    "clearTrigger"
  );
  var parts12 = anatomy10.build();
  var getRootId5 = (ctx) => ctx.ids?.root ?? `file:${ctx.id}`;
  var getDropzoneId = (ctx) => ctx.ids?.dropzone ?? `file:${ctx.id}:dropzone`;
  var getHiddenInputId3 = (ctx) => ctx.ids?.hiddenInput ?? `file:${ctx.id}:input`;
  var getTriggerId4 = (ctx) => ctx.ids?.trigger ?? `file:${ctx.id}:trigger`;
  var getLabelId2 = (ctx) => ctx.ids?.label ?? `file:${ctx.id}:label`;
  var getItemId = (ctx, id) => ctx.ids?.item?.(id) ?? `file:${ctx.id}:item:${id}`;
  var getItemNameId = (ctx, id) => ctx.ids?.itemName?.(id) ?? `file:${ctx.id}:item-name:${id}`;
  var getItemSizeTextId = (ctx, id) => ctx.ids?.itemSizeText?.(id) ?? `file:${ctx.id}:item-size:${id}`;
  var getItemPreviewId = (ctx, id) => ctx.ids?.itemPreview?.(id) ?? `file:${ctx.id}:item-preview:${id}`;
  var getRootEl4 = (ctx) => ctx.getById(getRootId5(ctx));
  var getHiddenInputEl3 = (ctx) => ctx.getById(getHiddenInputId3(ctx));
  var getDropzoneEl = (ctx) => ctx.getById(getDropzoneId(ctx));
  function isEventWithFiles(event) {
    const target = getEventTarget(event);
    if (!event.dataTransfer) return !!target && "files" in target;
    return event.dataTransfer.types.some((type) => {
      return type === "Files" || type === "application/x-moz-file";
    });
  }
  function isFilesWithinRange(ctx, incomingCount, currentAcceptedFiles) {
    const { prop, computed } = ctx;
    if (!computed("multiple") && incomingCount > 1) return false;
    if (!computed("multiple") && incomingCount + currentAcceptedFiles.length === 2) return true;
    if (incomingCount + currentAcceptedFiles.length > prop("maxFiles")) return false;
    return true;
  }
  function getEventFiles(ctx, files, currentAcceptedFiles = [], currentRejectedFiles = []) {
    const { prop, computed } = ctx;
    const acceptedFiles = [];
    const rejectedFiles = [];
    const validateParams = {
      acceptedFiles: currentAcceptedFiles,
      rejectedFiles: currentRejectedFiles
    };
    files.forEach((file) => {
      const [accepted, acceptError] = isValidFileType(file, computed("acceptAttr"));
      const [sizeMatch, sizeError] = isValidFileSize(file, prop("minFileSize"), prop("maxFileSize"));
      const validateErrors = prop("validate")?.(file, validateParams);
      const valid = validateErrors ? validateErrors.length === 0 : true;
      if (accepted && sizeMatch && valid) {
        acceptedFiles.push(file);
      } else {
        const errors = [acceptError, sizeError];
        if (!valid) errors.push(...validateErrors ?? []);
        rejectedFiles.push({ file, errors: errors.filter(Boolean) });
      }
    });
    if (!isFilesWithinRange(ctx, acceptedFiles.length, currentAcceptedFiles)) {
      acceptedFiles.forEach((file) => {
        rejectedFiles.push({ file, errors: ["TOO_MANY_FILES"] });
      });
      acceptedFiles.splice(0);
    }
    return {
      acceptedFiles,
      rejectedFiles
    };
  }
  function setInputFiles(inputEl, files) {
    const win = getWindow(inputEl);
    try {
      if ("DataTransfer" in win) {
        const dataTransfer = new win.DataTransfer();
        files.forEach((file) => {
          dataTransfer.items.add(file);
        });
        inputEl.files = dataTransfer.files;
      }
    } catch {
    }
  }
  function connect4(service, normalize3) {
    const { state: state2, send, prop, computed, scope, context } = service;
    const disabled = prop("disabled");
    const allowDrop = prop("allowDrop");
    const translations = prop("translations");
    const dragging = state2.matches("dragging");
    const focused = state2.matches("focused") && !disabled;
    return {
      dragging,
      focused,
      disabled: !!disabled,
      transforming: context.get("transforming"),
      openFilePicker() {
        if (disabled) return;
        send({ type: "OPEN" });
      },
      deleteFile(file) {
        send({ type: "FILE.DELETE", file });
      },
      acceptedFiles: context.get("acceptedFiles"),
      rejectedFiles: context.get("rejectedFiles"),
      setFiles(files) {
        send({ type: "FILES.SET", files, count: files.length });
      },
      clearRejectedFiles() {
        send({ type: "REJECTED_FILES.CLEAR" });
      },
      clearFiles() {
        send({ type: "FILES.CLEAR" });
      },
      getFileSize(file) {
        return formatBytes(file.size, prop("locale"));
      },
      createFileUrl(file, cb) {
        const win = scope.getWin();
        const url = win.URL.createObjectURL(file);
        cb(url);
        return () => win.URL.revokeObjectURL(url);
      },
      setClipboardFiles(dt) {
        if (disabled) return false;
        const items = Array.from(dt?.items ?? []);
        const files = items.reduce((acc, item) => {
          if (item.kind !== "file") return acc;
          const file = item.getAsFile();
          if (!file) return acc;
          return [...acc, file];
        }, []);
        if (!files.length) return false;
        send({ type: "FILES.SET", files });
        return true;
      },
      getRootProps() {
        return normalize3.element({
          ...parts12.root.attrs,
          dir: prop("dir"),
          id: getRootId5(scope),
          "data-disabled": dataAttr(disabled),
          "data-dragging": dataAttr(dragging)
        });
      },
      getDropzoneProps(props26 = {}) {
        return normalize3.element({
          ...parts12.dropzone.attrs,
          dir: prop("dir"),
          id: getDropzoneId(scope),
          tabIndex: disabled || props26.disableClick ? void 0 : 0,
          role: props26.disableClick ? "application" : "button",
          "aria-label": translations.dropzone,
          "aria-disabled": disabled,
          "data-invalid": dataAttr(prop("invalid")),
          "data-disabled": dataAttr(disabled),
          "data-dragging": dataAttr(dragging),
          onKeyDown(event) {
            if (disabled) return;
            if (event.defaultPrevented) return;
            if (!isSelfTarget(event)) return;
            if (props26.disableClick) return;
            if (event.key !== "Enter" && event.key !== " ") return;
            send({ type: "DROPZONE.CLICK", src: "keydown" });
          },
          onClick(event) {
            if (disabled) return;
            if (event.defaultPrevented) return;
            if (props26.disableClick) return;
            if (!isSelfTarget(event)) return;
            if (event.currentTarget.localName === "label") {
              event.preventDefault();
            }
            send({ type: "DROPZONE.CLICK" });
          },
          onDragOver(event) {
            if (disabled) return;
            if (!allowDrop) return;
            event.preventDefault();
            event.stopPropagation();
            try {
              event.dataTransfer.dropEffect = "copy";
            } catch {
            }
            const hasFiles = isEventWithFiles(event);
            if (!hasFiles) return;
            const count = event.dataTransfer.items.length;
            send({ type: "DROPZONE.DRAG_OVER", count });
          },
          onDragLeave(event) {
            if (disabled) return;
            if (!allowDrop) return;
            if (contains(event.currentTarget, event.relatedTarget)) return;
            send({ type: "DROPZONE.DRAG_LEAVE" });
          },
          onDrop(event) {
            if (disabled) return;
            if (allowDrop) {
              event.preventDefault();
              event.stopPropagation();
            }
            const hasFiles = isEventWithFiles(event);
            if (disabled || !hasFiles) return;
            getFileEntries(event.dataTransfer.items, prop("directory")).then((files) => {
              send({ type: "DROPZONE.DROP", files: flatArray(files) });
            });
          },
          onFocus() {
            if (disabled) return;
            send({ type: "DROPZONE.FOCUS" });
          },
          onBlur() {
            if (disabled) return;
            send({ type: "DROPZONE.BLUR" });
          }
        });
      },
      getTriggerProps() {
        return normalize3.button({
          ...parts12.trigger.attrs,
          dir: prop("dir"),
          id: getTriggerId4(scope),
          disabled,
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(prop("invalid")),
          type: "button",
          onClick(event) {
            if (disabled) return;
            if (contains(getDropzoneEl(scope), event.currentTarget)) {
              event.stopPropagation();
            }
            send({ type: "OPEN" });
          }
        });
      },
      getHiddenInputProps() {
        return normalize3.input({
          id: getHiddenInputId3(scope),
          tabIndex: -1,
          disabled,
          type: "file",
          required: prop("required"),
          capture: prop("capture"),
          name: prop("name"),
          accept: computed("acceptAttr"),
          webkitdirectory: prop("directory") ? "" : void 0,
          multiple: computed("multiple") || prop("maxFiles") > 1,
          onClick(event) {
            event.stopPropagation();
            event.currentTarget.value = "";
          },
          onInput(event) {
            if (disabled) return;
            const { files } = event.currentTarget;
            send({ type: "FILE.SELECT", files: files ? Array.from(files) : [] });
          },
          style: visuallyHiddenStyle
        });
      },
      getItemGroupProps() {
        return normalize3.element({
          ...parts12.itemGroup.attrs,
          dir: prop("dir"),
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemProps(props26) {
        const { file } = props26;
        return normalize3.element({
          ...parts12.item.attrs,
          dir: prop("dir"),
          id: getItemId(scope, file.name),
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemNameProps(props26) {
        const { file } = props26;
        return normalize3.element({
          ...parts12.itemName.attrs,
          dir: prop("dir"),
          id: getItemNameId(scope, file.name),
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemSizeTextProps(props26) {
        const { file } = props26;
        return normalize3.element({
          ...parts12.itemSizeText.attrs,
          dir: prop("dir"),
          id: getItemSizeTextId(scope, file.name),
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemPreviewProps(props26) {
        const { file } = props26;
        return normalize3.element({
          ...parts12.itemPreview.attrs,
          dir: prop("dir"),
          id: getItemPreviewId(scope, file.name),
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemPreviewImageProps(props26) {
        const { file, url } = props26;
        const isImage = file.type.startsWith("image/");
        if (!isImage) {
          throw new Error("Preview Image is only supported for image files");
        }
        return normalize3.img({
          ...parts12.itemPreviewImage.attrs,
          alt: translations.itemPreview?.(file),
          src: url,
          "data-disabled": dataAttr(disabled)
        });
      },
      getItemDeleteTriggerProps(props26) {
        const { file } = props26;
        return normalize3.button({
          ...parts12.itemDeleteTrigger.attrs,
          dir: prop("dir"),
          type: "button",
          disabled,
          "data-disabled": dataAttr(disabled),
          "aria-label": translations.deleteFile?.(file),
          onClick() {
            if (disabled) return;
            send({ type: "FILE.DELETE", file });
          }
        });
      },
      getLabelProps() {
        return normalize3.label({
          ...parts12.label.attrs,
          dir: prop("dir"),
          id: getLabelId2(scope),
          htmlFor: getHiddenInputId3(scope),
          "data-disabled": dataAttr(disabled)
        });
      },
      getClearTriggerProps() {
        return normalize3.button({
          ...parts12.clearTrigger.attrs,
          dir: prop("dir"),
          type: "button",
          disabled,
          hidden: context.get("acceptedFiles").length === 0,
          "data-disabled": dataAttr(disabled),
          onClick(event) {
            if (event.defaultPrevented) return;
            if (disabled) return;
            send({ type: "FILES.CLEAR" });
          }
        });
      }
    };
  }
  var machine11 = createMachine({
    props({ props: props26 }) {
      return {
        minFileSize: 0,
        maxFileSize: Number.POSITIVE_INFINITY,
        maxFiles: 1,
        allowDrop: true,
        preventDocumentDrop: true,
        defaultAcceptedFiles: [],
        ...props26,
        translations: {
          dropzone: "dropzone",
          itemPreview: (file) => `preview of ${file.name}`,
          deleteFile: (file) => `delete file ${file.name}`,
          ...props26.translations
        }
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable, getContext }) {
      return {
        acceptedFiles: bindable(() => ({
          defaultValue: prop("defaultAcceptedFiles"),
          value: prop("acceptedFiles"),
          isEqual: (a, b2) => a.length === b2?.length && a.every((file, i2) => isFileEqual(file, b2[i2])),
          hash(value) {
            return value.map((file) => `${file.name}-${file.size}`).join(",");
          },
          onChange(value) {
            const ctx = getContext();
            prop("onFileAccept")?.({ files: value });
            prop("onFileChange")?.({ acceptedFiles: value, rejectedFiles: ctx.get("rejectedFiles") });
          }
        })),
        rejectedFiles: bindable(() => ({
          defaultValue: [],
          isEqual: (a, b2) => a.length === b2?.length && a.every((file, i2) => isFileEqual(file.file, b2[i2].file)),
          onChange(value) {
            const ctx = getContext();
            prop("onFileReject")?.({ files: value });
            prop("onFileChange")?.({ acceptedFiles: ctx.get("acceptedFiles"), rejectedFiles: value });
          }
        })),
        transforming: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    computed: {
      acceptAttr: ({ prop }) => getAcceptAttrString(prop("accept")),
      multiple: ({ prop }) => prop("maxFiles") > 1
    },
    watch({ track, context, action }) {
      track([() => context.hash("acceptedFiles")], () => {
        action(["syncInputElement"]);
      });
    },
    on: {
      "FILES.SET": {
        actions: ["setFiles"]
      },
      "FILE.SELECT": {
        actions: ["setEventFiles"]
      },
      "FILE.DELETE": {
        actions: ["removeFile"]
      },
      "FILES.CLEAR": {
        actions: ["clearFiles"]
      },
      "REJECTED_FILES.CLEAR": {
        actions: ["clearRejectedFiles"]
      }
    },
    effects: ["preventDocumentDrop"],
    states: {
      idle: {
        on: {
          OPEN: {
            actions: ["openFilePicker"]
          },
          "DROPZONE.CLICK": {
            actions: ["openFilePicker"]
          },
          "DROPZONE.FOCUS": {
            target: "focused"
          },
          "DROPZONE.DRAG_OVER": {
            target: "dragging"
          }
        }
      },
      focused: {
        on: {
          "DROPZONE.BLUR": {
            target: "idle"
          },
          OPEN: {
            actions: ["openFilePicker"]
          },
          "DROPZONE.CLICK": {
            actions: ["openFilePicker"]
          },
          "DROPZONE.DRAG_OVER": {
            target: "dragging"
          }
        }
      },
      dragging: {
        on: {
          "DROPZONE.DROP": {
            target: "idle",
            actions: ["setEventFiles"]
          },
          "DROPZONE.DRAG_LEAVE": {
            target: "idle"
          }
        }
      }
    },
    implementations: {
      effects: {
        preventDocumentDrop({ prop, scope }) {
          if (!prop("preventDocumentDrop")) return;
          if (!prop("allowDrop")) return;
          if (prop("disabled")) return;
          const doc = scope.getDoc();
          const onDragOver = (event) => {
            event?.preventDefault();
          };
          const onDrop = (event) => {
            if (contains(getRootEl4(scope), getEventTarget(event))) return;
            event.preventDefault();
          };
          return callAll2(addDomEvent(doc, "dragover", onDragOver, false), addDomEvent(doc, "drop", onDrop, false));
        }
      },
      actions: {
        syncInputElement({ scope, context }) {
          queueMicrotask(() => {
            const inputEl = getHiddenInputEl3(scope);
            if (!inputEl) return;
            setInputFiles(inputEl, context.get("acceptedFiles"));
            const win = scope.getWin();
            inputEl.dispatchEvent(new win.Event("change", { bubbles: true }));
          });
        },
        openFilePicker({ scope }) {
          raf(() => {
            getHiddenInputEl3(scope)?.click();
          });
        },
        setFiles(params) {
          const { computed, context, event } = params;
          const { acceptedFiles, rejectedFiles } = getEventFiles(params, event.files);
          context.set(
            "acceptedFiles",
            computed("multiple") ? acceptedFiles : acceptedFiles.length > 0 ? [acceptedFiles[0]] : []
          );
          context.set("rejectedFiles", rejectedFiles);
        },
        setEventFiles(params) {
          const { computed, context, event, prop } = params;
          const currentAcceptedFiles = context.get("acceptedFiles");
          const currentRejectedFiles = context.get("rejectedFiles");
          const { acceptedFiles, rejectedFiles } = getEventFiles(
            params,
            event.files,
            currentAcceptedFiles,
            currentRejectedFiles
          );
          const set = (files) => {
            if (computed("multiple")) {
              context.set("acceptedFiles", (prev3) => [...prev3, ...files]);
              context.set("rejectedFiles", rejectedFiles);
              return;
            }
            if (files.length) {
              context.set("acceptedFiles", [files[0]]);
              context.set("rejectedFiles", rejectedFiles);
              return;
            }
            if (rejectedFiles.length) {
              context.set("acceptedFiles", context.get("acceptedFiles"));
              context.set("rejectedFiles", rejectedFiles);
            }
          };
          const transform = prop("transformFiles");
          if (transform) {
            context.set("transforming", true);
            transform(acceptedFiles).then(set).catch((err) => {
              warn(`[zag-js/file-upload] error transforming files
${err}`);
            }).finally(() => {
              context.set("transforming", false);
            });
          } else {
            set(acceptedFiles);
          }
        },
        removeFile({ context, event }) {
          const files = context.get("acceptedFiles").filter((file) => !isFileEqual(file, event.file));
          const rejectedFiles = context.get("rejectedFiles").filter((item) => !isFileEqual(item.file, event.file));
          context.set("acceptedFiles", files);
          context.set("rejectedFiles", rejectedFiles);
        },
        clearRejectedFiles({ context }) {
          context.set("rejectedFiles", []);
        },
        clearFiles({ context }) {
          context.set("acceptedFiles", []);
          context.set("rejectedFiles", []);
        }
      }
    }
  });
  var props11 = createProps()([
    "accept",
    "acceptedFiles",
    "allowDrop",
    "capture",
    "defaultAcceptedFiles",
    "dir",
    "directory",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "locale",
    "maxFiles",
    "maxFileSize",
    "minFileSize",
    "name",
    "onFileAccept",
    "onFileChange",
    "onFileReject",
    "preventDocumentDrop",
    "required",
    "transformFiles",
    "translations",
    "validate"
  ]);
  var splitProps11 = createSplitProps(props11);
  var itemProps3 = createProps()(["file"]);
  var splitItemProps3 = createSplitProps(itemProps3);

  // node_modules/@ark-ui/react/dist/components/file-upload/use-file-upload.js
  var import_react107 = __toESM(require_react(), 1);
  var useFileUpload = (props26) => {
    const id = (0, import_react107.useId)();
    const { getRootNode } = useEnvironmentContext();
    const { dir, locale } = useLocaleContext();
    const field = useFieldContext();
    const machineProps = {
      id,
      ids: {
        label: field?.ids.label,
        hiddenInput: field?.ids.control
      },
      dir,
      disabled: field?.disabled,
      locale,
      required: field?.required,
      invalid: field?.invalid,
      getRootNode,
      ...props26
    };
    const service = useMachine(machine11, machineProps);
    return connect4(service, normalizeProps);
  };

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-root.js
  var FileUploadRoot = (0, import_react109.forwardRef)((props26, ref) => {
    const [useFileUploadProps, localProps] = createSplitProps2()(props26, [
      "accept",
      "acceptedFiles",
      "allowDrop",
      "capture",
      "defaultAcceptedFiles",
      "directory",
      "disabled",
      "id",
      "ids",
      "invalid",
      "locale",
      "maxFiles",
      "maxFileSize",
      "minFileSize",
      "name",
      "onFileAccept",
      "onFileChange",
      "onFileReject",
      "preventDocumentDrop",
      "required",
      "translations",
      "transformFiles",
      "validate"
    ]);
    const fileUpload = useFileUpload(useFileUploadProps);
    const mergedProps = mergeProps2(fileUpload.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(FileUploadProvider, { value: fileUpload, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  FileUploadRoot.displayName = "FileUploadRoot";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-root-provider.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
  var import_react111 = __toESM(require_react(), 1);
  var FileUploadRootProvider = (0, import_react111.forwardRef)((props26, ref) => {
    const [{ value: fileUpload }, localProps] = createSplitProps2()(props26, ["value"]);
    const mergedProps = mergeProps2(fileUpload.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FileUploadProvider, { value: fileUpload, children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  FileUploadRootProvider.displayName = "FileUploadRootProvider";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload-trigger.js
  var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
  var import_react113 = __toESM(require_react(), 1);
  var FileUploadTrigger = (0, import_react113.forwardRef)((props26, ref) => {
    const fileUpload = useFileUploadContext();
    const mergedProps = mergeProps2(fileUpload.getTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ark.button, { ...mergedProps, ref });
  });
  FileUploadTrigger.displayName = "FileUploadTrigger";

  // node_modules/@ark-ui/react/dist/components/file-upload/file-upload.js
  var file_upload_exports = {};
  __export(file_upload_exports, {
    ClearTrigger: () => FileUploadClearTrigger,
    Context: () => FileUploadContext,
    Dropzone: () => FileUploadDropzone,
    HiddenInput: () => FileUploadHiddenInput,
    Item: () => FileUploadItem,
    ItemDeleteTrigger: () => FileUploadItemDeleteTrigger,
    ItemGroup: () => FileUploadItemGroup,
    ItemName: () => FileUploadItemName,
    ItemPreview: () => FileUploadItemPreview,
    ItemPreviewImage: () => FileUploadItemPreviewImage,
    ItemSizeText: () => FileUploadItemSizeText,
    Label: () => FileUploadLabel,
    Root: () => FileUploadRoot,
    RootProvider: () => FileUploadRootProvider,
    Trigger: () => FileUploadTrigger
  });

  // node_modules/proxy-compare/dist/index.js
  var TRACK_MEMO_SYMBOL = Symbol();
  var GET_ORIGINAL_SYMBOL = Symbol();
  var getProto = Object.getPrototypeOf;
  var objectsToTrack = /* @__PURE__ */ new WeakMap();
  var isObjectToTrack = (obj) => obj && (objectsToTrack.has(obj) ? objectsToTrack.get(obj) : getProto(obj) === Object.prototype || getProto(obj) === Array.prototype);
  var getUntracked = (obj) => {
    if (isObjectToTrack(obj)) {
      return obj[GET_ORIGINAL_SYMBOL] || null;
    }
    return null;
  };
  var markToTrack = (obj, mark = true) => {
    objectsToTrack.set(obj, mark);
  };

  // node_modules/@zag-js/store/dist/index.mjs
  function glob() {
    if (typeof globalThis !== "undefined") return globalThis;
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
  }
  function globalRef(key, value) {
    const g = glob();
    if (!g) return value();
    g[key] || (g[key] = value());
    return g[key];
  }
  var refSet = globalRef("__zag__refSet", () => /* @__PURE__ */ new WeakSet());
  var isReactElement2 = (x2) => typeof x2 === "object" && x2 !== null && "$$typeof" in x2 && "props" in x2;
  var isVueElement2 = (x2) => typeof x2 === "object" && x2 !== null && "__v_isVNode" in x2;
  var isDOMElement = (x2) => typeof x2 === "object" && x2 !== null && "nodeType" in x2 && typeof x2.nodeName === "string";
  var isElement2 = (x2) => isReactElement2(x2) || isVueElement2(x2) || isDOMElement(x2);
  var isObject4 = (x2) => x2 !== null && typeof x2 === "object";
  var canProxy = (x2) => isObject4(x2) && !refSet.has(x2) && (Array.isArray(x2) || !(Symbol.iterator in x2)) && !isElement2(x2) && !(x2 instanceof WeakMap) && !(x2 instanceof WeakSet) && !(x2 instanceof Error) && !(x2 instanceof Number) && !(x2 instanceof Date) && !(x2 instanceof String) && !(x2 instanceof RegExp) && !(x2 instanceof ArrayBuffer) && !(x2 instanceof Promise);
  var isDev = () => true;
  var proxyStateMap = globalRef("__zag__proxyStateMap", () => /* @__PURE__ */ new WeakMap());
  var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version2) => {
    const cache2 = snapCache.get(target);
    if (cache2?.[0] === version2) {
      return cache2[1];
    }
    const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
    markToTrack(snap, true);
    snapCache.set(target, [version2, snap]);
    Reflect.ownKeys(target).forEach((key) => {
      const value = Reflect.get(target, key);
      if (refSet.has(value)) {
        markToTrack(value, false);
        snap[key] = value;
      } else if (proxyStateMap.has(value)) {
        snap[key] = snapshot(value);
      } else {
        snap[key] = value;
      }
    });
    return Object.freeze(snap);
  }, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction2 = (initialObject) => {
    if (!isObject4(initialObject)) {
      throw new Error("object required");
    }
    const found = proxyCache.get(initialObject);
    if (found) {
      return found;
    }
    let version2 = versionHolder[0];
    const listeners = /* @__PURE__ */ new Set();
    const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
      if (version2 !== nextVersion) {
        version2 = nextVersion;
        listeners.forEach((listener) => listener(op, nextVersion));
      }
    };
    let checkVersion = versionHolder[1];
    const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
      if (checkVersion !== nextCheckVersion && !listeners.size) {
        checkVersion = nextCheckVersion;
        propProxyStates.forEach(([propProxyState]) => {
          const propVersion = propProxyState[1](nextCheckVersion);
          if (propVersion > version2) {
            version2 = propVersion;
          }
        });
      }
      return version2;
    };
    const createPropListener = (prop) => (op, nextVersion) => {
      const newOp = [...op];
      newOp[1] = [prop, ...newOp[1]];
      notifyUpdate(newOp, nextVersion);
    };
    const propProxyStates = /* @__PURE__ */ new Map();
    const addPropListener = (prop, propProxyState) => {
      if (isDev() && propProxyStates.has(prop)) {
        throw new Error("prop listener already exists");
      }
      if (listeners.size) {
        const remove3 = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove3]);
      } else {
        propProxyStates.set(prop, [propProxyState]);
      }
    };
    const removePropListener = (prop) => {
      const entry = propProxyStates.get(prop);
      if (entry) {
        propProxyStates.delete(prop);
        entry[1]?.();
      }
    };
    const addListener = (listener) => {
      listeners.add(listener);
      if (listeners.size === 1) {
        propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
          if (isDev() && prevRemove) {
            throw new Error("remove already exists");
          }
          const remove3 = propProxyState[3](createPropListener(prop));
          propProxyStates.set(prop, [propProxyState, remove3]);
        });
      }
      const removeListener = () => {
        listeners.delete(listener);
        if (listeners.size === 0) {
          propProxyStates.forEach(([propProxyState, remove3], prop) => {
            if (remove3) {
              remove3();
              propProxyStates.set(prop, [propProxyState]);
            }
          });
        }
      };
      return removeListener;
    };
    const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
    const handler = {
      deleteProperty(target, prop) {
        const prevValue = Reflect.get(target, prop);
        removePropListener(prop);
        const deleted = Reflect.deleteProperty(target, prop);
        if (deleted) {
          notifyUpdate(["delete", [prop], prevValue]);
        }
        return deleted;
      },
      set(target, prop, value, receiver) {
        const hasPrevValue = Reflect.has(target, prop);
        const prevValue = Reflect.get(target, prop, receiver);
        if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
          return true;
        }
        removePropListener(prop);
        if (isObject4(value)) {
          value = getUntracked(value) || value;
        }
        let nextValue = value;
        if (Object.getOwnPropertyDescriptor(target, prop)?.set) ;
        else {
          if (!proxyStateMap.has(value) && canProxy(value)) {
            nextValue = proxy(value);
          }
          const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
          if (childProxyState) {
            addPropListener(prop, childProxyState);
          }
        }
        Reflect.set(target, prop, nextValue, receiver);
        notifyUpdate(["set", [prop], value, prevValue]);
        return true;
      }
    };
    const proxyObject = newProxy(baseObject, handler);
    proxyCache.set(initialObject, proxyObject);
    const proxyState = [baseObject, ensureVersion, createSnapshot, addListener];
    proxyStateMap.set(proxyObject, proxyState);
    Reflect.ownKeys(initialObject).forEach((key) => {
      const desc = Object.getOwnPropertyDescriptor(initialObject, key);
      if (desc.get || desc.set) {
        Object.defineProperty(baseObject, key, desc);
      } else {
        proxyObject[key] = initialObject[key];
      }
    });
    return proxyObject;
  }) => [
    // public functions
    proxyFunction2,
    // shared state
    proxyStateMap,
    refSet,
    // internal things
    objectIs,
    newProxy,
    canProxy,
    snapCache,
    createSnapshot,
    proxyCache,
    versionHolder
  ];
  var [proxyFunction] = buildProxyFunction();
  function proxy(initialObject = {}) {
    return proxyFunction(initialObject);
  }
  function subscribe(proxyObject, callback, notifyInSync) {
    const proxyState = proxyStateMap.get(proxyObject);
    if (isDev() && !proxyState) {
      console.warn("Please use proxy object");
    }
    let promise;
    const ops = [];
    const addListener = proxyState[3];
    let isListenerActive = false;
    const listener = (op) => {
      ops.push(op);
      if (notifyInSync) {
        callback(ops.splice(0));
        return;
      }
      if (!promise) {
        promise = Promise.resolve().then(() => {
          promise = void 0;
          if (isListenerActive) {
            callback(ops.splice(0));
          }
        });
      }
    };
    const removeListener = addListener(listener);
    isListenerActive = true;
    return () => {
      isListenerActive = false;
      removeListener();
    };
  }
  function snapshot(proxyObject) {
    const proxyState = proxyStateMap.get(proxyObject);
    if (isDev() && !proxyState) {
      console.warn("Please use proxy object");
    }
    const [target, ensureVersion, createSnapshot] = proxyState;
    return createSnapshot(target, ensureVersion());
  }

  // node_modules/@zag-js/hover-card/dist/index.mjs
  var anatomy11 = createAnatomy("hoverCard").parts("arrow", "arrowTip", "trigger", "positioner", "content");
  var parts13 = anatomy11.build();
  var getTriggerId5 = (ctx) => ctx.ids?.trigger ?? `hover-card:${ctx.id}:trigger`;
  var getContentId5 = (ctx) => ctx.ids?.content ?? `hover-card:${ctx.id}:content`;
  var getPositionerId4 = (ctx) => ctx.ids?.positioner ?? `hover-card:${ctx.id}:popper`;
  var getTriggerEl4 = (ctx) => ctx.getById(getTriggerId5(ctx));
  var getContentEl5 = (ctx) => ctx.getById(getContentId5(ctx));
  var getPositionerEl4 = (ctx) => ctx.getById(getPositionerId4(ctx));
  var { not: not4, and: and4 } = createGuards();
  var machine12 = createMachine({
    props({ props: props26 }) {
      return {
        openDelay: 700,
        closeDelay: 300,
        ...props26,
        positioning: {
          placement: "bottom",
          ...props26.positioning
        }
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "closed";
    },
    context({ prop, bindable }) {
      return {
        open: bindable(() => ({
          defaultValue: prop("defaultOpen"),
          value: prop("open"),
          onChange(value) {
            prop("onOpenChange")?.({ open: value });
          }
        })),
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        })),
        isPointer: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    watch({ track, context, action }) {
      track([() => context.get("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    states: {
      closed: {
        tags: ["closed"],
        entry: ["clearIsPointer"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open"
          },
          POINTER_ENTER: {
            target: "opening",
            actions: ["setIsPointer"]
          },
          TRIGGER_FOCUS: {
            target: "opening"
          },
          OPEN: {
            target: "opening"
          }
        }
      },
      opening: {
        tags: ["closed"],
        effects: ["waitForOpenDelay"],
        on: {
          OPEN_DELAY: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          "CONTROLLED.OPEN": {
            target: "open"
          },
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          POINTER_LEAVE: [
            {
              guard: "isOpenControlled",
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["invokeOnClose", "toggleVisibility"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          TRIGGER_BLUR: [
            {
              guard: and4("isOpenControlled", not4("isPointer")),
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["invokeOnClose", "toggleVisibility"]
            },
            {
              guard: not4("isPointer"),
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["invokeOnClose", "toggleVisibility"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ]
        }
      },
      open: {
        tags: ["open"],
        effects: ["trackDismissableElement", "trackPositioning"],
        on: {
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          POINTER_ENTER: {
            actions: ["setIsPointer"]
          },
          POINTER_LEAVE: {
            target: "closing"
          },
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          TRIGGER_BLUR: [
            {
              guard: and4("isOpenControlled", not4("isPointer")),
              actions: ["invokeOnClose"]
            },
            {
              guard: not4("isPointer"),
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "POSITIONING.SET": {
            actions: ["reposition"]
          }
        }
      },
      closing: {
        tags: ["open"],
        effects: ["trackPositioning", "waitForCloseDelay"],
        on: {
          CLOSE_DELAY: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          "CONTROLLED.OPEN": {
            target: "open"
          },
          POINTER_ENTER: {
            target: "open",
            // no need to invokeOnOpen here because it's still open (but about to close)
            actions: ["setIsPointer"]
          }
        }
      }
    },
    implementations: {
      guards: {
        isPointer: ({ context }) => !!context.get("isPointer"),
        isOpenControlled: ({ prop }) => prop("open") != null
      },
      effects: {
        waitForOpenDelay({ send, prop }) {
          const id = setTimeout(() => {
            send({ type: "OPEN_DELAY" });
          }, prop("openDelay"));
          return () => clearTimeout(id);
        },
        waitForCloseDelay({ send, prop }) {
          const id = setTimeout(() => {
            send({ type: "CLOSE_DELAY" });
          }, prop("closeDelay"));
          return () => clearTimeout(id);
        },
        trackPositioning({ context, prop, scope }) {
          if (!context.get("currentPlacement")) {
            context.set("currentPlacement", prop("positioning").placement);
          }
          const getPositionerEl22 = () => getPositionerEl4(scope);
          return getPlacement(getTriggerEl4(scope), getPositionerEl22, {
            ...prop("positioning"),
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        trackDismissableElement({ send, scope, prop }) {
          const getContentEl22 = () => getContentEl5(scope);
          return trackDismissableElement(getContentEl22, {
            defer: true,
            exclude: [getTriggerEl4(scope)],
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside" });
            },
            onInteractOutside: prop("onInteractOutside"),
            onPointerDownOutside: prop("onPointerDownOutside"),
            onFocusOutside(event) {
              event.preventDefault();
              prop("onFocusOutside")?.(event);
            }
          });
        }
      },
      actions: {
        invokeOnClose({ prop }) {
          prop("onOpenChange")?.({ open: false });
        },
        invokeOnOpen({ prop }) {
          prop("onOpenChange")?.({ open: true });
        },
        setIsPointer({ context }) {
          context.set("isPointer", true);
        },
        clearIsPointer({ context }) {
          context.set("isPointer", false);
        },
        reposition({ context, prop, scope, event }) {
          const getPositionerEl22 = () => getPositionerEl4(scope);
          getPlacement(getTriggerEl4(scope), getPositionerEl22, {
            ...prop("positioning"),
            ...event.options,
            defer: true,
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        toggleVisibility({ prop, event, send }) {
          queueMicrotask(() => {
            send({ type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE", previousEvent: event });
          });
        }
      }
    }
  });
  var props12 = createProps()([
    "closeDelay",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "onOpenChange",
    "defaultOpen",
    "open",
    "openDelay",
    "positioning",
    "onInteractOutside",
    "onPointerDownOutside",
    "onFocusOutside"
  ]);
  var splitProps12 = createSplitProps(props12);

  // node_modules/@zag-js/menu/dist/index.mjs
  var anatomy12 = createAnatomy("menu").parts(
    "arrow",
    "arrowTip",
    "content",
    "contextTrigger",
    "indicator",
    "item",
    "itemGroup",
    "itemGroupLabel",
    "itemIndicator",
    "itemText",
    "positioner",
    "separator",
    "trigger",
    "triggerItem"
  );
  var parts14 = anatomy12.build();
  var getTriggerId6 = (ctx) => ctx.ids?.trigger ?? `menu:${ctx.id}:trigger`;
  var getContextTriggerId = (ctx) => ctx.ids?.contextTrigger ?? `menu:${ctx.id}:ctx-trigger`;
  var getContentId6 = (ctx) => ctx.ids?.content ?? `menu:${ctx.id}:content`;
  var getPositionerId5 = (ctx) => ctx.ids?.positioner ?? `menu:${ctx.id}:popper`;
  var getItemId2 = (ctx, id) => `${ctx.id}/${id}`;
  var getItemValue = (el) => el?.dataset.value ?? null;
  var getContentEl6 = (ctx) => ctx.getById(getContentId6(ctx));
  var getPositionerEl5 = (ctx) => ctx.getById(getPositionerId5(ctx));
  var getTriggerEl5 = (ctx) => ctx.getById(getTriggerId6(ctx));
  var getItemEl2 = (ctx, value) => value ? ctx.getById(getItemId2(ctx, value)) : null;
  var getContextTriggerEl = (ctx) => ctx.getById(getContextTriggerId(ctx));
  var getElements = (ctx) => {
    const ownerId = CSS.escape(getContentId6(ctx));
    const selector = `[role^="menuitem"][data-ownedby=${ownerId}]:not([data-disabled])`;
    return queryAll(getContentEl6(ctx), selector);
  };
  var getFirstEl = (ctx) => first(getElements(ctx));
  var getLastEl = (ctx) => last(getElements(ctx));
  var isMatch = (el, value) => {
    if (!value) return false;
    return el.id === value || el.dataset.value === value;
  };
  var getNextEl = (ctx, opts) => {
    const items = getElements(ctx);
    const index = items.findIndex((el) => isMatch(el, opts.value));
    return next2(items, index, { loop: opts.loop ?? opts.loopFocus });
  };
  var getPrevEl = (ctx, opts) => {
    const items = getElements(ctx);
    const index = items.findIndex((el) => isMatch(el, opts.value));
    return prev2(items, index, { loop: opts.loop ?? opts.loopFocus });
  };
  var getElemByKey = (ctx, opts) => {
    const items = getElements(ctx);
    const item = items.find((el) => isMatch(el, opts.value));
    return getByTypeahead(items, { state: opts.typeaheadState, key: opts.key, activeId: item?.id ?? null });
  };
  var isTriggerItem = (el) => {
    return !!el?.getAttribute("role")?.startsWith("menuitem") && !!el?.hasAttribute("aria-controls");
  };
  var itemSelectEvent = "menu:select";
  function dispatchSelectionEvent(el, value) {
    if (!el) return;
    const win = getWindow(el);
    const event = new win.CustomEvent(itemSelectEvent, { detail: { value } });
    el.dispatchEvent(event);
  }
  var { not: not5, and: and5, or } = createGuards();
  var machine13 = createMachine({
    props({ props: props26 }) {
      return {
        closeOnSelect: true,
        typeahead: true,
        composite: true,
        loopFocus: false,
        navigate(details) {
          clickIfLink(details.node);
        },
        ...props26,
        positioning: {
          placement: "bottom-start",
          gutter: 8,
          ...props26.positioning
        }
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "idle";
    },
    context({ bindable, prop }) {
      return {
        suspendPointer: bindable(() => ({
          defaultValue: false
        })),
        highlightedValue: bindable(() => ({
          defaultValue: prop("defaultHighlightedValue") || null,
          value: prop("highlightedValue"),
          onChange(value) {
            prop("onHighlightChange")?.({ highlightedValue: value });
          }
        })),
        lastHighlightedValue: bindable(() => ({
          defaultValue: null
        })),
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        })),
        intentPolygon: bindable(() => ({
          defaultValue: null
        })),
        anchorPoint: bindable(() => ({
          defaultValue: null,
          hash(value) {
            return `x: ${value?.x}, y: ${value?.y}`;
          }
        }))
      };
    },
    refs() {
      return {
        parent: null,
        children: {},
        typeaheadState: { ...getByTypeahead.defaultOptions },
        positioningOverride: {}
      };
    },
    computed: {
      isSubmenu: ({ refs }) => refs.get("parent") != null,
      isRtl: ({ prop }) => prop("dir") === "rtl",
      isTypingAhead: ({ refs }) => refs.get("typeaheadState").keysSoFar !== "",
      highlightedId: ({ context, scope, refs }) => resolveItemId(refs.get("children"), context.get("highlightedValue"), scope)
    },
    watch({ track, action, context, computed, prop }) {
      track([() => computed("isSubmenu")], () => {
        action(["setSubmenuPlacement"]);
      });
      track([() => context.hash("anchorPoint")], () => {
        action(["reposition"]);
      });
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    on: {
      "PARENT.SET": {
        actions: ["setParentMenu"]
      },
      "CHILD.SET": {
        actions: ["setChildMenu"]
      },
      OPEN: [
        {
          guard: "isOpenControlled",
          actions: ["invokeOnOpen"]
        },
        {
          target: "open",
          actions: ["invokeOnOpen"]
        }
      ],
      OPEN_AUTOFOCUS: [
        {
          guard: "isOpenControlled",
          actions: ["invokeOnOpen"]
        },
        {
          // internal: true,
          target: "open",
          actions: ["highlightFirstItem", "invokeOnOpen"]
        }
      ],
      CLOSE: [
        {
          guard: "isOpenControlled",
          actions: ["invokeOnClose"]
        },
        {
          target: "closed",
          actions: ["invokeOnClose"]
        }
      ],
      "HIGHLIGHTED.RESTORE": {
        actions: ["restoreHighlightedItem"]
      },
      "HIGHLIGHTED.SET": {
        actions: ["setHighlightedItem"]
      }
    },
    states: {
      idle: {
        tags: ["closed"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open"
          },
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          CONTEXT_MENU_START: {
            target: "opening:contextmenu",
            actions: ["setAnchorPoint"]
          },
          CONTEXT_MENU: [
            {
              guard: "isOpenControlled",
              actions: ["setAnchorPoint", "invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setAnchorPoint", "invokeOnOpen"]
            }
          ],
          TRIGGER_CLICK: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          TRIGGER_FOCUS: {
            guard: not5("isSubmenu"),
            target: "closed"
          },
          TRIGGER_POINTERMOVE: {
            guard: "isSubmenu",
            target: "opening"
          }
        }
      },
      "opening:contextmenu": {
        tags: ["closed"],
        effects: ["waitForLongPress"],
        on: {
          "CONTROLLED.OPEN": { target: "open" },
          "CONTROLLED.CLOSE": { target: "closed" },
          CONTEXT_MENU_CANCEL: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "LONG_PRESS.OPEN": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ]
        }
      },
      opening: {
        tags: ["closed"],
        effects: ["waitForOpenDelay"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open"
          },
          "CONTROLLED.CLOSE": {
            target: "closed"
          },
          BLUR: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          TRIGGER_POINTERLEAVE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "DELAY.OPEN": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ]
        }
      },
      closing: {
        tags: ["open"],
        effects: ["trackPointerMove", "trackInteractOutside", "waitForCloseDelay"],
        on: {
          "CONTROLLED.OPEN": {
            target: "open"
          },
          "CONTROLLED.CLOSE": {
            target: "closed",
            actions: ["focusParentMenu", "restoreParentHighlightedItem"]
          },
          // don't invoke on open here since the menu is still open (we're only keeping it open)
          MENU_POINTERENTER: {
            target: "open",
            actions: ["clearIntentPolygon"]
          },
          POINTER_MOVED_AWAY_FROM_SUBMENU: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["focusParentMenu", "restoreParentHighlightedItem"]
            }
          ],
          "DELAY.CLOSE": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["focusParentMenu", "restoreParentHighlightedItem", "invokeOnClose"]
            }
          ]
        }
      },
      closed: {
        tags: ["closed"],
        entry: ["clearHighlightedItem", "focusTrigger", "resumePointer"],
        on: {
          "CONTROLLED.OPEN": [
            {
              guard: or("isOpenAutoFocusEvent", "isArrowDownEvent"),
              target: "open",
              actions: ["highlightFirstItem"]
            },
            {
              guard: "isArrowUpEvent",
              target: "open",
              actions: ["highlightLastItem"]
            },
            {
              target: "open"
            }
          ],
          CONTEXT_MENU_START: {
            target: "opening:contextmenu",
            actions: ["setAnchorPoint"]
          },
          CONTEXT_MENU: [
            {
              guard: "isOpenControlled",
              actions: ["setAnchorPoint", "invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setAnchorPoint", "invokeOnOpen"]
            }
          ],
          TRIGGER_CLICK: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          TRIGGER_POINTERMOVE: {
            guard: "isTriggerItem",
            target: "opening"
          },
          TRIGGER_BLUR: { target: "idle" },
          ARROW_DOWN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["highlightFirstItem", "invokeOnOpen"]
            }
          ],
          ARROW_UP: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["highlightLastItem", "invokeOnOpen"]
            }
          ]
        }
      },
      open: {
        tags: ["open"],
        effects: ["trackInteractOutside", "trackPositioning", "scrollToHighlightedItem"],
        entry: ["focusMenu", "resumePointer"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              target: "closed",
              guard: "isArrowLeftEvent",
              actions: ["focusParentMenu"]
            },
            {
              target: "closed"
            }
          ],
          TRIGGER_CLICK: [
            {
              guard: and5(not5("isTriggerItem"), "isOpenControlled"),
              actions: ["invokeOnClose"]
            },
            {
              guard: not5("isTriggerItem"),
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          CONTEXT_MENU: {
            actions: ["setAnchorPoint", "focusMenu"]
          },
          ARROW_UP: {
            actions: ["highlightPrevItem", "focusMenu"]
          },
          ARROW_DOWN: {
            actions: ["highlightNextItem", "focusMenu"]
          },
          ARROW_LEFT: [
            {
              guard: and5("isSubmenu", "isOpenControlled"),
              actions: ["invokeOnClose"]
            },
            {
              guard: "isSubmenu",
              target: "closed",
              actions: ["focusParentMenu", "invokeOnClose"]
            }
          ],
          HOME: {
            actions: ["highlightFirstItem", "focusMenu"]
          },
          END: {
            actions: ["highlightLastItem", "focusMenu"]
          },
          ARROW_RIGHT: {
            guard: "isTriggerItemHighlighted",
            actions: ["openSubmenu"]
          },
          ENTER: [
            {
              guard: "isTriggerItemHighlighted",
              actions: ["openSubmenu"]
            },
            {
              actions: ["clickHighlightedItem"]
            }
          ],
          ITEM_POINTERMOVE: [
            {
              guard: not5("isPointerSuspended"),
              actions: ["setHighlightedItem", "focusMenu"]
            },
            {
              actions: ["setLastHighlightedItem"]
            }
          ],
          ITEM_POINTERLEAVE: {
            guard: and5(not5("isPointerSuspended"), not5("isTriggerItem")),
            actions: ["clearHighlightedItem"]
          },
          ITEM_CLICK: [
            // == grouped ==
            {
              guard: and5(
                not5("isTriggerItemHighlighted"),
                not5("isHighlightedItemEditable"),
                "closeOnSelect",
                "isOpenControlled"
              ),
              actions: ["invokeOnSelect", "setOptionState", "closeRootMenu", "invokeOnClose"]
            },
            {
              guard: and5(not5("isTriggerItemHighlighted"), not5("isHighlightedItemEditable"), "closeOnSelect"),
              target: "closed",
              actions: ["invokeOnSelect", "setOptionState", "closeRootMenu", "invokeOnClose"]
            },
            //
            {
              guard: and5(not5("isTriggerItemHighlighted"), not5("isHighlightedItemEditable")),
              actions: ["invokeOnSelect", "setOptionState"]
            },
            { actions: ["setHighlightedItem"] }
          ],
          TRIGGER_POINTERMOVE: {
            guard: "isTriggerItem",
            actions: ["setIntentPolygon"]
          },
          TRIGGER_POINTERLEAVE: {
            target: "closing"
          },
          ITEM_POINTERDOWN: {
            actions: ["setHighlightedItem"]
          },
          TYPEAHEAD: {
            actions: ["highlightMatchedItem"]
          },
          FOCUS_MENU: {
            actions: ["focusMenu"]
          },
          "POSITIONING.SET": {
            actions: ["reposition"]
          }
        }
      }
    },
    implementations: {
      guards: {
        closeOnSelect: ({ prop, event }) => !!(event?.closeOnSelect ?? prop("closeOnSelect")),
        // whether the trigger is also a menu item
        isTriggerItem: ({ event }) => isTriggerItem(event.target),
        // whether the trigger item is the active item
        isTriggerItemHighlighted: ({ event, scope, computed }) => {
          const target = event.target ?? scope.getById(computed("highlightedId"));
          return !!target?.hasAttribute("aria-controls");
        },
        isSubmenu: ({ computed }) => computed("isSubmenu"),
        isPointerSuspended: ({ context }) => context.get("suspendPointer"),
        isHighlightedItemEditable: ({ scope, computed }) => isEditableElement(scope.getById(computed("highlightedId"))),
        // guard assertions (for controlled mode)
        isOpenControlled: ({ prop }) => prop("open") !== void 0,
        isArrowLeftEvent: ({ event }) => event.previousEvent?.type === "ARROW_LEFT",
        isArrowUpEvent: ({ event }) => event.previousEvent?.type === "ARROW_UP",
        isArrowDownEvent: ({ event }) => event.previousEvent?.type === "ARROW_DOWN",
        isOpenAutoFocusEvent: ({ event }) => event.previousEvent?.type === "OPEN_AUTOFOCUS"
      },
      effects: {
        waitForOpenDelay({ send }) {
          const timer = setTimeout(() => {
            send({ type: "DELAY.OPEN" });
          }, 100);
          return () => clearTimeout(timer);
        },
        waitForCloseDelay({ send }) {
          const timer = setTimeout(() => {
            send({ type: "DELAY.CLOSE" });
          }, 300);
          return () => clearTimeout(timer);
        },
        waitForLongPress({ send }) {
          const timer = setTimeout(() => {
            send({ type: "LONG_PRESS.OPEN" });
          }, 700);
          return () => clearTimeout(timer);
        },
        trackPositioning({ context, prop, scope, refs }) {
          if (!!getContextTriggerEl(scope)) return;
          const positioning = {
            ...prop("positioning"),
            ...refs.get("positioningOverride")
          };
          context.set("currentPlacement", positioning.placement);
          const getPositionerEl22 = () => getPositionerEl5(scope);
          return getPlacement(getTriggerEl5(scope), getPositionerEl22, {
            ...positioning,
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        trackInteractOutside({ refs, scope, prop, computed, send }) {
          const getContentEl22 = () => getContentEl6(scope);
          let restoreFocus = true;
          return trackDismissableElement(getContentEl22, {
            defer: true,
            exclude: [getTriggerEl5(scope)],
            onInteractOutside: prop("onInteractOutside"),
            onFocusOutside(event) {
              prop("onFocusOutside")?.(event);
              const target = getEventTarget(event.detail.originalEvent);
              const isWithinContextTrigger = contains(getContextTriggerEl(scope), target);
              if (isWithinContextTrigger) {
                event.preventDefault();
                return;
              }
            },
            onEscapeKeyDown(event) {
              prop("onEscapeKeyDown")?.(event);
              if (computed("isSubmenu")) event.preventDefault();
              closeRootMenu({ parent: refs.get("parent") });
            },
            onPointerDownOutside(event) {
              prop("onPointerDownOutside")?.(event);
              const target = getEventTarget(event.detail.originalEvent);
              const isWithinContextTrigger = contains(getContextTriggerEl(scope), target);
              if (isWithinContextTrigger && event.detail.contextmenu) {
                event.preventDefault();
                return;
              }
              restoreFocus = !event.detail.focusable;
            },
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside", restoreFocus });
            }
          });
        },
        trackPointerMove({ context, scope, send, refs, flush: flush2 }) {
          const parent = refs.get("parent");
          flush2(() => {
            parent.context.set("suspendPointer", true);
          });
          const doc = scope.getDoc();
          return addDomEvent(doc, "pointermove", (e2) => {
            const isMovingToSubmenu = isWithinPolygon(context.get("intentPolygon"), {
              x: e2.clientX,
              y: e2.clientY
            });
            if (!isMovingToSubmenu) {
              send({ type: "POINTER_MOVED_AWAY_FROM_SUBMENU" });
              parent.context.set("suspendPointer", false);
            }
          });
        },
        scrollToHighlightedItem({ event, scope, computed }) {
          const exec = () => {
            if (event.type.startsWith("ITEM_POINTER")) return;
            const itemEl = scope.getById(computed("highlightedId"));
            const contentEl2 = getContentEl6(scope);
            scrollIntoView(itemEl, { rootEl: contentEl2, block: "nearest" });
          };
          raf(() => exec());
          const contentEl = () => getContentEl6(scope);
          return observeAttributes(contentEl, {
            defer: true,
            attributes: ["aria-activedescendant"],
            callback: exec
          });
        }
      },
      actions: {
        setAnchorPoint({ context, event }) {
          context.set("anchorPoint", (prev22) => isEqual(prev22, event.point) ? prev22 : event.point);
        },
        setSubmenuPlacement({ computed, refs }) {
          if (!computed("isSubmenu")) return;
          const placement = computed("isRtl") ? "left-start" : "right-start";
          refs.set("positioningOverride", { placement, gutter: 0 });
        },
        reposition({ context, scope, prop, event, refs }) {
          const getPositionerEl22 = () => getPositionerEl5(scope);
          const anchorPoint = context.get("anchorPoint");
          const getAnchorRect = anchorPoint ? () => ({ width: 0, height: 0, ...anchorPoint }) : void 0;
          const positioning = {
            ...prop("positioning"),
            ...refs.get("positioningOverride")
          };
          getPlacement(getTriggerEl5(scope), getPositionerEl22, {
            ...positioning,
            defer: true,
            getAnchorRect,
            ...event.options ?? {},
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        setOptionState({ event }) {
          if (!event.option) return;
          const { checked, onCheckedChange, type } = event.option;
          if (type === "radio") {
            onCheckedChange?.(true);
          } else if (type === "checkbox") {
            onCheckedChange?.(!checked);
          }
        },
        clickHighlightedItem({ scope, computed }) {
          const itemEl = scope.getById(computed("highlightedId"));
          if (!itemEl || itemEl.dataset.disabled) return;
          queueMicrotask(() => itemEl.click());
        },
        setIntentPolygon({ context, scope, event }) {
          const menu = getContentEl6(scope);
          const placement = context.get("currentPlacement");
          if (!menu || !placement) return;
          const rect = menu.getBoundingClientRect();
          const polygon = getElementPolygon(rect, placement);
          if (!polygon) return;
          const rightSide = getPlacementSide(placement) === "right";
          const bleed = rightSide ? -5 : 5;
          context.set("intentPolygon", [{ ...event.point, x: event.point.x + bleed }, ...polygon]);
        },
        clearIntentPolygon({ context }) {
          context.set("intentPolygon", null);
        },
        resumePointer({ refs, flush: flush2 }) {
          const parent = refs.get("parent");
          if (!parent) return;
          flush2(() => {
            parent.context.set("suspendPointer", false);
          });
        },
        setHighlightedItem({ context, event }) {
          const value = event.value || getItemValue(event.target);
          context.set("highlightedValue", value);
        },
        clearHighlightedItem({ context }) {
          context.set("highlightedValue", null);
        },
        focusMenu({ scope }) {
          raf(() => {
            const contentEl = getContentEl6(scope);
            const initialFocusEl = getInitialFocus({
              root: contentEl,
              enabled: !contains(contentEl, scope.getActiveElement()),
              filter(node2) {
                return !node2.role?.startsWith("menuitem");
              }
            });
            initialFocusEl?.focus({ preventScroll: true });
          });
        },
        highlightFirstItem({ context, scope }) {
          const fn = getContentEl6(scope) ? queueMicrotask : raf;
          fn(() => {
            const first2 = getFirstEl(scope);
            if (!first2) return;
            context.set("highlightedValue", getItemValue(first2));
          });
        },
        highlightLastItem({ context, scope }) {
          const fn = getContentEl6(scope) ? queueMicrotask : raf;
          fn(() => {
            const last2 = getLastEl(scope);
            if (!last2) return;
            context.set("highlightedValue", getItemValue(last2));
          });
        },
        highlightNextItem({ context, scope, event, prop }) {
          const next22 = getNextEl(scope, {
            loop: event.loop,
            value: context.get("highlightedValue"),
            loopFocus: prop("loopFocus")
          });
          context.set("highlightedValue", getItemValue(next22));
        },
        highlightPrevItem({ context, scope, event, prop }) {
          const prev22 = getPrevEl(scope, {
            loop: event.loop,
            value: context.get("highlightedValue"),
            loopFocus: prop("loopFocus")
          });
          context.set("highlightedValue", getItemValue(prev22));
        },
        invokeOnSelect({ context, prop, scope }) {
          const value = context.get("highlightedValue");
          if (value == null) return;
          const node2 = getItemEl2(scope, value);
          dispatchSelectionEvent(node2, value);
          prop("onSelect")?.({ value });
        },
        focusTrigger({ scope, context, event, computed }) {
          if (computed("isSubmenu") || context.get("anchorPoint") || event.restoreFocus === false) return;
          queueMicrotask(() => getTriggerEl5(scope)?.focus({ preventScroll: true }));
        },
        highlightMatchedItem({ scope, context, event, refs }) {
          const node2 = getElemByKey(scope, {
            key: event.key,
            value: context.get("highlightedValue"),
            typeaheadState: refs.get("typeaheadState")
          });
          if (!node2) return;
          context.set("highlightedValue", getItemValue(node2));
        },
        setParentMenu({ refs, event }) {
          refs.set("parent", event.value);
        },
        setChildMenu({ refs, event }) {
          const children = refs.get("children");
          children[event.id] = event.value;
          refs.set("children", children);
        },
        closeRootMenu({ refs }) {
          closeRootMenu({ parent: refs.get("parent") });
        },
        openSubmenu({ refs, scope, computed }) {
          const item = scope.getById(computed("highlightedId"));
          const id = item?.getAttribute("data-uid");
          const children = refs.get("children");
          const child = id ? children[id] : null;
          child?.send({ type: "OPEN_AUTOFOCUS" });
        },
        focusParentMenu({ refs }) {
          refs.get("parent")?.send({ type: "FOCUS_MENU" });
        },
        setLastHighlightedItem({ context, event }) {
          context.set("lastHighlightedValue", getItemValue(event.target));
        },
        restoreHighlightedItem({ context }) {
          if (!context.get("lastHighlightedValue")) return;
          context.set("highlightedValue", context.get("lastHighlightedValue"));
          context.set("lastHighlightedValue", null);
        },
        restoreParentHighlightedItem({ refs }) {
          refs.get("parent")?.send({ type: "HIGHLIGHTED.RESTORE" });
        },
        invokeOnOpen({ prop }) {
          prop("onOpenChange")?.({ open: true });
        },
        invokeOnClose({ prop }) {
          prop("onOpenChange")?.({ open: false });
        },
        toggleVisibility({ prop, event, send }) {
          send({
            type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
            previousEvent: event
          });
        }
      }
    }
  });
  function closeRootMenu(ctx) {
    let parent = ctx.parent;
    while (parent && parent.computed("isSubmenu")) {
      parent = parent.refs.get("parent");
    }
    parent?.send({ type: "CLOSE" });
  }
  function isWithinPolygon(polygon, point) {
    if (!polygon) return false;
    return isPointInPolygon(polygon, point);
  }
  function resolveItemId(children, value, scope) {
    const hasChildren = Object.keys(children).length > 0;
    if (!value) return null;
    if (!hasChildren) {
      return getItemId2(scope, value);
    }
    for (const id in children) {
      const childMenu = children[id];
      const childTriggerId = getTriggerId6(childMenu.scope);
      if (childTriggerId === value) {
        return childTriggerId;
      }
    }
    return getItemId2(scope, value);
  }
  var props13 = createProps()([
    "anchorPoint",
    "aria-label",
    "closeOnSelect",
    "composite",
    "defaultHighlightedValue",
    "defaultOpen",
    "dir",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "loopFocus",
    "navigate",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onHighlightChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "open",
    "positioning",
    "typeahead"
  ]);
  var splitProps13 = createSplitProps(props13);
  var itemProps4 = createProps()(["closeOnSelect", "disabled", "value", "valueText"]);
  var splitItemProps4 = createSplitProps(itemProps4);
  var itemGroupLabelProps2 = createProps()(["htmlFor"]);
  var splitItemGroupLabelProps2 = createSplitProps(itemGroupLabelProps2);
  var itemGroupProps2 = createProps()(["id"]);
  var splitItemGroupProps2 = createSplitProps(itemGroupProps2);
  var optionItemProps = createProps()([
    "checked",
    "closeOnSelect",
    "disabled",
    "onCheckedChange",
    "type",
    "value",
    "valueText"
  ]);
  var splitOptionItemProps = createSplitProps(optionItemProps);

  // node_modules/@zag-js/tree-view/dist/index.mjs
  var anatomy13 = createAnatomy("tree-view").parts(
    "branch",
    "branchContent",
    "branchControl",
    "branchIndentGuide",
    "branchIndicator",
    "branchText",
    "branchTrigger",
    "item",
    "itemIndicator",
    "itemText",
    "label",
    "nodeCheckbox",
    "root",
    "tree"
  );
  var parts15 = anatomy13.build();
  var collection2 = (options) => {
    return new TreeCollection(options);
  };
  collection2.empty = () => {
    return new TreeCollection({ rootNode: { children: [] } });
  };
  var getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;
  var focusNode = (ctx, value) => {
    if (value == null) return;
    ctx.getById(getNodeId(ctx, value))?.focus();
  };
  function toggleBranchChecked(collection22, value, checkedValue) {
    const childValues = collection22.getDescendantValues(value);
    const allChecked = childValues.every((child) => checkedValue.includes(child));
    return uniq2(allChecked ? remove(checkedValue, ...childValues) : add(checkedValue, ...childValues));
  }
  function expandBranches(params, values) {
    const { context, prop, refs } = params;
    if (!prop("loadChildren")) {
      context.set("expandedValue", (prev3) => uniq2(add(prev3, ...values)));
      return;
    }
    const loadingStatus = context.get("loadingStatus");
    const [loadedValues, loadingValues] = partition(values, (value) => loadingStatus[value] === "loaded");
    if (loadedValues.length > 0) {
      context.set("expandedValue", (prev3) => uniq2(add(prev3, ...loadedValues)));
    }
    if (loadingValues.length === 0) return;
    const collection22 = prop("collection");
    const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, (id) => {
      const node2 = collection22.findNode(id);
      return collection22.getNodeChildren(node2).length > 0;
    });
    if (nodeWithChildren.length > 0) {
      context.set("expandedValue", (prev3) => uniq2(add(prev3, ...nodeWithChildren)));
    }
    if (nodeWithoutChildren.length === 0) return;
    context.set("loadingStatus", (prev3) => ({
      ...prev3,
      ...nodeWithoutChildren.reduce((acc, id) => ({ ...acc, [id]: "loading" }), {})
    }));
    const nodesToLoad = nodeWithoutChildren.map((id) => {
      const indexPath = collection22.getIndexPath(id);
      const valuePath = collection22.getValuePath(indexPath);
      const node2 = collection22.findNode(id);
      return { id, indexPath, valuePath, node: node2 };
    });
    const pendingAborts = refs.get("pendingAborts");
    const loadChildren = prop("loadChildren");
    ensure(loadChildren, () => "[zag-js/tree-view] `loadChildren` is required for async expansion");
    const proms = nodesToLoad.map(({ id, indexPath, valuePath, node: node2 }) => {
      const existingAbort = pendingAborts.get(id);
      if (existingAbort) {
        existingAbort.abort();
        pendingAborts.delete(id);
      }
      const abortController = new AbortController();
      pendingAborts.set(id, abortController);
      return loadChildren({
        valuePath,
        indexPath,
        node: node2,
        signal: abortController.signal
      });
    });
    Promise.allSettled(proms).then((results) => {
      const loadedValues2 = [];
      const nodeWithErrors = [];
      const nextLoadingStatus = context.get("loadingStatus");
      let collection32 = prop("collection");
      results.forEach((result, index) => {
        const { id, indexPath, node: node2, valuePath } = nodesToLoad[index];
        if (result.status === "fulfilled") {
          nextLoadingStatus[id] = "loaded";
          loadedValues2.push(id);
          collection32 = collection32.replace(indexPath, { ...node2, children: result.value });
        } else {
          pendingAborts.delete(id);
          Reflect.deleteProperty(nextLoadingStatus, id);
          nodeWithErrors.push({ node: node2, error: result.reason, indexPath, valuePath });
        }
      });
      context.set("loadingStatus", nextLoadingStatus);
      if (loadedValues2.length) {
        context.set("expandedValue", (prev3) => uniq2(add(prev3, ...loadedValues2)));
        prop("onLoadChildrenComplete")?.({ collection: collection32 });
      }
      if (nodeWithErrors.length) {
        prop("onLoadChildrenError")?.({ nodes: nodeWithErrors });
      }
    });
  }
  function skipFn(params) {
    const { prop, context } = params;
    return function skip({ indexPath }) {
      const paths = prop("collection").getValuePath(indexPath).slice(0, -1);
      return paths.some((value) => !context.get("expandedValue").includes(value));
    };
  }
  var { and: and6 } = createGuards();
  var machine14 = createMachine({
    props({ props: props26 }) {
      return {
        selectionMode: "single",
        collection: collection2.empty(),
        typeahead: true,
        expandOnClick: true,
        defaultExpandedValue: [],
        defaultSelectedValue: [],
        ...props26
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable, getContext }) {
      return {
        expandedValue: bindable(() => ({
          defaultValue: prop("defaultExpandedValue"),
          value: prop("expandedValue"),
          isEqual,
          onChange(expandedValue) {
            const ctx = getContext();
            const focusedValue = ctx.get("focusedValue");
            prop("onExpandedChange")?.({
              expandedValue,
              focusedValue,
              get expandedNodes() {
                return prop("collection").findNodes(expandedValue);
              }
            });
          }
        })),
        selectedValue: bindable(() => ({
          defaultValue: prop("defaultSelectedValue"),
          value: prop("selectedValue"),
          isEqual,
          onChange(selectedValue) {
            const ctx = getContext();
            const focusedValue = ctx.get("focusedValue");
            prop("onSelectionChange")?.({
              selectedValue,
              focusedValue,
              get selectedNodes() {
                return prop("collection").findNodes(selectedValue);
              }
            });
          }
        })),
        focusedValue: bindable(() => ({
          defaultValue: prop("defaultFocusedValue") || null,
          value: prop("focusedValue"),
          onChange(focusedValue) {
            prop("onFocusChange")?.({
              focusedValue,
              get focusedNode() {
                return focusedValue ? prop("collection").findNode(focusedValue) : null;
              }
            });
          }
        })),
        loadingStatus: bindable(() => ({
          defaultValue: {}
        })),
        checkedValue: bindable(() => ({
          defaultValue: prop("defaultCheckedValue") || [],
          value: prop("checkedValue"),
          isEqual,
          onChange(value) {
            prop("onCheckedChange")?.({ checkedValue: value });
          }
        }))
      };
    },
    refs() {
      return {
        typeaheadState: { ...getByTypeahead.defaultOptions },
        pendingAborts: /* @__PURE__ */ new Map()
      };
    },
    computed: {
      isMultipleSelection: ({ prop }) => prop("selectionMode") === "multiple",
      isTypingAhead: ({ refs }) => refs.get("typeaheadState").keysSoFar.length > 0,
      visibleNodes: ({ prop, context }) => {
        const nodes = [];
        prop("collection").visit({
          skip: skipFn({ prop, context }),
          onEnter: (node2, indexPath) => {
            nodes.push({ node: node2, indexPath });
          }
        });
        return nodes;
      }
    },
    on: {
      "EXPANDED.SET": {
        actions: ["setExpanded"]
      },
      "EXPANDED.CLEAR": {
        actions: ["clearExpanded"]
      },
      "EXPANDED.ALL": {
        actions: ["expandAllBranches"]
      },
      "BRANCH.EXPAND": {
        actions: ["expandBranches"]
      },
      "BRANCH.COLLAPSE": {
        actions: ["collapseBranches"]
      },
      "SELECTED.SET": {
        actions: ["setSelected"]
      },
      "SELECTED.ALL": [
        {
          guard: and6("isMultipleSelection", "moveFocus"),
          actions: ["selectAllNodes", "focusTreeLastNode"]
        },
        {
          guard: "isMultipleSelection",
          actions: ["selectAllNodes"]
        }
      ],
      "SELECTED.CLEAR": {
        actions: ["clearSelected"]
      },
      "NODE.SELECT": {
        actions: ["selectNode"]
      },
      "NODE.DESELECT": {
        actions: ["deselectNode"]
      },
      "CHECKED.TOGGLE": {
        actions: ["toggleChecked"]
      },
      "CHECKED.SET": {
        actions: ["setChecked"]
      },
      "CHECKED.CLEAR": {
        actions: ["clearChecked"]
      }
    },
    exit: ["clearPendingAborts"],
    states: {
      idle: {
        on: {
          "NODE.FOCUS": {
            actions: ["setFocusedNode"]
          },
          "NODE.ARROW_DOWN": [
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["focusTreeNextNode", "extendSelectionToNextNode"]
            },
            {
              actions: ["focusTreeNextNode"]
            }
          ],
          "NODE.ARROW_UP": [
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["focusTreePrevNode", "extendSelectionToPrevNode"]
            },
            {
              actions: ["focusTreePrevNode"]
            }
          ],
          "NODE.ARROW_LEFT": {
            actions: ["focusBranchNode"]
          },
          "BRANCH_NODE.ARROW_LEFT": [
            {
              guard: "isBranchExpanded",
              actions: ["collapseBranch"]
            },
            {
              actions: ["focusBranchNode"]
            }
          ],
          "BRANCH_NODE.ARROW_RIGHT": [
            {
              guard: and6("isBranchFocused", "isBranchExpanded"),
              actions: ["focusBranchFirstNode"]
            },
            {
              actions: ["expandBranch"]
            }
          ],
          "SIBLINGS.EXPAND": {
            actions: ["expandSiblingBranches"]
          },
          "NODE.HOME": [
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["extendSelectionToFirstNode", "focusTreeFirstNode"]
            },
            {
              actions: ["focusTreeFirstNode"]
            }
          ],
          "NODE.END": [
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["extendSelectionToLastNode", "focusTreeLastNode"]
            },
            {
              actions: ["focusTreeLastNode"]
            }
          ],
          "NODE.CLICK": [
            {
              guard: and6("isCtrlKey", "isMultipleSelection"),
              actions: ["toggleNodeSelection"]
            },
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["extendSelectionToNode"]
            },
            {
              actions: ["selectNode"]
            }
          ],
          "BRANCH_NODE.CLICK": [
            {
              guard: and6("isCtrlKey", "isMultipleSelection"),
              actions: ["toggleNodeSelection"]
            },
            {
              guard: and6("isShiftKey", "isMultipleSelection"),
              actions: ["extendSelectionToNode"]
            },
            {
              guard: "expandOnClick",
              actions: ["selectNode", "toggleBranchNode"]
            },
            {
              actions: ["selectNode"]
            }
          ],
          "BRANCH_TOGGLE.CLICK": {
            actions: ["toggleBranchNode"]
          },
          "TREE.TYPEAHEAD": {
            actions: ["focusMatchedNode"]
          }
        }
      }
    },
    implementations: {
      guards: {
        isBranchFocused: ({ context, event }) => context.get("focusedValue") === event.id,
        isBranchExpanded: ({ context, event }) => context.get("expandedValue").includes(event.id),
        isShiftKey: ({ event }) => event.shiftKey,
        isCtrlKey: ({ event }) => event.ctrlKey,
        hasSelectedItems: ({ context }) => context.get("selectedValue").length > 0,
        isMultipleSelection: ({ prop }) => prop("selectionMode") === "multiple",
        moveFocus: ({ event }) => !!event.moveFocus,
        expandOnClick: ({ prop }) => !!prop("expandOnClick")
      },
      actions: {
        selectNode({ context, event }) {
          const value = event.id || event.value;
          context.set("selectedValue", (prev3) => {
            if (value == null) return prev3;
            if (!event.isTrusted && isArray(value)) return prev3.concat(...value);
            return [isArray(value) ? last(value) : value].filter(Boolean);
          });
        },
        deselectNode({ context, event }) {
          const value = toArray2(event.id || event.value);
          context.set("selectedValue", (prev3) => remove(prev3, ...value));
        },
        setFocusedNode({ context, event }) {
          context.set("focusedValue", event.id);
        },
        clearFocusedNode({ context }) {
          context.set("focusedValue", null);
        },
        clearSelectedItem({ context }) {
          context.set("selectedValue", []);
        },
        toggleBranchNode({ context, event, action }) {
          const isExpanded = context.get("expandedValue").includes(event.id);
          action(isExpanded ? ["collapseBranch"] : ["expandBranch"]);
        },
        expandBranch(params) {
          const { event } = params;
          expandBranches(params, [event.id]);
        },
        expandBranches(params) {
          const { context, event } = params;
          const valuesToExpand = toArray2(event.value);
          expandBranches(params, diff(valuesToExpand, context.get("expandedValue")));
        },
        collapseBranch({ context, event }) {
          context.set("expandedValue", (prev3) => remove(prev3, event.id));
        },
        collapseBranches(params) {
          const { context, event } = params;
          const value = toArray2(event.value);
          context.set("expandedValue", (prev3) => remove(prev3, ...value));
        },
        setExpanded({ context, event }) {
          if (!isArray(event.value)) return;
          context.set("expandedValue", event.value);
        },
        clearExpanded({ context }) {
          context.set("expandedValue", []);
        },
        setSelected({ context, event }) {
          if (!isArray(event.value)) return;
          context.set("selectedValue", event.value);
        },
        clearSelected({ context }) {
          context.set("selectedValue", []);
        },
        focusTreeFirstNode({ prop, scope }) {
          const collection22 = prop("collection");
          const firstNode = collection22.getFirstNode();
          const firstValue = collection22.getNodeValue(firstNode);
          focusNode(scope, firstValue);
        },
        focusTreeLastNode(params) {
          const { prop, scope } = params;
          const collection22 = prop("collection");
          const lastNode = collection22.getLastNode(void 0, { skip: skipFn(params) });
          const lastValue = collection22.getNodeValue(lastNode);
          focusNode(scope, lastValue);
        },
        focusBranchFirstNode({ event, prop, scope }) {
          const collection22 = prop("collection");
          const branchNode = collection22.findNode(event.id);
          const firstNode = collection22.getFirstNode(branchNode);
          const firstValue = collection22.getNodeValue(firstNode);
          focusNode(scope, firstValue);
        },
        focusTreeNextNode(params) {
          const { event, prop, scope } = params;
          const collection22 = prop("collection");
          const nextNode = collection22.getNextNode(event.id, { skip: skipFn(params) });
          if (!nextNode) return;
          const nextValue = collection22.getNodeValue(nextNode);
          focusNode(scope, nextValue);
        },
        focusTreePrevNode(params) {
          const { event, prop, scope } = params;
          const collection22 = prop("collection");
          const prevNode = collection22.getPreviousNode(event.id, { skip: skipFn(params) });
          if (!prevNode) return;
          const prevValue = collection22.getNodeValue(prevNode);
          focusNode(scope, prevValue);
        },
        focusBranchNode({ event, prop, scope }) {
          const collection22 = prop("collection");
          const parentNode = collection22.getParentNode(event.id);
          const parentValue = parentNode ? collection22.getNodeValue(parentNode) : void 0;
          focusNode(scope, parentValue);
        },
        selectAllNodes({ context, prop }) {
          context.set("selectedValue", prop("collection").getValues());
        },
        focusMatchedNode(params) {
          const { context, prop, refs, event, scope, computed } = params;
          const nodes = computed("visibleNodes");
          const elements = nodes.map(({ node: node22 }) => ({
            textContent: prop("collection").stringifyNode(node22),
            id: prop("collection").getNodeValue(node22)
          }));
          const node2 = getByTypeahead(elements, {
            state: refs.get("typeaheadState"),
            activeId: context.get("focusedValue"),
            key: event.key
          });
          focusNode(scope, node2?.id);
        },
        toggleNodeSelection({ context, event }) {
          const selectedValue = addOrRemove(context.get("selectedValue"), event.id);
          context.set("selectedValue", selectedValue);
        },
        expandAllBranches(params) {
          const { context, prop } = params;
          const branchValues = prop("collection").getBranchValues();
          const valuesToExpand = diff(branchValues, context.get("expandedValue"));
          expandBranches(params, valuesToExpand);
        },
        expandSiblingBranches(params) {
          const { context, event, prop } = params;
          const collection22 = prop("collection");
          const indexPath = collection22.getIndexPath(event.id);
          if (!indexPath) return;
          const nodes = collection22.getSiblingNodes(indexPath);
          const values = nodes.map((node2) => collection22.getNodeValue(node2));
          const valuesToExpand = diff(values, context.get("expandedValue"));
          expandBranches(params, valuesToExpand);
        },
        extendSelectionToNode(params) {
          const { context, event, prop, computed } = params;
          const collection22 = prop("collection");
          const anchorValue = first(context.get("selectedValue")) || collection22.getNodeValue(collection22.getFirstNode());
          const targetValue = event.id;
          let values = [anchorValue, targetValue];
          let hits = 0;
          const visibleNodes = computed("visibleNodes");
          visibleNodes.forEach(({ node: node2 }) => {
            const nodeValue = collection22.getNodeValue(node2);
            if (hits === 1) values.push(nodeValue);
            if (nodeValue === anchorValue || nodeValue === targetValue) hits++;
          });
          context.set("selectedValue", uniq2(values));
        },
        extendSelectionToNextNode(params) {
          const { context, event, prop } = params;
          const collection22 = prop("collection");
          const nextNode = collection22.getNextNode(event.id, { skip: skipFn(params) });
          if (!nextNode) return;
          const values = new Set(context.get("selectedValue"));
          const nextValue = collection22.getNodeValue(nextNode);
          if (nextValue == null) return;
          if (values.has(event.id) && values.has(nextValue)) {
            values.delete(event.id);
          } else if (!values.has(nextValue)) {
            values.add(nextValue);
          }
          context.set("selectedValue", Array.from(values));
        },
        extendSelectionToPrevNode(params) {
          const { context, event, prop } = params;
          const collection22 = prop("collection");
          const prevNode = collection22.getPreviousNode(event.id, { skip: skipFn(params) });
          if (!prevNode) return;
          const values = new Set(context.get("selectedValue"));
          const prevValue = collection22.getNodeValue(prevNode);
          if (prevValue == null) return;
          if (values.has(event.id) && values.has(prevValue)) {
            values.delete(event.id);
          } else if (!values.has(prevValue)) {
            values.add(prevValue);
          }
          context.set("selectedValue", Array.from(values));
        },
        extendSelectionToFirstNode(params) {
          const { context, prop } = params;
          const collection22 = prop("collection");
          const currentSelection = first(context.get("selectedValue"));
          const values = [];
          collection22.visit({
            skip: skipFn(params),
            onEnter: (node2) => {
              const nodeValue = collection22.getNodeValue(node2);
              values.push(nodeValue);
              if (nodeValue === currentSelection) {
                return "stop";
              }
            }
          });
          context.set("selectedValue", values);
        },
        extendSelectionToLastNode(params) {
          const { context, prop } = params;
          const collection22 = prop("collection");
          const currentSelection = first(context.get("selectedValue"));
          const values = [];
          let current = false;
          collection22.visit({
            skip: skipFn(params),
            onEnter: (node2) => {
              const nodeValue = collection22.getNodeValue(node2);
              if (nodeValue === currentSelection) current = true;
              if (current) values.push(nodeValue);
            }
          });
          context.set("selectedValue", values);
        },
        clearPendingAborts({ refs }) {
          const aborts = refs.get("pendingAborts");
          aborts.forEach((abort) => abort.abort());
          aborts.clear();
        },
        toggleChecked({ context, event, prop }) {
          const collection22 = prop("collection");
          context.set(
            "checkedValue",
            (prev3) => event.isBranch ? toggleBranchChecked(collection22, event.value, prev3) : addOrRemove(prev3, event.value)
          );
        },
        setChecked({ context, event }) {
          context.set("checkedValue", event.value);
        },
        clearChecked({ context }) {
          context.set("checkedValue", []);
        }
      }
    }
  });
  var props14 = createProps()([
    "ids",
    "collection",
    "dir",
    "expandedValue",
    "expandOnClick",
    "defaultFocusedValue",
    "focusedValue",
    "getRootNode",
    "id",
    "onExpandedChange",
    "onFocusChange",
    "onSelectionChange",
    "checkedValue",
    "selectedValue",
    "selectionMode",
    "typeahead",
    "defaultExpandedValue",
    "defaultSelectedValue",
    "defaultCheckedValue",
    "onCheckedChange",
    "onLoadChildrenComplete",
    "onLoadChildrenError",
    "loadChildren"
  ]);
  var splitProps14 = createSplitProps(props14);
  var itemProps5 = createProps()(["node", "indexPath"]);
  var splitItemProps5 = createSplitProps(itemProps5);

  // node_modules/@internationalized/number/dist/NumberFormatter.mjs
  var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
  var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
  try {
    $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
      signDisplay: "exceptZero"
    }).resolvedOptions().signDisplay === "exceptZero";
  } catch {
  }
  var $488c6ddbf4ef74c2$var$supportsUnit = false;
  try {
    $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
      style: "unit",
      unit: "degree"
    }).resolvedOptions().style === "unit";
  } catch {
  }
  var $488c6ddbf4ef74c2$var$UNITS = {
    degree: {
      narrow: {
        default: "\xB0",
        "ja-JP": " \u5EA6",
        "zh-TW": "\u5EA6",
        "sl-SI": " \xB0"
      }
    }
  };
  var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
    /** Formats a number value as a string, according to the locale and options provided to the constructor. */
    format(value) {
      let res = "";
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
      else res = this.numberFormatter.format(value);
      if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
        var _UNITS_unit;
        let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
        if (!unit) return res;
        let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
        res += values[locale] || values.default;
      }
      return res;
    }
    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
    formatToParts(value) {
      return this.numberFormatter.formatToParts(value);
    }
    /** Formats a number range as a string. */
    formatRange(start, end) {
      if (typeof this.numberFormatter.formatRange === "function") return this.numberFormatter.formatRange(start, end);
      if (end < start) throw new RangeError("End date must be >= start date");
      return `${this.format(start)} \u2013 ${this.format(end)}`;
    }
    /** Formats a number range as an array of parts. */
    formatRangeToParts(start, end) {
      if (typeof this.numberFormatter.formatRangeToParts === "function") return this.numberFormatter.formatRangeToParts(start, end);
      if (end < start) throw new RangeError("End date must be >= start date");
      let startParts = this.numberFormatter.formatToParts(start);
      let endParts = this.numberFormatter.formatToParts(end);
      return [
        ...startParts.map((p) => ({
          ...p,
          source: "startRange"
        })),
        {
          type: "literal",
          value: " \u2013 ",
          source: "shared"
        },
        ...endParts.map((p) => ({
          ...p,
          source: "endRange"
        }))
      ];
    }
    /** Returns the resolved formatting options based on the values passed to the constructor. */
    resolvedOptions() {
      let options = this.numberFormatter.resolvedOptions();
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {
        ...options,
        signDisplay: this.options.signDisplay
      };
      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit") options = {
        ...options,
        style: "unit",
        unit: this.options.unit,
        unitDisplay: this.options.unitDisplay
      };
      return options;
    }
    constructor(locale, options = {}) {
      this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
      this.options = options;
    }
  };
  function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
    let { numberingSystem } = options;
    if (numberingSystem && locale.includes("-nu-")) {
      if (!locale.includes("-u-")) locale += "-u-";
      locale += `-nu-${numberingSystem}`;
    }
    if (options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var _UNITS_unit;
      let { unit, unitDisplay = "short" } = options;
      if (!unit) throw new Error('unit option must be provided with style: "unit"');
      if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
      options = {
        ...options,
        style: "decimal"
      };
    }
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b2) => a[0] < b2[0] ? -1 : 1).join() : "");
    if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.NumberFormat(locale, options);
    $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
  }
  function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
    if (signDisplay === "auto") return numberFormat.format(num);
    else if (signDisplay === "never") return numberFormat.format(Math.abs(num));
    else {
      let needsPositiveSign = false;
      if (signDisplay === "always") needsPositiveSign = num > 0 || Object.is(num, 0);
      else if (signDisplay === "exceptZero") {
        if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);
        else needsPositiveSign = num > 0;
      }
      if (needsPositiveSign) {
        let negative = numberFormat.format(-num);
        let noSign = numberFormat.format(num);
        let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
        if ([
          ...minus
        ].length !== 1) console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
        let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
        return positive;
      } else return numberFormat.format(num);
    }
  }

  // node_modules/@internationalized/number/dist/NumberParser.mjs
  var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
  var $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
    "latn",
    "arab",
    "hanidec",
    "deva",
    "beng"
  ];
  var $6c7bd7858deea686$export$cd11ab140839f11d = class {
    /**
    * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
    */
    parse(value) {
      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
    }
    /**
    * Returns whether the given string could potentially be a valid number. This should be used to
    * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
    * of the minus/plus sign characters can be checked.
    */
    isValidPartialNumber(value, minValue, maxValue2) {
      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue2);
    }
    /**
    * Returns a numbering system for which the given string is valid in the current locale.
    * If no numbering system could be detected, the default numbering system for the current
    * locale is returned.
    */
    getNumberingSystem(value) {
      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
    }
    constructor(locale, options = {}) {
      this.locale = locale;
      this.options = options;
    }
  };
  var $6c7bd7858deea686$var$numberParserCache = /* @__PURE__ */ new Map();
  function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
    let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);
    if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
      for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {
        let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options);
        if (parser.isValidPartialNumber(value)) return parser;
      }
    }
    return defaultParser;
  }
  function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b2) => a[0] < b2[0] ? -1 : 1).join() : "");
    let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
    if (!parser) {
      parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
      $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
    }
    return parser;
  }
  var $6c7bd7858deea686$var$NumberParserImpl = class {
    parse(value) {
      let fullySanitizedValue = this.sanitize(value);
      if (this.symbols.group)
        fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, "");
      if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, ".");
      if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, "-");
      fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);
      if (this.options.style === "percent") {
        let isNegative = fullySanitizedValue.indexOf("-");
        fullySanitizedValue = fullySanitizedValue.replace("-", "");
        fullySanitizedValue = fullySanitizedValue.replace("+", "");
        let index = fullySanitizedValue.indexOf(".");
        if (index === -1) index = fullySanitizedValue.length;
        fullySanitizedValue = fullySanitizedValue.replace(".", "");
        if (index - 2 === 0) fullySanitizedValue = `0.${fullySanitizedValue}`;
        else if (index - 2 === -1) fullySanitizedValue = `0.0${fullySanitizedValue}`;
        else if (index - 2 === -2) fullySanitizedValue = "0.00";
        else fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;
        if (isNegative > -1) fullySanitizedValue = `-${fullySanitizedValue}`;
      }
      let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
      if (isNaN(newValue)) return NaN;
      if (this.options.style === "percent") {
        var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
        let options = {
          ...this.options,
          style: "decimal",
          minimumFractionDigits: Math.min(((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) + 2, 20),
          maximumFractionDigits: Math.min(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2, 20)
        };
        return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options).parse(new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(this.locale, options).format(newValue));
      }
      if (this.options.currencySign === "accounting" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;
      return newValue;
    }
    sanitize(value) {
      value = value.replace(this.symbols.literals, "");
      if (this.symbols.minusSign) value = value.replace("-", this.symbols.minusSign);
      if (this.options.numberingSystem === "arab") {
        if (this.symbols.decimal) {
          value = value.replace(",", this.symbols.decimal);
          value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
        }
        if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, ".", this.symbols.group);
      }
      if (this.options.locale === "fr-FR" && this.symbols.group) {
        value = $6c7bd7858deea686$var$replaceAll(value, " ", this.symbols.group);
        value = $6c7bd7858deea686$var$replaceAll(value, /\u00A0/g, this.symbols.group);
      }
      return value;
    }
    isValidPartialNumber(value, minValue = -Infinity, maxValue2 = Infinity) {
      value = this.sanitize(value);
      if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);
      else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue2 > 0) value = value.slice(this.symbols.plusSign.length);
      if (this.symbols.group && value.startsWith(this.symbols.group)) return false;
      if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;
      if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, "");
      value = value.replace(this.symbols.numeral, "");
      if (this.symbols.decimal) value = value.replace(this.symbols.decimal, "");
      return value.length === 0;
    }
    constructor(locale, options = {}) {
      this.locale = locale;
      if (options.roundingIncrement !== 1 && options.roundingIncrement != null) {
        if (options.maximumFractionDigits == null && options.minimumFractionDigits == null) {
          options.maximumFractionDigits = 0;
          options.minimumFractionDigits = 0;
        } else if (options.maximumFractionDigits == null) options.maximumFractionDigits = options.minimumFractionDigits;
        else if (options.minimumFractionDigits == null) options.minimumFractionDigits = options.maximumFractionDigits;
      }
      this.formatter = new Intl.NumberFormat(locale, options);
      this.options = this.formatter.resolvedOptions();
      this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options);
      var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
      if (this.options.style === "percent" && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn("NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.");
    }
  };
  var $6c7bd7858deea686$var$nonLiteralParts = /* @__PURE__ */ new Set([
    "decimal",
    "fraction",
    "integer",
    "minusSign",
    "plusSign",
    "group"
  ]);
  var $6c7bd7858deea686$var$pluralNumbers = [
    0,
    4,
    2,
    1,
    11,
    20,
    3,
    7,
    100,
    21,
    0.1,
    1.1
  ];
  function $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {
    var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;
    let symbolFormatter = new Intl.NumberFormat(locale, {
      ...intlOptions,
      // Resets so we get the full range of symbols
      minimumSignificantDigits: 1,
      maximumSignificantDigits: 21,
      roundingIncrement: 1,
      roundingPriority: "auto",
      roundingMode: "halfExpand"
    });
    let allParts = symbolFormatter.formatToParts(-10000.111);
    let posAllParts = symbolFormatter.formatToParts(10000.111);
    let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n2) => symbolFormatter.formatToParts(n2));
    var _allParts_find_value;
    let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p) => p.type === "minusSign")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : "-";
    let plusSign = (_posAllParts_find = posAllParts.find((p) => p.type === "plusSign")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
    if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always")) plusSign = "+";
    let decimalParts = new Intl.NumberFormat(locale, {
      ...intlOptions,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).formatToParts(1e-3);
    let decimal = (_decimalParts_find = decimalParts.find((p) => p.type === "decimal")) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;
    let group = (_allParts_find1 = allParts.find((p) => p.type === "group")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
    let allPartsLiterals = allParts.filter((p) => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p) => $6c7bd7858deea686$var$escapeRegex(p.value));
    let pluralPartsLiterals = pluralParts.flatMap((p) => p.filter((p2) => !$6c7bd7858deea686$var$nonLiteralParts.has(p2.type)).map((p2) => $6c7bd7858deea686$var$escapeRegex(p2.value)));
    let sortedLiterals = [
      .../* @__PURE__ */ new Set([
        ...allPartsLiterals,
        ...pluralPartsLiterals
      ])
    ].sort((a, b2) => b2.length - a.length);
    let literals = sortedLiterals.length === 0 ? new RegExp("[\\p{White_Space}]", "gu") : new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
    let numerals = [
      ...new Intl.NumberFormat(intlOptions.locale, {
        useGrouping: false
      }).format(9876543210)
    ].reverse();
    let indexes = new Map(numerals.map((d, i2) => [
      d,
      i2
    ]));
    let numeral = new RegExp(`[${numerals.join("")}]`, "g");
    let index = (d) => String(indexes.get(d));
    return {
      minusSign,
      plusSign,
      decimal,
      group,
      literals,
      numeral,
      index
    };
  }
  function $6c7bd7858deea686$var$replaceAll(str, find2, replace4) {
    if (str.replaceAll) return str.replaceAll(find2, replace4);
    return str.split(find2).join(replace4);
  }
  function $6c7bd7858deea686$var$escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }

  // node_modules/@zag-js/number-input/dist/index.mjs
  var anatomy14 = createAnatomy("numberInput").parts(
    "root",
    "label",
    "input",
    "control",
    "valueText",
    "incrementTrigger",
    "decrementTrigger",
    "scrubber"
  );
  var parts16 = anatomy14.build();
  var getInputId4 = (ctx) => ctx.ids?.input ?? `number-input:${ctx.id}:input`;
  var getIncrementTriggerId = (ctx) => ctx.ids?.incrementTrigger ?? `number-input:${ctx.id}:inc`;
  var getDecrementTriggerId = (ctx) => ctx.ids?.decrementTrigger ?? `number-input:${ctx.id}:dec`;
  var getCursorId = (ctx) => `number-input:${ctx.id}:cursor`;
  var getInputEl4 = (ctx) => ctx.getById(getInputId4(ctx));
  var getIncrementTriggerEl = (ctx) => ctx.getById(getIncrementTriggerId(ctx));
  var getDecrementTriggerEl = (ctx) => ctx.getById(getDecrementTriggerId(ctx));
  var getCursorEl = (ctx) => ctx.getDoc().getElementById(getCursorId(ctx));
  var getPressedTriggerEl = (ctx, hint) => {
    let btnEl = null;
    if (hint === "increment") {
      btnEl = getIncrementTriggerEl(ctx);
    }
    if (hint === "decrement") {
      btnEl = getDecrementTriggerEl(ctx);
    }
    return btnEl;
  };
  var setupVirtualCursor = (ctx, point) => {
    if (isSafari()) return;
    createVirtualCursor(ctx, point);
    return () => {
      getCursorEl(ctx)?.remove();
    };
  };
  var preventTextSelection = (ctx) => {
    const doc = ctx.getDoc();
    const html = doc.documentElement;
    const body = doc.body;
    body.style.pointerEvents = "none";
    html.style.userSelect = "none";
    html.style.cursor = "ew-resize";
    return () => {
      body.style.pointerEvents = "";
      html.style.userSelect = "";
      html.style.cursor = "";
      if (!html.style.length) {
        html.removeAttribute("style");
      }
      if (!body.style.length) {
        body.removeAttribute("style");
      }
    };
  };
  var getMousemoveValue = (ctx, opts) => {
    const { point, isRtl, event } = opts;
    const win = ctx.getWin();
    const x2 = roundToDpr(event.movementX, win.devicePixelRatio);
    const y = roundToDpr(event.movementY, win.devicePixelRatio);
    let hint = x2 > 0 ? "increment" : x2 < 0 ? "decrement" : null;
    if (isRtl && hint === "increment") hint = "decrement";
    if (isRtl && hint === "decrement") hint = "increment";
    const newPoint = { x: point.x + x2, y: point.y + y };
    const width = win.innerWidth;
    const half = roundToDpr(7.5, win.devicePixelRatio);
    newPoint.x = wrap(newPoint.x + half, width) - half;
    return { hint, point: newPoint };
  };
  var createVirtualCursor = (ctx, point) => {
    const doc = ctx.getDoc();
    const el = doc.createElement("div");
    el.className = "scrubber--cursor";
    el.id = getCursorId(ctx);
    Object.assign(el.style, {
      width: "15px",
      height: "15px",
      position: "fixed",
      pointerEvents: "none",
      left: "0px",
      top: "0px",
      zIndex: MAX_Z_INDEX,
      transform: point ? `translate3d(${point.x}px, ${point.y}px, 0px)` : void 0,
      willChange: "transform"
    });
    el.innerHTML = `
      <svg width="46" height="15" style="left: -15.5px; position: absolute; top: 0; filter: drop-shadow(rgba(0, 0, 0, 0.4) 0px 1px 1.1px);">
        <g transform="translate(2 3)">
          <path fill-rule="evenodd" d="M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z" style="stroke-width: 2px; stroke: white;"></path>
          <path fill-rule="evenodd" d="M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z"></path>
        </g>
      </svg>`;
    doc.body.appendChild(el);
  };
  function recordCursor(inputEl) {
    if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;
    try {
      const { selectionStart: start, selectionEnd: end, value } = inputEl;
      const beforeTxt = value.substring(0, start);
      const afterTxt = value.substring(end);
      return {
        start,
        end,
        value,
        beforeTxt,
        afterTxt
      };
    } catch {
    }
  }
  function restoreCursor(inputEl, selection) {
    if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;
    if (!selection) {
      inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);
      return;
    }
    try {
      const { value } = inputEl;
      const { beforeTxt = "", afterTxt = "", start } = selection;
      let startPos = value.length;
      if (value.endsWith(afterTxt)) {
        startPos = value.length - afterTxt.length;
      } else if (value.startsWith(beforeTxt)) {
        startPos = beforeTxt.length;
      } else if (start != null) {
        const beforeLastChar = beforeTxt[start - 1];
        const newIndex = value.indexOf(beforeLastChar, start - 1);
        if (newIndex !== -1) {
          startPos = newIndex + 1;
        }
      }
      inputEl.setSelectionRange(startPos, startPos);
    } catch {
    }
  }
  var createFormatter = (locale, options = {}) => {
    return new Intl.NumberFormat(locale, options);
  };
  var createParser = (locale, options = {}) => {
    return new $6c7bd7858deea686$export$cd11ab140839f11d(locale, options);
  };
  var parseValue = (value, params) => {
    const { prop, computed } = params;
    if (!prop("formatOptions")) return parseFloat(value);
    return computed("parser").parse(String(value));
  };
  var formatValue = (value, params) => {
    const { prop, computed } = params;
    if (Number.isNaN(value)) return "";
    if (!prop("formatOptions")) return value.toString();
    return computed("formatter").format(value);
  };
  var getDefaultStep = (step, formatOptions) => {
    let defaultStep = step !== void 0 && !Number.isNaN(step) ? step : 1;
    if (formatOptions?.style === "percent" && (step === void 0 || Number.isNaN(step))) {
      defaultStep = 0.01;
    }
    return defaultStep;
  };
  var { choose: choose2, guards: guards2, createMachine: createMachine3 } = setup();
  var { not: not6, and: and7 } = guards2;
  var machine15 = createMachine3({
    props({ props: props26 }) {
      const step = getDefaultStep(props26.step, props26.formatOptions);
      return {
        dir: "ltr",
        locale: "en-US",
        focusInputOnChange: true,
        clampValueOnBlur: !props26.allowOverflow,
        allowOverflow: false,
        inputMode: "decimal",
        pattern: "-?[0-9]*(.[0-9]+)?",
        defaultValue: "",
        step,
        min: Number.MIN_SAFE_INTEGER,
        max: Number.MAX_SAFE_INTEGER,
        spinOnPress: true,
        ...props26,
        translations: {
          incrementLabel: "increment value",
          decrementLabel: "decrease value",
          ...props26.translations
        }
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable, getComputed }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            const computed = getComputed();
            const valueAsNumber = parseValue(value, { computed, prop });
            prop("onValueChange")?.({ value, valueAsNumber });
          }
        })),
        hint: bindable(() => ({ defaultValue: null })),
        scrubberCursorPoint: bindable(() => ({
          defaultValue: null,
          hash(value) {
            return value ? `x:${value.x}, y:${value.y}` : "";
          }
        })),
        fieldsetDisabled: bindable(() => ({ defaultValue: false }))
      };
    },
    computed: {
      isRtl: ({ prop }) => prop("dir") === "rtl",
      valueAsNumber: ({ context, computed, prop }) => parseValue(context.get("value"), { computed, prop }),
      formattedValue: ({ computed, prop }) => formatValue(computed("valueAsNumber"), { computed, prop }),
      isAtMin: ({ computed, prop }) => isValueAtMin(computed("valueAsNumber"), prop("min")),
      isAtMax: ({ computed, prop }) => isValueAtMax(computed("valueAsNumber"), prop("max")),
      isOutOfRange: ({ computed, prop }) => !isValueWithinRange(computed("valueAsNumber"), prop("min"), prop("max")),
      isValueEmpty: ({ context }) => context.get("value") === "",
      isDisabled: ({ prop, context }) => !!prop("disabled") || context.get("fieldsetDisabled"),
      canIncrement: ({ prop, computed }) => prop("allowOverflow") || !computed("isAtMax"),
      canDecrement: ({ prop, computed }) => prop("allowOverflow") || !computed("isAtMin"),
      valueText: ({ prop, context }) => prop("translations").valueText?.(context.get("value")),
      formatter: memo2(
        ({ prop }) => [prop("locale"), prop("formatOptions")],
        (locale, formatOptions) => createFormatter(locale, formatOptions)
      ),
      parser: memo2(
        ({ prop }) => [prop("locale"), prop("formatOptions")],
        (locale, formatOptions) => createParser(locale, formatOptions)
      )
    },
    watch({ track, action, context, computed, prop }) {
      track([() => context.get("value"), () => prop("locale")], () => {
        action(["syncInputElement"]);
      });
      track([() => computed("isOutOfRange")], () => {
        action(["invokeOnInvalid"]);
      });
      track([() => context.hash("scrubberCursorPoint")], () => {
        action(["setVirtualCursorPosition"]);
      });
    },
    effects: ["trackFormControl"],
    on: {
      "VALUE.SET": {
        actions: ["setRawValue"]
      },
      "VALUE.CLEAR": {
        actions: ["clearValue"]
      },
      "VALUE.INCREMENT": {
        actions: ["increment"]
      },
      "VALUE.DECREMENT": {
        actions: ["decrement"]
      }
    },
    states: {
      idle: {
        on: {
          "TRIGGER.PRESS_DOWN": [
            { guard: "isTouchPointer", target: "before:spin", actions: ["setHint"] },
            {
              target: "before:spin",
              actions: ["focusInput", "invokeOnFocus", "setHint"]
            }
          ],
          "SCRUBBER.PRESS_DOWN": {
            target: "scrubbing",
            actions: ["focusInput", "invokeOnFocus", "setHint", "setCursorPoint"]
          },
          "INPUT.FOCUS": {
            target: "focused",
            actions: ["focusInput", "invokeOnFocus"]
          }
        }
      },
      focused: {
        tags: ["focus"],
        effects: ["attachWheelListener"],
        on: {
          "TRIGGER.PRESS_DOWN": [
            { guard: "isTouchPointer", target: "before:spin", actions: ["setHint"] },
            { target: "before:spin", actions: ["focusInput", "setHint"] }
          ],
          "SCRUBBER.PRESS_DOWN": {
            target: "scrubbing",
            actions: ["focusInput", "setHint", "setCursorPoint"]
          },
          "INPUT.ARROW_UP": {
            actions: ["increment"]
          },
          "INPUT.ARROW_DOWN": {
            actions: ["decrement"]
          },
          "INPUT.HOME": {
            actions: ["decrementToMin"]
          },
          "INPUT.END": {
            actions: ["incrementToMax"]
          },
          "INPUT.CHANGE": {
            actions: ["setValue", "setHint"]
          },
          "INPUT.BLUR": [
            {
              guard: and7("clampValueOnBlur", not6("isInRange")),
              target: "idle",
              actions: ["setClampedValue", "clearHint", "invokeOnBlur"]
            },
            {
              guard: not6("isInRange"),
              target: "idle",
              actions: ["setFormattedValue", "clearHint", "invokeOnBlur", "invokeOnInvalid"]
            },
            {
              target: "idle",
              actions: ["setFormattedValue", "clearHint", "invokeOnBlur"]
            }
          ],
          "INPUT.ENTER": {
            actions: ["setFormattedValue", "clearHint", "invokeOnBlur"]
          }
        }
      },
      "before:spin": {
        tags: ["focus"],
        effects: ["trackButtonDisabled", "waitForChangeDelay"],
        entry: choose2([
          { guard: "isIncrementHint", actions: ["increment"] },
          { guard: "isDecrementHint", actions: ["decrement"] }
        ]),
        on: {
          CHANGE_DELAY: {
            target: "spinning",
            guard: and7("isInRange", "spinOnPress")
          },
          "TRIGGER.PRESS_UP": [
            { guard: "isTouchPointer", target: "focused", actions: ["clearHint"] },
            { target: "focused", actions: ["focusInput", "clearHint"] }
          ]
        }
      },
      spinning: {
        tags: ["focus"],
        effects: ["trackButtonDisabled", "spinValue"],
        on: {
          SPIN: [
            {
              guard: "isIncrementHint",
              actions: ["increment"]
            },
            {
              guard: "isDecrementHint",
              actions: ["decrement"]
            }
          ],
          "TRIGGER.PRESS_UP": {
            target: "focused",
            actions: ["focusInput", "clearHint"]
          }
        }
      },
      scrubbing: {
        tags: ["focus"],
        effects: ["activatePointerLock", "trackMousemove", "setupVirtualCursor", "preventTextSelection"],
        on: {
          "SCRUBBER.POINTER_UP": {
            target: "focused",
            actions: ["focusInput", "clearCursorPoint"]
          },
          "SCRUBBER.POINTER_MOVE": [
            {
              guard: "isIncrementHint",
              actions: ["increment", "setCursorPoint"]
            },
            {
              guard: "isDecrementHint",
              actions: ["decrement", "setCursorPoint"]
            }
          ]
        }
      }
    },
    implementations: {
      guards: {
        clampValueOnBlur: ({ prop }) => prop("clampValueOnBlur"),
        spinOnPress: ({ prop }) => !!prop("spinOnPress"),
        isInRange: ({ computed }) => !computed("isOutOfRange"),
        isDecrementHint: ({ context, event }) => (event.hint ?? context.get("hint")) === "decrement",
        isIncrementHint: ({ context, event }) => (event.hint ?? context.get("hint")) === "increment",
        isTouchPointer: ({ event }) => event.pointerType === "touch"
      },
      effects: {
        waitForChangeDelay({ send }) {
          const id = setTimeout(() => {
            send({ type: "CHANGE_DELAY" });
          }, 300);
          return () => clearTimeout(id);
        },
        spinValue({ send }) {
          const id = setInterval(() => {
            send({ type: "SPIN" });
          }, 50);
          return () => clearInterval(id);
        },
        trackFormControl({ context, scope }) {
          const inputEl = getInputEl4(scope);
          return trackFormControl(inputEl, {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              context.set("value", context.initial("value"));
            }
          });
        },
        setupVirtualCursor({ context, scope }) {
          const point = context.get("scrubberCursorPoint");
          return setupVirtualCursor(scope, point);
        },
        preventTextSelection({ scope }) {
          return preventTextSelection(scope);
        },
        trackButtonDisabled({ context, scope, send }) {
          const hint = context.get("hint");
          const btn = getPressedTriggerEl(scope, hint);
          return observeAttributes(btn, {
            attributes: ["disabled"],
            callback() {
              send({ type: "TRIGGER.PRESS_UP", src: "attr" });
            }
          });
        },
        attachWheelListener({ scope, send, prop }) {
          const inputEl = getInputEl4(scope);
          if (!inputEl || !scope.isActiveElement(inputEl) || !prop("allowMouseWheel")) return;
          function onWheel(event) {
            event.preventDefault();
            const dir = Math.sign(event.deltaY) * -1;
            if (dir === 1) {
              send({ type: "VALUE.INCREMENT" });
            } else if (dir === -1) {
              send({ type: "VALUE.DECREMENT" });
            }
          }
          return addDomEvent(inputEl, "wheel", onWheel, { passive: false });
        },
        activatePointerLock({ scope }) {
          if (isSafari()) return;
          return requestPointerLock(scope.getDoc());
        },
        trackMousemove({ scope, send, context, computed }) {
          const doc = scope.getDoc();
          function onMousemove(event) {
            const point = context.get("scrubberCursorPoint");
            const isRtl = computed("isRtl");
            const value = getMousemoveValue(scope, { point, isRtl, event });
            if (!value.hint) return;
            send({
              type: "SCRUBBER.POINTER_MOVE",
              hint: value.hint,
              point: value.point
            });
          }
          function onMouseup() {
            send({ type: "SCRUBBER.POINTER_UP" });
          }
          return callAll2(addDomEvent(doc, "mousemove", onMousemove, false), addDomEvent(doc, "mouseup", onMouseup, false));
        }
      },
      actions: {
        focusInput({ scope, prop }) {
          if (!prop("focusInputOnChange")) return;
          const inputEl = getInputEl4(scope);
          if (scope.isActiveElement(inputEl)) return;
          raf(() => inputEl?.focus({ preventScroll: true }));
        },
        increment({ context, event, prop, computed }) {
          let nextValue = incrementValue(computed("valueAsNumber"), event.step ?? prop("step"));
          if (!prop("allowOverflow")) nextValue = clampValue(nextValue, prop("min"), prop("max"));
          context.set("value", formatValue(nextValue, { computed, prop }));
        },
        decrement({ context, event, prop, computed }) {
          let nextValue = decrementValue(computed("valueAsNumber"), event.step ?? prop("step"));
          if (!prop("allowOverflow")) nextValue = clampValue(nextValue, prop("min"), prop("max"));
          context.set("value", formatValue(nextValue, { computed, prop }));
        },
        setClampedValue({ context, prop, computed }) {
          const nextValue = clampValue(computed("valueAsNumber"), prop("min"), prop("max"));
          context.set("value", formatValue(nextValue, { computed, prop }));
        },
        setRawValue({ context, event, prop, computed }) {
          let nextValue = parseValue(event.value, { computed, prop });
          if (!prop("allowOverflow")) nextValue = clampValue(nextValue, prop("min"), prop("max"));
          context.set("value", formatValue(nextValue, { computed, prop }));
        },
        setValue({ context, event }) {
          const value = event.target?.value ?? event.value;
          context.set("value", value);
        },
        clearValue({ context }) {
          context.set("value", "");
        },
        incrementToMax({ context, prop, computed }) {
          const value = formatValue(prop("max"), { computed, prop });
          context.set("value", value);
        },
        decrementToMin({ context, prop, computed }) {
          const value = formatValue(prop("min"), { computed, prop });
          context.set("value", value);
        },
        setHint({ context, event }) {
          context.set("hint", event.hint);
        },
        clearHint({ context }) {
          context.set("hint", null);
        },
        invokeOnFocus({ computed, prop }) {
          prop("onFocusChange")?.({
            focused: true,
            value: computed("formattedValue"),
            valueAsNumber: computed("valueAsNumber")
          });
        },
        invokeOnBlur({ computed, prop }) {
          prop("onFocusChange")?.({
            focused: false,
            value: computed("formattedValue"),
            valueAsNumber: computed("valueAsNumber")
          });
        },
        invokeOnInvalid({ computed, prop, event }) {
          if (event.type === "INPUT.CHANGE") return;
          const reason = computed("valueAsNumber") > prop("max") ? "rangeOverflow" : "rangeUnderflow";
          prop("onValueInvalid")?.({
            reason,
            value: computed("formattedValue"),
            valueAsNumber: computed("valueAsNumber")
          });
        },
        syncInputElement({ context, event, computed, scope }) {
          const value = event.type.endsWith("CHANGE") ? context.get("value") : computed("formattedValue");
          const inputEl = getInputEl4(scope);
          const sel = recordCursor(inputEl);
          raf(() => {
            setElementValue(inputEl, value);
            restoreCursor(inputEl, sel);
          });
        },
        setFormattedValue({ context, computed }) {
          context.set("value", computed("formattedValue"));
        },
        setCursorPoint({ context, event }) {
          context.set("scrubberCursorPoint", event.point);
        },
        clearCursorPoint({ context }) {
          context.set("scrubberCursorPoint", null);
        },
        setVirtualCursorPosition({ context, scope }) {
          const cursorEl = getCursorEl(scope);
          const point = context.get("scrubberCursorPoint");
          if (!cursorEl || !point) return;
          cursorEl.style.transform = `translate3d(${point.x}px, ${point.y}px, 0px)`;
        }
      }
    }
  });
  var props15 = createProps()([
    "allowMouseWheel",
    "allowOverflow",
    "clampValueOnBlur",
    "dir",
    "disabled",
    "focusInputOnChange",
    "form",
    "formatOptions",
    "getRootNode",
    "id",
    "ids",
    "inputMode",
    "invalid",
    "locale",
    "max",
    "min",
    "name",
    "onFocusChange",
    "onValueChange",
    "onValueInvalid",
    "pattern",
    "required",
    "readOnly",
    "spinOnPress",
    "step",
    "translations",
    "value",
    "defaultValue"
  ]);
  var splitProps15 = createSplitProps(props15);

  // node_modules/@zag-js/pin-input/dist/index.mjs
  var anatomy15 = createAnatomy("pinInput").parts("root", "label", "input", "control");
  var parts17 = anatomy15.build();
  var getRootId6 = (ctx) => ctx.ids?.root ?? `pin-input:${ctx.id}`;
  var getHiddenInputId4 = (ctx) => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`;
  var getRootEl5 = (ctx) => ctx.getById(getRootId6(ctx));
  var getInputEls = (ctx) => {
    const ownerId = CSS.escape(getRootId6(ctx));
    const selector = `input[data-ownedby=${ownerId}]`;
    return queryAll(getRootEl5(ctx), selector);
  };
  var getInputElAtIndex = (ctx, index) => getInputEls(ctx)[index];
  var getHiddenInputEl4 = (ctx) => ctx.getById(getHiddenInputId4(ctx));
  var setInputValue = (inputEl, value) => {
    inputEl.value = value;
    inputEl.setAttribute("value", value);
  };
  var { choose: choose3, createMachine: createMachine4 } = setup();
  var machine16 = createMachine4({
    props({ props: props26 }) {
      return {
        placeholder: "\u25CB",
        otp: false,
        type: "numeric",
        defaultValue: props26.count ? fill([], props26.count) : [],
        ...props26,
        translations: {
          inputLabel: (index, length2) => `pin code ${index + 1} of ${length2}`,
          ...props26.translations
        }
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          value: prop("value"),
          defaultValue: prop("defaultValue"),
          isEqual,
          onChange(value) {
            prop("onValueChange")?.({ value, valueAsString: value.join("") });
          }
        })),
        focusedIndex: bindable(() => ({
          sync: true,
          defaultValue: -1
        })),
        // TODO: Move this to `props` in next major version
        count: bindable(() => ({
          defaultValue: prop("count")
        }))
      };
    },
    computed: {
      _value: ({ context }) => fill(context.get("value"), context.get("count")),
      valueLength: ({ computed }) => computed("_value").length,
      filledValueLength: ({ computed }) => computed("_value").filter((v) => v?.trim() !== "").length,
      isValueComplete: ({ computed }) => computed("valueLength") === computed("filledValueLength"),
      valueAsString: ({ computed }) => computed("_value").join(""),
      focusedValue: ({ computed, context }) => computed("_value")[context.get("focusedIndex")] || ""
    },
    entry: choose3([
      {
        guard: "autoFocus",
        actions: ["setInputCount", "setFocusIndexToFirst"]
      },
      { actions: ["setInputCount"] }
    ]),
    watch({ action, track, context, computed }) {
      track([() => context.get("focusedIndex")], () => {
        action(["focusInput", "selectInputIfNeeded"]);
      });
      track([() => context.get("value").join(",")], () => {
        action(["syncInputElements", "dispatchInputEvent"]);
      });
      track([() => computed("isValueComplete")], () => {
        action(["invokeOnComplete", "blurFocusedInputIfNeeded"]);
      });
    },
    on: {
      "VALUE.SET": [
        {
          guard: "hasIndex",
          actions: ["setValueAtIndex"]
        },
        { actions: ["setValue"] }
      ],
      "VALUE.CLEAR": {
        actions: ["clearValue", "setFocusIndexToFirst"]
      }
    },
    states: {
      idle: {
        on: {
          "INPUT.FOCUS": {
            target: "focused",
            actions: ["setFocusedIndex"]
          }
        }
      },
      focused: {
        on: {
          "INPUT.CHANGE": {
            actions: ["setFocusedValue", "syncInputValue", "setNextFocusedIndex"]
          },
          "INPUT.PASTE": {
            actions: ["setPastedValue", "setLastValueFocusIndex"]
          },
          "INPUT.FOCUS": {
            actions: ["setFocusedIndex"]
          },
          "INPUT.BLUR": {
            target: "idle",
            actions: ["clearFocusedIndex"]
          },
          "INPUT.DELETE": {
            guard: "hasValue",
            actions: ["clearFocusedValue"]
          },
          "INPUT.ARROW_LEFT": {
            actions: ["setPrevFocusedIndex"]
          },
          "INPUT.ARROW_RIGHT": {
            actions: ["setNextFocusedIndex"]
          },
          "INPUT.BACKSPACE": [
            {
              guard: "hasValue",
              actions: ["clearFocusedValue"]
            },
            {
              actions: ["setPrevFocusedIndex", "clearFocusedValue"]
            }
          ],
          "INPUT.ENTER": {
            guard: "isValueComplete",
            actions: ["requestFormSubmit"]
          },
          "VALUE.INVALID": {
            actions: ["invokeOnInvalid"]
          }
        }
      }
    },
    implementations: {
      guards: {
        autoFocus: ({ prop }) => !!prop("autoFocus"),
        hasValue: ({ context }) => context.get("value")[context.get("focusedIndex")] !== "",
        isValueComplete: ({ computed }) => computed("isValueComplete"),
        hasIndex: ({ event }) => event.index !== void 0
      },
      actions: {
        dispatchInputEvent({ computed, scope }) {
          const inputEl = getHiddenInputEl4(scope);
          dispatchInputValueEvent(inputEl, { value: computed("valueAsString") });
        },
        setInputCount({ scope, context, prop }) {
          if (prop("count")) return;
          const inputEls = getInputEls(scope);
          context.set("count", inputEls.length);
        },
        focusInput({ context, scope }) {
          const focusedIndex = context.get("focusedIndex");
          if (focusedIndex === -1) return;
          getInputElAtIndex(scope, focusedIndex)?.focus({ preventScroll: true });
        },
        selectInputIfNeeded({ context, prop, scope }) {
          const focusedIndex = context.get("focusedIndex");
          if (!prop("selectOnFocus") || focusedIndex === -1) return;
          raf(() => {
            getInputElAtIndex(scope, focusedIndex)?.select();
          });
        },
        invokeOnComplete({ computed, prop }) {
          if (!computed("isValueComplete")) return;
          prop("onValueComplete")?.({
            value: computed("_value"),
            valueAsString: computed("valueAsString")
          });
        },
        invokeOnInvalid({ context, event, prop }) {
          prop("onValueInvalid")?.({
            value: event.value,
            index: context.get("focusedIndex")
          });
        },
        clearFocusedIndex({ context }) {
          context.set("focusedIndex", -1);
        },
        setFocusedIndex({ context, event }) {
          context.set("focusedIndex", event.index);
        },
        setValue({ context, event }) {
          const value = fill(event.value, context.get("count"));
          context.set("value", value);
        },
        setFocusedValue({ context, event, computed, flush: flush2 }) {
          const focusedValue = computed("focusedValue");
          const focusedIndex = context.get("focusedIndex");
          const value = getNextValue(focusedValue, event.value);
          flush2(() => {
            context.set("value", setValueAtIndex(computed("_value"), focusedIndex, value));
          });
        },
        revertInputValue({ context, computed, scope }) {
          const inputEl = getInputElAtIndex(scope, context.get("focusedIndex"));
          setInputValue(inputEl, computed("focusedValue"));
        },
        syncInputValue({ context, event, scope }) {
          const value = context.get("value");
          const inputEl = getInputElAtIndex(scope, event.index);
          setInputValue(inputEl, value[event.index]);
        },
        syncInputElements({ context, scope }) {
          const inputEls = getInputEls(scope);
          const value = context.get("value");
          inputEls.forEach((inputEl, index) => {
            setInputValue(inputEl, value[index]);
          });
        },
        setPastedValue({ context, event, computed, flush: flush2 }) {
          raf(() => {
            const valueAsString = computed("valueAsString");
            const focusedIndex = context.get("focusedIndex");
            const valueLength = computed("valueLength");
            const filledValueLength = computed("filledValueLength");
            const startIndex = Math.min(focusedIndex, filledValueLength);
            const left = startIndex > 0 ? valueAsString.substring(0, focusedIndex) : "";
            const right = event.value.substring(0, valueLength - startIndex);
            const value = fill(`${left}${right}`.split(""), valueLength);
            flush2(() => {
              context.set("value", value);
            });
          });
        },
        setValueAtIndex({ context, event, computed }) {
          const nextValue = getNextValue(computed("focusedValue"), event.value);
          context.set("value", setValueAtIndex(computed("_value"), event.index, nextValue));
        },
        clearValue({ context }) {
          const nextValue = Array.from({ length: context.get("count") }).fill("");
          context.set("value", nextValue);
        },
        clearFocusedValue({ context, computed }) {
          const focusedIndex = context.get("focusedIndex");
          if (focusedIndex === -1) return;
          context.set("value", setValueAtIndex(computed("_value"), focusedIndex, ""));
        },
        setFocusIndexToFirst({ context }) {
          context.set("focusedIndex", 0);
        },
        setNextFocusedIndex({ context, computed }) {
          context.set("focusedIndex", Math.min(context.get("focusedIndex") + 1, computed("valueLength") - 1));
        },
        setPrevFocusedIndex({ context }) {
          context.set("focusedIndex", Math.max(context.get("focusedIndex") - 1, 0));
        },
        setLastValueFocusIndex({ context, computed }) {
          raf(() => {
            context.set("focusedIndex", Math.min(computed("filledValueLength"), computed("valueLength") - 1));
          });
        },
        blurFocusedInputIfNeeded({ context, prop, scope }) {
          if (!prop("blurOnComplete")) return;
          raf(() => {
            getInputElAtIndex(scope, context.get("focusedIndex"))?.blur();
          });
        },
        requestFormSubmit({ computed, prop, scope }) {
          if (!prop("name") || !computed("isValueComplete")) return;
          const inputEl = getHiddenInputEl4(scope);
          inputEl?.form?.requestSubmit();
        }
      }
    }
  });
  function getNextValue(current, next3) {
    let nextValue = next3;
    if (current[0] === next3[0]) nextValue = next3[1];
    else if (current[0] === next3[1]) nextValue = next3[0];
    return nextValue.split("")[nextValue.length - 1];
  }
  function fill(value, count) {
    return Array.from({ length: count }).fill("").map((v, i2) => value[i2] || v);
  }
  var props16 = createProps()([
    "autoFocus",
    "blurOnComplete",
    "count",
    "defaultValue",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "mask",
    "name",
    "onValueChange",
    "onValueComplete",
    "onValueInvalid",
    "otp",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "selectOnFocus",
    "translations",
    "type",
    "value"
  ]);
  var splitProps16 = createSplitProps(props16);

  // node_modules/@zag-js/popover/dist/index.mjs
  var anatomy16 = createAnatomy("popover").parts(
    "arrow",
    "arrowTip",
    "anchor",
    "trigger",
    "indicator",
    "positioner",
    "content",
    "title",
    "description",
    "closeTrigger"
  );
  var parts18 = anatomy16.build();
  var getAnchorId = (scope) => scope.ids?.anchor ?? `popover:${scope.id}:anchor`;
  var getTriggerId7 = (scope) => scope.ids?.trigger ?? `popover:${scope.id}:trigger`;
  var getContentId7 = (scope) => scope.ids?.content ?? `popover:${scope.id}:content`;
  var getPositionerId6 = (scope) => scope.ids?.positioner ?? `popover:${scope.id}:popper`;
  var getTitleId2 = (scope) => scope.ids?.title ?? `popover:${scope.id}:title`;
  var getDescriptionId2 = (scope) => scope.ids?.description ?? `popover:${scope.id}:desc`;
  var getAnchorEl = (scope) => scope.getById(getAnchorId(scope));
  var getTriggerEl6 = (scope) => scope.getById(getTriggerId7(scope));
  var getContentEl7 = (scope) => scope.getById(getContentId7(scope));
  var getPositionerEl6 = (scope) => scope.getById(getPositionerId6(scope));
  var getTitleEl2 = (scope) => scope.getById(getTitleId2(scope));
  var getDescriptionEl2 = (scope) => scope.getById(getDescriptionId2(scope));
  var machine17 = createMachine({
    props({ props: props26 }) {
      return {
        closeOnInteractOutside: true,
        closeOnEscape: true,
        autoFocus: true,
        modal: false,
        portalled: true,
        ...props26,
        positioning: {
          placement: "bottom",
          ...props26.positioning
        }
      };
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "closed";
    },
    context({ bindable }) {
      return {
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        })),
        renderedElements: bindable(() => ({
          defaultValue: { title: true, description: true }
        }))
      };
    },
    computed: {
      currentPortalled: ({ prop }) => !!prop("modal") || !!prop("portalled")
    },
    watch({ track, prop, action }) {
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    entry: ["checkRenderedElements"],
    states: {
      closed: {
        on: {
          "CONTROLLED.OPEN": {
            target: "open",
            actions: ["setInitialFocus"]
          },
          TOGGLE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ],
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus"]
            }
          ]
        }
      },
      open: {
        effects: [
          "trapFocus",
          "preventScroll",
          "hideContentBelow",
          "trackPositioning",
          "trackDismissableElement",
          "proxyTabFocus"
        ],
        on: {
          "CONTROLLED.CLOSE": {
            target: "closed",
            actions: ["setFinalFocus"]
          },
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose", "setFinalFocus"]
            }
          ],
          TOGGLE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "POSITIONING.SET": {
            actions: ["reposition"]
          }
        }
      }
    },
    implementations: {
      guards: {
        isOpenControlled: ({ prop }) => prop("open") != void 0
      },
      effects: {
        trackPositioning({ context, prop, scope }) {
          context.set("currentPlacement", prop("positioning").placement);
          const anchorEl = getAnchorEl(scope) ?? getTriggerEl6(scope);
          const getPositionerEl22 = () => getPositionerEl6(scope);
          return getPlacement(anchorEl, getPositionerEl22, {
            ...prop("positioning"),
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        trackDismissableElement({ send, prop, scope }) {
          const getContentEl22 = () => getContentEl7(scope);
          let restoreFocus = true;
          return trackDismissableElement(getContentEl22, {
            pointerBlocking: prop("modal"),
            exclude: getTriggerEl6(scope),
            defer: true,
            onEscapeKeyDown(event) {
              prop("onEscapeKeyDown")?.(event);
              if (prop("closeOnEscape")) return;
              event.preventDefault();
            },
            onInteractOutside(event) {
              prop("onInteractOutside")?.(event);
              if (event.defaultPrevented) return;
              restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
              if (!prop("closeOnInteractOutside")) {
                event.preventDefault();
              }
            },
            onPointerDownOutside: prop("onPointerDownOutside"),
            onFocusOutside: prop("onFocusOutside"),
            persistentElements: prop("persistentElements"),
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside", restoreFocus });
            }
          });
        },
        proxyTabFocus({ prop, scope }) {
          if (prop("modal") || !prop("portalled")) return;
          const getContentEl22 = () => getContentEl7(scope);
          return proxyTabFocus(getContentEl22, {
            triggerElement: getTriggerEl6(scope),
            defer: true,
            onFocus(el) {
              el.focus({ preventScroll: true });
            }
          });
        },
        hideContentBelow({ prop, scope }) {
          if (!prop("modal")) return;
          const getElements2 = () => [getContentEl7(scope), getTriggerEl6(scope)];
          return ariaHidden(getElements2, { defer: true });
        },
        preventScroll({ prop, scope }) {
          if (!prop("modal")) return;
          return preventBodyScroll(scope.getDoc());
        },
        trapFocus({ prop, scope }) {
          if (!prop("modal")) return;
          const contentEl = () => getContentEl7(scope);
          return trapFocus(contentEl, {
            initialFocus: () => getInitialFocus({
              root: getContentEl7(scope),
              getInitialEl: prop("initialFocusEl"),
              enabled: prop("autoFocus")
            })
          });
        }
      },
      actions: {
        reposition({ event, prop, scope, context }) {
          const anchorEl = getAnchorEl(scope) ?? getTriggerEl6(scope);
          const getPositionerEl22 = () => getPositionerEl6(scope);
          getPlacement(anchorEl, getPositionerEl22, {
            ...prop("positioning"),
            ...event.options,
            defer: true,
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        checkRenderedElements({ context, scope }) {
          raf(() => {
            Object.assign(context.get("renderedElements"), {
              title: !!getTitleEl2(scope),
              description: !!getDescriptionEl2(scope)
            });
          });
        },
        setInitialFocus({ prop, scope }) {
          if (prop("modal")) return;
          raf(() => {
            const element = getInitialFocus({
              root: getContentEl7(scope),
              getInitialEl: prop("initialFocusEl"),
              enabled: prop("autoFocus")
            });
            element?.focus({ preventScroll: true });
          });
        },
        setFinalFocus({ event, scope }) {
          const restoreFocus = event.restoreFocus ?? event.previousEvent?.restoreFocus;
          if (restoreFocus != null && !restoreFocus) return;
          raf(() => {
            const element = getTriggerEl6(scope);
            element?.focus({ preventScroll: true });
          });
        },
        invokeOnOpen({ prop, flush: flush2 }) {
          flush2(() => {
            prop("onOpenChange")?.({ open: true });
          });
        },
        invokeOnClose({ prop, flush: flush2 }) {
          flush2(() => {
            prop("onOpenChange")?.({ open: false });
          });
        },
        toggleVisibility({ event, send, prop }) {
          send({ type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE", previousEvent: event });
        }
      }
    }
  });
  var props17 = createProps()([
    "autoFocus",
    "closeOnEscape",
    "closeOnInteractOutside",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "modal",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "defaultOpen",
    "open",
    "persistentElements",
    "portalled",
    "positioning"
  ]);
  var splitProps17 = createSplitProps(props17);

  // node_modules/@ark-ui/react/dist/components/portal/portal.js
  var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
  var import_react114 = __toESM(require_react(), 1);
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  var Portal = (props26) => {
    const { children, disabled } = props26;
    const [container, setContainer] = (0, import_react114.useState)(props26.container?.current);
    const isServer = (0, import_react114.useSyncExternalStore)(
      subscribe2,
      () => false,
      () => true
    );
    const { getRootNode } = useEnvironmentContext();
    (0, import_react114.useEffect)(() => {
      setContainer(() => props26.container?.current);
    }, [props26.container]);
    if (isServer || disabled) return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(import_jsx_runtime53.Fragment, { children });
    const mountNode = container ?? getPortalNode(getRootNode);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(import_jsx_runtime53.Fragment, { children: import_react114.Children.map(children, (child) => (0, import_react_dom2.createPortal)(child, mountNode)) });
  };
  var getPortalNode = (cb) => {
    const node2 = cb?.();
    const rootNode = node2.getRootNode();
    if (isShadowRoot(rootNode)) return rootNode;
    return getDocument(node2).body;
  };
  var subscribe2 = () => () => {
  };

  // node_modules/@zag-js/progress/dist/index.mjs
  var anatomy17 = createAnatomy("progress").parts(
    "root",
    "label",
    "track",
    "range",
    "valueText",
    "view",
    "circle",
    "circleTrack",
    "circleRange"
  );
  var parts19 = anatomy17.build();
  var machine18 = createMachine({
    props({ props: props26 }) {
      const min4 = props26.min ?? 0;
      const max4 = props26.max ?? 100;
      return {
        orientation: "horizontal",
        ...props26,
        max: max4,
        min: min4,
        defaultValue: props26.defaultValue !== void 0 ? props26.defaultValue : midValue(min4, max4),
        formatOptions: {
          style: "percent",
          ...props26.formatOptions
        },
        translations: {
          value: ({ value, percent, formatter }) => {
            if (value === null) return "loading...";
            if (formatter) {
              const formatOptions = formatter.resolvedOptions();
              const num = formatOptions.style === "percent" ? percent / 100 : value;
              return formatter.format(num);
            }
            return value.toString();
          },
          ...props26.translations
        }
      };
    },
    initialState() {
      return "idle";
    },
    entry: ["validateContext"],
    context({ bindable, prop }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        }))
      };
    },
    computed: {
      isIndeterminate: ({ context }) => context.get("value") === null,
      percent({ context, prop }) {
        const value = context.get("value");
        if (!isNumber(value)) return -1;
        return getValuePercent(value, prop("min"), prop("max")) * 100;
      },
      formatter: memo2(
        ({ prop }) => [prop("locale"), prop("formatOptions")],
        (locale, formatOptions) => new Intl.NumberFormat(locale, formatOptions)
      ),
      isHorizontal: ({ prop }) => prop("orientation") === "horizontal"
    },
    states: {
      idle: {
        on: {
          "VALUE.SET": {
            actions: ["setValue"]
          }
        }
      }
    },
    implementations: {
      actions: {
        setValue: ({ context, event, prop }) => {
          const value = event.value === null ? null : Math.max(0, Math.min(event.value, prop("max")));
          context.set("value", value);
        },
        validateContext: ({ context, prop }) => {
          const max4 = prop("max");
          const min4 = prop("min");
          const value = context.get("value");
          if (value == null) return;
          if (!isValidNumber(max4)) {
            throw new Error(`[progress] The max value passed \`${max4}\` is not a valid number`);
          }
          if (!isValidMax(value, max4)) {
            throw new Error(`[progress] The value passed \`${value}\` exceeds the max value \`${max4}\``);
          }
          if (!isValidMin(value, min4)) {
            throw new Error(`[progress] The value passed \`${value}\` exceeds the min value \`${min4}\``);
          }
        }
      }
    }
  });
  var isValidNumber = (max4) => isNumber(max4) && !isNaN(max4);
  var isValidMax = (value, max4) => isValidNumber(value) && value <= max4;
  var isValidMin = (value, min4) => isValidNumber(value) && value >= min4;
  var midValue = (min4, max4) => min4 + (max4 - min4) / 2;
  var props18 = createProps()([
    "dir",
    "getRootNode",
    "id",
    "ids",
    "max",
    "min",
    "orientation",
    "translations",
    "value",
    "onValueChange",
    "defaultValue",
    "formatOptions",
    "locale"
  ]);
  var splitProps18 = createSplitProps(props18);

  // node_modules/uqr/dist/index.mjs
  var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {
    QrCodeDataType2[QrCodeDataType2["Border"] = -1] = "Border";
    QrCodeDataType2[QrCodeDataType2["Data"] = 0] = "Data";
    QrCodeDataType2[QrCodeDataType2["Function"] = 1] = "Function";
    QrCodeDataType2[QrCodeDataType2["Position"] = 2] = "Position";
    QrCodeDataType2[QrCodeDataType2["Timing"] = 3] = "Timing";
    QrCodeDataType2[QrCodeDataType2["Alignment"] = 4] = "Alignment";
    return QrCodeDataType2;
  })(QrCodeDataType || {});
  var __defProp5 = Object.defineProperty;
  var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField4 = (obj, key, value) => {
    __defNormalProp4(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var LOW = [0, 1];
  var MEDIUM = [1, 0];
  var QUARTILE = [2, 3];
  var HIGH = [3, 2];
  var EccMap = {
    L: LOW,
    M: MEDIUM,
    Q: QUARTILE,
    H: HIGH
  };
  var NUMERIC_REGEX = /^[0-9]*$/;
  var ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\/:-]*$/;
  var ALPHANUMERIC_CHARSET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
  var MIN_VERSION = 1;
  var MAX_VERSION = 40;
  var PENALTY_N1 = 3;
  var PENALTY_N2 = 3;
  var PENALTY_N3 = 40;
  var PENALTY_N4 = 10;
  var ECC_CODEWORDS_PER_BLOCK = [
    // Version: (note that index 0 is for padding, and is set to an illegal value)
    // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
    // Low
    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],
    // Medium
    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
    // Quartile
    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]
    // High
  ];
  var NUM_ERROR_CORRECTION_BLOCKS = [
    // Version: (note that index 0 is for padding, and is set to an illegal value)
    // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],
    // Low
    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],
    // Medium
    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],
    // Quartile
    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]
    // High
  ];
  var QrCode = class {
    /* -- Constructor (low level) and fields -- */
    // Creates a new QR Code with the given version number,
    // error correction level, data codeword bytes, and mask number.
    // This is a low-level API that most users should not use directly.
    // A mid-level API is the encodeSegments() function.
    constructor(version2, ecc, dataCodewords, msk) {
      this.version = version2;
      this.ecc = ecc;
      __publicField4(this, "size");
      __publicField4(this, "mask");
      __publicField4(this, "modules", []);
      __publicField4(this, "types", []);
      if (version2 < MIN_VERSION || version2 > MAX_VERSION)
        throw new RangeError("Version value out of range");
      if (msk < -1 || msk > 7)
        throw new RangeError("Mask value out of range");
      this.size = version2 * 4 + 17;
      const row = Array.from({ length: this.size }, () => false);
      for (let i2 = 0; i2 < this.size; i2++) {
        this.modules.push(row.slice());
        this.types.push(row.map(() => 0));
      }
      this.drawFunctionPatterns();
      const allCodewords = this.addEccAndInterleave(dataCodewords);
      this.drawCodewords(allCodewords);
      if (msk === -1) {
        let minPenalty = 1e9;
        for (let i2 = 0; i2 < 8; i2++) {
          this.applyMask(i2);
          this.drawFormatBits(i2);
          const penalty = this.getPenaltyScore();
          if (penalty < minPenalty) {
            msk = i2;
            minPenalty = penalty;
          }
          this.applyMask(i2);
        }
      }
      this.mask = msk;
      this.applyMask(msk);
      this.drawFormatBits(msk);
    }
    /* -- Accessor methods -- */
    // Returns the color of the module (pixel) at the given coordinates, which is false
    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).
    // If the given coordinates are out of bounds, then false (light) is returned.
    getModule(x2, y) {
      return x2 >= 0 && x2 < this.size && y >= 0 && y < this.size && this.modules[y][x2];
    }
    /* -- Private helper methods for constructor: Drawing function modules -- */
    // Reads this object's version field, and draws and marks all function modules.
    drawFunctionPatterns() {
      for (let i2 = 0; i2 < this.size; i2++) {
        this.setFunctionModule(6, i2, i2 % 2 === 0, QrCodeDataType.Timing);
        this.setFunctionModule(i2, 6, i2 % 2 === 0, QrCodeDataType.Timing);
      }
      this.drawFinderPattern(3, 3);
      this.drawFinderPattern(this.size - 4, 3);
      this.drawFinderPattern(3, this.size - 4);
      const alignPatPos = this.getAlignmentPatternPositions();
      const numAlign = alignPatPos.length;
      for (let i2 = 0; i2 < numAlign; i2++) {
        for (let j = 0; j < numAlign; j++) {
          if (!(i2 === 0 && j === 0 || i2 === 0 && j === numAlign - 1 || i2 === numAlign - 1 && j === 0))
            this.drawAlignmentPattern(alignPatPos[i2], alignPatPos[j]);
        }
      }
      this.drawFormatBits(0);
      this.drawVersion();
    }
    // Draws two copies of the format bits (with its own error correction code)
    // based on the given mask and this object's error correction level field.
    drawFormatBits(mask) {
      const data2 = this.ecc[1] << 3 | mask;
      let rem = data2;
      for (let i2 = 0; i2 < 10; i2++)
        rem = rem << 1 ^ (rem >>> 9) * 1335;
      const bits = (data2 << 10 | rem) ^ 21522;
      for (let i2 = 0; i2 <= 5; i2++)
        this.setFunctionModule(8, i2, getBit(bits, i2));
      this.setFunctionModule(8, 7, getBit(bits, 6));
      this.setFunctionModule(8, 8, getBit(bits, 7));
      this.setFunctionModule(7, 8, getBit(bits, 8));
      for (let i2 = 9; i2 < 15; i2++)
        this.setFunctionModule(14 - i2, 8, getBit(bits, i2));
      for (let i2 = 0; i2 < 8; i2++)
        this.setFunctionModule(this.size - 1 - i2, 8, getBit(bits, i2));
      for (let i2 = 8; i2 < 15; i2++)
        this.setFunctionModule(8, this.size - 15 + i2, getBit(bits, i2));
      this.setFunctionModule(8, this.size - 8, true);
    }
    // Draws two copies of the version bits (with its own error correction code),
    // based on this object's version field, iff 7 <= version <= 40.
    drawVersion() {
      if (this.version < 7)
        return;
      let rem = this.version;
      for (let i2 = 0; i2 < 12; i2++)
        rem = rem << 1 ^ (rem >>> 11) * 7973;
      const bits = this.version << 12 | rem;
      for (let i2 = 0; i2 < 18; i2++) {
        const color = getBit(bits, i2);
        const a = this.size - 11 + i2 % 3;
        const b2 = Math.floor(i2 / 3);
        this.setFunctionModule(a, b2, color);
        this.setFunctionModule(b2, a, color);
      }
    }
    // Draws a 9*9 finder pattern including the border separator,
    // with the center module at (x, y). Modules can be out of bounds.
    drawFinderPattern(x2, y) {
      for (let dy = -4; dy <= 4; dy++) {
        for (let dx = -4; dx <= 4; dx++) {
          const dist = Math.max(Math.abs(dx), Math.abs(dy));
          const xx = x2 + dx;
          const yy = y + dy;
          if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)
            this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);
        }
      }
    }
    // Draws a 5*5 alignment pattern, with the center module
    // at (x, y). All modules must be in bounds.
    drawAlignmentPattern(x2, y) {
      for (let dy = -2; dy <= 2; dy++) {
        for (let dx = -2; dx <= 2; dx++) {
          this.setFunctionModule(
            x2 + dx,
            y + dy,
            Math.max(Math.abs(dx), Math.abs(dy)) !== 1,
            QrCodeDataType.Alignment
          );
        }
      }
    }
    // Sets the color of a module and marks it as a function module.
    // Only used by the constructor. Coordinates must be in bounds.
    setFunctionModule(x2, y, isDark, type = QrCodeDataType.Function) {
      this.modules[y][x2] = isDark;
      this.types[y][x2] = type;
    }
    /* -- Private helper methods for constructor: Codewords and masking -- */
    // Returns a new byte string representing the given data with the appropriate error correction
    // codewords appended to it, based on this object's version and error correction level.
    addEccAndInterleave(data2) {
      const ver = this.version;
      const ecl = this.ecc;
      if (data2.length !== getNumDataCodewords(ver, ecl))
        throw new RangeError("Invalid argument");
      const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];
      const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];
      const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);
      const numShortBlocks = numBlocks - rawCodewords % numBlocks;
      const shortBlockLen = Math.floor(rawCodewords / numBlocks);
      const blocks = [];
      const rsDiv = reedSolomonComputeDivisor(blockEccLen);
      for (let i2 = 0, k = 0; i2 < numBlocks; i2++) {
        const dat = data2.slice(k, k + shortBlockLen - blockEccLen + (i2 < numShortBlocks ? 0 : 1));
        k += dat.length;
        const ecc = reedSolomonComputeRemainder(dat, rsDiv);
        if (i2 < numShortBlocks)
          dat.push(0);
        blocks.push(dat.concat(ecc));
      }
      const result = [];
      for (let i2 = 0; i2 < blocks[0].length; i2++) {
        blocks.forEach((block, j) => {
          if (i2 !== shortBlockLen - blockEccLen || j >= numShortBlocks)
            result.push(block[i2]);
        });
      }
      return result;
    }
    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
    // data area of this QR Code. Function modules need to be marked off before this is called.
    drawCodewords(data2) {
      if (data2.length !== Math.floor(getNumRawDataModules(this.version) / 8))
        throw new RangeError("Invalid argument");
      let i2 = 0;
      for (let right = this.size - 1; right >= 1; right -= 2) {
        if (right === 6)
          right = 5;
        for (let vert = 0; vert < this.size; vert++) {
          for (let j = 0; j < 2; j++) {
            const x2 = right - j;
            const upward = (right + 1 & 2) === 0;
            const y = upward ? this.size - 1 - vert : vert;
            if (!this.types[y][x2] && i2 < data2.length * 8) {
              this.modules[y][x2] = getBit(data2[i2 >>> 3], 7 - (i2 & 7));
              i2++;
            }
          }
        }
      }
    }
    // XORs the codeword modules in this QR Code with the given mask pattern.
    // The function modules must be marked and the codeword bits must be drawn
    // before masking. Due to the arithmetic of XOR, calling applyMask() with
    // the same mask value a second time will undo the mask. A final well-formed
    // QR Code needs exactly one (not zero, two, etc.) mask applied.
    applyMask(mask) {
      if (mask < 0 || mask > 7)
        throw new RangeError("Mask value out of range");
      for (let y = 0; y < this.size; y++) {
        for (let x2 = 0; x2 < this.size; x2++) {
          let invert;
          switch (mask) {
            case 0:
              invert = (x2 + y) % 2 === 0;
              break;
            case 1:
              invert = y % 2 === 0;
              break;
            case 2:
              invert = x2 % 3 === 0;
              break;
            case 3:
              invert = (x2 + y) % 3 === 0;
              break;
            case 4:
              invert = (Math.floor(x2 / 3) + Math.floor(y / 2)) % 2 === 0;
              break;
            case 5:
              invert = x2 * y % 2 + x2 * y % 3 === 0;
              break;
            case 6:
              invert = (x2 * y % 2 + x2 * y % 3) % 2 === 0;
              break;
            case 7:
              invert = ((x2 + y) % 2 + x2 * y % 3) % 2 === 0;
              break;
            default:
              throw new Error("Unreachable");
          }
          if (!this.types[y][x2] && invert)
            this.modules[y][x2] = !this.modules[y][x2];
        }
      }
    }
    // Calculates and returns the penalty score based on state of this QR Code's current modules.
    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
    getPenaltyScore() {
      let result = 0;
      for (let y = 0; y < this.size; y++) {
        let runColor = false;
        let runX = 0;
        const runHistory = [0, 0, 0, 0, 0, 0, 0];
        for (let x2 = 0; x2 < this.size; x2++) {
          if (this.modules[y][x2] === runColor) {
            runX++;
            if (runX === 5)
              result += PENALTY_N1;
            else if (runX > 5)
              result++;
          } else {
            this.finderPenaltyAddHistory(runX, runHistory);
            if (!runColor)
              result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
            runColor = this.modules[y][x2];
            runX = 1;
          }
        }
        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;
      }
      for (let x2 = 0; x2 < this.size; x2++) {
        let runColor = false;
        let runY = 0;
        const runHistory = [0, 0, 0, 0, 0, 0, 0];
        for (let y = 0; y < this.size; y++) {
          if (this.modules[y][x2] === runColor) {
            runY++;
            if (runY === 5)
              result += PENALTY_N1;
            else if (runY > 5)
              result++;
          } else {
            this.finderPenaltyAddHistory(runY, runHistory);
            if (!runColor)
              result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
            runColor = this.modules[y][x2];
            runY = 1;
          }
        }
        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;
      }
      for (let y = 0; y < this.size - 1; y++) {
        for (let x2 = 0; x2 < this.size - 1; x2++) {
          const color = this.modules[y][x2];
          if (color === this.modules[y][x2 + 1] && color === this.modules[y + 1][x2] && color === this.modules[y + 1][x2 + 1])
            result += PENALTY_N2;
        }
      }
      let dark = 0;
      for (const row of this.modules)
        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);
      const total = this.size * this.size;
      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
      result += k * PENALTY_N4;
      return result;
    }
    /* -- Private helper functions -- */
    // Returns an ascending list of positions of alignment patterns for this version number.
    // Each position is in the range [0,177), and are used on both the x and y axes.
    // This could be implemented as lookup table of 40 variable-length lists of integers.
    getAlignmentPatternPositions() {
      if (this.version === 1) {
        return [];
      } else {
        const numAlign = Math.floor(this.version / 7) + 2;
        const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
        const result = [6];
        for (let pos = this.size - 7; result.length < numAlign; pos -= step)
          result.splice(1, 0, pos);
        return result;
      }
    }
    // Can only be called immediately after a light run is added, and
    // returns either 0, 1, or 2. A helper function for getPenaltyScore().
    finderPenaltyCountPatterns(runHistory) {
      const n2 = runHistory[1];
      const core = n2 > 0 && runHistory[2] === n2 && runHistory[3] === n2 * 3 && runHistory[4] === n2 && runHistory[5] === n2;
      return (core && runHistory[0] >= n2 * 4 && runHistory[6] >= n2 ? 1 : 0) + (core && runHistory[6] >= n2 * 4 && runHistory[0] >= n2 ? 1 : 0);
    }
    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().
    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {
      if (currentRunColor) {
        this.finderPenaltyAddHistory(currentRunLength, runHistory);
        currentRunLength = 0;
      }
      currentRunLength += this.size;
      this.finderPenaltyAddHistory(currentRunLength, runHistory);
      return this.finderPenaltyCountPatterns(runHistory);
    }
    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().
    finderPenaltyAddHistory(currentRunLength, runHistory) {
      if (runHistory[0] === 0)
        currentRunLength += this.size;
      runHistory.pop();
      runHistory.unshift(currentRunLength);
    }
  };
  function appendBits(val, len, bb) {
    if (len < 0 || len > 31 || val >>> len !== 0)
      throw new RangeError("Value out of range");
    for (let i2 = len - 1; i2 >= 0; i2--)
      bb.push(val >>> i2 & 1);
  }
  function getBit(x2, i2) {
    return (x2 >>> i2 & 1) !== 0;
  }
  var QrSegment = class {
    // Creates a new QR Code segment with the given attributes and data.
    // The character count (numChars) must agree with the mode and the bit buffer length,
    // but the constraint isn't checked. The given bit buffer is cloned and stored.
    constructor(mode, numChars, bitData) {
      this.mode = mode;
      this.numChars = numChars;
      this.bitData = bitData;
      if (numChars < 0)
        throw new RangeError("Invalid argument");
      this.bitData = bitData.slice();
    }
    /* -- Methods -- */
    // Returns a new copy of the data bits of this segment.
    getData() {
      return this.bitData.slice();
    }
  };
  var MODE_NUMERIC = [1, 10, 12, 14];
  var MODE_ALPHANUMERIC = [2, 9, 11, 13];
  var MODE_BYTE = [4, 8, 16, 16];
  function numCharCountBits(mode, ver) {
    return mode[Math.floor((ver + 7) / 17) + 1];
  }
  function makeBytes(data2) {
    const bb = [];
    for (const b2 of data2)
      appendBits(b2, 8, bb);
    return new QrSegment(MODE_BYTE, data2.length, bb);
  }
  function makeNumeric(digits) {
    if (!isNumeric(digits))
      throw new RangeError("String contains non-numeric characters");
    const bb = [];
    for (let i2 = 0; i2 < digits.length; ) {
      const n2 = Math.min(digits.length - i2, 3);
      appendBits(Number.parseInt(digits.substring(i2, i2 + n2), 10), n2 * 3 + 1, bb);
      i2 += n2;
    }
    return new QrSegment(MODE_NUMERIC, digits.length, bb);
  }
  function makeAlphanumeric(text) {
    if (!isAlphanumeric(text))
      throw new RangeError("String contains unencodable characters in alphanumeric mode");
    const bb = [];
    let i2;
    for (i2 = 0; i2 + 2 <= text.length; i2 += 2) {
      let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i2)) * 45;
      temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i2 + 1));
      appendBits(temp, 11, bb);
    }
    if (i2 < text.length)
      appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i2)), 6, bb);
    return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);
  }
  function makeSegments(text) {
    if (text === "")
      return [];
    else if (isNumeric(text))
      return [makeNumeric(text)];
    else if (isAlphanumeric(text))
      return [makeAlphanumeric(text)];
    else
      return [makeBytes(toUtf8ByteArray(text))];
  }
  function isNumeric(text) {
    return NUMERIC_REGEX.test(text);
  }
  function isAlphanumeric(text) {
    return ALPHANUMERIC_REGEX.test(text);
  }
  function getTotalBits(segs, version2) {
    let result = 0;
    for (const seg of segs) {
      const ccbits = numCharCountBits(seg.mode, version2);
      if (seg.numChars >= 1 << ccbits)
        return Number.POSITIVE_INFINITY;
      result += 4 + ccbits + seg.bitData.length;
    }
    return result;
  }
  function toUtf8ByteArray(str) {
    str = encodeURI(str);
    const result = [];
    for (let i2 = 0; i2 < str.length; i2++) {
      if (str.charAt(i2) !== "%") {
        result.push(str.charCodeAt(i2));
      } else {
        result.push(Number.parseInt(str.substring(i2 + 1, i2 + 3), 16));
        i2 += 2;
      }
    }
    return result;
  }
  function getNumRawDataModules(ver) {
    if (ver < MIN_VERSION || ver > MAX_VERSION)
      throw new RangeError("Version number out of range");
    let result = (16 * ver + 128) * ver + 64;
    if (ver >= 2) {
      const numAlign = Math.floor(ver / 7) + 2;
      result -= (25 * numAlign - 10) * numAlign - 55;
      if (ver >= 7)
        result -= 36;
    }
    return result;
  }
  function getNumDataCodewords(ver, ecl) {
    return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];
  }
  function reedSolomonComputeDivisor(degree) {
    if (degree < 1 || degree > 255)
      throw new RangeError("Degree out of range");
    const result = [];
    for (let i2 = 0; i2 < degree - 1; i2++)
      result.push(0);
    result.push(1);
    let root = 1;
    for (let i2 = 0; i2 < degree; i2++) {
      for (let j = 0; j < result.length; j++) {
        result[j] = reedSolomonMultiply(result[j], root);
        if (j + 1 < result.length)
          result[j] ^= result[j + 1];
      }
      root = reedSolomonMultiply(root, 2);
    }
    return result;
  }
  function reedSolomonComputeRemainder(data2, divisor) {
    const result = divisor.map((_2) => 0);
    for (const b2 of data2) {
      const factor = b2 ^ result.shift();
      result.push(0);
      divisor.forEach((coef, i2) => result[i2] ^= reedSolomonMultiply(coef, factor));
    }
    return result;
  }
  function reedSolomonMultiply(x2, y) {
    if (x2 >>> 8 !== 0 || y >>> 8 !== 0)
      throw new RangeError("Byte out of range");
    let z2 = 0;
    for (let i2 = 7; i2 >= 0; i2--) {
      z2 = z2 << 1 ^ (z2 >>> 7) * 285;
      z2 ^= (y >>> i2 & 1) * x2;
    }
    return z2;
  }
  function encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {
    if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)
      throw new RangeError("Invalid value");
    let version2;
    let dataUsedBits;
    for (version2 = minVersion; ; version2++) {
      const dataCapacityBits2 = getNumDataCodewords(version2, ecl) * 8;
      const usedBits = getTotalBits(segs, version2);
      if (usedBits <= dataCapacityBits2) {
        dataUsedBits = usedBits;
        break;
      }
      if (version2 >= maxVersion)
        throw new RangeError("Data too long");
    }
    for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {
      if (boostEcl && dataUsedBits <= getNumDataCodewords(version2, newEcl) * 8)
        ecl = newEcl;
    }
    const bb = [];
    for (const seg of segs) {
      appendBits(seg.mode[0], 4, bb);
      appendBits(seg.numChars, numCharCountBits(seg.mode, version2), bb);
      for (const b2 of seg.getData())
        bb.push(b2);
    }
    const dataCapacityBits = getNumDataCodewords(version2, ecl) * 8;
    appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);
    appendBits(0, (8 - bb.length % 8) % 8, bb);
    for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)
      appendBits(padByte, 8, bb);
    const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);
    bb.forEach((b2, i2) => dataCodewords[i2 >>> 3] |= b2 << 7 - (i2 & 7));
    return new QrCode(version2, ecl, dataCodewords, mask);
  }
  function encode(data2, options) {
    const {
      ecc = "L",
      boostEcc = false,
      minVersion = 1,
      maxVersion = 40,
      maskPattern = -1,
      border = 1
    } = options || {};
    const segment = typeof data2 === "string" ? makeSegments(data2) : Array.isArray(data2) ? [makeBytes(data2)] : void 0;
    if (!segment)
      throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data2}`);
    const qr = encodeSegments(
      segment,
      EccMap[ecc],
      minVersion,
      maxVersion,
      maskPattern,
      boostEcc
    );
    const result = addBorder({
      version: qr.version,
      maskPattern: qr.mask,
      size: qr.size,
      data: qr.modules,
      types: qr.types
    }, border);
    if (options?.invert)
      result.data = result.data.map((row) => row.map((mod2) => !mod2));
    options?.onEncoded?.(result);
    return result;
  }
  function addBorder(input, border = 1) {
    if (!border)
      return input;
    const { size: size3 } = input;
    const newSize = size3 + border * 2;
    input.size = newSize;
    input.data.forEach((row) => {
      for (let i2 = 0; i2 < border; i2++) {
        row.unshift(false);
        row.push(false);
      }
    });
    for (let i2 = 0; i2 < border; i2++) {
      input.data.unshift(Array.from({ length: newSize }, (_2) => false));
      input.data.push(Array.from({ length: newSize }, (_2) => false));
    }
    const b2 = QrCodeDataType.Border;
    input.types.forEach((row) => {
      for (let i2 = 0; i2 < border; i2++) {
        row.unshift(b2);
        row.push(b2);
      }
    });
    for (let i2 = 0; i2 < border; i2++) {
      input.types.unshift(Array.from({ length: newSize }, (_2) => b2));
      input.types.push(Array.from({ length: newSize }, (_2) => b2));
    }
    return input;
  }

  // node_modules/@zag-js/qr-code/dist/index.mjs
  var anatomy18 = createAnatomy("qr-code").parts("root", "frame", "pattern", "overlay", "downloadTrigger");
  var parts20 = anatomy18.build();
  var getFrameId = (scope) => scope.ids?.frame ?? `qrcode:${scope.id}:frame`;
  var getFrameEl = (scope) => scope.getById(getFrameId(scope));
  var machine19 = createMachine({
    props({ props: props26 }) {
      return {
        defaultValue: "",
        pixelSize: 10,
        ...props26
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          value: prop("value"),
          defaultValue: prop("defaultValue"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        }))
      };
    },
    computed: {
      encoded: memo2(
        ({ context, prop }) => [context.get("value"), prop("encoding")],
        (value, encoding) => encode(value, encoding)
      )
    },
    states: {
      idle: {
        on: {
          "VALUE.SET": {
            actions: ["setValue"]
          },
          "DOWNLOAD_TRIGGER.CLICK": {
            actions: ["downloadQrCode"]
          }
        }
      }
    },
    implementations: {
      actions: {
        setValue({ context, event }) {
          context.set("value", event.value);
        },
        downloadQrCode({ event, scope }) {
          const { mimeType, quality, fileName } = event;
          const svgEl = getFrameEl(scope);
          const doc = scope.getDoc();
          getDataUrl(svgEl, { type: mimeType, quality }).then((dataUri) => {
            const a = doc.createElement("a");
            a.href = dataUri;
            a.rel = "noopener";
            a.download = fileName;
            a.click();
            setTimeout(() => {
              a.remove();
            }, 0);
          });
        }
      }
    }
  });
  var props19 = createProps()([
    "ids",
    "defaultValue",
    "value",
    "id",
    "encoding",
    "dir",
    "getRootNode",
    "onValueChange",
    "pixelSize"
  ]);
  var splitProps19 = createSplitProps(props19);

  // node_modules/@zag-js/radio-group/dist/index.mjs
  var anatomy19 = createAnatomy("radio-group").parts(
    "root",
    "label",
    "item",
    "itemText",
    "itemControl",
    "indicator"
  );
  var parts21 = anatomy19.build();
  var getRootId7 = (ctx) => ctx.ids?.root ?? `radio-group:${ctx.id}`;
  var getItemId3 = (ctx, value) => ctx.ids?.item?.(value) ?? `radio-group:${ctx.id}:radio:${value}`;
  var getIndicatorId = (ctx) => ctx.ids?.indicator ?? `radio-group:${ctx.id}:indicator`;
  var getRootEl6 = (ctx) => ctx.getById(getRootId7(ctx));
  var getIndicatorEl = (ctx) => ctx.getById(getIndicatorId(ctx));
  var getInputEls2 = (ctx) => {
    const ownerId = CSS.escape(getRootId7(ctx));
    const selector = `input[type=radio][data-ownedby='${ownerId}']:not([disabled])`;
    return queryAll(getRootEl6(ctx), selector);
  };
  var getRadioEl = (ctx, value) => {
    if (!value) return;
    return ctx.getById(getItemId3(ctx, value));
  };
  var getOffsetRect = (el) => ({
    left: el?.offsetLeft ?? 0,
    top: el?.offsetTop ?? 0,
    width: el?.offsetWidth ?? 0,
    height: el?.offsetHeight ?? 0
  });
  var resolveRect = (rect) => ({
    width: `${rect.width}px`,
    height: `${rect.height}px`,
    left: `${rect.left}px`,
    top: `${rect.top}px`
  });
  var { not: not7 } = createGuards();
  var machine20 = createMachine({
    props({ props: props26 }) {
      return {
        orientation: "vertical",
        ...props26
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        })),
        activeValue: bindable(() => ({
          defaultValue: null
        })),
        focusedValue: bindable(() => ({
          defaultValue: null
        })),
        hoveredValue: bindable(() => ({
          defaultValue: null
        })),
        indicatorRect: bindable(() => ({
          defaultValue: {}
        })),
        canIndicatorTransition: bindable(() => ({
          defaultValue: false
        })),
        fieldsetDisabled: bindable(() => ({
          defaultValue: false
        })),
        ssr: bindable(() => ({
          defaultValue: true
        }))
      };
    },
    refs() {
      return {
        indicatorCleanup: null
      };
    },
    computed: {
      isDisabled: ({ prop, context }) => !!prop("disabled") || context.get("fieldsetDisabled")
    },
    entry: ["syncIndicatorRect", "syncSsr"],
    exit: ["cleanupObserver"],
    effects: ["trackFormControlState", "trackFocusVisible"],
    watch({ track, action, context }) {
      track([() => context.get("value")], () => {
        action(["setIndicatorTransition", "syncIndicatorRect", "syncInputElements"]);
      });
    },
    on: {
      SET_VALUE: [
        {
          guard: not7("isTrusted"),
          actions: ["setValue", "dispatchChangeEvent"]
        },
        {
          actions: ["setValue"]
        }
      ],
      SET_HOVERED: {
        actions: ["setHovered"]
      },
      SET_ACTIVE: {
        actions: ["setActive"]
      },
      SET_FOCUSED: {
        actions: ["setFocused"]
      }
    },
    states: {
      idle: {}
    },
    implementations: {
      guards: {
        isTrusted: ({ event }) => !!event.isTrusted
      },
      effects: {
        trackFormControlState({ context, scope }) {
          return trackFormControl(getRootEl6(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              context.set("value", context.initial("value"));
            }
          });
        },
        trackFocusVisible({ scope }) {
          return trackFocusVisible({ root: scope.getRootNode?.() });
        }
      },
      actions: {
        setValue({ context, event }) {
          context.set("value", event.value);
        },
        setHovered({ context, event }) {
          context.set("hoveredValue", event.value);
        },
        setActive({ context, event }) {
          context.set("activeValue", event.value);
        },
        setFocused({ context, event }) {
          context.set("focusedValue", event.value);
        },
        syncInputElements({ context, scope }) {
          const inputs = getInputEls2(scope);
          inputs.forEach((input) => {
            input.checked = input.value === context.get("value");
          });
        },
        setIndicatorTransition({ context }) {
          context.set("canIndicatorTransition", isString2(context.get("value")));
        },
        cleanupObserver({ refs }) {
          refs.get("indicatorCleanup")?.();
        },
        syncSsr({ context }) {
          context.set("ssr", false);
        },
        syncIndicatorRect({ context, scope, refs }) {
          refs.get("indicatorCleanup")?.();
          if (!getIndicatorEl(scope)) return;
          const value = context.get("value");
          const radioEl = getRadioEl(scope, value);
          if (value == null || !radioEl) {
            context.set("canIndicatorTransition", false);
            context.set("indicatorRect", {});
            return;
          }
          const indicatorCleanup = trackElementRect([radioEl], {
            measure(el) {
              return getOffsetRect(el);
            },
            onEntry({ rects }) {
              context.set("indicatorRect", resolveRect(rects[0]));
            }
          });
          refs.set("indicatorCleanup", indicatorCleanup);
        },
        dispatchChangeEvent({ context, scope }) {
          const inputEls = getInputEls2(scope);
          inputEls.forEach((inputEl) => {
            const checked = inputEl.value === context.get("value");
            if (checked === inputEl.checked) return;
            dispatchInputCheckedEvent(inputEl, { checked });
          });
        }
      }
    }
  });
  var props20 = createProps()([
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "name",
    "onValueChange",
    "orientation",
    "readOnly",
    "value",
    "defaultValue"
  ]);
  var splitProps20 = createSplitProps(props20);
  var itemProps6 = createProps()(["value", "disabled", "invalid"]);
  var splitItemProps6 = createSplitProps(itemProps6);

  // node_modules/@zag-js/rating-group/dist/index.mjs
  var anatomy20 = createAnatomy("rating-group").parts("root", "label", "item", "control");
  var parts22 = anatomy20.build();
  var getHiddenInputId5 = (ctx) => ctx.ids?.hiddenInput ?? `rating:${ctx.id}:input`;
  var getControlId4 = (ctx) => ctx.ids?.control ?? `rating:${ctx.id}:control`;
  var getControlEl3 = (ctx) => ctx.getById(getControlId4(ctx));
  var getRadioEl2 = (ctx, value) => {
    const selector = `[role=radio][aria-posinset='${Math.ceil(value)}']`;
    return query(getControlEl3(ctx), selector);
  };
  var getHiddenInputEl5 = (ctx) => ctx.getById(getHiddenInputId5(ctx));
  var dispatchChangeEvent = (ctx, value) => {
    const inputEl = getHiddenInputEl5(ctx);
    if (!inputEl) return;
    dispatchInputValueEvent(inputEl, { value });
  };
  var machine21 = createMachine({
    props({ props: props26 }) {
      return {
        name: "rating",
        count: 5,
        dir: "ltr",
        defaultValue: -1,
        ...props26,
        translations: {
          ratingValueText: (index) => `${index} stars`,
          ...props26.translations
        }
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        })),
        hoveredValue: bindable(() => ({
          defaultValue: -1,
          onChange(value) {
            prop("onHoverChange")?.({ hoveredValue: value });
          }
        })),
        fieldsetDisabled: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    watch({ track, action, prop, context }) {
      track([() => prop("allowHalf")], () => {
        action(["roundValueIfNeeded"]);
      });
      track([() => context.get("value")], () => {
        action(["dispatchChangeEvent"]);
      });
    },
    computed: {
      isDisabled: ({ context, prop }) => !!prop("disabled") || context.get("fieldsetDisabled"),
      isInteractive: ({ computed, prop }) => !(computed("isDisabled") || prop("readOnly")),
      isHovering: ({ context }) => context.get("hoveredValue") > -1
    },
    effects: ["trackFormControlState"],
    on: {
      SET_VALUE: {
        actions: ["setValue"]
      },
      CLEAR_VALUE: {
        actions: ["clearValue"]
      }
    },
    states: {
      idle: {
        entry: ["clearHoveredValue"],
        on: {
          GROUP_POINTER_OVER: {
            target: "hover"
          },
          FOCUS: {
            target: "focus"
          },
          CLICK: {
            actions: ["setValue", "focusActiveRadio"]
          }
        }
      },
      focus: {
        on: {
          POINTER_OVER: {
            actions: ["setHoveredValue"]
          },
          GROUP_POINTER_LEAVE: {
            actions: ["clearHoveredValue"]
          },
          BLUR: {
            target: "idle"
          },
          SPACE: {
            guard: "isValueEmpty",
            actions: ["setValue"]
          },
          CLICK: {
            actions: ["setValue", "focusActiveRadio"]
          },
          ARROW_LEFT: {
            actions: ["setPrevValue", "focusActiveRadio"]
          },
          ARROW_RIGHT: {
            actions: ["setNextValue", "focusActiveRadio"]
          },
          HOME: {
            actions: ["setValueToMin", "focusActiveRadio"]
          },
          END: {
            actions: ["setValueToMax", "focusActiveRadio"]
          }
        }
      },
      hover: {
        on: {
          POINTER_OVER: {
            actions: ["setHoveredValue"]
          },
          GROUP_POINTER_LEAVE: [
            {
              guard: "isRadioFocused",
              target: "focus",
              actions: ["clearHoveredValue"]
            },
            {
              target: "idle",
              actions: ["clearHoveredValue"]
            }
          ],
          CLICK: {
            actions: ["setValue", "focusActiveRadio"]
          }
        }
      }
    },
    implementations: {
      guards: {
        isInteractive: ({ prop }) => !(prop("disabled") || prop("readOnly")),
        isHoveredValueEmpty: ({ context }) => context.get("hoveredValue") === -1,
        isValueEmpty: ({ context }) => context.get("value") <= 0,
        isRadioFocused: ({ scope }) => !!getControlEl3(scope)?.contains(scope.getActiveElement())
      },
      effects: {
        trackFormControlState({ context, scope }) {
          return trackFormControl(getHiddenInputEl5(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              context.set("value", context.initial("value"));
            }
          });
        }
      },
      actions: {
        clearHoveredValue({ context }) {
          context.set("hoveredValue", -1);
        },
        focusActiveRadio({ scope, context }) {
          raf(() => getRadioEl2(scope, context.get("value"))?.focus());
        },
        setPrevValue({ context, prop }) {
          const factor = prop("allowHalf") ? 0.5 : 1;
          context.set("value", Math.max(0, context.get("value") - factor));
        },
        setNextValue({ context, prop }) {
          const factor = prop("allowHalf") ? 0.5 : 1;
          const value = context.get("value") === -1 ? 0 : context.get("value");
          context.set("value", Math.min(prop("count"), value + factor));
        },
        setValueToMin({ context }) {
          context.set("value", 1);
        },
        setValueToMax({ context, prop }) {
          context.set("value", prop("count"));
        },
        setValue({ context, event }) {
          const hoveredValue = context.get("hoveredValue");
          const value = hoveredValue === -1 ? event.value : hoveredValue;
          context.set("value", value);
        },
        clearValue({ context }) {
          context.set("value", -1);
        },
        setHoveredValue({ context, prop, event }) {
          const half = prop("allowHalf") && event.isMidway;
          const factor = half ? 0.5 : 0;
          context.set("hoveredValue", event.index - factor);
        },
        roundValueIfNeeded({ context, prop }) {
          if (prop("allowHalf")) return;
          context.set("value", Math.round(context.get("value")));
        },
        dispatchChangeEvent({ context, scope }) {
          dispatchChangeEvent(scope, context.get("value"));
        }
      }
    }
  });
  var props21 = createProps()([
    "allowHalf",
    "autoFocus",
    "count",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "name",
    "onHoverChange",
    "onValueChange",
    "required",
    "readOnly",
    "translations",
    "value",
    "defaultValue"
  ]);
  var splitProps21 = createSplitProps(props21);
  var itemProps7 = createProps()(["index"]);
  var splitItemProps7 = createSplitProps(itemProps7);

  // node_modules/@ark-ui/react/dist/components/segment-group/segment-group.anatomy.js
  var segmentGroupAnatomy = anatomy19.rename("segment-group");
  var parts23 = segmentGroupAnatomy.build();

  // node_modules/@ark-ui/react/dist/components/select/select-clear-trigger.js
  var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
  var import_react116 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/select/use-select-context.js
  var [SelectProvider, useSelectContext] = createContext6({
    name: "SelectContext",
    hookName: "useSelectContext",
    providerName: "<SelectProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/select/select-clear-trigger.js
  var SelectClearTrigger = (0, import_react116.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getClearTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ark.button, { ...mergedProps, ref });
  });
  SelectClearTrigger.displayName = "SelectClearTrigger";

  // node_modules/@ark-ui/react/dist/components/select/select-content.js
  var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
  var import_react118 = __toESM(require_react(), 1);
  var SelectContent = (0, import_react118.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const presence = usePresenceContext();
    const mergedProps = mergeProps2(select.getContentProps(), presence.getPresenceProps(), props26);
    if (presence.unmounted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ark.div, { ...mergedProps, ref: composeRefs(presence.ref, ref) });
  });
  SelectContent.displayName = "SelectContent";

  // node_modules/@ark-ui/react/dist/components/select/select-context.js
  var SelectContext = (props26) => props26.children(useSelectContext());

  // node_modules/@ark-ui/react/dist/components/select/select-control.js
  var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
  var import_react120 = __toESM(require_react(), 1);
  var SelectControl = (0, import_react120.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getControlProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectControl.displayName = "SelectControl";

  // node_modules/@ark-ui/react/dist/components/select/select-hidden-select.js
  var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
  var import_react122 = __toESM(require_react(), 1);
  var SelectHiddenSelect = (0, import_react122.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getHiddenSelectProps(), props26);
    const isValueEmpty = select.value.length === 0;
    const field = useFieldContext();
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(ark.select, { "aria-describedby": field?.ariaDescribedby, ...mergedProps, ref, children: [
      isValueEmpty && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("option", { value: "" }),
      select.collection.items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        "option",
        {
          value: select.collection.getItemValue(item) ?? "",
          disabled: select.collection.getItemDisabled(item),
          children: select.collection.stringifyItem(item)
        },
        index
      ))
    ] });
  });
  SelectHiddenSelect.displayName = "SelectHiddenSelect";

  // node_modules/@ark-ui/react/dist/components/select/select-indicator.js
  var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
  var import_react124 = __toESM(require_react(), 1);
  var SelectIndicator = (0, import_react124.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getIndicatorProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectIndicator.displayName = "SelectIndicator";

  // node_modules/@ark-ui/react/dist/components/select/select-item.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
  var import_react126 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/select/use-select-item-context.js
  var [SelectItemProvider, useSelectItemContext] = createContext6({
    name: "SelectItemContext",
    hookName: "useSelectItemContext",
    providerName: "<SelectItemProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/select/use-select-item-props-context.js
  var [SelectItemPropsProvider, useSelectItemPropsContext] = createContext6({
    name: "SelectItemPropsContext",
    hookName: "useSelectItemPropsContext",
    providerName: "<SelectItemPropsProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/select/select-item.js
  var SelectItem = (0, import_react126.forwardRef)((props26, ref) => {
    const [itemProps9, localProps] = createSplitProps2()(props26, ["item", "persistFocus"]);
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getItemProps(itemProps9), localProps);
    const itemState = select.getItemState(itemProps9);
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(SelectItemPropsProvider, { value: itemProps9, children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(SelectItemProvider, { value: itemState, children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ark.div, { ...mergedProps, ref }) }) });
  });
  SelectItem.displayName = "SelectItem";

  // node_modules/@ark-ui/react/dist/components/select/select-item-context.js
  var SelectItemContext = (props26) => props26.children(useSelectItemContext());

  // node_modules/@ark-ui/react/dist/components/select/select-item-group.js
  var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
  var import_react128 = __toESM(require_react(), 1);

  // node_modules/@ark-ui/react/dist/components/select/use-select-item-group-props.js
  var [SelectItemGroupPropsProvider, useSelectItemGroupPropsContext] = createContext6({
    name: "SelectItemGroupPropsContext",
    hookName: "useSelectItemGroupPropsContext",
    providerName: "<SelectItemGroupPropsProvider />"
  });

  // node_modules/@ark-ui/react/dist/components/select/select-item-group.js
  var SelectItemGroup = (0, import_react128.forwardRef)((props26, ref) => {
    const id = (0, import_react128.useId)();
    const [_itemGroupProps, localProps] = createSplitProps2()(props26, ["id"]);
    const itemGroupProps4 = { id, ..._itemGroupProps };
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getItemGroupProps(itemGroupProps4), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(SelectItemGroupPropsProvider, { value: itemGroupProps4, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ark.div, { ...mergedProps, ref }) });
  });
  SelectItemGroup.displayName = "SelectItemGroup";

  // node_modules/@ark-ui/react/dist/components/select/select-item-group-label.js
  var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
  var import_react130 = __toESM(require_react(), 1);
  var SelectItemGroupLabel = (0, import_react130.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const itemGroupProps4 = useSelectItemGroupPropsContext();
    const mergedProps = mergeProps2(select.getItemGroupLabelProps({ htmlFor: itemGroupProps4.id }), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectItemGroupLabel.displayName = "SelectItemGroupLabel";

  // node_modules/@ark-ui/react/dist/components/select/select-item-indicator.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
  var import_react132 = __toESM(require_react(), 1);
  var SelectItemIndicator = (0, import_react132.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const itemProps9 = useSelectItemPropsContext();
    const mergedProps = mergeProps2(select.getItemIndicatorProps(itemProps9), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectItemIndicator.displayName = "SelectItemIndicator";

  // node_modules/@ark-ui/react/dist/components/select/select-item-text.js
  var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
  var import_react134 = __toESM(require_react(), 1);
  var SelectItemText = (0, import_react134.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const itemProps9 = useSelectItemPropsContext();
    const mergedProps = mergeProps2(select.getItemTextProps(itemProps9), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(ark.span, { ...mergedProps, ref });
  });
  SelectItemText.displayName = "SelectItemText";

  // node_modules/@ark-ui/react/dist/components/select/select-label.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
  var import_react136 = __toESM(require_react(), 1);
  var SelectLabel = (0, import_react136.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getLabelProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ark.label, { ...mergedProps, ref });
  });
  SelectLabel.displayName = "SelectLabel";

  // node_modules/@ark-ui/react/dist/components/select/select-list.js
  var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
  var import_react138 = __toESM(require_react(), 1);
  var SelectList = (0, import_react138.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getListProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectList.displayName = "SelectList";

  // node_modules/@ark-ui/react/dist/components/select/select-positioner.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
  var import_react140 = __toESM(require_react(), 1);
  var SelectPositioner = (0, import_react140.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getPositionerProps(), props26);
    const presence = usePresenceContext();
    if (presence.unmounted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ark.div, { ...mergedProps, ref });
  });
  SelectPositioner.displayName = "SelectPositioner";

  // node_modules/@ark-ui/react/dist/components/select/select-root.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
  var import_react144 = __toESM(require_react(), 1);

  // node_modules/@zag-js/select/dist/index.mjs
  var anatomy21 = createAnatomy("select").parts(
    "label",
    "positioner",
    "trigger",
    "indicator",
    "clearTrigger",
    "item",
    "itemText",
    "itemIndicator",
    "itemGroup",
    "itemGroupLabel",
    "list",
    "content",
    "root",
    "control",
    "valueText"
  );
  var parts24 = anatomy21.build();
  var collection3 = (options) => {
    return new ListCollection(options);
  };
  collection3.empty = () => {
    return new ListCollection({ items: [] });
  };
  var getRootId8 = (ctx) => ctx.ids?.root ?? `select:${ctx.id}`;
  var getContentId8 = (ctx) => ctx.ids?.content ?? `select:${ctx.id}:content`;
  var getTriggerId8 = (ctx) => ctx.ids?.trigger ?? `select:${ctx.id}:trigger`;
  var getClearTriggerId2 = (ctx) => ctx.ids?.clearTrigger ?? `select:${ctx.id}:clear-trigger`;
  var getLabelId3 = (ctx) => ctx.ids?.label ?? `select:${ctx.id}:label`;
  var getControlId5 = (ctx) => ctx.ids?.control ?? `select:${ctx.id}:control`;
  var getItemId4 = (ctx, id) => ctx.ids?.item?.(id) ?? `select:${ctx.id}:option:${id}`;
  var getHiddenSelectId = (ctx) => ctx.ids?.hiddenSelect ?? `select:${ctx.id}:select`;
  var getPositionerId7 = (ctx) => ctx.ids?.positioner ?? `select:${ctx.id}:positioner`;
  var getItemGroupId = (ctx, id) => ctx.ids?.itemGroup?.(id) ?? `select:${ctx.id}:optgroup:${id}`;
  var getItemGroupLabelId = (ctx, id) => ctx.ids?.itemGroupLabel?.(id) ?? `select:${ctx.id}:optgroup-label:${id}`;
  var getHiddenSelectEl = (ctx) => ctx.getById(getHiddenSelectId(ctx));
  var getContentEl8 = (ctx) => ctx.getById(getContentId8(ctx));
  var getTriggerEl7 = (ctx) => ctx.getById(getTriggerId8(ctx));
  var getClearTriggerEl2 = (ctx) => ctx.getById(getClearTriggerId2(ctx));
  var getPositionerEl7 = (ctx) => ctx.getById(getPositionerId7(ctx));
  var getItemEl3 = (ctx, id) => ctx.getById(getItemId4(ctx, id));
  function connect5(service, normalize3) {
    const { context, prop, scope, state: state2, computed, send } = service;
    const disabled = prop("disabled") || context.get("fieldsetDisabled");
    const invalid = prop("invalid");
    const readOnly = prop("readOnly");
    const composite = prop("composite");
    const collection22 = prop("collection");
    const open = state2.hasTag("open");
    const focused = state2.matches("focused");
    const highlightedValue = context.get("highlightedValue");
    const highlightedItem = context.get("highlightedItem");
    const selectedItems = context.get("selectedItems");
    const currentPlacement = context.get("currentPlacement");
    const isTypingAhead = computed("isTypingAhead");
    const interactive = computed("isInteractive");
    const ariaActiveDescendant = highlightedValue ? getItemId4(scope, highlightedValue) : void 0;
    function getItemState(props26) {
      const _disabled = collection22.getItemDisabled(props26.item);
      const value = collection22.getItemValue(props26.item);
      ensure(value, () => `[zag-js] No value found for item ${JSON.stringify(props26.item)}`);
      return {
        value,
        disabled: Boolean(disabled || _disabled),
        highlighted: highlightedValue === value,
        selected: context.get("value").includes(value)
      };
    }
    const popperStyles = getPlacementStyles({
      ...prop("positioning"),
      placement: currentPlacement
    });
    return {
      open,
      focused,
      empty: context.get("value").length === 0,
      highlightedItem,
      highlightedValue,
      selectedItems,
      hasSelectedItems: computed("hasSelectedItems"),
      value: context.get("value"),
      valueAsString: computed("valueAsString"),
      collection: collection22,
      multiple: !!prop("multiple"),
      disabled: !!disabled,
      reposition(options = {}) {
        send({ type: "POSITIONING.SET", options });
      },
      focus() {
        getTriggerEl7(scope)?.focus({ preventScroll: true });
      },
      setOpen(nextOpen) {
        const open2 = state2.hasTag("open");
        if (open2 === nextOpen) return;
        send({ type: nextOpen ? "OPEN" : "CLOSE" });
      },
      selectValue(value) {
        send({ type: "ITEM.SELECT", value });
      },
      setValue(value) {
        send({ type: "VALUE.SET", value });
      },
      selectAll() {
        send({ type: "VALUE.SET", value: collection22.getValues() });
      },
      setHighlightValue(value) {
        send({ type: "HIGHLIGHTED_VALUE.SET", value });
      },
      clearHighlightValue() {
        send({ type: "HIGHLIGHTED_VALUE.CLEAR" });
      },
      clearValue(value) {
        if (value) {
          send({ type: "ITEM.CLEAR", value });
        } else {
          send({ type: "VALUE.CLEAR" });
        }
      },
      getItemState,
      getRootProps() {
        return normalize3.element({
          ...parts24.root.attrs,
          dir: prop("dir"),
          id: getRootId8(scope),
          "data-invalid": dataAttr(invalid),
          "data-readonly": dataAttr(readOnly)
        });
      },
      getLabelProps() {
        return normalize3.label({
          dir: prop("dir"),
          id: getLabelId3(scope),
          ...parts24.label.attrs,
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(invalid),
          "data-readonly": dataAttr(readOnly),
          htmlFor: getHiddenSelectId(scope),
          onClick(event) {
            if (event.defaultPrevented) return;
            if (disabled) return;
            getTriggerEl7(scope)?.focus({ preventScroll: true });
          }
        });
      },
      getControlProps() {
        return normalize3.element({
          ...parts24.control.attrs,
          dir: prop("dir"),
          id: getControlId5(scope),
          "data-state": open ? "open" : "closed",
          "data-focus": dataAttr(focused),
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(invalid)
        });
      },
      getValueTextProps() {
        return normalize3.element({
          ...parts24.valueText.attrs,
          dir: prop("dir"),
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(invalid),
          "data-focus": dataAttr(focused)
        });
      },
      getTriggerProps() {
        return normalize3.button({
          id: getTriggerId8(scope),
          disabled,
          dir: prop("dir"),
          type: "button",
          role: "combobox",
          "aria-controls": getContentId8(scope),
          "aria-expanded": open,
          "aria-haspopup": "listbox",
          "data-state": open ? "open" : "closed",
          "aria-invalid": invalid,
          "aria-labelledby": getLabelId3(scope),
          ...parts24.trigger.attrs,
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(invalid),
          "data-readonly": dataAttr(readOnly),
          "data-placement": currentPlacement,
          "data-placeholder-shown": dataAttr(!computed("hasSelectedItems")),
          onClick(event) {
            if (!interactive) return;
            if (event.defaultPrevented) return;
            send({ type: "TRIGGER.CLICK" });
          },
          onFocus() {
            send({ type: "TRIGGER.FOCUS" });
          },
          onBlur() {
            send({ type: "TRIGGER.BLUR" });
          },
          onKeyDown(event) {
            if (event.defaultPrevented) return;
            if (!interactive) return;
            const keyMap2 = {
              ArrowUp() {
                send({ type: "TRIGGER.ARROW_UP" });
              },
              ArrowDown(event2) {
                send({ type: event2.altKey ? "OPEN" : "TRIGGER.ARROW_DOWN" });
              },
              ArrowLeft() {
                send({ type: "TRIGGER.ARROW_LEFT" });
              },
              ArrowRight() {
                send({ type: "TRIGGER.ARROW_RIGHT" });
              },
              Home() {
                send({ type: "TRIGGER.HOME" });
              },
              End() {
                send({ type: "TRIGGER.END" });
              },
              Enter() {
                send({ type: "TRIGGER.ENTER" });
              },
              Space(event2) {
                if (isTypingAhead) {
                  send({ type: "TRIGGER.TYPEAHEAD", key: event2.key });
                } else {
                  send({ type: "TRIGGER.ENTER" });
                }
              }
            };
            const exec = keyMap2[getEventKey(event, {
              dir: prop("dir"),
              orientation: "vertical"
            })];
            if (exec) {
              exec(event);
              event.preventDefault();
              return;
            }
            if (getByTypeahead.isValidEvent(event)) {
              send({ type: "TRIGGER.TYPEAHEAD", key: event.key });
              event.preventDefault();
            }
          }
        });
      },
      getIndicatorProps() {
        return normalize3.element({
          ...parts24.indicator.attrs,
          dir: prop("dir"),
          "aria-hidden": true,
          "data-state": open ? "open" : "closed",
          "data-disabled": dataAttr(disabled),
          "data-invalid": dataAttr(invalid),
          "data-readonly": dataAttr(readOnly)
        });
      },
      getItemProps(props26) {
        const itemState = getItemState(props26);
        return normalize3.element({
          id: getItemId4(scope, itemState.value),
          role: "option",
          ...parts24.item.attrs,
          dir: prop("dir"),
          "data-value": itemState.value,
          "aria-selected": itemState.selected,
          "data-state": itemState.selected ? "checked" : "unchecked",
          "data-highlighted": dataAttr(itemState.highlighted),
          "data-disabled": dataAttr(itemState.disabled),
          "aria-disabled": ariaAttr(itemState.disabled),
          onPointerMove(event) {
            if (itemState.disabled || event.pointerType !== "mouse") return;
            if (itemState.value === highlightedValue) return;
            send({ type: "ITEM.POINTER_MOVE", value: itemState.value });
          },
          onClick(event) {
            if (event.defaultPrevented) return;
            if (itemState.disabled) return;
            send({ type: "ITEM.CLICK", src: "pointerup", value: itemState.value });
          },
          onPointerLeave(event) {
            if (itemState.disabled) return;
            if (props26.persistFocus) return;
            if (event.pointerType !== "mouse") return;
            const pointerMoved = service.event.previous()?.type.includes("POINTER");
            if (!pointerMoved) return;
            send({ type: "ITEM.POINTER_LEAVE" });
          }
        });
      },
      getItemTextProps(props26) {
        const itemState = getItemState(props26);
        return normalize3.element({
          ...parts24.itemText.attrs,
          "data-state": itemState.selected ? "checked" : "unchecked",
          "data-disabled": dataAttr(itemState.disabled),
          "data-highlighted": dataAttr(itemState.highlighted)
        });
      },
      getItemIndicatorProps(props26) {
        const itemState = getItemState(props26);
        return normalize3.element({
          "aria-hidden": true,
          ...parts24.itemIndicator.attrs,
          "data-state": itemState.selected ? "checked" : "unchecked",
          hidden: !itemState.selected
        });
      },
      getItemGroupLabelProps(props26) {
        const { htmlFor } = props26;
        return normalize3.element({
          ...parts24.itemGroupLabel.attrs,
          id: getItemGroupLabelId(scope, htmlFor),
          dir: prop("dir"),
          role: "presentation"
        });
      },
      getItemGroupProps(props26) {
        const { id } = props26;
        return normalize3.element({
          ...parts24.itemGroup.attrs,
          "data-disabled": dataAttr(disabled),
          id: getItemGroupId(scope, id),
          "aria-labelledby": getItemGroupLabelId(scope, id),
          role: "group",
          dir: prop("dir")
        });
      },
      getClearTriggerProps() {
        return normalize3.button({
          ...parts24.clearTrigger.attrs,
          id: getClearTriggerId2(scope),
          type: "button",
          "aria-label": "Clear value",
          "data-invalid": dataAttr(invalid),
          disabled,
          hidden: !computed("hasSelectedItems"),
          dir: prop("dir"),
          onClick(event) {
            if (event.defaultPrevented) return;
            send({ type: "CLEAR.CLICK" });
          }
        });
      },
      getHiddenSelectProps() {
        const value = context.get("value");
        const defaultValue = prop("multiple") ? value : value?.[0];
        return normalize3.select({
          name: prop("name"),
          form: prop("form"),
          disabled,
          multiple: prop("multiple"),
          required: prop("required"),
          "aria-hidden": true,
          id: getHiddenSelectId(scope),
          defaultValue,
          style: visuallyHiddenStyle,
          tabIndex: -1,
          // Some browser extensions will focus the hidden select.
          // Let's forward the focus to the trigger.
          onFocus() {
            getTriggerEl7(scope)?.focus({ preventScroll: true });
          },
          "aria-labelledby": getLabelId3(scope)
        });
      },
      getPositionerProps() {
        return normalize3.element({
          ...parts24.positioner.attrs,
          dir: prop("dir"),
          id: getPositionerId7(scope),
          style: popperStyles.floating
        });
      },
      getContentProps() {
        return normalize3.element({
          hidden: !open,
          dir: prop("dir"),
          id: getContentId8(scope),
          role: composite ? "listbox" : "dialog",
          ...parts24.content.attrs,
          "data-state": open ? "open" : "closed",
          "data-placement": currentPlacement,
          "data-activedescendant": ariaActiveDescendant,
          "aria-activedescendant": composite ? ariaActiveDescendant : void 0,
          "aria-multiselectable": prop("multiple") && composite ? true : void 0,
          "aria-labelledby": getLabelId3(scope),
          tabIndex: 0,
          onKeyDown(event) {
            if (!interactive) return;
            if (!isSelfTarget(event)) return;
            if (event.key === "Tab") {
              const valid = isValidTabEvent(event);
              if (!valid) {
                event.preventDefault();
                return;
              }
            }
            const keyMap2 = {
              ArrowUp() {
                send({ type: "CONTENT.ARROW_UP" });
              },
              ArrowDown() {
                send({ type: "CONTENT.ARROW_DOWN" });
              },
              Home() {
                send({ type: "CONTENT.HOME" });
              },
              End() {
                send({ type: "CONTENT.END" });
              },
              Enter() {
                send({ type: "ITEM.CLICK", src: "keydown.enter" });
              },
              Space(event2) {
                if (isTypingAhead) {
                  send({ type: "CONTENT.TYPEAHEAD", key: event2.key });
                } else {
                  keyMap2.Enter?.(event2);
                }
              }
            };
            const exec = keyMap2[getEventKey(event)];
            if (exec) {
              exec(event);
              event.preventDefault();
              return;
            }
            const target = getEventTarget(event);
            if (isEditableElement(target)) {
              return;
            }
            if (getByTypeahead.isValidEvent(event)) {
              send({ type: "CONTENT.TYPEAHEAD", key: event.key });
              event.preventDefault();
            }
          }
        });
      },
      getListProps() {
        return normalize3.element({
          ...parts24.list.attrs,
          tabIndex: 0,
          role: !composite ? "listbox" : void 0,
          "aria-labelledby": getTriggerId8(scope),
          "aria-activedescendant": !composite ? ariaActiveDescendant : void 0,
          "aria-multiselectable": !composite && prop("multiple") ? true : void 0
        });
      }
    };
  }
  var { and: and8, not: not8, or: or2 } = createGuards();
  var machine22 = createMachine({
    props({ props: props26 }) {
      return {
        loopFocus: false,
        closeOnSelect: !props26.multiple,
        composite: true,
        defaultValue: [],
        ...props26,
        collection: props26.collection ?? collection3.empty(),
        positioning: {
          placement: "bottom-start",
          gutter: 8,
          ...props26.positioning
        }
      };
    },
    context({ prop, bindable }) {
      return {
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          isEqual,
          onChange(value) {
            const items = prop("collection").findMany(value);
            return prop("onValueChange")?.({ value, items });
          }
        })),
        highlightedValue: bindable(() => ({
          defaultValue: prop("defaultHighlightedValue") || null,
          value: prop("highlightedValue"),
          onChange(value) {
            prop("onHighlightChange")?.({
              highlightedValue: value,
              highlightedItem: prop("collection").find(value),
              highlightedIndex: prop("collection").indexOf(value)
            });
          }
        })),
        currentPlacement: bindable(() => ({
          defaultValue: void 0
        })),
        fieldsetDisabled: bindable(() => ({
          defaultValue: false
        })),
        highlightedItem: bindable(() => ({
          defaultValue: null
        })),
        selectedItems: bindable(() => {
          const value = prop("value") ?? prop("defaultValue") ?? [];
          const items = prop("collection").findMany(value);
          return { defaultValue: items };
        })
      };
    },
    refs() {
      return {
        typeahead: { ...getByTypeahead.defaultOptions }
      };
    },
    computed: {
      hasSelectedItems: ({ context }) => context.get("value").length > 0,
      isTypingAhead: ({ refs }) => refs.get("typeahead").keysSoFar !== "",
      isDisabled: ({ prop, context }) => !!prop("disabled") || !!context.get("fieldsetDisabled"),
      isInteractive: ({ prop }) => !(prop("disabled") || prop("readOnly")),
      valueAsString: ({ context, prop }) => prop("collection").stringifyItems(context.get("selectedItems"))
    },
    initialState({ prop }) {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "idle";
    },
    entry: ["syncSelectElement"],
    watch({ context, prop, track, action }) {
      track([() => context.get("value").toString()], () => {
        action(["syncSelectedItems", "syncSelectElement", "dispatchChangeEvent"]);
      });
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
      track([() => context.get("highlightedValue")], () => {
        action(["syncHighlightedItem"]);
      });
      track([() => prop("collection").toString()], () => {
        action(["syncCollection"]);
      });
    },
    on: {
      "HIGHLIGHTED_VALUE.SET": {
        actions: ["setHighlightedItem"]
      },
      "HIGHLIGHTED_VALUE.CLEAR": {
        actions: ["clearHighlightedItem"]
      },
      "ITEM.SELECT": {
        actions: ["selectItem"]
      },
      "ITEM.CLEAR": {
        actions: ["clearItem"]
      },
      "VALUE.SET": {
        actions: ["setSelectedItems"]
      },
      "VALUE.CLEAR": {
        actions: ["clearSelectedItems"]
      },
      "CLEAR.CLICK": {
        actions: ["clearSelectedItems", "focusTriggerEl"]
      }
    },
    effects: ["trackFormControlState"],
    states: {
      idle: {
        tags: ["closed"],
        on: {
          "CONTROLLED.OPEN": [
            {
              guard: "isTriggerClickEvent",
              target: "open",
              actions: ["setInitialFocus", "highlightFirstSelectedItem"]
            },
            {
              target: "open",
              actions: ["setInitialFocus"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen", "setInitialFocus", "highlightFirstSelectedItem"]
            }
          ],
          "TRIGGER.FOCUS": {
            target: "focused"
          },
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen"]
            }
          ]
        }
      },
      focused: {
        tags: ["closed"],
        on: {
          "CONTROLLED.OPEN": [
            {
              guard: "isTriggerClickEvent",
              target: "open",
              actions: ["setInitialFocus", "highlightFirstSelectedItem"]
            },
            {
              guard: "isTriggerArrowUpEvent",
              target: "open",
              actions: ["setInitialFocus", "highlightComputedLastItem"]
            },
            {
              guard: or2("isTriggerArrowDownEvent", "isTriggerEnterEvent"),
              target: "open",
              actions: ["setInitialFocus", "highlightComputedFirstItem"]
            },
            {
              target: "open",
              actions: ["setInitialFocus"]
            }
          ],
          OPEN: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen"]
            }
          ],
          "TRIGGER.BLUR": {
            target: "idle"
          },
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen", "highlightFirstSelectedItem"]
            }
          ],
          "TRIGGER.ENTER": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen", "highlightComputedFirstItem"]
            }
          ],
          "TRIGGER.ARROW_UP": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen", "highlightComputedLastItem"]
            }
          ],
          "TRIGGER.ARROW_DOWN": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setInitialFocus", "invokeOnOpen", "highlightComputedFirstItem"]
            }
          ],
          "TRIGGER.ARROW_LEFT": [
            {
              guard: and8(not8("multiple"), "hasSelectedItems"),
              actions: ["selectPreviousItem"]
            },
            {
              guard: not8("multiple"),
              actions: ["selectLastItem"]
            }
          ],
          "TRIGGER.ARROW_RIGHT": [
            {
              guard: and8(not8("multiple"), "hasSelectedItems"),
              actions: ["selectNextItem"]
            },
            {
              guard: not8("multiple"),
              actions: ["selectFirstItem"]
            }
          ],
          "TRIGGER.HOME": {
            guard: not8("multiple"),
            actions: ["selectFirstItem"]
          },
          "TRIGGER.END": {
            guard: not8("multiple"),
            actions: ["selectLastItem"]
          },
          "TRIGGER.TYPEAHEAD": {
            guard: not8("multiple"),
            actions: ["selectMatchingItem"]
          }
        }
      },
      open: {
        tags: ["open"],
        exit: ["scrollContentToTop"],
        effects: ["trackDismissableElement", "computePlacement", "scrollToHighlightedItem"],
        on: {
          "CONTROLLED.CLOSE": [
            {
              guard: "restoreFocus",
              target: "focused",
              actions: ["focusTriggerEl", "clearHighlightedItem"]
            },
            {
              target: "idle",
              actions: ["clearHighlightedItem"]
            }
          ],
          CLOSE: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              guard: "restoreFocus",
              target: "focused",
              actions: ["invokeOnClose", "focusTriggerEl", "clearHighlightedItem"]
            },
            {
              target: "idle",
              actions: ["invokeOnClose", "clearHighlightedItem"]
            }
          ],
          "TRIGGER.CLICK": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "focused",
              actions: ["invokeOnClose", "clearHighlightedItem"]
            }
          ],
          "ITEM.CLICK": [
            {
              guard: and8("closeOnSelect", "isOpenControlled"),
              actions: ["selectHighlightedItem", "invokeOnClose"]
            },
            {
              guard: "closeOnSelect",
              target: "focused",
              actions: ["selectHighlightedItem", "invokeOnClose", "focusTriggerEl", "clearHighlightedItem"]
            },
            {
              actions: ["selectHighlightedItem"]
            }
          ],
          "CONTENT.HOME": {
            actions: ["highlightFirstItem"]
          },
          "CONTENT.END": {
            actions: ["highlightLastItem"]
          },
          "CONTENT.ARROW_DOWN": [
            {
              guard: and8("hasHighlightedItem", "loop", "isLastItemHighlighted"),
              actions: ["highlightFirstItem"]
            },
            {
              guard: "hasHighlightedItem",
              actions: ["highlightNextItem"]
            },
            {
              actions: ["highlightFirstItem"]
            }
          ],
          "CONTENT.ARROW_UP": [
            {
              guard: and8("hasHighlightedItem", "loop", "isFirstItemHighlighted"),
              actions: ["highlightLastItem"]
            },
            {
              guard: "hasHighlightedItem",
              actions: ["highlightPreviousItem"]
            },
            {
              actions: ["highlightLastItem"]
            }
          ],
          "CONTENT.TYPEAHEAD": {
            actions: ["highlightMatchingItem"]
          },
          "ITEM.POINTER_MOVE": {
            actions: ["highlightItem"]
          },
          "ITEM.POINTER_LEAVE": {
            actions: ["clearHighlightedItem"]
          },
          "POSITIONING.SET": {
            actions: ["reposition"]
          }
        }
      }
    },
    implementations: {
      guards: {
        loop: ({ prop }) => !!prop("loopFocus"),
        multiple: ({ prop }) => !!prop("multiple"),
        hasSelectedItems: ({ computed }) => !!computed("hasSelectedItems"),
        hasHighlightedItem: ({ context }) => context.get("highlightedValue") != null,
        isFirstItemHighlighted: ({ context, prop }) => context.get("highlightedValue") === prop("collection").firstValue,
        isLastItemHighlighted: ({ context, prop }) => context.get("highlightedValue") === prop("collection").lastValue,
        closeOnSelect: ({ prop, event }) => !!(event.closeOnSelect ?? prop("closeOnSelect")),
        restoreFocus: ({ event }) => restoreFocusFn(event),
        // guard assertions (for controlled mode)
        isOpenControlled: ({ prop }) => prop("open") !== void 0,
        isTriggerClickEvent: ({ event }) => event.previousEvent?.type === "TRIGGER.CLICK",
        isTriggerEnterEvent: ({ event }) => event.previousEvent?.type === "TRIGGER.ENTER",
        isTriggerArrowUpEvent: ({ event }) => event.previousEvent?.type === "TRIGGER.ARROW_UP",
        isTriggerArrowDownEvent: ({ event }) => event.previousEvent?.type === "TRIGGER.ARROW_DOWN"
      },
      effects: {
        trackFormControlState({ context, scope }) {
          return trackFormControl(getHiddenSelectEl(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              const value = context.initial("value");
              context.set("value", value);
            }
          });
        },
        trackDismissableElement({ scope, send, prop }) {
          const contentEl = () => getContentEl8(scope);
          let restoreFocus = true;
          return trackDismissableElement(contentEl, {
            defer: true,
            exclude: [getTriggerEl7(scope), getClearTriggerEl2(scope)],
            onFocusOutside: prop("onFocusOutside"),
            onPointerDownOutside: prop("onPointerDownOutside"),
            onInteractOutside(event) {
              prop("onInteractOutside")?.(event);
              restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
            },
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside", restoreFocus });
            }
          });
        },
        computePlacement({ context, prop, scope }) {
          const positioning = prop("positioning");
          context.set("currentPlacement", positioning.placement);
          const triggerEl = () => getTriggerEl7(scope);
          const positionerEl = () => getPositionerEl7(scope);
          return getPlacement(triggerEl, positionerEl, {
            defer: true,
            ...positioning,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        scrollToHighlightedItem({ context, prop, scope, event }) {
          const exec = (immediate) => {
            const highlightedValue = context.get("highlightedValue");
            if (highlightedValue == null) return;
            if (event.current().type.includes("POINTER")) return;
            const optionEl = getItemEl3(scope, highlightedValue);
            const contentEl2 = getContentEl8(scope);
            const scrollToIndexFn = prop("scrollToIndexFn");
            if (scrollToIndexFn) {
              const highlightedIndex = prop("collection").indexOf(highlightedValue);
              scrollToIndexFn?.({ index: highlightedIndex, immediate });
              return;
            }
            scrollIntoView(optionEl, { rootEl: contentEl2, block: "nearest" });
          };
          raf(() => exec(true));
          const contentEl = () => getContentEl8(scope);
          return observeAttributes(contentEl, {
            defer: true,
            attributes: ["data-activedescendant"],
            callback() {
              exec(false);
            }
          });
        }
      },
      actions: {
        reposition({ context, prop, scope, event }) {
          const positionerEl = () => getPositionerEl7(scope);
          getPlacement(getTriggerEl7(scope), positionerEl, {
            ...prop("positioning"),
            ...event.options,
            defer: true,
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        toggleVisibility({ send, prop, event }) {
          send({ type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE", previousEvent: event });
        },
        highlightPreviousItem({ context, prop }) {
          const highlightedValue = context.get("highlightedValue");
          if (highlightedValue == null) return;
          const value = prop("collection").getPreviousValue(highlightedValue, 1, prop("loopFocus"));
          if (value == null) return;
          context.set("highlightedValue", value);
        },
        highlightNextItem({ context, prop }) {
          const highlightedValue = context.get("highlightedValue");
          if (highlightedValue == null) return;
          const value = prop("collection").getNextValue(highlightedValue, 1, prop("loopFocus"));
          if (value == null) return;
          context.set("highlightedValue", value);
        },
        highlightFirstItem({ context, prop }) {
          const value = prop("collection").firstValue;
          context.set("highlightedValue", value);
        },
        highlightLastItem({ context, prop }) {
          const value = prop("collection").lastValue;
          context.set("highlightedValue", value);
        },
        setInitialFocus({ scope }) {
          raf(() => {
            const element = getInitialFocus({
              root: getContentEl8(scope)
            });
            element?.focus({ preventScroll: true });
          });
        },
        focusTriggerEl({ event, scope }) {
          if (!restoreFocusFn(event)) return;
          raf(() => {
            const element = getTriggerEl7(scope);
            element?.focus({ preventScroll: true });
          });
        },
        selectHighlightedItem({ context, prop, event }) {
          let value = event.value ?? context.get("highlightedValue");
          if (value == null || !prop("collection").has(value)) return;
          prop("onSelect")?.({ value });
          const nullable = prop("deselectable") && !prop("multiple") && context.get("value").includes(value);
          value = nullable ? null : value;
          context.set("value", (prev3) => {
            if (value == null) return [];
            if (prop("multiple")) return addOrRemove(prev3, value);
            return [value];
          });
        },
        highlightComputedFirstItem({ context, prop, computed }) {
          const collection22 = prop("collection");
          const value = computed("hasSelectedItems") ? collection22.sort(context.get("value"))[0] : collection22.firstValue;
          context.set("highlightedValue", value);
        },
        highlightComputedLastItem({ context, prop, computed }) {
          const collection22 = prop("collection");
          const value = computed("hasSelectedItems") ? collection22.sort(context.get("value"))[0] : collection22.lastValue;
          context.set("highlightedValue", value);
        },
        highlightFirstSelectedItem({ context, prop, computed }) {
          if (!computed("hasSelectedItems")) return;
          const value = prop("collection").sort(context.get("value"))[0];
          context.set("highlightedValue", value);
        },
        highlightItem({ context, event }) {
          context.set("highlightedValue", event.value);
        },
        highlightMatchingItem({ context, prop, event, refs }) {
          const value = prop("collection").search(event.key, {
            state: refs.get("typeahead"),
            currentValue: context.get("highlightedValue")
          });
          if (value == null) return;
          context.set("highlightedValue", value);
        },
        setHighlightedItem({ context, event }) {
          context.set("highlightedValue", event.value);
        },
        clearHighlightedItem({ context }) {
          context.set("highlightedValue", null);
        },
        selectItem({ context, prop, event }) {
          prop("onSelect")?.({ value: event.value });
          const nullable = prop("deselectable") && !prop("multiple") && context.get("value").includes(event.value);
          const value = nullable ? null : event.value;
          context.set("value", (prev3) => {
            if (value == null) return [];
            if (prop("multiple")) return addOrRemove(prev3, value);
            return [value];
          });
        },
        clearItem({ context, event }) {
          context.set("value", (prev3) => prev3.filter((v) => v !== event.value));
        },
        setSelectedItems({ context, event }) {
          context.set("value", event.value);
        },
        clearSelectedItems({ context }) {
          context.set("value", []);
        },
        selectPreviousItem({ context, prop }) {
          const [firstItem] = context.get("value");
          const value = prop("collection").getPreviousValue(firstItem);
          if (value) context.set("value", [value]);
        },
        selectNextItem({ context, prop }) {
          const [firstItem] = context.get("value");
          const value = prop("collection").getNextValue(firstItem);
          if (value) context.set("value", [value]);
        },
        selectFirstItem({ context, prop }) {
          const value = prop("collection").firstValue;
          if (value) context.set("value", [value]);
        },
        selectLastItem({ context, prop }) {
          const value = prop("collection").lastValue;
          if (value) context.set("value", [value]);
        },
        selectMatchingItem({ context, prop, event, refs }) {
          const value = prop("collection").search(event.key, {
            state: refs.get("typeahead"),
            currentValue: context.get("value")[0]
          });
          if (value == null) return;
          context.set("value", [value]);
        },
        scrollContentToTop({ prop, scope }) {
          if (prop("scrollToIndexFn")) {
            prop("scrollToIndexFn")?.({ index: 0, immediate: true });
          } else {
            getContentEl8(scope)?.scrollTo(0, 0);
          }
        },
        invokeOnOpen({ prop }) {
          prop("onOpenChange")?.({ open: true });
        },
        invokeOnClose({ prop }) {
          prop("onOpenChange")?.({ open: false });
        },
        syncSelectElement({ context, prop, scope }) {
          const selectEl = getHiddenSelectEl(scope);
          if (!selectEl) return;
          if (context.get("value").length === 0 && !prop("multiple")) {
            selectEl.selectedIndex = -1;
            return;
          }
          for (const option of selectEl.options) {
            option.selected = context.get("value").includes(option.value);
          }
        },
        syncCollection({ context, prop }) {
          const collection22 = prop("collection");
          const highlightedItem = collection22.find(context.get("highlightedValue"));
          if (highlightedItem) context.set("highlightedItem", highlightedItem);
          const selectedItems = collection22.findMany(context.get("value"));
          context.set("selectedItems", selectedItems);
        },
        syncSelectedItems({ context, prop }) {
          const collection22 = prop("collection");
          const prevSelectedItems = context.get("selectedItems");
          const value = context.get("value");
          const selectedItems = value.map((value2) => {
            const item = prevSelectedItems.find((item2) => collection22.getItemValue(item2) === value2);
            return item || collection22.find(value2);
          });
          context.set("selectedItems", selectedItems);
        },
        syncHighlightedItem({ context, prop }) {
          const collection22 = prop("collection");
          const highlightedValue = context.get("highlightedValue");
          const highlightedItem = highlightedValue ? collection22.find(highlightedValue) : null;
          context.set("highlightedItem", highlightedItem);
        },
        dispatchChangeEvent({ scope }) {
          queueMicrotask(() => {
            const node2 = getHiddenSelectEl(scope);
            if (!node2) return;
            const win = scope.getWin();
            const changeEvent = new win.Event("change", { bubbles: true, composed: true });
            node2.dispatchEvent(changeEvent);
          });
        }
      }
    }
  });
  function restoreFocusFn(event) {
    const v = event.restoreFocus ?? event.previousEvent?.restoreFocus;
    return v == null || !!v;
  }
  var props22 = createProps()([
    "closeOnSelect",
    "collection",
    "composite",
    "defaultHighlightedValue",
    "defaultOpen",
    "defaultValue",
    "deselectable",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "invalid",
    "loopFocus",
    "multiple",
    "name",
    "onFocusOutside",
    "onHighlightChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "open",
    "positioning",
    "readOnly",
    "required",
    "scrollToIndexFn",
    "value"
  ]);
  var splitProps22 = createSplitProps(props22);
  var itemProps8 = createProps()(["item", "persistFocus"]);
  var splitItemProps8 = createSplitProps(itemProps8);
  var itemGroupProps3 = createProps()(["id"]);
  var splitItemGroupProps3 = createSplitProps(itemGroupProps3);
  var itemGroupLabelProps3 = createProps()(["htmlFor"]);
  var splitItemGroupLabelProps3 = createSplitProps(itemGroupLabelProps3);

  // node_modules/@ark-ui/react/dist/components/select/use-select.js
  var import_react142 = __toESM(require_react(), 1);
  var useSelect = (props26) => {
    const id = (0, import_react142.useId)();
    const { dir } = useLocaleContext();
    const { getRootNode } = useEnvironmentContext();
    const field = useFieldContext();
    const machineProps = {
      id,
      ids: {
        label: field?.ids.label,
        hiddenSelect: field?.ids.control
      },
      disabled: field?.disabled,
      readOnly: field?.readOnly,
      invalid: field?.invalid,
      required: field?.required,
      dir,
      getRootNode,
      ...props26
    };
    const service = useMachine(machine22, machineProps);
    return connect5(service, normalizeProps);
  };

  // node_modules/@ark-ui/react/dist/components/select/select-root.js
  var SelectImpl = (props26, ref) => {
    const [presenceProps, selectProps] = splitPresenceProps(props26);
    const [useSelectProps, localProps] = createSplitProps2()(selectProps, [
      "closeOnSelect",
      "collection",
      "composite",
      "defaultHighlightedValue",
      "defaultOpen",
      "defaultValue",
      "deselectable",
      "disabled",
      "form",
      "highlightedValue",
      "id",
      "ids",
      "invalid",
      "loopFocus",
      "multiple",
      "name",
      "onFocusOutside",
      "onHighlightChange",
      "onInteractOutside",
      "onOpenChange",
      "onPointerDownOutside",
      "onSelect",
      "onValueChange",
      "open",
      "positioning",
      "readOnly",
      "required",
      "scrollToIndexFn",
      "value"
    ]);
    const select = useSelect(useSelectProps);
    const presence = usePresence(mergeProps2({ present: select.open }, presenceProps));
    const mergedProps = mergeProps2(select.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(SelectProvider, { value: select, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(PresenceProvider, { value: presence, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ark.div, { ...mergedProps, ref }) }) });
  };
  var SelectRoot = (0, import_react144.forwardRef)(SelectImpl);

  // node_modules/@ark-ui/react/dist/components/select/select-root-provider.js
  var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
  var import_react146 = __toESM(require_react(), 1);
  var SelectImpl2 = (props26, ref) => {
    const [presenceProps, selectProps] = splitPresenceProps(props26);
    const [{ value: select }, localProps] = createSplitProps2()(selectProps, ["value"]);
    const presence = usePresence(mergeProps2({ present: select.open }, presenceProps));
    const mergedProps = mergeProps2(select.getRootProps(), localProps);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(SelectProvider, { value: select, children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(PresenceProvider, { value: presence, children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(ark.div, { ...mergedProps, ref }) }) });
  };
  var SelectRootProvider = (0, import_react146.forwardRef)(SelectImpl2);

  // node_modules/@ark-ui/react/dist/components/select/select-trigger.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
  var import_react148 = __toESM(require_react(), 1);
  var SelectTrigger = (0, import_react148.forwardRef)((props26, ref) => {
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getTriggerProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ark.button, { ...mergedProps, ref });
  });
  SelectTrigger.displayName = "SelectTrigger";

  // node_modules/@ark-ui/react/dist/components/select/select-value-text.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
  var import_react150 = __toESM(require_react(), 1);
  var SelectValueText = (0, import_react150.forwardRef)((props26, ref) => {
    const { children, placeholder, ...localprops } = props26;
    const select = useSelectContext();
    const mergedProps = mergeProps2(select.getValueTextProps(), localprops);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(ark.span, { ...mergedProps, ref, children: children || select.valueAsString || placeholder });
  });
  SelectValueText.displayName = "SelectValueText";

  // node_modules/@ark-ui/react/dist/components/select/select.js
  var select_exports = {};
  __export(select_exports, {
    ClearTrigger: () => SelectClearTrigger,
    Content: () => SelectContent,
    Context: () => SelectContext,
    Control: () => SelectControl,
    HiddenSelect: () => SelectHiddenSelect,
    Indicator: () => SelectIndicator,
    Item: () => SelectItem,
    ItemContext: () => SelectItemContext,
    ItemGroup: () => SelectItemGroup,
    ItemGroupLabel: () => SelectItemGroupLabel,
    ItemIndicator: () => SelectItemIndicator,
    ItemText: () => SelectItemText,
    Label: () => SelectLabel,
    List: () => SelectList,
    Positioner: () => SelectPositioner,
    Root: () => SelectRoot,
    RootProvider: () => SelectRootProvider,
    Trigger: () => SelectTrigger,
    ValueText: () => SelectValueText
  });

  // node_modules/@zag-js/slider/dist/index.mjs
  var anatomy22 = createAnatomy("slider").parts(
    "root",
    "label",
    "thumb",
    "valueText",
    "track",
    "range",
    "control",
    "markerGroup",
    "marker",
    "draggingIndicator"
  );
  var parts25 = anatomy22.build();
  var getRootId9 = (ctx) => ctx.ids?.root ?? `slider:${ctx.id}`;
  var getThumbId = (ctx, index) => ctx.ids?.thumb?.(index) ?? `slider:${ctx.id}:thumb:${index}`;
  var getHiddenInputId6 = (ctx, index) => ctx.ids?.hiddenInput?.(index) ?? `slider:${ctx.id}:input:${index}`;
  var getControlId6 = (ctx) => ctx.ids?.control ?? `slider:${ctx.id}:control`;
  var getRootEl7 = (ctx) => ctx.getById(getRootId9(ctx));
  var getThumbEl = (ctx, index) => ctx.getById(getThumbId(ctx, index));
  var getThumbEls = (ctx) => queryAll(getControlEl4(ctx), "[role=slider]");
  var getHiddenInputEl6 = (ctx, index) => ctx.getById(getHiddenInputId6(ctx, index));
  var getControlEl4 = (ctx) => ctx.getById(getControlId6(ctx));
  var getPointValue = (params, point) => {
    const { prop, scope } = params;
    const controlEl = getControlEl4(scope);
    if (!controlEl) return;
    const relativePoint = getRelativePoint(point, controlEl);
    const percent = relativePoint.getPercentValue({
      orientation: prop("orientation"),
      dir: prop("dir"),
      inverted: { y: true }
    });
    return getPercentValue(percent, prop("min"), prop("max"), prop("step"));
  };
  var dispatchChangeEvent2 = (ctx, value) => {
    value.forEach((value2, index) => {
      const inputEl = getHiddenInputEl6(ctx, index);
      if (!inputEl) return;
      dispatchInputValueEvent(inputEl, { value: value2 });
    });
  };
  var getOffsetRect2 = (el) => ({
    left: el?.offsetLeft ?? 0,
    top: el?.offsetTop ?? 0,
    width: el?.offsetWidth ?? 0,
    height: el?.offsetHeight ?? 0
  });
  function normalizeValues(params, nextValues) {
    return nextValues.map((value, index) => {
      return constrainValue(params, value, index);
    });
  }
  function getRangeAtIndex(params, index) {
    const { context, prop } = params;
    const step = prop("step") * prop("minStepsBetweenThumbs");
    return getValueRanges(context.get("value"), prop("min"), prop("max"), step)[index];
  }
  function constrainValue(params, value, index) {
    const { prop } = params;
    const range = getRangeAtIndex(params, index);
    const snapValue = snapValueToStep(value, prop("min"), prop("max"), prop("step"));
    return clampValue(snapValue, range.min, range.max);
  }
  function decrement(params, index, step) {
    const { context, prop } = params;
    const idx = index ?? context.get("focusedIndex");
    const range = getRangeAtIndex(params, idx);
    const nextValues = getPreviousStepValue(idx, {
      ...range,
      step: step ?? prop("step"),
      values: context.get("value")
    });
    nextValues[idx] = clampValue(nextValues[idx], range.min, range.max);
    return nextValues;
  }
  function increment(params, index, step) {
    const { context, prop } = params;
    const idx = index ?? context.get("focusedIndex");
    const range = getRangeAtIndex(params, idx);
    const nextValues = getNextStepValue(idx, {
      ...range,
      step: step ?? prop("step"),
      values: context.get("value")
    });
    nextValues[idx] = clampValue(nextValues[idx], range.min, range.max);
    return nextValues;
  }
  function getClosestIndex(params, pointValue) {
    const { context } = params;
    return getClosestValueIndex(context.get("value"), pointValue);
  }
  var isEqualSize = (a, b2) => {
    return a?.width === b2?.width && a?.height === b2?.height;
  };
  var normalize = (value, min4, max4, step, minStepsBetweenThumbs) => {
    const ranges = getValueRanges(value, min4, max4, minStepsBetweenThumbs * step);
    return ranges.map((range) => {
      const snapValue = snapValueToStep(range.value, range.min, range.max, step);
      const rangeValue = clampValue(snapValue, range.min, range.max);
      if (!isValueWithinRange(rangeValue, min4, max4)) {
        throw new Error(
          "[zag-js/slider] The configured `min`, `max`, `step` or `minStepsBetweenThumbs` values are invalid"
        );
      }
      return rangeValue;
    });
  };
  var machine23 = createMachine({
    props({ props: props26 }) {
      const min4 = props26.min ?? 0;
      const max4 = props26.max ?? 100;
      const step = props26.step ?? 1;
      const defaultValue = props26.defaultValue ?? [min4];
      const minStepsBetweenThumbs = props26.minStepsBetweenThumbs ?? 0;
      return {
        dir: "ltr",
        thumbAlignment: "contain",
        origin: "start",
        orientation: "horizontal",
        minStepsBetweenThumbs,
        ...props26,
        defaultValue: normalize(defaultValue, min4, max4, step, minStepsBetweenThumbs),
        value: props26.value ? normalize(props26.value, min4, max4, step, minStepsBetweenThumbs) : void 0,
        max: max4,
        step,
        min: min4
      };
    },
    initialState() {
      return "idle";
    },
    context({ prop, bindable, getContext }) {
      return {
        thumbSize: bindable(() => ({
          defaultValue: prop("thumbSize") || null
        })),
        value: bindable(() => ({
          defaultValue: prop("defaultValue"),
          value: prop("value"),
          isEqual,
          hash(a) {
            return a.join(",");
          },
          onChange(value) {
            prop("onValueChange")?.({ value });
          }
        })),
        focusedIndex: bindable(() => ({
          defaultValue: -1,
          onChange(value) {
            const ctx = getContext();
            prop("onFocusChange")?.({ focusedIndex: value, value: ctx.get("value") });
          }
        })),
        fieldsetDisabled: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    computed: {
      isHorizontal: ({ prop }) => prop("orientation") === "horizontal",
      isVertical: ({ prop }) => prop("orientation") === "vertical",
      isRtl: ({ prop }) => prop("orientation") === "horizontal" && prop("dir") === "rtl",
      isDisabled: ({ context, prop }) => !!prop("disabled") || context.get("fieldsetDisabled"),
      isInteractive: ({ prop, computed }) => !(prop("readOnly") || computed("isDisabled")),
      hasMeasuredThumbSize: ({ context }) => context.get("thumbSize") != null,
      valuePercent({ context, prop }) {
        return context.get("value").map((value) => 100 * getValuePercent(value, prop("min"), prop("max")));
      }
    },
    watch({ track, action, context }) {
      track([() => context.hash("value")], () => {
        action(["syncInputElements", "dispatchChangeEvent"]);
      });
    },
    effects: ["trackFormControlState", "trackThumbSize"],
    on: {
      SET_VALUE: [
        {
          guard: "hasIndex",
          actions: ["setValueAtIndex"]
        },
        {
          actions: ["setValue"]
        }
      ],
      INCREMENT: {
        actions: ["incrementThumbAtIndex"]
      },
      DECREMENT: {
        actions: ["decrementThumbAtIndex"]
      }
    },
    states: {
      idle: {
        on: {
          POINTER_DOWN: {
            target: "dragging",
            actions: ["setClosestThumbIndex", "setPointerValue", "focusActiveThumb"]
          },
          FOCUS: {
            target: "focus",
            actions: ["setFocusedIndex"]
          },
          THUMB_POINTER_DOWN: {
            target: "dragging",
            actions: ["setFocusedIndex", "focusActiveThumb"]
          }
        }
      },
      focus: {
        entry: ["focusActiveThumb"],
        on: {
          POINTER_DOWN: {
            target: "dragging",
            actions: ["setClosestThumbIndex", "setPointerValue", "focusActiveThumb"]
          },
          THUMB_POINTER_DOWN: {
            target: "dragging",
            actions: ["setFocusedIndex", "focusActiveThumb"]
          },
          ARROW_DEC: {
            actions: ["decrementThumbAtIndex", "invokeOnChangeEnd"]
          },
          ARROW_INC: {
            actions: ["incrementThumbAtIndex", "invokeOnChangeEnd"]
          },
          HOME: {
            actions: ["setFocusedThumbToMin", "invokeOnChangeEnd"]
          },
          END: {
            actions: ["setFocusedThumbToMax", "invokeOnChangeEnd"]
          },
          BLUR: {
            target: "idle",
            actions: ["clearFocusedIndex"]
          }
        }
      },
      dragging: {
        entry: ["focusActiveThumb"],
        effects: ["trackPointerMove"],
        on: {
          POINTER_UP: {
            target: "focus",
            actions: ["invokeOnChangeEnd"]
          },
          POINTER_MOVE: {
            actions: ["setPointerValue"]
          }
        }
      }
    },
    implementations: {
      guards: {
        hasIndex: ({ event }) => event.index != null
      },
      effects: {
        trackFormControlState({ context, scope }) {
          return trackFormControl(getRootEl7(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              context.set("value", context.initial("value"));
            }
          });
        },
        trackPointerMove({ scope, send }) {
          return trackPointerMove(scope.getDoc(), {
            onPointerMove(info) {
              send({ type: "POINTER_MOVE", point: info.point });
            },
            onPointerUp() {
              send({ type: "POINTER_UP" });
            }
          });
        },
        trackThumbSize({ context, scope, prop }) {
          if (prop("thumbAlignment") !== "contain" || prop("thumbSize")) return;
          return trackElementRect(getThumbEls(scope), {
            box: "border-box",
            measure(el) {
              return getOffsetRect2(el);
            },
            onEntry({ rects }) {
              if (rects.length === 0) return;
              const size3 = pick(rects[0], ["width", "height"]);
              if (isEqualSize(context.get("thumbSize"), size3)) return;
              context.set("thumbSize", size3);
            }
          });
        }
      },
      actions: {
        dispatchChangeEvent({ context, scope }) {
          dispatchChangeEvent2(scope, context.get("value"));
        },
        syncInputElements({ context, scope }) {
          context.get("value").forEach((value, index) => {
            const inputEl = getHiddenInputEl6(scope, index);
            setElementValue(inputEl, value.toString());
          });
        },
        invokeOnChangeEnd({ prop, context }) {
          queueMicrotask(() => {
            prop("onValueChangeEnd")?.({ value: context.get("value") });
          });
        },
        setClosestThumbIndex(params) {
          const { context, event } = params;
          const pointValue = getPointValue(params, event.point);
          if (pointValue == null) return;
          const focusedIndex = getClosestIndex(params, pointValue);
          context.set("focusedIndex", focusedIndex);
        },
        setFocusedIndex({ context, event }) {
          context.set("focusedIndex", event.index);
        },
        clearFocusedIndex({ context }) {
          context.set("focusedIndex", -1);
        },
        setPointerValue(params) {
          queueMicrotask(() => {
            const { context, event } = params;
            const pointValue = getPointValue(params, event.point);
            if (pointValue == null) return;
            const focusedIndex = context.get("focusedIndex");
            const value = constrainValue(params, pointValue, focusedIndex);
            context.set("value", (prev3) => setValueAtIndex(prev3, focusedIndex, value));
          });
        },
        focusActiveThumb({ scope, context }) {
          raf(() => {
            const thumbEl = getThumbEl(scope, context.get("focusedIndex"));
            thumbEl?.focus({ preventScroll: true });
          });
        },
        decrementThumbAtIndex(params) {
          const { context, event } = params;
          const value = decrement(params, event.index, event.step);
          context.set("value", value);
        },
        incrementThumbAtIndex(params) {
          const { context, event } = params;
          const value = increment(params, event.index, event.step);
          context.set("value", value);
        },
        setFocusedThumbToMin(params) {
          const { context } = params;
          const index = context.get("focusedIndex");
          const { min: min4 } = getRangeAtIndex(params, index);
          context.set("value", (prev3) => setValueAtIndex(prev3, index, min4));
        },
        setFocusedThumbToMax(params) {
          const { context } = params;
          const index = context.get("focusedIndex");
          const { max: max4 } = getRangeAtIndex(params, index);
          context.set("value", (prev3) => setValueAtIndex(prev3, index, max4));
        },
        setValueAtIndex(params) {
          const { context, event } = params;
          const value = constrainValue(params, event.value, event.index);
          context.set("value", (prev3) => setValueAtIndex(prev3, event.index, value));
        },
        setValue(params) {
          const { context, event } = params;
          const value = normalizeValues(params, event.value);
          context.set("value", value);
        }
      }
    }
  });
  var props23 = createProps()([
    "aria-label",
    "aria-labelledby",
    "dir",
    "disabled",
    "form",
    "getAriaValueText",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "max",
    "min",
    "minStepsBetweenThumbs",
    "name",
    "onFocusChange",
    "onValueChange",
    "onValueChangeEnd",
    "orientation",
    "origin",
    "readOnly",
    "step",
    "thumbAlignment",
    "thumbAlignment",
    "thumbSize",
    "value",
    "defaultValue"
  ]);
  var splitProps23 = createSplitProps(props23);
  var thumbProps = createProps()(["index", "name"]);
  var splitThumbProps = createSplitProps(thumbProps);

  // node_modules/@zag-js/switch/dist/index.mjs
  var anatomy23 = createAnatomy("switch").parts("root", "label", "control", "thumb");
  var parts26 = anatomy23.build();
  var getRootId10 = (ctx) => ctx.ids?.root ?? `switch:${ctx.id}`;
  var getHiddenInputId7 = (ctx) => ctx.ids?.hiddenInput ?? `switch:${ctx.id}:input`;
  var getRootEl8 = (ctx) => ctx.getById(getRootId10(ctx));
  var getHiddenInputEl7 = (ctx) => ctx.getById(getHiddenInputId7(ctx));
  var { not: not9 } = createGuards();
  var machine24 = createMachine({
    props({ props: props26 }) {
      return {
        defaultChecked: false,
        label: "switch",
        value: "on",
        ...props26
      };
    },
    initialState() {
      return "ready";
    },
    context({ prop, bindable }) {
      return {
        checked: bindable(() => ({
          defaultValue: prop("defaultChecked"),
          value: prop("checked"),
          onChange(value) {
            prop("onCheckedChange")?.({ checked: value });
          }
        })),
        fieldsetDisabled: bindable(() => ({
          defaultValue: false
        })),
        focusVisible: bindable(() => ({
          defaultValue: false
        })),
        active: bindable(() => ({
          defaultValue: false
        })),
        focused: bindable(() => ({
          defaultValue: false
        })),
        hovered: bindable(() => ({
          defaultValue: false
        }))
      };
    },
    computed: {
      isDisabled: ({ context, prop }) => prop("disabled") || context.get("fieldsetDisabled")
    },
    watch({ track, prop, context, action }) {
      track([() => prop("disabled")], () => {
        action(["removeFocusIfNeeded"]);
      });
      track([() => context.get("checked")], () => {
        action(["syncInputElement"]);
      });
    },
    effects: ["trackFormControlState", "trackPressEvent", "trackFocusVisible"],
    on: {
      "CHECKED.TOGGLE": [
        {
          guard: not9("isTrusted"),
          actions: ["toggleChecked", "dispatchChangeEvent"]
        },
        {
          actions: ["toggleChecked"]
        }
      ],
      "CHECKED.SET": [
        {
          guard: not9("isTrusted"),
          actions: ["setChecked", "dispatchChangeEvent"]
        },
        {
          actions: ["setChecked"]
        }
      ],
      "CONTEXT.SET": {
        actions: ["setContext"]
      }
    },
    states: {
      ready: {}
    },
    implementations: {
      guards: {
        isTrusted: ({ event }) => !!event.isTrusted
      },
      effects: {
        trackPressEvent({ computed, scope, context }) {
          if (computed("isDisabled")) return;
          return trackPress({
            pointerNode: getRootEl8(scope),
            keyboardNode: getHiddenInputEl7(scope),
            isValidKey: (event) => event.key === " ",
            onPress: () => context.set("active", false),
            onPressStart: () => context.set("active", true),
            onPressEnd: () => context.set("active", false)
          });
        },
        trackFocusVisible({ computed, scope }) {
          if (computed("isDisabled")) return;
          return trackFocusVisible({ root: scope.getRootNode() });
        },
        trackFormControlState({ context, send, scope }) {
          return trackFormControl(getHiddenInputEl7(scope), {
            onFieldsetDisabledChange(disabled) {
              context.set("fieldsetDisabled", disabled);
            },
            onFormReset() {
              const checked = context.initial("checked");
              send({ type: "CHECKED.SET", checked: !!checked, src: "form-reset" });
            }
          });
        }
      },
      actions: {
        setContext({ context, event }) {
          for (const key in event.context) {
            context.set(key, event.context[key]);
          }
        },
        syncInputElement({ context, scope }) {
          const inputEl = getHiddenInputEl7(scope);
          if (!inputEl) return;
          setElementChecked(inputEl, !!context.get("checked"));
        },
        removeFocusIfNeeded({ context, prop }) {
          if (prop("disabled")) {
            context.set("focused", false);
          }
        },
        setChecked({ context, event }) {
          context.set("checked", event.checked);
        },
        toggleChecked({ context }) {
          context.set("checked", !context.get("checked"));
        },
        dispatchChangeEvent({ context, scope }) {
          const inputEl = getHiddenInputEl7(scope);
          dispatchInputCheckedEvent(inputEl, { checked: context.get("checked") });
        }
      }
    }
  });
  var props24 = createProps()([
    "checked",
    "defaultChecked",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "label",
    "name",
    "onCheckedChange",
    "readOnly",
    "required",
    "value"
  ]);
  var splitProps24 = createSplitProps(props24);

  // node_modules/@zag-js/tooltip/dist/index.mjs
  var anatomy24 = createAnatomy("tooltip").parts("trigger", "arrow", "arrowTip", "positioner", "content");
  var parts27 = anatomy24.build();
  var getTriggerId9 = (scope) => scope.ids?.trigger ?? `tooltip:${scope.id}:trigger`;
  var getPositionerId8 = (scope) => scope.ids?.positioner ?? `tooltip:${scope.id}:popper`;
  var getTriggerEl8 = (scope) => scope.getById(getTriggerId9(scope));
  var getPositionerEl8 = (scope) => scope.getById(getPositionerId8(scope));
  var store = proxy({ id: null });
  var { and: and9, not: not10 } = createGuards();
  var machine25 = createMachine({
    initialState: ({ prop }) => {
      const open = prop("open") || prop("defaultOpen");
      return open ? "open" : "closed";
    },
    props({ props: props26 }) {
      return {
        id: "x",
        openDelay: 1e3,
        closeDelay: 500,
        closeOnPointerDown: true,
        closeOnEscape: true,
        interactive: false,
        closeOnScroll: true,
        closeOnClick: true,
        disabled: false,
        ...props26,
        positioning: {
          placement: "bottom",
          ...props26.positioning
        }
      };
    },
    effects: ["trackFocusVisible", "trackStore"],
    context: ({ bindable }) => ({
      currentPlacement: bindable(() => ({ defaultValue: void 0 })),
      hasPointerMoveOpened: bindable(() => ({ defaultValue: false }))
    }),
    watch({ track, action, prop }) {
      track([() => prop("disabled")], () => {
        action(["closeIfDisabled"]);
      });
      track([() => prop("open")], () => {
        action(["toggleVisibility"]);
      });
    },
    states: {
      closed: {
        entry: ["clearGlobalId"],
        on: {
          "controlled.open": {
            target: "open"
          },
          open: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          "pointer.leave": {
            actions: ["clearPointerMoveOpened"]
          },
          "pointer.move": [
            {
              guard: and9("noVisibleTooltip", not10("hasPointerMoveOpened")),
              target: "opening"
            },
            {
              guard: not10("hasPointerMoveOpened"),
              target: "open",
              actions: ["setPointerMoveOpened", "invokeOnOpen"]
            }
          ]
        }
      },
      opening: {
        effects: ["trackScroll", "trackPointerlockChange", "waitForOpenDelay"],
        on: {
          "after.openDelay": [
            {
              guard: "isOpenControlled",
              actions: ["setPointerMoveOpened", "invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["setPointerMoveOpened", "invokeOnOpen"]
            }
          ],
          "controlled.open": {
            target: "open"
          },
          "controlled.close": {
            target: "closed"
          },
          open: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnOpen"]
            },
            {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          ],
          "pointer.leave": [
            {
              guard: "isOpenControlled",
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["clearPointerMoveOpened", "invokeOnClose", "toggleVisibility"]
            },
            {
              target: "closed",
              actions: ["clearPointerMoveOpened", "invokeOnClose"]
            }
          ],
          close: [
            {
              guard: "isOpenControlled",
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["invokeOnClose", "toggleVisibility"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ]
        }
      },
      open: {
        effects: ["trackEscapeKey", "trackScroll", "trackPointerlockChange", "trackPositioning"],
        entry: ["setGlobalId"],
        on: {
          "controlled.close": {
            target: "closed"
          },
          close: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "pointer.leave": [
            {
              guard: "isVisible",
              target: "closing",
              actions: ["clearPointerMoveOpened"]
            },
            // == group ==
            {
              guard: "isOpenControlled",
              actions: ["clearPointerMoveOpened", "invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["clearPointerMoveOpened", "invokeOnClose"]
            }
          ],
          "content.pointer.leave": {
            guard: "isInteractive",
            target: "closing"
          },
          "positioning.set": {
            actions: ["reposition"]
          }
        }
      },
      closing: {
        effects: ["trackPositioning", "waitForCloseDelay"],
        on: {
          "after.closeDelay": [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "controlled.close": {
            target: "closed"
          },
          "controlled.open": {
            target: "open"
          },
          close: [
            {
              guard: "isOpenControlled",
              actions: ["invokeOnClose"]
            },
            {
              target: "closed",
              actions: ["invokeOnClose"]
            }
          ],
          "pointer.move": [
            {
              guard: "isOpenControlled",
              // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
              actions: ["setPointerMoveOpened", "invokeOnOpen", "toggleVisibility"]
            },
            {
              target: "open",
              actions: ["setPointerMoveOpened", "invokeOnOpen"]
            }
          ],
          "content.pointer.move": {
            guard: "isInteractive",
            target: "open"
          },
          "positioning.set": {
            actions: ["reposition"]
          }
        }
      }
    },
    implementations: {
      guards: {
        noVisibleTooltip: () => store.id === null,
        isVisible: ({ prop }) => prop("id") === store.id,
        isInteractive: ({ prop }) => !!prop("interactive"),
        hasPointerMoveOpened: ({ context }) => context.get("hasPointerMoveOpened"),
        isOpenControlled: ({ prop }) => prop("open") !== void 0
      },
      actions: {
        setGlobalId: ({ prop }) => {
          store.id = prop("id");
        },
        clearGlobalId: ({ prop }) => {
          if (prop("id") === store.id) {
            store.id = null;
          }
        },
        invokeOnOpen: ({ prop }) => {
          prop("onOpenChange")?.({ open: true });
        },
        invokeOnClose: ({ prop }) => {
          prop("onOpenChange")?.({ open: false });
        },
        closeIfDisabled: ({ prop, send }) => {
          if (!prop("disabled")) return;
          send({ type: "close", src: "disabled.change" });
        },
        reposition: ({ context, event, prop, scope }) => {
          if (event.type !== "positioning.set") return;
          const getPositionerEl22 = () => getPositionerEl8(scope);
          return getPlacement(getTriggerEl8(scope), getPositionerEl22, {
            ...prop("positioning"),
            ...event.options,
            defer: true,
            listeners: false,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        toggleVisibility: ({ prop, event, send }) => {
          queueMicrotask(() => {
            send({
              type: prop("open") ? "controlled.open" : "controlled.close",
              previousEvent: event
            });
          });
        },
        setPointerMoveOpened: ({ context }) => {
          context.set("hasPointerMoveOpened", true);
        },
        clearPointerMoveOpened: ({ context }) => {
          context.set("hasPointerMoveOpened", false);
        }
      },
      effects: {
        trackFocusVisible: ({ scope }) => {
          return trackFocusVisible({ root: scope.getRootNode?.() });
        },
        trackPositioning: ({ context, prop, scope }) => {
          if (!context.get("currentPlacement")) {
            context.set("currentPlacement", prop("positioning").placement);
          }
          const getPositionerEl22 = () => getPositionerEl8(scope);
          return getPlacement(getTriggerEl8(scope), getPositionerEl22, {
            ...prop("positioning"),
            defer: true,
            onComplete(data2) {
              context.set("currentPlacement", data2.placement);
            }
          });
        },
        trackPointerlockChange: ({ send, scope }) => {
          const doc = scope.getDoc();
          const onChange = () => send({ type: "close", src: "pointerlock:change" });
          return addDomEvent(doc, "pointerlockchange", onChange, false);
        },
        trackScroll: ({ send, prop, scope }) => {
          if (!prop("closeOnScroll")) return;
          const triggerEl = getTriggerEl8(scope);
          if (!triggerEl) return;
          const overflowParents = getOverflowAncestors(triggerEl);
          const cleanups = overflowParents.map((overflowParent) => {
            const onScroll = () => {
              send({ type: "close", src: "scroll" });
            };
            return addDomEvent(overflowParent, "scroll", onScroll, {
              passive: true,
              capture: true
            });
          });
          return () => {
            cleanups.forEach((fn) => fn?.());
          };
        },
        trackStore: ({ prop, send }) => {
          let cleanup;
          queueMicrotask(() => {
            cleanup = subscribe(store, () => {
              if (store.id !== prop("id")) {
                send({ type: "close", src: "id.change" });
              }
            });
          });
          return () => cleanup?.();
        },
        trackEscapeKey: ({ send, prop }) => {
          if (!prop("closeOnEscape")) return;
          const onKeyDown = (event) => {
            if (isComposingEvent(event)) return;
            if (event.key !== "Escape") return;
            event.stopPropagation();
            send({ type: "close", src: "keydown.escape" });
          };
          return addDomEvent(document, "keydown", onKeyDown, true);
        },
        waitForOpenDelay: ({ send, prop }) => {
          const id = setTimeout(() => {
            send({ type: "after.openDelay" });
          }, prop("openDelay"));
          return () => clearTimeout(id);
        },
        waitForCloseDelay: ({ send, prop }) => {
          const id = setTimeout(() => {
            send({ type: "after.closeDelay" });
          }, prop("closeDelay"));
          return () => clearTimeout(id);
        }
      }
    }
  });
  var props25 = createProps()([
    "aria-label",
    "closeDelay",
    "closeOnEscape",
    "closeOnPointerDown",
    "closeOnScroll",
    "closeOnClick",
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "interactive",
    "onOpenChange",
    "defaultOpen",
    "open",
    "openDelay",
    "positioning"
  ]);
  var splitProps25 = createSplitProps(props25);

  // node_modules/@chakra-ui/react/dist/esm/utils/attr.js
  var dataAttr2 = (condition) => condition ? "" : void 0;

  // node_modules/@chakra-ui/react/dist/esm/styled-system/create-slot-recipe-context.js
  var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
  var import_react152 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/styled-system/empty.js
  var EMPTY_STYLES = Object.freeze({});
  var EMPTY_SLOT_STYLES = Object.freeze(
    {}
  );

  // node_modules/@chakra-ui/react/dist/esm/styled-system/use-slot-recipe.js
  var import_react151 = __toESM(require_react(), 1);
  function useSlotRecipe(options) {
    const { key, recipe: recipeProp } = options;
    const sys = useChakraContext();
    return (0, import_react151.useMemo)(() => {
      const recipe = recipeProp || (key != null ? sys.getSlotRecipe(key) : {});
      return sys.sva(structuredClone(recipe));
    }, [key, recipeProp, sys]);
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/create-slot-recipe-context.js
  var upperFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1);
  var createSlotRecipeContext = (options) => {
    const { key: recipeKey, recipe: recipeConfig } = options;
    const contextName = upperFirst(
      recipeKey || recipeConfig.className || "Component"
    );
    const [StylesProvider, useStyles] = createContext5({
      name: `${contextName}StylesContext`,
      errorMessage: `use${contextName}Styles returned is 'undefined'. Seems you forgot to wrap the components in "<${contextName}.Root />" `
    });
    const [ClassNamesProvider, useClassNames2] = createContext5({
      name: `${contextName}ClassNameContext`,
      errorMessage: `use${contextName}ClassNames returned is 'undefined'. Seems you forgot to wrap the components in "<${contextName}.Root />" `,
      strict: false
    });
    const [PropsProvider14, usePropsContext2] = createContext5({
      strict: false,
      name: `${contextName}PropsContext`,
      providerName: `${contextName}PropsContext`,
      defaultValue: {}
    });
    function useRecipeResult3(props26) {
      const { unstyled, ...restProps } = props26;
      const slotRecipe = useSlotRecipe({
        key: recipeKey,
        recipe: restProps.recipe || recipeConfig
      });
      const [variantProps, otherProps] = (0, import_react152.useMemo)(
        () => slotRecipe.splitVariantProps(restProps),
        [restProps, slotRecipe]
      );
      const styles = (0, import_react152.useMemo)(
        () => unstyled ? EMPTY_SLOT_STYLES : slotRecipe(variantProps),
        [unstyled, variantProps, slotRecipe]
      );
      return {
        styles,
        classNames: slotRecipe.classNameMap,
        props: otherProps
      };
    }
    function withRootProvider2(Component4, options2 = {}) {
      const { defaultProps } = options2;
      const StyledComponent = (inProps) => {
        const propsContext = usePropsContext2();
        const props26 = (0, import_react152.useMemo)(
          () => mergeProps(defaultProps, propsContext, inProps),
          [propsContext, inProps]
        );
        const { styles, classNames, props: rootProps } = useRecipeResult3(props26);
        return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(StylesProvider, { value: styles, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ClassNamesProvider, { value: classNames, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Component4, { ...rootProps }) }) });
      };
      StyledComponent.displayName = Component4.displayName || Component4.name;
      return StyledComponent;
    }
    const withProvider7 = (Component4, slot, options2) => {
      const { defaultProps, ...restOptions } = options2 ?? {};
      const SuperComponent = chakra(Component4, {}, restOptions);
      const StyledComponent = (0, import_react152.forwardRef)((inProps, ref) => {
        const propsContext = usePropsContext2();
        const props26 = (0, import_react152.useMemo)(
          () => mergeProps(defaultProps ?? {}, propsContext, inProps),
          [propsContext, inProps]
        );
        const { styles, props: rootProps, classNames } = useRecipeResult3(props26);
        const className = classNames[slot];
        const element = /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(StylesProvider, { value: styles, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ClassNamesProvider, { value: classNames, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          SuperComponent,
          {
            ref,
            ...rootProps,
            css: [styles[slot], props26.css],
            className: cx(props26.className, className)
          }
        ) }) });
        return options2?.wrapElement?.(element, props26) ?? element;
      });
      StyledComponent.displayName = Component4.displayName || Component4.name;
      return StyledComponent;
    };
    const withContext13 = (Component4, slot, options2) => {
      const SuperComponent = chakra(Component4, {}, options2);
      const StyledComponent = (0, import_react152.forwardRef)((props26, ref) => {
        const { unstyled, ...restProps } = props26;
        const styles = useStyles();
        const classNames = useClassNames2();
        const className = classNames?.[slot];
        return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          SuperComponent,
          {
            ...restProps,
            css: [!unstyled && slot ? styles[slot] : void 0, props26.css],
            ref,
            className: cx(props26.className, className)
          }
        );
      });
      StyledComponent.displayName = Component4.displayName || Component4.name;
      return StyledComponent;
    };
    return {
      StylesProvider,
      ClassNamesProvider,
      PropsProvider: PropsProvider14,
      usePropsContext: usePropsContext2,
      useRecipeResult: useRecipeResult3,
      withProvider: withProvider7,
      withContext: withContext13,
      withRootProvider: withRootProvider2,
      useStyles,
      useClassNames: useClassNames2
    };
  };

  // node_modules/@chakra-ui/react/dist/esm/components/icons.js
  var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
  var CheckIcon = (props26) => {
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
      chakra.svg,
      {
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props26,
        children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "M20 6 9 17l-5-5" })
      }
    );
  };
  var ChevronDownIcon = (props26) => {
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
      chakra.svg,
      {
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props26,
        children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "m6 9 6 6 6-6" })
      }
    );
  };
  var CloseIcon = (props26) => /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(chakra.svg, { viewBox: "0 0 24 24", fill: "currentColor", ...props26, children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M18.7071 6.70711C19.0976 6.31658 19.0976 5.68342 18.7071 5.29289C18.3166 4.90237 17.6834 4.90237 17.2929 5.29289L12 10.5858L6.70711 5.29289C6.31658 4.90237 5.68342 4.90237 5.29289 5.29289C4.90237 5.68342 4.90237 6.31658 5.29289 6.70711L10.5858 12L5.29289 17.2929C4.90237 17.6834 4.90237 18.3166 5.29289 18.7071C5.68342 19.0976 6.31658 19.0976 6.70711 18.7071L12 13.4142L17.2929 18.7071C17.6834 19.0976 18.3166 19.0976 18.7071 18.7071C19.0976 18.3166 19.0976 17.6834 18.7071 17.2929L13.4142 12L18.7071 6.70711Z"
    }
  ) });
  var FileIcon = (props26) => /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
    chakra.svg,
    {
      stroke: "currentColor",
      fill: "none",
      strokeWidth: "2",
      viewBox: "0 0 24 24",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...props26,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "M14 2v4a2 2 0 0 0 2 2h4" })
      ]
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/styled-system/create-recipe-context.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
  var import_react154 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/styled-system/use-recipe.js
  var import_react153 = __toESM(require_react(), 1);
  function useRecipe(options) {
    const { key, recipe: recipeProp } = options;
    const sys = useChakraContext();
    return (0, import_react153.useMemo)(() => {
      const recipe = recipeProp || (key != null ? sys.getRecipe(key) : {});
      return sys.cva(structuredClone(recipe));
    }, [key, recipeProp, sys]);
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/create-recipe-context.js
  var upperFirst2 = (str) => str.charAt(0).toUpperCase() + str.slice(1);
  function createRecipeContext(options) {
    const { key: recipeKey, recipe: recipeConfig } = options;
    const contextName = upperFirst2(
      recipeKey || recipeConfig.className || "Component"
    );
    const [PropsProvider14, usePropsContext2] = createContext5({
      strict: false,
      name: `${contextName}PropsContext`,
      providerName: `${contextName}PropsContext`
    });
    function useRecipeResult3(props26) {
      const { unstyled, ...restProps } = props26;
      const recipe = useRecipe({
        key: recipeKey,
        recipe: restProps.recipe || recipeConfig
      });
      const [variantProps, otherProps] = (0, import_react154.useMemo)(
        () => recipe.splitVariantProps(restProps),
        [recipe, restProps]
      );
      const styles = unstyled ? EMPTY_STYLES : recipe(variantProps);
      return {
        styles,
        className: recipe.className,
        props: otherProps
      };
    }
    const withContext13 = (Component4, options2) => {
      const SuperComponent = chakra(Component4, {}, options2);
      const StyledComponent = (0, import_react154.forwardRef)((inProps, ref) => {
        const propsContext = usePropsContext2();
        const props26 = (0, import_react154.useMemo)(
          () => mergeProps(propsContext, inProps),
          [inProps, propsContext]
        );
        const { styles, className, props: localProps } = useRecipeResult3(props26);
        return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          SuperComponent,
          {
            ...localProps,
            ref,
            css: [styles, props26.css],
            className: cx(className, props26.className)
          }
        );
      });
      StyledComponent.displayName = Component4.displayName || Component4.name;
      return StyledComponent;
    };
    function withPropsProvider() {
      return PropsProvider14;
    }
    return {
      withContext: withContext13,
      PropsProvider: PropsProvider14,
      withPropsProvider,
      usePropsContext: usePropsContext2,
      useRecipeResult: useRecipeResult3
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/components/heading/index.js
  var { withContext, PropsProvider } = createRecipeContext({
    key: "heading"
  });
  var Heading = withContext("h2");

  // node_modules/@chakra-ui/react/dist/esm/components/span/index.js
  var Span = chakra("span");

  // node_modules/@chakra-ui/react/dist/esm/utils/omit.js
  function omit(object, keysToOmit = []) {
    const clone2 = Object.assign({}, object);
    for (const key of keysToOmit) {
      if (key in clone2) {
        delete clone2[key];
      }
    }
    return clone2;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/color-mix.js
  var colorMix = (value, token2) => {
    if (!value || typeof value !== "string") {
      return { invalid: true, value };
    }
    const [rawColor, rawOpacity] = value.split("/");
    if (!rawColor || !rawOpacity || rawColor === "currentBg") {
      return { invalid: true, value: rawColor };
    }
    const colorToken = token2(`colors.${rawColor}`);
    const opacityToken = token2.raw(`opacity.${rawOpacity}`)?.value;
    if (!opacityToken && isNaN(Number(rawOpacity))) {
      return { invalid: true, value: rawColor };
    }
    const percent = opacityToken ? Number(opacityToken) * 100 + "%" : `${rawOpacity}%`;
    const color = colorToken ?? rawColor;
    return {
      invalid: false,
      color,
      value: `color-mix(in srgb, ${color} ${percent}, transparent)`
    };
  };
  var createColorMixTransform = (prop) => (value, args) => {
    const mix = args.utils.colorMix(value);
    if (mix.invalid) return { [prop]: value };
    const cssVar2 = "--mix-" + prop;
    return {
      [cssVar2]: mix.value,
      [prop]: `var(${cssVar2}, ${mix.color})`
    };
  };

  // node_modules/@chakra-ui/react/dist/esm/utils/clone.js
  function clone(obj) {
    if (obj === null || typeof obj !== "object") return obj;
    if (Array.isArray(obj)) return obj.map((prop) => clone(prop));
    const _clone = Object.create(Object.getPrototypeOf(obj));
    for (const key of Object.keys(obj)) {
      _clone[key] = clone(obj[key]);
    }
    return _clone;
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/merge.js
  function merge(target, source) {
    if (source == null) return target;
    for (const key of Object.keys(source)) {
      if (source[key] === void 0 || key === "__proto__") continue;
      if (!isObject(target[key]) && isObject(source[key])) {
        Object.assign(target, { [key]: source[key] });
      } else if (target[key] && isObject(source[key])) {
        merge(target[key], source[key]);
      } else if (Array.isArray(source[key]) && Array.isArray(target[key])) {
        let i2 = 0;
        for (; i2 < source[key].length; i2++) {
          if (isObject(target[key][i2]) && isObject(source[key][i2])) {
            merge(target[key][i2], source[key][i2]);
          } else {
            target[key][i2] = source[key][i2];
          }
        }
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
    return target;
  }
  function mergeWith(target, ...sources) {
    for (const source of sources) {
      merge(target, source);
    }
    return target;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/config.js
  var defineConditions = (v) => v;
  var defineRecipe = (v) => v;
  var defineSlotRecipe = (v) => v;
  var defineKeyframes = (v) => v;
  var defineGlobalStyles = (v) => v;
  var defineStyle = (v) => v;
  var defineTextStyles = (v) => v;
  var defineAnimationStyles = (v) => v;
  var defineLayerStyles = (v) => v;
  function createProxy() {
    const identity2 = (v) => v;
    return new Proxy(identity2, {
      get() {
        return identity2;
      }
    });
  }
  var defineTokens = /* @__PURE__ */ createProxy();
  var defineSemanticTokens = /* @__PURE__ */ createProxy();
  var defineConfig = (v) => v;
  var mergeConfigs = (...configs) => {
    return mergeWith({}, ...configs.map(clone));
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/css-var.js
  var escRegex = /[^a-zA-Z0-9_\u0081-\uffff-]/g;
  function esc(string) {
    return `${string}`.replace(escRegex, (s2) => `\\${s2}`);
  }
  var dashCaseRegex = /[A-Z]/g;
  function dashCase(string) {
    return string.replace(dashCaseRegex, (match5) => `-${match5.toLowerCase()}`);
  }
  function cssVar(name, options = {}) {
    const { fallback: fallback3 = "", prefix: prefix2 = "" } = options;
    const variable = dashCase(["-", prefix2, esc(name)].filter(Boolean).join("-"));
    return {
      var: variable,
      ref: `var(${variable}${fallback3 ? `, ${fallback3}` : ""})`
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/preset-base.js
  var isCssVar = (v) => /^var\(--.+\)$/.test(v);
  var wrap4 = (str, v) => v != null ? `${str}(${v})` : v;
  var deg = (v) => {
    if (isCssVar(v) || v == null) return v;
    const unitless = typeof v === "string" && !v.endsWith("deg");
    return typeof v === "number" || unitless ? `${v}deg` : v;
  };
  var createFocusRing = (selector) => {
    return {
      values: ["outside", "inside", "mixed", "none"],
      transform(value, { token: token2 }) {
        const focusRingColor = token2("colors.colorPalette.focusRing");
        const styles = {
          inside: {
            "--focus-ring-color": focusRingColor,
            [selector]: {
              outlineOffset: "0px",
              outlineWidth: "var(--focus-ring-width, 1px)",
              outlineColor: "var(--focus-ring-color)",
              outlineStyle: "var(--focus-ring-style, solid)",
              borderColor: "var(--focus-ring-color)"
            }
          },
          outside: {
            "--focus-ring-color": focusRingColor,
            [selector]: {
              outlineWidth: "var(--focus-ring-width, 2px)",
              outlineOffset: "var(--focus-ring-offset, 2px)",
              outlineStyle: "var(--focus-ring-style, solid)",
              outlineColor: "var(--focus-ring-color)"
            }
          },
          mixed: {
            "--focus-ring-color": focusRingColor,
            [selector]: {
              outlineWidth: "var(--focus-ring-width, 3px)",
              outlineStyle: "var(--focus-ring-style, solid)",
              outlineColor: "color-mix(in srgb, var(--focus-ring-color), transparent 60%)",
              borderColor: "var(--focus-ring-color)"
            }
          },
          none: {
            "--focus-ring-color": focusRingColor,
            [selector]: {
              outline: "none"
            }
          }
        };
        return styles[value] ?? {};
      }
    };
  };
  var divideColor = createColorMixTransform("borderColor");
  var createTransition = (value) => {
    return {
      transition: value,
      transitionTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)",
      transitionDuration: "150ms"
    };
  };
  var defaultConditions = defineConditions({
    hover: [
      "@media (hover: hover)",
      "&:is(:hover, [data-hover]):not(:disabled, [data-disabled])"
    ],
    active: "&:is(:active, [data-active]):not(:disabled, [data-disabled], [data-state=open])",
    focus: "&:is(:focus, [data-focus])",
    focusWithin: "&:is(:focus-within, [data-focus-within])",
    focusVisible: "&:is(:focus-visible, [data-focus-visible])",
    disabled: "&:is(:disabled, [disabled], [data-disabled], [aria-disabled=true])",
    visited: "&:visited",
    target: "&:target",
    readOnly: "&:is([data-readonly], [aria-readonly=true], [readonly])",
    readWrite: "&:read-write",
    empty: "&:is(:empty, [data-empty])",
    checked: "&:is(:checked, [data-checked], [aria-checked=true], [data-state=checked])",
    enabled: "&:enabled",
    expanded: "&:is([aria-expanded=true], [data-expanded], [data-state=expanded])",
    highlighted: "&[data-highlighted]",
    complete: "&[data-complete]",
    incomplete: "&[data-incomplete]",
    dragging: "&[data-dragging]",
    before: "&::before",
    after: "&::after",
    firstLetter: "&::first-letter",
    firstLine: "&::first-line",
    marker: "&::marker",
    selection: "&::selection",
    file: "&::file-selector-button",
    backdrop: "&::backdrop",
    first: "&:first-of-type",
    last: "&:last-of-type",
    notFirst: "&:not(:first-of-type)",
    notLast: "&:not(:last-of-type)",
    only: "&:only-child",
    even: "&:nth-of-type(even)",
    odd: "&:nth-of-type(odd)",
    peerFocus: ".peer:is(:focus, [data-focus]) ~ &",
    peerHover: ".peer:is(:hover, [data-hover]):not(:disabled, [data-disabled]) ~ &",
    peerActive: ".peer:is(:active, [data-active]):not(:disabled, [data-disabled]) ~ &",
    peerFocusWithin: ".peer:focus-within ~ &",
    peerFocusVisible: ".peer:is(:focus-visible, [data-focus-visible]) ~ &",
    peerDisabled: ".peer:is(:disabled, [disabled], [data-disabled]) ~ &",
    peerChecked: ".peer:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) ~ &",
    peerInvalid: ".peer:is(:invalid, [data-invalid], [aria-invalid=true]) ~ &",
    peerExpanded: ".peer:is([aria-expanded=true], [data-expanded], [data-state=expanded]) ~ &",
    peerPlaceholderShown: ".peer:placeholder-shown ~ &",
    groupFocus: ".group:is(:focus, [data-focus]) &",
    groupHover: ".group:is(:hover, [data-hover]):not(:disabled, [data-disabled]) &",
    groupActive: ".group:is(:active, [data-active]):not(:disabled, [data-disabled]) &",
    groupFocusWithin: ".group:focus-within &",
    groupFocusVisible: ".group:is(:focus-visible, [data-focus-visible]) &",
    groupDisabled: ".group:is(:disabled, [disabled], [data-disabled]) &",
    groupChecked: ".group:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) &",
    groupExpanded: ".group:is([aria-expanded=true], [data-expanded], [data-state=expanded]) &",
    groupInvalid: ".group:invalid &",
    indeterminate: "&:is(:indeterminate, [data-indeterminate], [aria-checked=mixed], [data-state=indeterminate])",
    required: "&:is([data-required], [aria-required=true])",
    valid: "&:is([data-valid], [data-state=valid])",
    invalid: "&:is([data-invalid], [aria-invalid=true], [data-state=invalid])",
    autofill: "&:autofill",
    inRange: "&:is(:in-range, [data-in-range])",
    outOfRange: "&:is(:out-of-range, [data-outside-range])",
    placeholder: "&::placeholder, &[data-placeholder]",
    placeholderShown: "&:is(:placeholder-shown, [data-placeholder-shown])",
    pressed: "&:is([aria-pressed=true], [data-pressed])",
    selected: "&:is([aria-selected=true], [data-selected])",
    grabbed: "&:is([aria-grabbed=true], [data-grabbed])",
    underValue: "&[data-state=under-value]",
    overValue: "&[data-state=over-value]",
    atValue: "&[data-state=at-value]",
    default: "&:default",
    optional: "&:optional",
    open: "&:is([open], [data-open], [data-state=open])",
    closed: "&:is([closed], [data-closed], [data-state=closed])",
    fullscreen: "&:is(:fullscreen, [data-fullscreen])",
    loading: "&:is([data-loading], [aria-busy=true])",
    hidden: "&:is([hidden], [data-hidden])",
    current: "&[data-current]",
    currentPage: "&[aria-current=page]",
    currentStep: "&[aria-current=step]",
    today: "&[data-today]",
    unavailable: "&[data-unavailable]",
    rangeStart: "&[data-range-start]",
    rangeEnd: "&[data-range-end]",
    now: "&[data-now]",
    topmost: "&[data-topmost]",
    motionReduce: "@media (prefers-reduced-motion: reduce)",
    motionSafe: "@media (prefers-reduced-motion: no-preference)",
    print: "@media print",
    landscape: "@media (orientation: landscape)",
    portrait: "@media (orientation: portrait)",
    dark: ".dark &, .dark .chakra-theme:not(.light) &",
    light: ":root &, .light &",
    osDark: "@media (prefers-color-scheme: dark)",
    osLight: "@media (prefers-color-scheme: light)",
    highContrast: "@media (forced-colors: active)",
    lessContrast: "@media (prefers-contrast: less)",
    moreContrast: "@media (prefers-contrast: more)",
    ltr: "[dir=ltr] &",
    rtl: "[dir=rtl] &",
    scrollbar: "&::-webkit-scrollbar",
    scrollbarThumb: "&::-webkit-scrollbar-thumb",
    scrollbarTrack: "&::-webkit-scrollbar-track",
    horizontal: "&[data-orientation=horizontal]",
    vertical: "&[data-orientation=vertical]",
    icon: "& :where(svg)",
    starting: "@starting-style"
  });
  var currentBgVar = cssVar("bg-currentcolor");
  var isCurrentBgVar = (value) => value === currentBgVar.ref || value === "currentBg";
  var colorValues = (theme) => ({
    ...theme("colors"),
    currentBg: currentBgVar
  });
  var defaultBaseConfig = defineConfig({
    conditions: defaultConditions,
    utilities: {
      // background
      background: {
        values: colorValues,
        shorthand: ["bg"],
        transform(value, args) {
          if (isCurrentBgVar(args.raw)) return { background: currentBgVar.ref };
          const styleObj = createColorMixTransform("background")(value, args);
          return { ...styleObj, [currentBgVar.var]: styleObj?.background };
        }
      },
      backgroundColor: {
        values: colorValues,
        shorthand: ["bgColor"],
        transform(value, args) {
          if (isCurrentBgVar(args.raw))
            return { backgroundColor: currentBgVar.ref };
          const styleObj = createColorMixTransform("backgroundColor")(value, args);
          return {
            ...styleObj,
            [currentBgVar.var]: styleObj?.backgroundColor
          };
        }
      },
      backgroundSize: { shorthand: ["bgSize"] },
      backgroundPosition: { shorthand: ["bgPos"] },
      backgroundRepeat: { shorthand: ["bgRepeat"] },
      backgroundAttachment: { shorthand: ["bgAttachment"] },
      backgroundClip: {
        shorthand: ["bgClip"],
        values: ["text"],
        transform(value) {
          return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
        }
      },
      backgroundGradient: {
        shorthand: ["bgGradient"],
        values(theme) {
          return {
            ...theme("gradients"),
            "to-t": "linear-gradient(to top, var(--gradient))",
            "to-tr": "linear-gradient(to top right, var(--gradient))",
            "to-r": "linear-gradient(to right, var(--gradient))",
            "to-br": "linear-gradient(to bottom right, var(--gradient))",
            "to-b": "linear-gradient(to bottom, var(--gradient))",
            "to-bl": "linear-gradient(to bottom left, var(--gradient))",
            "to-l": "linear-gradient(to left, var(--gradient))",
            "to-tl": "linear-gradient(to top left, var(--gradient))"
          };
        },
        transform(value) {
          return {
            "--gradient-stops": "var(--gradient-from), var(--gradient-to)",
            "--gradient": "var(--gradient-via-stops, var(--gradient-stops))",
            backgroundImage: value
          };
        }
      },
      gradientFrom: {
        values: colorValues,
        transform: createColorMixTransform("--gradient-from")
      },
      gradientTo: {
        values: colorValues,
        transform: createColorMixTransform("--gradient-to")
      },
      gradientVia: {
        values: colorValues,
        transform(value, args) {
          const styles = createColorMixTransform("--gradient-via")(value, args);
          return {
            ...styles,
            "--gradient-via-stops": "var(--gradient-from), var(--gradient-via), var(--gradient-to)"
          };
        }
      },
      backgroundImage: {
        values(theme) {
          return { ...theme("gradients"), ...theme("assets") };
        },
        shorthand: ["bgImg", "bgImage"]
      },
      // border
      border: { values: "borders" },
      borderTop: { values: "borders" },
      borderLeft: { values: "borders" },
      borderBlockStart: { values: "borders" },
      borderRight: { values: "borders" },
      borderBottom: { values: "borders" },
      borderBlockEnd: { values: "borders" },
      borderInlineStart: { values: "borders", shorthand: ["borderStart"] },
      borderInlineEnd: { values: "borders", shorthand: ["borderEnd"] },
      borderInline: { values: "borders", shorthand: ["borderX"] },
      borderBlock: { values: "borders", shorthand: ["borderY"] },
      // border colors
      borderColor: {
        values: colorValues,
        transform: createColorMixTransform("borderColor")
      },
      borderTopColor: {
        values: colorValues,
        transform: createColorMixTransform("borderTopColor")
      },
      borderBlockStartColor: {
        values: colorValues,
        transform: createColorMixTransform("borderBlockStartColor")
      },
      borderBottomColor: {
        values: colorValues,
        transform: createColorMixTransform("borderBottomColor")
      },
      borderBlockEndColor: {
        values: colorValues,
        transform: createColorMixTransform("borderBlockEndColor")
      },
      borderLeftColor: {
        values: colorValues,
        transform: createColorMixTransform("borderLeftColor")
      },
      borderInlineStartColor: {
        values: colorValues,
        shorthand: ["borderStartColor"],
        transform: createColorMixTransform("borderInlineStartColor")
      },
      borderRightColor: {
        values: colorValues,
        transform: createColorMixTransform("borderRightColor")
      },
      borderInlineEndColor: {
        values: colorValues,
        shorthand: ["borderEndColor"],
        transform: createColorMixTransform("borderInlineEndColor")
      },
      // border styles
      borderStyle: { values: "borderStyles" },
      borderTopStyle: { values: "borderStyles" },
      borderBlockStartStyle: { values: "borderStyles" },
      borderBottomStyle: { values: "borderStyles" },
      borderBlockEndStyle: {
        values: "borderStyles"
      },
      borderInlineStartStyle: {
        values: "borderStyles",
        shorthand: ["borderStartStyle"]
      },
      borderInlineEndStyle: {
        values: "borderStyles",
        shorthand: ["borderEndStyle"]
      },
      borderLeftStyle: { values: "borderStyles" },
      borderRightStyle: { values: "borderStyles" },
      // border radius
      borderRadius: { values: "radii", shorthand: ["rounded"] },
      borderTopLeftRadius: { values: "radii", shorthand: ["roundedTopLeft"] },
      borderStartStartRadius: {
        values: "radii",
        shorthand: ["roundedStartStart", "borderTopStartRadius"]
      },
      borderEndStartRadius: {
        values: "radii",
        shorthand: ["roundedEndStart", "borderBottomStartRadius"]
      },
      borderTopRightRadius: {
        values: "radii",
        shorthand: ["roundedTopRight"]
      },
      borderStartEndRadius: {
        values: "radii",
        shorthand: ["roundedStartEnd", "borderTopEndRadius"]
      },
      borderEndEndRadius: {
        values: "radii",
        shorthand: ["roundedEndEnd", "borderBottomEndRadius"]
      },
      borderBottomLeftRadius: {
        values: "radii",
        shorthand: ["roundedBottomLeft"]
      },
      borderBottomRightRadius: {
        values: "radii",
        shorthand: ["roundedBottomRight"]
      },
      borderInlineStartRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedStart", "borderStartRadius"],
        transform: (value) => ({
          borderStartStartRadius: value,
          borderEndStartRadius: value
        })
      },
      borderInlineEndRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedEnd", "borderEndRadius"],
        transform: (value) => ({
          borderStartEndRadius: value,
          borderEndEndRadius: value
        })
      },
      borderTopRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedTop"],
        transform: (value) => ({
          borderTopLeftRadius: value,
          borderTopRightRadius: value
        })
      },
      borderBottomRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedBottom"],
        transform: (value) => ({
          borderBottomLeftRadius: value,
          borderBottomRightRadius: value
        })
      },
      borderLeftRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedLeft"],
        transform: (value) => ({
          borderTopLeftRadius: value,
          borderBottomLeftRadius: value
        })
      },
      borderRightRadius: {
        values: "radii",
        property: "borderRadius",
        shorthand: ["roundedRight"],
        transform: (value) => ({
          borderTopRightRadius: value,
          borderBottomRightRadius: value
        })
      },
      borderWidth: { values: "borderWidths" },
      borderBlockStartWidth: { values: "borderWidths" },
      borderTopWidth: { values: "borderWidths" },
      borderBottomWidth: { values: "borderWidths" },
      borderBlockEndWidth: { values: "borderWidths" },
      borderRightWidth: { values: "borderWidths" },
      borderInlineWidth: {
        values: "borderWidths",
        shorthand: ["borderXWidth"]
      },
      borderInlineStartWidth: {
        values: "borderWidths",
        shorthand: ["borderStartWidth"]
      },
      borderInlineEndWidth: {
        values: "borderWidths",
        shorthand: ["borderEndWidth"]
      },
      borderLeftWidth: { values: "borderWidths" },
      borderBlockWidth: {
        values: "borderWidths",
        shorthand: ["borderYWidth"]
      },
      // colors
      color: {
        values: colorValues,
        transform: createColorMixTransform("color")
      },
      fill: {
        values: colorValues,
        transform: createColorMixTransform("fill")
      },
      stroke: {
        values: colorValues,
        transform: createColorMixTransform("stroke")
      },
      accentColor: {
        values: colorValues,
        transform: createColorMixTransform("accentColor")
      },
      // divide
      divideX: {
        values: { type: "string" },
        transform(value) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
              borderInlineStartWidth: value,
              borderInlineEndWidth: "0px"
            }
          };
        }
      },
      divideY: {
        values: { type: "string" },
        transform(value) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
              borderTopWidth: value,
              borderBottomWidth: "0px"
            }
          };
        }
      },
      divideColor: {
        values: colorValues,
        transform(value, args) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": divideColor(
              value,
              args
            )
          };
        }
      },
      divideStyle: {
        property: "borderStyle",
        transform(value) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
              borderStyle: value
            }
          };
        }
      },
      // effects
      boxShadow: { values: "shadows", shorthand: ["shadow"] },
      boxShadowColor: {
        values: colorValues,
        transform: createColorMixTransform("--shadow-color"),
        shorthand: ["shadowColor"]
      },
      mixBlendMode: { shorthand: ["blendMode"] },
      backgroundBlendMode: { shorthand: ["bgBlendMode"] },
      opacity: { values: "opacity" },
      // filters
      filter: {
        transform(v) {
          if (v !== "auto") {
            return { filter: v };
          }
          return {
            filter: `var(--blur) var(--brightness) var(--contrast) var(--grayscale) var(--hue-rotate) var(--invert) var(--saturate) var(--sepia) var(--drop-shadow)`
          };
        }
      },
      blur: {
        values: "blurs",
        transform: (v) => ({ "--blur": wrap4("blur", v) })
      },
      brightness: {
        transform: (v) => ({ "--brightness": wrap4("brightness", v) })
      },
      contrast: {
        transform: (v) => ({ "--contrast": wrap4("contrast", v) })
      },
      grayscale: {
        transform: (v) => ({ "--grayscale": wrap4("grayscale", v) })
      },
      hueRotate: {
        transform: (v) => ({ "--hue-rotate": wrap4("hue-rotate", deg(v)) })
      },
      invert: { transform: (v) => ({ "--invert": wrap4("invert", v) }) },
      saturate: {
        transform: (v) => ({ "--saturate": wrap4("saturate", v) })
      },
      sepia: { transform: (v) => ({ "--sepia": wrap4("sepia", v) }) },
      dropShadow: {
        transform: (v) => ({ "--drop-shadow": wrap4("drop-shadow", v) })
      },
      // backdrop filters
      backdropFilter: {
        transform(v) {
          if (v !== "auto") {
            return { backdropFilter: v };
          }
          return {
            backdropFilter: `var(--backdrop-blur) var(--backdrop-brightness) var(--backdrop-contrast) var(--backdrop-grayscale) var(--backdrop-hue-rotate) var(--backdrop-invert) var(--backdrop-opacity) var(--backdrop-saturate) var(--backdrop-sepia)`
          };
        }
      },
      backdropBlur: {
        values: "blurs",
        transform: (v) => ({ "--backdrop-blur": wrap4("blur", v) })
      },
      backdropBrightness: {
        transform: (v) => ({
          "--backdrop-brightness": wrap4("brightness", v)
        })
      },
      backdropContrast: {
        transform: (v) => ({ "--backdrop-contrast": wrap4("contrast", v) })
      },
      backdropGrayscale: {
        transform: (v) => ({
          "--backdrop-grayscale": wrap4("grayscale", v)
        })
      },
      backdropHueRotate: {
        transform: (v) => ({
          "--backdrop-hue-rotate": wrap4("hue-rotate", deg(v))
        })
      },
      backdropInvert: {
        transform: (v) => ({ "--backdrop-invert": wrap4("invert", v) })
      },
      backdropOpacity: {
        transform: (v) => ({ "--backdrop-opacity": wrap4("opacity", v) })
      },
      backdropSaturate: {
        transform: (v) => ({ "--backdrop-saturate": wrap4("saturate", v) })
      },
      backdropSepia: {
        transform: (v) => ({ "--backdrop-sepia": wrap4("sepia", v) })
      },
      // flexbox
      flexBasis: { values: "sizes" },
      gap: { values: "spacing" },
      rowGap: { values: "spacing", shorthand: ["gapY"] },
      columnGap: { values: "spacing", shorthand: ["gapX"] },
      flexDirection: { shorthand: ["flexDir"] },
      // grid
      gridGap: { values: "spacing" },
      gridColumnGap: { values: "spacing" },
      gridRowGap: { values: "spacing" },
      // interactivity
      outlineColor: {
        values: colorValues,
        transform: createColorMixTransform("outlineColor")
      },
      focusRing: createFocusRing("&:is(:focus, [data-focus])"),
      focusVisibleRing: createFocusRing(
        "&:is(:focus-visible, [data-focus-visible])"
      ),
      focusRingColor: {
        values: colorValues,
        transform: createColorMixTransform("--focus-ring-color")
      },
      focusRingOffset: {
        values: "spacing",
        transform: (v) => ({ "--focus-ring-offset": v })
      },
      focusRingWidth: {
        values: "borderWidths",
        property: "outlineWidth",
        transform: (v) => ({ "--focus-ring-width": v })
      },
      focusRingStyle: {
        values: "borderStyles",
        property: "outlineStyle",
        transform: (v) => ({ "--focus-ring-style": v })
      },
      // layout
      aspectRatio: { values: "aspectRatios" },
      width: { values: "sizes", shorthand: ["w"] },
      inlineSize: { values: "sizes" },
      height: { values: "sizes", shorthand: ["h"] },
      blockSize: { values: "sizes" },
      boxSize: {
        values: "sizes",
        property: "width",
        transform: (v) => ({ width: v, height: v })
      },
      minWidth: { values: "sizes", shorthand: ["minW"] },
      minInlineSize: { values: "sizes" },
      minHeight: { values: "sizes", shorthand: ["minH"] },
      minBlockSize: { values: "sizes" },
      maxWidth: { values: "sizes", shorthand: ["maxW"] },
      maxInlineSize: { values: "sizes" },
      maxHeight: { values: "sizes", shorthand: ["maxH"] },
      maxBlockSize: { values: "sizes" },
      hideFrom: {
        values: "breakpoints",
        //@ts-ignore
        transform: (value, { raw, token: token2 }) => {
          const bp = token2.raw(`breakpoints.${raw}`);
          const media = bp ? `@breakpoint ${raw}` : `@media screen and (min-width: ${value})`;
          return {
            [media]: { display: "none" }
          };
        }
      },
      hideBelow: {
        values: "breakpoints",
        //@ts-ignore
        transform(value, { raw, token: token2 }) {
          const bp = token2.raw(`breakpoints.${raw}`);
          const media = bp ? `@breakpoint ${raw}Down` : `@media screen and (max-width: ${value})`;
          return {
            [media]: {
              display: "none"
            }
          };
        }
      },
      // scroll
      overscrollBehavior: { shorthand: ["overscroll"] },
      overscrollBehaviorX: { shorthand: ["overscrollX"] },
      overscrollBehaviorY: { shorthand: ["overscrollY"] },
      scrollbar: {
        values: ["visible", "hidden"],
        transform(v) {
          switch (v) {
            case "visible":
              return {
                msOverflowStyle: "auto",
                scrollbarWidth: "auto",
                "&::-webkit-scrollbar": { display: "block" }
              };
            case "hidden":
              return {
                msOverflowStyle: "none",
                scrollbarWidth: "none",
                "&::-webkit-scrollbar": { display: "none" }
              };
            default:
              return {};
          }
        }
      },
      scrollbarColor: {
        values: colorValues,
        transform: createColorMixTransform("scrollbarColor")
      },
      scrollbarGutter: { values: "spacing" },
      scrollbarWidth: { values: "sizes" },
      // scroll margin
      scrollMargin: { values: "spacing" },
      scrollMarginTop: { values: "spacing" },
      scrollMarginBottom: { values: "spacing" },
      scrollMarginLeft: { values: "spacing" },
      scrollMarginRight: { values: "spacing" },
      scrollMarginX: {
        values: "spacing",
        transform: (v) => ({ scrollMarginLeft: v, scrollMarginRight: v })
      },
      scrollMarginY: {
        values: "spacing",
        transform: (v) => ({ scrollMarginTop: v, scrollMarginBottom: v })
      },
      // scroll padding
      scrollPadding: { values: "spacing" },
      scrollPaddingTop: { values: "spacing" },
      scrollPaddingBottom: { values: "spacing" },
      scrollPaddingLeft: { values: "spacing" },
      scrollPaddingRight: { values: "spacing" },
      scrollPaddingInline: { values: "spacing", shorthand: ["scrollPaddingX"] },
      scrollPaddingBlock: { values: "spacing", shorthand: ["scrollPaddingY"] },
      // scroll snap
      scrollSnapType: {
        values: {
          none: "none",
          x: "x var(--scroll-snap-strictness)",
          y: "y var(--scroll-snap-strictness)",
          both: "both var(--scroll-snap-strictness)"
        }
      },
      scrollSnapStrictness: {
        values: ["mandatory", "proximity"],
        transform: (v) => ({ "--scroll-snap-strictness": v })
      },
      scrollSnapMargin: { values: "spacing" },
      scrollSnapMarginTop: { values: "spacing" },
      scrollSnapMarginBottom: { values: "spacing" },
      scrollSnapMarginLeft: { values: "spacing" },
      scrollSnapMarginRight: { values: "spacing" },
      // list
      listStylePosition: { shorthand: ["listStylePos"] },
      listStyleImage: { values: "assets", shorthand: ["listStyleImg"] },
      // position
      position: { shorthand: ["pos"] },
      zIndex: { values: "zIndex" },
      inset: { values: "spacing" },
      insetInline: { values: "spacing", shorthand: ["insetX"] },
      insetBlock: { values: "spacing", shorthand: ["insetY"] },
      top: { values: "spacing" },
      insetBlockStart: { values: "spacing" },
      bottom: { values: "spacing" },
      insetBlockEnd: { values: "spacing" },
      left: { values: "spacing" },
      right: { values: "spacing" },
      insetInlineStart: {
        values: "spacing",
        shorthand: ["insetStart"]
      },
      insetInlineEnd: {
        values: "spacing",
        shorthand: ["insetEnd"]
      },
      // shadow / ring
      ring: {
        transform(value) {
          return {
            "--ring-offset-shadow": `var(--ring-inset) 0 0 0 var(--ring-offset-width) var(--ring-offset-color)`,
            "--ring-shadow": `var(--ring-inset) 0 0 0 calc(var(--ring-width) + var(--ring-offset-width)) var(--ring-color)`,
            "--ring-width": value,
            boxShadow: "var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)"
          };
        }
      },
      ringColor: {
        values: colorValues,
        transform: createColorMixTransform("--ring-color")
      },
      ringOffset: {
        transform: (value) => ({ "--ring-offset-width": value })
      },
      ringOffsetColor: {
        values: colorValues,
        transform: createColorMixTransform("--ring-offset-color")
      },
      ringInset: {
        transform: (v) => ({ "--ring-inset": v })
      },
      // margin
      margin: { values: "spacing", shorthand: ["m"] },
      marginTop: { values: "spacing", shorthand: ["mt"] },
      marginBlockStart: { values: "spacing" },
      marginRight: { values: "spacing", shorthand: ["mr"] },
      marginBottom: { values: "spacing", shorthand: ["mb"] },
      marginBlockEnd: { values: "spacing" },
      marginLeft: { values: "spacing", shorthand: ["ml"] },
      marginInlineStart: { values: "spacing", shorthand: ["ms", "marginStart"] },
      marginInlineEnd: { values: "spacing", shorthand: ["me", "marginEnd"] },
      marginInline: { values: "spacing", shorthand: ["mx", "marginX"] },
      marginBlock: { values: "spacing", shorthand: ["my", "marginY"] },
      // padding
      padding: { values: "spacing", shorthand: ["p"] },
      paddingTop: { values: "spacing", shorthand: ["pt"] },
      paddingRight: { values: "spacing", shorthand: ["pr"] },
      paddingBottom: { values: "spacing", shorthand: ["pb"] },
      paddingBlockStart: { values: "spacing" },
      paddingBlockEnd: { values: "spacing" },
      paddingLeft: { values: "spacing", shorthand: ["pl"] },
      paddingInlineStart: {
        values: "spacing",
        shorthand: ["ps", "paddingStart"]
      },
      paddingInlineEnd: { values: "spacing", shorthand: ["pe", "paddingEnd"] },
      paddingInline: { values: "spacing", shorthand: ["px", "paddingX"] },
      paddingBlock: { values: "spacing", shorthand: ["py", "paddingY"] },
      // text decoration
      textDecoration: { shorthand: ["textDecor"] },
      textDecorationColor: {
        values: colorValues,
        transform: createColorMixTransform("textDecorationColor")
      },
      textShadow: { values: "shadows" },
      // transform
      transform: {
        transform: (value) => {
          let v = value;
          if (value === "auto") {
            v = `translateX(var(--translate-x, 0)) translateY(var(--translate-y, 0)) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))`;
          }
          if (value === "auto-gpu") {
            v = `translate3d(var(--translate-x, 0), var(--translate-y, 0), 0) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))`;
          }
          return { transform: v };
        }
      },
      skewX: { transform: (v) => ({ "--skew-x": deg(v) }) },
      skewY: { transform: (v) => ({ "--skew-y": deg(v) }) },
      scaleX: { transform: (v) => ({ "--scale-x": v }) },
      scaleY: { transform: (v) => ({ "--scale-y": v }) },
      scale: {
        transform(value) {
          if (value !== "auto") return { scale: value };
          return {
            scale: `var(--scale-x, 1) var(--scale-y, 1)`
          };
        }
      },
      spaceXReverse: {
        values: { type: "boolean" },
        transform(value) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
              "--space-x-reverse": value ? "1" : void 0
            }
          };
        }
      },
      spaceX: {
        property: "marginInlineStart",
        values: "spacing",
        transform: (v) => ({
          "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
            "--space-x-reverse": "0",
            marginInlineStart: `calc(${v} * calc(1 - var(--space-x-reverse)))`,
            marginInlineEnd: `calc(${v} * var(--space-x-reverse))`
          }
        })
      },
      spaceYReverse: {
        values: { type: "boolean" },
        transform(value) {
          return {
            "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
              "--space-y-reverse": value ? "1" : void 0
            }
          };
        }
      },
      spaceY: {
        property: "marginTop",
        values: "spacing",
        transform: (v) => ({
          "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
            "--space-y-reverse": "0",
            marginTop: `calc(${v} * calc(1 - var(--space-y-reverse)))`,
            marginBottom: `calc(${v} * var(--space-y-reverse))`
          }
        })
      },
      rotate: {
        transform(value) {
          if (value !== "auto") return { rotate: deg(value) };
          return {
            rotate: `var(--rotate-x, 0) var(--rotate-y, 0) var(--rotate-z, 0)`
          };
        }
      },
      rotateX: {
        transform(value) {
          return { "--rotate-x": deg(value) };
        }
      },
      rotateY: {
        transform(value) {
          return { "--rotate-y": deg(value) };
        }
      },
      // transform / translate
      translate: {
        transform(value) {
          if (value !== "auto") return { translate: value };
          return {
            translate: `var(--translate-x) var(--translate-y)`
          };
        }
      },
      translateX: {
        values: "spacing",
        transform: (v) => ({ "--translate-x": v })
      },
      translateY: {
        values: "spacing",
        transform: (v) => ({ "--translate-y": v })
      },
      // transition
      transition: {
        values: [
          "all",
          "common",
          "colors",
          "opacity",
          "position",
          "backgrounds",
          "size",
          "shadow",
          "transform"
        ],
        transform(value) {
          switch (value) {
            case "all":
              return createTransition("all");
            case "position":
              return createTransition(
                "left, right, top, bottom, inset-inline, inset-block"
              );
            case "colors":
              return createTransition(
                "color, background-color, border-color, text-decoration-color, fill, stroke"
              );
            case "opacity":
              return createTransition("opacity");
            case "shadow":
              return createTransition("box-shadow");
            case "transform":
              return createTransition("transform");
            case "size":
              return createTransition("width, height");
            case "backgrounds":
              return createTransition(
                "background, background-color, background-image, background-position"
              );
            case "common":
              return createTransition(
                "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter"
              );
            default:
              return { transition: value };
          }
        }
      },
      transitionDuration: { values: "durations" },
      transitionProperty: {
        values: {
          common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, translate, transform",
          colors: "background-color, border-color, color, fill, stroke",
          size: "width, height",
          position: "left, right, top, bottom, inset-inline, inset-block",
          background: "background, background-color, background-image, background-position"
        }
      },
      transitionTimingFunction: { values: "easings" },
      // animation
      animation: { values: "animations" },
      animationDuration: { values: "durations" },
      animationDelay: { values: "durations" },
      animationTimingFunction: { values: "easings" },
      // typography
      fontFamily: { values: "fonts" },
      fontSize: { values: "fontSizes" },
      fontWeight: { values: "fontWeights" },
      lineHeight: { values: "lineHeights" },
      letterSpacing: { values: "letterSpacings" },
      textIndent: { values: "spacing" },
      truncate: {
        values: { type: "boolean" },
        transform(value) {
          if (value === true) {
            return {
              overflow: "hidden",
              textOverflow: "ellipsis",
              whiteSpace: "nowrap"
            };
          }
          return {};
        }
      },
      lineClamp: {
        transform(value) {
          if (value === "none") {
            return {
              WebkitLineClamp: "unset"
            };
          }
          return {
            overflow: "hidden",
            display: "-webkit-box",
            WebkitLineClamp: value,
            WebkitBoxOrient: "vertical",
            textWrap: "wrap"
          };
        }
      },
      // helpers
      srOnly: {
        values: { type: "boolean" },
        transform(value) {
          return srMapping[value] || {};
        }
      },
      debug: {
        values: { type: "boolean" },
        transform(value) {
          if (!value) return {};
          return {
            outline: "1px solid blue !important",
            "& > *": {
              outline: "1px solid red !important"
            }
          };
        }
      },
      caretColor: {
        values: colorValues,
        transform: createColorMixTransform("caretColor")
      },
      cursor: { values: "cursor" }
    }
  });
  var srMapping = {
    true: {
      position: "absolute",
      width: "1px",
      height: "1px",
      padding: "0",
      margin: "-1px",
      overflow: "hidden",
      clip: "rect(0, 0, 0, 0)",
      whiteSpace: "nowrap",
      borderWidth: "0"
    },
    false: {
      position: "static",
      width: "auto",
      height: "auto",
      padding: "0",
      margin: "0",
      overflow: "visible",
      clip: "auto",
      whiteSpace: "normal"
    }
  };

  // node_modules/@pandacss/is-valid-prop/dist/index.mjs
  var userGeneratedStr = "";
  var userGenerated = userGeneratedStr.split(",");
  var cssPropertiesStr = "WebkitAppearance,WebkitBorderBefore,WebkitBorderBeforeColor,WebkitBorderBeforeStyle,WebkitBorderBeforeWidth,WebkitBoxReflect,WebkitLineClamp,WebkitMask,WebkitMaskAttachment,WebkitMaskClip,WebkitMaskComposite,WebkitMaskImage,WebkitMaskOrigin,WebkitMaskPosition,WebkitMaskPositionX,WebkitMaskPositionY,WebkitMaskRepeat,WebkitMaskRepeatX,WebkitMaskRepeatY,WebkitMaskSize,WebkitOverflowScrolling,WebkitTapHighlightColor,WebkitTextFillColor,WebkitTextStroke,WebkitTextStrokeColor,WebkitTextStrokeWidth,WebkitTouchCallout,WebkitUserModify,WebkitUserSelect,accentColor,alignContent,alignItems,alignSelf,alignTracks,all,anchorName,anchorScope,animation,animationComposition,animationDelay,animationDirection,animationDuration,animationFillMode,animationIterationCount,animationName,animationPlayState,animationRange,animationRangeEnd,animationRangeStart,animationTimeline,animationTimingFunction,appearance,aspectRatio,backdropFilter,backfaceVisibility,background,backgroundAttachment,backgroundBlendMode,backgroundClip,backgroundColor,backgroundImage,backgroundOrigin,backgroundPosition,backgroundPositionX,backgroundPositionY,backgroundRepeat,backgroundSize,blockSize,border,borderBlock,borderBlockColor,borderBlockEnd,borderBlockEndColor,borderBlockEndStyle,borderBlockEndWidth,borderBlockStart,borderBlockStartColor,borderBlockStartStyle,borderBlockStartWidth,borderBlockStyle,borderBlockWidth,borderBottom,borderBottomColor,borderBottomLeftRadius,borderBottomRightRadius,borderBottomStyle,borderBottomWidth,borderCollapse,borderColor,borderEndEndRadius,borderEndStartRadius,borderImage,borderImageOutset,borderImageRepeat,borderImageSlice,borderImageSource,borderImageWidth,borderInline,borderInlineColor,borderInlineEnd,borderInlineEndColor,borderInlineEndStyle,borderInlineEndWidth,borderInlineStart,borderInlineStartColor,borderInlineStartStyle,borderInlineStartWidth,borderInlineStyle,borderInlineWidth,borderLeft,borderLeftColor,borderLeftStyle,borderLeftWidth,borderRadius,borderRight,borderRightColor,borderRightStyle,borderRightWidth,borderSpacing,borderStartEndRadius,borderStartStartRadius,borderStyle,borderTop,borderTopColor,borderTopLeftRadius,borderTopRightRadius,borderTopStyle,borderTopWidth,borderWidth,bottom,boxAlign,boxDecorationBreak,boxDirection,boxFlex,boxFlexGroup,boxLines,boxOrdinalGroup,boxOrient,boxPack,boxShadow,boxSizing,breakAfter,breakBefore,breakInside,captionSide,caret,caretColor,caretShape,clear,clip,clipPath,clipRule,color,colorInterpolationFilters,colorScheme,columnCount,columnFill,columnGap,columnRule,columnRuleColor,columnRuleStyle,columnRuleWidth,columnSpan,columnWidth,columns,contain,containIntrinsicBlockSize,containIntrinsicHeight,containIntrinsicInlineSize,containIntrinsicSize,containIntrinsicWidth,container,containerName,containerType,content,contentVisibility,counterIncrement,counterReset,counterSet,cursor,cx,cy,d,direction,display,dominantBaseline,emptyCells,fieldSizing,fill,fillOpacity,fillRule,filter,flex,flexBasis,flexDirection,flexFlow,flexGrow,flexShrink,flexWrap,float,floodColor,floodOpacity,font,fontFamily,fontFeatureSettings,fontKerning,fontLanguageOverride,fontOpticalSizing,fontPalette,fontSize,fontSizeAdjust,fontSmooth,fontStretch,fontStyle,fontSynthesis,fontSynthesisPosition,fontSynthesisSmallCaps,fontSynthesisStyle,fontSynthesisWeight,fontVariant,fontVariantAlternates,fontVariantCaps,fontVariantEastAsian,fontVariantEmoji,fontVariantLigatures,fontVariantNumeric,fontVariantPosition,fontVariationSettings,fontWeight,forcedColorAdjust,gap,grid,gridArea,gridAutoColumns,gridAutoFlow,gridAutoRows,gridColumn,gridColumnEnd,gridColumnGap,gridColumnStart,gridGap,gridRow,gridRowEnd,gridRowGap,gridRowStart,gridTemplate,gridTemplateAreas,gridTemplateColumns,gridTemplateRows,hangingPunctuation,height,hyphenateCharacter,hyphenateLimitChars,hyphens,imageOrientation,imageRendering,imageResolution,imeMode,initialLetter,initialLetterAlign,inlineSize,inset,insetBlock,insetBlockEnd,insetBlockStart,insetInline,insetInlineEnd,insetInlineStart,interpolateSize,isolation,justifyContent,justifyItems,justifySelf,justifyTracks,left,letterSpacing,lightingColor,lineBreak,lineClamp,lineHeight,lineHeightStep,listStyle,listStyleImage,listStylePosition,listStyleType,margin,marginBlock,marginBlockEnd,marginBlockStart,marginBottom,marginInline,marginInlineEnd,marginInlineStart,marginLeft,marginRight,marginTop,marginTrim,marker,markerEnd,markerMid,markerStart,mask,maskBorder,maskBorderMode,maskBorderOutset,maskBorderRepeat,maskBorderSlice,maskBorderSource,maskBorderWidth,maskClip,maskComposite,maskImage,maskMode,maskOrigin,maskPosition,maskRepeat,maskSize,maskType,masonryAutoFlow,mathDepth,mathShift,mathStyle,maxBlockSize,maxHeight,maxInlineSize,maxLines,maxWidth,minBlockSize,minHeight,minInlineSize,minWidth,mixBlendMode,objectFit,objectPosition,offset,offsetAnchor,offsetDistance,offsetPath,offsetPosition,offsetRotate,opacity,order,orphans,outline,outlineColor,outlineOffset,outlineStyle,outlineWidth,overflow,overflowAnchor,overflowBlock,overflowClipBox,overflowClipMargin,overflowInline,overflowWrap,overflowX,overflowY,overlay,overscrollBehavior,overscrollBehaviorBlock,overscrollBehaviorInline,overscrollBehaviorX,overscrollBehaviorY,padding,paddingBlock,paddingBlockEnd,paddingBlockStart,paddingBottom,paddingInline,paddingInlineEnd,paddingInlineStart,paddingLeft,paddingRight,paddingTop,page,pageBreakAfter,pageBreakBefore,pageBreakInside,paintOrder,perspective,perspectiveOrigin,placeContent,placeItems,placeSelf,pointerEvents,position,positionAnchor,positionArea,positionTry,positionTryFallbacks,positionTryOrder,positionVisibility,printColorAdjust,quotes,r,resize,right,rotate,rowGap,rubyAlign,rubyMerge,rubyPosition,rx,ry,scale,scrollBehavior,scrollMargin,scrollMarginBlock,scrollMarginBlockEnd,scrollMarginBlockStart,scrollMarginBottom,scrollMarginInline,scrollMarginInlineEnd,scrollMarginInlineStart,scrollMarginLeft,scrollMarginRight,scrollMarginTop,scrollPadding,scrollPaddingBlock,scrollPaddingBlockEnd,scrollPaddingBlockStart,scrollPaddingBottom,scrollPaddingInline,scrollPaddingInlineEnd,scrollPaddingInlineStart,scrollPaddingLeft,scrollPaddingRight,scrollPaddingTop,scrollSnapAlign,scrollSnapCoordinate,scrollSnapDestination,scrollSnapPointsX,scrollSnapPointsY,scrollSnapStop,scrollSnapType,scrollSnapTypeX,scrollSnapTypeY,scrollTimeline,scrollTimelineAxis,scrollTimelineName,scrollbarColor,scrollbarGutter,scrollbarWidth,shapeImageThreshold,shapeMargin,shapeOutside,shapeRendering,stopColor,stopOpacity,stroke,strokeDasharray,strokeDashoffset,strokeLinecap,strokeLinejoin,strokeMiterlimit,strokeOpacity,strokeWidth,tabSize,tableLayout,textAlign,textAlignLast,textAnchor,textBox,textBoxEdge,textBoxTrim,textCombineUpright,textDecoration,textDecorationColor,textDecorationLine,textDecorationSkip,textDecorationSkipInk,textDecorationStyle,textDecorationThickness,textEmphasis,textEmphasisColor,textEmphasisPosition,textEmphasisStyle,textIndent,textJustify,textOrientation,textOverflow,textRendering,textShadow,textSizeAdjust,textSpacingTrim,textTransform,textUnderlineOffset,textUnderlinePosition,textWrap,textWrapMode,textWrapStyle,timelineScope,top,touchAction,transform,transformBox,transformOrigin,transformStyle,transition,transitionBehavior,transitionDelay,transitionDuration,transitionProperty,transitionTimingFunction,translate,unicodeBidi,userSelect,vectorEffect,verticalAlign,viewTimeline,viewTimelineAxis,viewTimelineInset,viewTimelineName,viewTransitionName,visibility,whiteSpace,whiteSpaceCollapse,widows,width,willChange,wordBreak,wordSpacing,wordWrap,writingMode,x,y,zIndex,zoom,alignmentBaseline,baselineShift,colorInterpolation,colorRendering,glyphOrientationVertical";
  var allCssProperties = cssPropertiesStr.split(",").concat(userGenerated);
  var properties = new Map(allCssProperties.map((prop) => [prop, true]));
  function memo4(fn) {
    const cache2 = /* @__PURE__ */ Object.create(null);
    return (arg) => {
      if (cache2[arg] === void 0)
        cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }
  var cssPropertySelectorRegex = /&|@/;
  var isCssProperty = /* @__PURE__ */ memo4((prop) => {
    return properties.has(prop) || prop.startsWith("--") || cssPropertySelectorRegex.test(prop);
  });

  // node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js
  var isNotNullish = (element) => element != null;
  function walkObject(target, predicate, options = {}) {
    const { stop: stop2, getKey } = options;
    function inner(value, path = []) {
      if (isObject(value) || Array.isArray(value)) {
        const result = {};
        for (const [prop, child] of Object.entries(value)) {
          const key = getKey?.(prop, child) ?? prop;
          const childPath = [...path, key];
          if (stop2?.(value, childPath)) {
            return predicate(value, path);
          }
          const next3 = inner(child, childPath);
          if (isNotNullish(next3)) {
            result[key] = next3;
          }
        }
        return result;
      }
      return predicate(value, path);
    }
    return inner(target);
  }
  function mapObject(obj, fn) {
    if (Array.isArray(obj))
      return obj.map((value) => {
        return isNotNullish(value) ? fn(value) : value;
      });
    if (!isObject(obj)) {
      return isNotNullish(obj) ? fn(obj) : obj;
    }
    return walkObject(obj, (value) => fn(value));
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/flatten.js
  function flatten2(values, stop2) {
    const result = {};
    walkObject(
      values,
      (token2, paths) => {
        if (token2) {
          result[paths.join(".")] = token2.value;
        }
      },
      { stop: stop2 }
    );
    return result;
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/memo.js
  var import_fast_safe_stringify = __toESM(require_fast_safe_stringify(), 1);
  var memo5 = (fn) => {
    const cache2 = /* @__PURE__ */ Object.create(null);
    function get(...args) {
      const key = args.map((v) => (0, import_fast_safe_stringify.default)(v)).join("|");
      if (cache2[key] === void 0) cache2[key] = fn(...args);
      return cache2[key];
    }
    return get;
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/unit-conversion.js
  var BASE_FONT_SIZE = 16;
  var UNIT_PX = "px";
  var UNIT_EM = "em";
  var UNIT_REM = "rem";
  function getUnit(value = "") {
    const DIGIT_REGEX = new RegExp(String.raw`-?\d+(?:\.\d+|\d*)`);
    const UNIT_REGEX = new RegExp(`${UNIT_PX}|${UNIT_EM}|${UNIT_REM}`);
    const unit = value.match(
      new RegExp(`${DIGIT_REGEX.source}(${UNIT_REGEX.source})`)
    );
    return unit?.[1];
  }
  function toPx2(value = "") {
    if (typeof value === "number") {
      return `${value}px`;
    }
    const unit = getUnit(value);
    if (!unit) return value;
    if (unit === UNIT_PX) {
      return value;
    }
    if (unit === UNIT_EM || unit === UNIT_REM) {
      return `${parseFloat(value) * BASE_FONT_SIZE}${UNIT_PX}`;
    }
  }
  function toRem(value = "") {
    const unit = getUnit(value);
    if (!unit) return value;
    if (unit === UNIT_REM) {
      return value;
    }
    if (unit === UNIT_EM) {
      return `${parseFloat(value)}${UNIT_REM}`;
    }
    if (unit === UNIT_PX) {
      return `${parseFloat(value) / BASE_FONT_SIZE}${UNIT_REM}`;
    }
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/breakpoints.js
  var capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);
  function createBreakpoints(breakpoints2) {
    const sorted = sort(breakpoints2);
    const values = Object.fromEntries(sorted);
    function get(name) {
      return values[name];
    }
    function only(name) {
      return build(get(name));
    }
    function getRanges() {
      const breakpoints22 = Object.keys(values);
      const permuations = getPermutations(breakpoints22);
      const results = breakpoints22.flatMap((name) => {
        const value = get(name);
        const down2 = [
          `${name}Down`,
          build({ max: adjust(value.min) })
        ];
        const up2 = [name, build({ min: value.min })];
        const _only = [`${name}Only`, only(name)];
        return [up2, _only, down2];
      }).filter(([, value]) => value !== "").concat(
        permuations.map(([min4, max4]) => {
          const minValue = get(min4);
          const maxValue2 = get(max4);
          return [
            `${min4}To${capitalize(max4)}`,
            build({ min: minValue.min, max: adjust(maxValue2.min) })
          ];
        })
      );
      return Object.fromEntries(results);
    }
    function toConditions() {
      const ranges = getRanges();
      return Object.fromEntries(Object.entries(ranges));
    }
    const conditions = toConditions();
    const getCondition = (key) => {
      return conditions[key];
    };
    function keys() {
      return ["base", ...Object.keys(values)];
    }
    function up(name) {
      return build({ min: get(name).min });
    }
    function down(name) {
      return build({ max: adjust(get(name).min) });
    }
    return {
      values: Object.values(values),
      only,
      keys,
      conditions,
      getCondition,
      up,
      down
    };
  }
  function adjust(value) {
    const computedMax = parseFloat(toPx2(value) ?? "") - 0.04;
    return toRem(`${computedMax}px`);
  }
  function sort(breakpoints2) {
    const entries = Object.entries(breakpoints2).sort(([, minA], [, minB]) => {
      return parseInt(minA, 10) < parseInt(minB, 10) ? -1 : 1;
    });
    return entries.map(([name, min4], index, entries2) => {
      let max4 = null;
      if (index <= entries2.length - 1) {
        max4 = entries2[index + 1]?.[1];
      }
      if (max4 != null) {
        max4 = adjust(max4);
      }
      return [name, { name, min: toRem(min4), max: max4 }];
    });
  }
  function getPermutations(values) {
    const result = [];
    values.forEach((current, index) => {
      let idx = index;
      idx++;
      let next3 = values[idx];
      while (next3) {
        result.push([current, next3]);
        idx++;
        next3 = values[idx];
      }
    });
    return result;
  }
  function build({
    min: min4,
    max: max4
  }) {
    if (min4 == null && max4 == null) return "";
    return [
      "@media screen",
      min4 && `(min-width: ${min4})`,
      max4 && `(max-width: ${max4})`
    ].filter(Boolean).join(" and ");
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/conditions.js
  var mapEntries = (obj, fn) => {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => fn(key, value))
    );
  };
  var createConditions = (options) => {
    const { breakpoints: breakpoints2, conditions: conds = {} } = options;
    const conditions = mapEntries(conds, (key, value) => [`_${key}`, value]);
    const values = Object.assign({}, conditions, breakpoints2.conditions);
    function keys() {
      return Object.keys(values);
    }
    function has2(key) {
      return keys().includes(key) || /^@|&|&$/.test(key) || key.startsWith("_");
    }
    function sort2(paths) {
      return paths.filter((v) => v !== "base").sort((a, b2) => {
        const aa = has2(a);
        const bb = has2(b2);
        if (aa && !bb) return 1;
        if (!aa && bb) return -1;
        return 0;
      });
    }
    function expandAtRule(key) {
      if (!key.startsWith("@breakpoint")) return key;
      return breakpoints2.getCondition(key.replace("@breakpoint ", ""));
    }
    function resolve(key) {
      return Reflect.get(values, key) || key;
    }
    return {
      keys,
      sort: sort2,
      has: has2,
      resolve,
      breakpoints: breakpoints2.keys(),
      expandAtRule
    };
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-params.js
  var createMediaQueryRegex = (dimension) => ({
    minMax: new RegExp(
      `(!?\\(\\s*min(-device-)?-${dimension})(.|
)+\\(\\s*max(-device)?-${dimension}`,
      "i"
    ),
    min: new RegExp(`\\(\\s*min(-device)?-${dimension}`, "i"),
    maxMin: new RegExp(
      `(!?\\(\\s*max(-device)?-${dimension})(.|
)+\\(\\s*min(-device)?-${dimension}`,
      "i"
    ),
    max: new RegExp(`\\(\\s*max(-device)?-${dimension}`, "i")
  });
  var widthRegex = createMediaQueryRegex("width");
  var heightRegex = createMediaQueryRegex("height");
  var createQueryTester = (regexSet) => ({
    isMin: _testQuery(regexSet.minMax, regexSet.maxMin, regexSet.min),
    isMax: _testQuery(regexSet.maxMin, regexSet.minMax, regexSet.max)
  });
  var { isMin: isMinWidth, isMax: isMaxWidth } = createQueryTester(widthRegex);
  var { isMin: isMinHeight, isMax: isMaxHeight } = createQueryTester(heightRegex);
  var isPrint = /print/i;
  var isPrintOnly = /^print$/i;
  var isLength = /(-?\d*\.?\d+)(ch|em|ex|px|rem)/;
  var lengthExec = /(\d)/;
  var maxValue = Number.MAX_VALUE;
  var multipliers = { ch: 8.8984375, em: 16, rem: 16, ex: 8.296875, px: 1 };
  function getQueryLength(query2) {
    const length2 = isLength.exec(query2) || (isMinWidth(query2) || isMinHeight(query2) ? lengthExec.exec(query2) : null);
    if (!length2) return maxValue;
    if (length2[0] === "0") return 0;
    const number = parseFloat(length2[1]);
    const unit = length2[2];
    return number * (multipliers[unit] || 1);
  }
  function _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {
    return (query2) => doubleTestTrue.test(query2) || !doubleTestFalse.test(query2) && singleTest.test(query2);
  }
  function _testIsPrint(a, b2) {
    const isPrintA = isPrint.test(a), isPrintOnlyA = isPrintOnly.test(a);
    const isPrintB = isPrint.test(b2), isPrintOnlyB = isPrintOnly.test(b2);
    if (isPrintA && isPrintB) {
      if (!isPrintOnlyA && isPrintOnlyB) return 1;
      if (isPrintOnlyA && !isPrintOnlyB) return -1;
      return a.localeCompare(b2);
    }
    return isPrintA ? 1 : isPrintB ? -1 : null;
  }
  var sortAtParams = memo5((a, b2) => {
    const testIsPrint = _testIsPrint(a, b2);
    if (testIsPrint !== null) return testIsPrint;
    const minA = isMinWidth(a) || isMinHeight(a), maxA = isMaxWidth(a) || isMaxHeight(a);
    const minB = isMinWidth(b2) || isMinHeight(b2), maxB = isMaxWidth(b2) || isMaxHeight(b2);
    if (minA && maxB) return -1;
    if (maxA && minB) return 1;
    const lengthA = getQueryLength(a), lengthB = getQueryLength(b2);
    if (lengthA === maxValue && lengthB === maxValue) return a.localeCompare(b2);
    if (lengthA === maxValue) return 1;
    if (lengthB === maxValue) return -1;
    if (lengthA !== lengthB) {
      return lengthA > lengthB ? maxA ? -1 : 1 : maxA ? 1 : -1;
    }
    return a.localeCompare(b2);
  });

  // node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-rules.js
  function sortQueries(queries) {
    return queries.sort(([a], [b2]) => sortAtParams(a, b2));
  }
  function sortAtRules(obj) {
    const mediaQueries = [];
    const containerQueries = [];
    const rest = {};
    for (const [key, value] of Object.entries(obj)) {
      if (key.startsWith("@media")) {
        mediaQueries.push([key, value]);
      } else if (key.startsWith("@container")) {
        containerQueries.push([key, value]);
      } else if (isObject(value)) {
        rest[key] = sortAtRules(value);
      } else {
        rest[key] = value;
      }
    }
    const sortedMediaQueries = sortQueries(mediaQueries);
    const sortedContainerQueries = sortQueries(containerQueries);
    return {
      ...rest,
      ...Object.fromEntries(sortedMediaQueries),
      ...Object.fromEntries(sortedContainerQueries)
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/css.js
  var importantRegex = /\s*!(important)?/i;
  var isImportant = (v) => isString(v) ? importantRegex.test(v) : false;
  var withoutImportant = (v) => isString(v) ? v.replace(importantRegex, "").trim() : v;
  function createCssFn(context) {
    const { transform, conditions, normalize: normalize3 } = context;
    const mergeFn = mergeCss(context);
    return memo5(function cssFn(...styleArgs) {
      const styles = mergeFn(...styleArgs);
      const normalized = normalize3(styles);
      const result = /* @__PURE__ */ Object.create(null);
      walkObject(normalized, (value, paths) => {
        const important = isImportant(value);
        if (value == null) return;
        const [prop, ...selectors] = conditions.sort(paths).map(conditions.resolve);
        if (important) {
          value = withoutImportant(value);
        }
        let transformed = transform(prop, value) ?? /* @__PURE__ */ Object.create(null);
        transformed = walkObject(
          transformed,
          (v) => isString(v) && important ? `${v} !important` : v,
          { getKey: (prop2) => conditions.expandAtRule(prop2) }
        );
        mergeByPath(result, selectors.flat(), transformed);
      });
      return sortAtRules(result);
    });
  }
  function mergeByPath(target, paths, value) {
    let acc = target;
    for (const path of paths) {
      if (!path) continue;
      if (!acc[path]) acc[path] = /* @__PURE__ */ Object.create(null);
      acc = acc[path];
    }
    mergeWith(acc, value);
  }
  function compactFn(...styles) {
    return styles.filter(
      (style) => isObject(style) && Object.keys(compact(style)).length > 0
    );
  }
  function mergeCss(ctx) {
    function resolve(styles) {
      const comp = compactFn(...styles);
      if (comp.length === 1) return comp;
      return comp.map((style) => ctx.normalize(style));
    }
    return memo5(function mergeFn(...styles) {
      return mergeWith({}, ...resolve(styles));
    });
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/cva.js
  var defaults = (conf) => ({
    base: {},
    variants: {},
    defaultVariants: {},
    compoundVariants: [],
    ...conf
  });
  function createRecipeFn(options) {
    const { css: css2, conditions, normalize: normalize3, layers } = options;
    function cva(config = {}) {
      const { base, variants: variants3, defaultVariants: defaultVariants3, compoundVariants } = defaults(config);
      const getVariantCss = createCssFn({
        conditions,
        normalize: normalize3,
        transform(prop, value) {
          return variants3[prop]?.[value];
        }
      });
      const resolve = (props26 = {}) => {
        const variantSelections = normalize3({
          ...defaultVariants3,
          ...compact(props26)
        });
        let variantCss = { ...base };
        mergeWith(variantCss, getVariantCss(variantSelections));
        const compoundVariantCss = getCompoundVariantCss(
          compoundVariants,
          variantSelections
        );
        return layers.wrap("recipes", css2(variantCss, compoundVariantCss));
      };
      const variantKeys = Object.keys(variants3);
      const splitVariantProps = (props26) => {
        const restProps = omit(props26, ["recipe"]);
        const [recipeProps, localProps] = splitProps(restProps, variantKeys);
        if (!variantKeys.includes("colorPalette")) {
          recipeProps.colorPalette = props26.colorPalette || defaultVariants3.colorPalette;
        }
        if (variantKeys.includes("orientation")) {
          localProps.orientation = props26.orientation;
        }
        return [recipeProps, localProps];
      };
      const variantMap = Object.fromEntries(
        Object.entries(variants3).map(([key, value]) => [
          key,
          Object.keys(value)
        ])
      );
      const cvaFn = (props26) => css2(resolve(props26));
      return Object.assign(cvaFn, {
        className: config.className,
        __cva__: true,
        variantMap,
        variantKeys,
        raw: resolve,
        config,
        splitVariantProps,
        merge(other) {
          return cva(mergeCva2(options)(this, other));
        }
      });
    }
    function getCompoundVariantCss(cvs, vm) {
      let result = {};
      cvs.forEach((cv) => {
        const isMatching = Object.entries(cv).every(([key, value]) => {
          if (key === "css") return true;
          const values = Array.isArray(value) ? value : [value];
          return values.some((value2) => vm[key] === value2);
        });
        if (isMatching) {
          result = css2(result, cv.css);
        }
      });
      return result;
    }
    return cva;
  }
  function mergeCva2(opts) {
    const { css: css2 } = opts;
    return function mergeCva22(cvaA, cvaB) {
      const override = defaults(cvaB.config);
      const variantKeys = uniq(cvaA.variantKeys, Object.keys(cvaB.variants));
      const base = css2(cvaA.base, override.base);
      const variants3 = Object.fromEntries(
        variantKeys.map((key) => [
          key,
          css2(cvaA.config.variants[key], override.variants[key])
        ])
      );
      const defaultVariants3 = mergeWith(
        cvaA.config.defaultVariants,
        override.defaultVariants
      );
      const compoundVariants = [
        ...cvaA.compoundVariants,
        ...override.compoundVariants
      ];
      const className = cx(cvaA.className, cvaB.className);
      return {
        className,
        base,
        variants: variants3,
        defaultVariants: defaultVariants3,
        compoundVariants
      };
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/layers.js
  var defaultLayers = {
    reset: "reset",
    base: "base",
    tokens: "tokens",
    recipes: "recipes"
  };
  var layerOrder = {
    reset: 0,
    base: 1,
    tokens: 2,
    recipes: 3
  };
  function createLayers(config) {
    const layers = config.layers ?? defaultLayers;
    const values = Object.values(layers);
    const names = values.sort((a, b2) => layerOrder[a] - layerOrder[b2]);
    return {
      names,
      atRule: `@layer ${names.join(", ")};`,
      wrap(layer, styles) {
        if (config.disableLayers) return styles;
        const params = layers[layer];
        return { [`@layer ${params}`]: styles };
      }
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/normalize.js
  function createNormalizeFn(context) {
    const { utility, normalize: normalize3 } = context;
    const { hasShorthand, resolveShorthand } = utility;
    return function(styles) {
      return walkObject(styles, normalize3, {
        stop: (value) => Array.isArray(value),
        getKey: hasShorthand ? resolveShorthand : void 0
      });
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/preflight.js
  function createPreflight(options) {
    const { preflight } = options;
    if (!preflight) return {};
    const { scope = "", level = "parent" } = isObject(preflight) ? preflight : {};
    let selector = "";
    if (scope && level === "parent") {
      selector = `${scope} `;
    } else if (scope && level === "element") {
      selector = `&${scope}`;
    }
    const scoped = {
      "*": {
        margin: "0px",
        padding: "0px",
        font: "inherit",
        wordWrap: "break-word",
        WebkitTapHighlightColor: "transparent"
      },
      "*, *::before, *::after, *::backdrop": {
        boxSizing: "border-box",
        borderWidth: "0px",
        borderStyle: "solid",
        borderColor: "var(--global-color-border, currentColor)"
      },
      hr: {
        height: "0px",
        color: "inherit",
        borderTopWidth: "1px"
      },
      body: {
        minHeight: "100dvh",
        position: "relative"
      },
      img: {
        borderStyle: "none"
      },
      "img, svg, video, canvas, audio, iframe, embed, object": {
        display: "block",
        verticalAlign: "middle"
      },
      iframe: { border: "none" },
      "img, video": { maxWidth: "100%", height: "auto" },
      "p, h1, h2, h3, h4, h5, h6": { overflowWrap: "break-word" },
      "ol, ul": { listStyle: "none" },
      "code, kbd, pre, samp": { fontSize: "1em" },
      "button, [type='button'], [type='reset'], [type='submit']": {
        WebkitAppearance: "button",
        backgroundColor: "transparent",
        backgroundImage: "none"
      },
      "button, input, optgroup, select, textarea": { color: "inherit" },
      "button, select": { textTransform: "none" },
      table: {
        textIndent: "0px",
        borderColor: "inherit",
        borderCollapse: "collapse"
      },
      "*::placeholder": {
        opacity: "unset",
        color: "#9ca3af",
        userSelect: "none"
      },
      textarea: {
        resize: "vertical"
      },
      summary: {
        display: "list-item"
      },
      small: {
        fontSize: "80%"
      },
      "sub, sup": {
        fontSize: "75%",
        lineHeight: 0,
        position: "relative",
        verticalAlign: "baseline"
      },
      sub: {
        bottom: "-0.25em"
      },
      sup: {
        top: "-0.5em"
      },
      dialog: {
        padding: "0px"
      },
      a: {
        color: "inherit",
        textDecoration: "inherit"
      },
      "abbr:where([title])": {
        textDecoration: "underline dotted"
      },
      "b, strong": {
        fontWeight: "bolder"
      },
      "code, kbd, samp, pre": {
        fontSize: "1em",
        "--font-mono-fallback": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New'",
        fontFamily: "var(--global-font-mono, var(--font-mono-fallback))"
      },
      'input[type="text"], input[type="email"], input[type="search"], input[type="password"]': {
        WebkitAppearance: "none",
        MozAppearance: "none"
      },
      "input[type='search']": {
        WebkitAppearance: "textfield",
        outlineOffset: "-2px"
      },
      "::-webkit-search-decoration, ::-webkit-search-cancel-button": {
        WebkitAppearance: "none"
      },
      "::-webkit-file-upload-button": {
        WebkitAppearance: "button",
        font: "inherit"
      },
      'input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button': {
        height: "auto"
      },
      "input[type='number']": {
        MozAppearance: "textfield"
      },
      ":-moz-ui-invalid": {
        boxShadow: "none"
      },
      ":-moz-focusring": {
        outline: "auto"
      },
      "[hidden]:where(:not([hidden='until-found']))": {
        display: "none !important"
      }
    };
    const preflightCss = {
      [scope || "html"]: {
        lineHeight: 1.5,
        "--font-fallback": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
        WebkitTextSizeAdjust: "100%",
        WebkitFontSmoothing: "antialiased",
        MozOsxFontSmoothing: "grayscale",
        textRendering: "optimizeLegibility",
        touchAction: "manipulation",
        MozTabSize: "4",
        tabSize: "4",
        fontFamily: "var(--global-font-body, var(--font-fallback))"
      }
    };
    if (level === "element") {
      const modified = Object.entries(scoped).reduce((acc, [k, v]) => {
        acc[k] = { [selector]: v };
        return acc;
      }, {});
      Object.assign(preflightCss, modified);
    } else if (selector) {
      preflightCss[selector] = scoped;
    } else {
      Object.assign(preflightCss, scoped);
    }
    return preflightCss;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/serialize.js
  function createSerializeFn(options) {
    const { conditions, isValidProperty } = options;
    return function serialize3(styles) {
      return walkObject(styles, (value) => value, {
        getKey: (prop, value) => {
          if (!isObject(value)) return prop;
          if (!conditions.has(prop) && !isValidProperty(prop)) {
            return parseSelectors(prop).map((s2) => "&" + s2).join(", ");
          }
          return prop;
        }
      });
    };
  }
  function parseSelectors(selector) {
    const result = [];
    let parenCount = 0;
    let currentSelector = "";
    let inEscape = false;
    for (let i2 = 0; i2 < selector.length; i2++) {
      const char2 = selector[i2];
      if (char2 === "\\" && !inEscape) {
        inEscape = true;
        currentSelector += char2;
        continue;
      }
      if (inEscape) {
        inEscape = false;
        currentSelector += char2;
        continue;
      }
      if (char2 === "(") {
        parenCount++;
      } else if (char2 === ")") {
        parenCount--;
      }
      if (char2 === "," && parenCount === 0) {
        result.push(currentSelector.trim());
        currentSelector = "";
      } else {
        currentSelector += char2;
      }
    }
    if (currentSelector) {
      result.push(currentSelector.trim());
    }
    return result;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/sva.js
  var getSlotRecipes = (config = {}) => {
    const init = (slot) => ({
      base: config.base?.[slot] ?? {},
      variants: {},
      defaultVariants: config.defaultVariants ?? {},
      compoundVariants: config.compoundVariants ? getSlotCompoundVariant(config.compoundVariants, slot) : []
    });
    const slots = config.slots ?? [];
    const entries = slots.map((slot) => [slot, init(slot)]);
    for (const [variantsKey, variantsSpec] of Object.entries(
      config.variants ?? {}
    )) {
      for (const [variantKey, variantSpec] of Object.entries(
        variantsSpec
      )) {
        entries.forEach(([slot, slotRecipe]) => {
          var _a;
          (_a = slotRecipe.variants)[variantsKey] ?? (_a[variantsKey] = {});
          slotRecipe.variants[variantsKey][variantKey] = variantSpec[slot] ?? {};
        });
      }
    }
    return Object.fromEntries(entries);
  };
  var getSlotCompoundVariant = (compoundVariants, slotName) => compoundVariants.filter((compoundVariant) => compoundVariant.css[slotName]).map((compoundVariant) => ({
    ...compoundVariant,
    css: compoundVariant.css[slotName]
  }));
  function createSlotRecipeFn(options) {
    const { cva } = options;
    return function sva(config = {}) {
      const slots = Object.entries(getSlotRecipes(config)).map(
        ([slot, slotCva]) => [slot, cva(slotCva)]
      );
      function svaFn(props26) {
        const result = slots.map(([slot, cvaFn]) => [slot, cvaFn(props26)]);
        return Object.fromEntries(result);
      }
      const variants3 = config.variants ?? {};
      const variantKeys = Object.keys(variants3);
      function splitVariantProps(props26) {
        const restProps = omit(props26, ["recipe"]);
        const [recipeProps, localProps] = splitProps(restProps, variantKeys);
        if (!variantKeys.includes("colorPalette")) {
          recipeProps.colorPalette = props26.colorPalette || config.defaultVariants?.colorPalette;
        }
        if (variantKeys.includes("orientation")) {
          localProps.orientation = props26.orientation;
        }
        return [recipeProps, localProps];
      }
      const variantMap = Object.fromEntries(
        Object.entries(variants3).map(([key, value]) => [key, Object.keys(value)])
      );
      let classNameMap = {};
      if (config.className) {
        classNameMap = Object.fromEntries(
          config.slots.map((slot) => [
            slot,
            `${config.className}__${slot}`
          ])
        );
      }
      return Object.assign(svaFn, {
        variantMap,
        variantKeys,
        splitVariantProps,
        classNameMap
      });
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/utils/create-props.js
  var createProps2 = () => (props26) => Array.from(new Set(props26));

  // node_modules/@chakra-ui/react/dist/esm/styled-system/esc.js
  var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|^-|[^\x80-\uFFFF\w-]/g;
  var fcssescape = function(ch, asCodePoint) {
    if (!asCodePoint) return "\\" + ch;
    if (ch === "\0") return "\uFFFD";
    if (ch === "-" && ch.length === 1) return "\\-";
    return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16);
  };
  var esc2 = (sel) => {
    return (sel + "").replace(rcssescape, fcssescape);
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/expand-reference.js
  var expandTokenReferences = (str, resolve) => {
    let expanded = "";
    let index = 0;
    let state2 = "char";
    let tokenPath = "";
    let fallback3 = "";
    const currentStates = [];
    while (index < str.length) {
      const char2 = str[index];
      if (char2 === "{") {
        const endIndex = str.indexOf("}", index);
        if (endIndex === -1) {
          break;
        }
        const path = str.slice(index + 1, endIndex);
        const resolved = resolve(path);
        expanded += resolved ?? path;
        index = endIndex + 1;
        continue;
      }
      if (state2 === "token") {
        if (char2 === ",") {
          if (str[index] === "") {
            index++;
          }
          state2 = "fallback";
          currentStates.push(state2);
          const resolved = resolve(tokenPath);
          if (resolved?.endsWith(")")) {
            expanded += resolved.slice(0, -1);
          }
          tokenPath = "";
          fallback3 = "";
          continue;
        }
      }
      if (state2 === "fallback") {
        const nextFallback = fallback3 + char2;
        if (nextFallback === ", var(") {
          const innerEndIndex = cssVarParser(str.slice(index + 1));
          const endIndex = innerEndIndex + index + 1;
          const cssVar2 = str.slice(index + 1, endIndex);
          if (endIndex === -1) {
            break;
          }
          expanded += ", var(" + cssVar2 + ")";
          index = endIndex + 1;
          state2 = currentStates.pop() ?? state2;
          fallback3 = "";
          continue;
        }
      }
      if (state2 === "token" || state2 === "fallback") {
        index++;
        if (char2 === ")") {
          state2 = currentStates.pop() ?? state2 ?? "char";
          fallback3 += char2;
          const resolved = tokenPath ? resolve(tokenPath) ?? esc2(tokenPath) : tokenPath;
          if (fallback3) {
            fallback3 = fallback3.slice(1).trim();
            if (!fallback3.startsWith("token(") && fallback3.endsWith(")")) {
              fallback3 = fallback3.slice(0, -1);
            }
            if (fallback3.includes("token(")) {
              const parsed = expandTokenReferences(fallback3, resolve);
              if (parsed) {
                fallback3 = parsed.slice(0, -1);
              }
            } else if (fallback3) {
              const resolvedFallback = resolve(fallback3);
              if (resolvedFallback) {
                fallback3 = resolvedFallback;
              }
            }
          }
          const lastChar = expanded.at(-1);
          if (fallback3) {
            if (lastChar?.trim()) {
              expanded += resolved.slice(0, -1) + (", " + fallback3 + ")");
            } else {
              expanded += fallback3;
            }
          } else {
            expanded += resolved || ")";
          }
          tokenPath = "";
          fallback3 = "";
          state2 = "char";
          continue;
        }
        if (state2 === "token") {
          tokenPath += char2;
        }
        if (state2 === "fallback") {
          fallback3 += char2;
        }
        continue;
      }
      const tokenIndex = str.indexOf("token(", index);
      if (tokenIndex !== -1) {
        const innerTokenIndex = tokenIndex + "token(".length;
        expanded += str.slice(index, tokenIndex);
        index = innerTokenIndex;
        state2 = "token";
        currentStates.push(state2);
        continue;
      }
      expanded += char2;
      index++;
    }
    return expanded;
  };
  var cssVarParser = (str) => {
    let index = 0;
    const openedParenthesises = ["("];
    while (index < str.length) {
      const char2 = str[index];
      if (char2 === "(") {
        openedParenthesises.push(char2);
      } else if (char2 === ")") {
        openedParenthesises.pop();
        if (openedParenthesises.length === 0) {
          return index;
        }
      }
      index++;
    }
    return index;
  };

  // node_modules/@chakra-ui/react/dist/esm/styled-system/map-to-json.js
  function mapToJson(map2) {
    const obj = {};
    map2.forEach((value, key) => {
      if (value instanceof Map) {
        obj[key] = Object.fromEntries(value);
      } else {
        obj[key] = value;
      }
    });
    return obj;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/references.js
  var REFERENCE_REGEX = /({([^}]*)})/g;
  var CURLY_REGEX = /[{}]/g;
  var TOKEN_PATH_REGEX = /\w+\.\w+/;
  var getReferences = (value) => {
    if (!isString(value)) return [];
    const matches = value.match(REFERENCE_REGEX);
    if (!matches) return [];
    return matches.map((match5) => match5.replace(CURLY_REGEX, "")).map((value2) => value2.trim());
  };
  var hasReference = (value) => REFERENCE_REGEX.test(value);
  function expandReferences(token2) {
    if (!token2.extensions?.references) {
      return token2.extensions?.cssVar?.ref ?? token2.value;
    }
    const references = token2.extensions.references ?? {};
    token2.value = Object.keys(references).reduce((valueStr, key) => {
      const referenceToken = references[key];
      if (referenceToken.extensions.conditions) {
        return valueStr;
      }
      const value = expandReferences(referenceToken);
      return valueStr.replace(`{${key}}`, value);
    }, token2.value);
    delete token2.extensions.references;
    return token2.value;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/calc.js
  function resolveReference(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
  var add2 = (...operands) => `calc(${toExpression("+", ...operands)})`;
  var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
  var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
  var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
  var negate = (x2) => {
    const value = resolveReference(x2);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    }
    return multiply(value, -1);
  };
  var calc = Object.assign(
    (x2) => ({
      add: (...operands) => calc(add2(x2, ...operands)),
      subtract: (...operands) => calc(subtract(x2, ...operands)),
      multiply: (...operands) => calc(multiply(x2, ...operands)),
      divide: (...operands) => calc(divide(x2, ...operands)),
      negate: () => calc(negate(x2)),
      toString: () => x2.toString()
    }),
    {
      add: add2,
      subtract,
      multiply,
      divide,
      negate
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/styled-system/token-middleware.js
  var addNegativeTokens = {
    enforce: "pre",
    transform(dictionary) {
      const { prefix: prefix2, allTokens, formatCssVar, formatTokenName, registerToken } = dictionary;
      const tokens2 = allTokens.filter(
        ({ extensions }) => extensions.category === "spacing"
      );
      tokens2.forEach((token2) => {
        const originalPath = token2.path.slice();
        const originalVar = formatCssVar(originalPath, prefix2);
        if (isString(token2.value) && token2.value === "0rem") {
          return;
        }
        const nextToken = structuredClone(token2);
        Object.assign(nextToken.extensions, {
          negative: true,
          prop: `-${token2.extensions.prop}`,
          originalPath
        });
        nextToken.value = calc.negate(originalVar.ref);
        const lastPath = nextToken.path[nextToken.path.length - 1];
        if (lastPath != null) {
          nextToken.path[nextToken.path.length - 1] = `-${lastPath}`;
        }
        if (nextToken.path) {
          nextToken.name = formatTokenName(nextToken.path);
        }
        registerToken(nextToken);
      });
    }
  };
  var units = /* @__PURE__ */ new Set([
    "spacing",
    "sizes",
    "borderWidths",
    "fontSizes",
    "radii"
  ]);
  var addPixelUnit = {
    enforce: "post",
    transform(dictionary) {
      const tokens2 = dictionary.allTokens.filter((token2) => {
        return units.has(token2.extensions.category) && !token2.extensions.negative;
      });
      tokens2.forEach((token2) => {
        Object.assign(token2.extensions, {
          pixelValue: toPx2(token2.value)
        });
      });
    }
  };
  var addVirtualPalette = {
    enforce: "post",
    transform(dictionary) {
      const { allTokens, registerToken, formatTokenName } = dictionary;
      const tokens2 = allTokens.filter(
        ({ extensions }) => extensions.category === "colors"
      );
      const keys = /* @__PURE__ */ new Map();
      const colorPalettes = /* @__PURE__ */ new Map();
      tokens2.forEach((token2) => {
        const { colorPalette } = token2.extensions;
        if (!colorPalette) return;
        colorPalette.keys.forEach((keyPath) => {
          keys.set(formatTokenName(keyPath), keyPath);
        });
        colorPalette.roots.forEach((colorPaletteRoot) => {
          const name = formatTokenName(colorPaletteRoot);
          const colorPaletteList = colorPalettes.get(name) || [];
          colorPaletteList.push(token2);
          colorPalettes.set(name, colorPaletteList);
          if (token2.extensions.default && colorPaletteRoot.length === 1) {
            const keyPath = colorPalette.keys[0]?.filter(Boolean);
            if (!keyPath.length) return;
            const path = colorPaletteRoot.concat(keyPath);
            keys.set(formatTokenName(path), []);
          }
        });
      });
      keys.forEach((segments) => {
        const path = ["colors", "colorPalette", ...segments].filter(Boolean);
        const name = formatTokenName(path);
        const prop = formatTokenName(path.slice(1));
        const token2 = {
          name,
          value: name,
          originalValue: name,
          path,
          extensions: {
            condition: "base",
            originalPath: path,
            category: "colors",
            prop,
            virtual: true
          }
        };
        registerToken(token2, "pre");
      });
    }
  };
  var removeEmptyTokens = {
    enforce: "post",
    transform(dictionary) {
      dictionary.allTokens = dictionary.allTokens.filter(
        (token2) => token2.value !== ""
      );
    }
  };
  var tokenMiddlewares = [
    addNegativeTokens,
    addVirtualPalette,
    addPixelUnit,
    removeEmptyTokens
  ];

  // node_modules/@chakra-ui/react/dist/esm/styled-system/token-transforms.js
  var addCssVariables = {
    type: "extensions",
    enforce: "pre",
    name: "tokens/css-var",
    transform(token2, dictionary) {
      const { prefix: prefix2, formatCssVar } = dictionary;
      const { negative, originalPath } = token2.extensions;
      const path = negative ? originalPath : token2.path;
      return {
        cssVar: formatCssVar(path.filter(Boolean), prefix2)
      };
    }
  };
  var addConditionalCssVariables = {
    enforce: "post",
    type: "value",
    name: "tokens/conditionals",
    transform(token2, dictionary) {
      const { prefix: prefix2, formatCssVar } = dictionary;
      const refs = getReferences(token2.value);
      if (!refs.length) return token2.value;
      refs.forEach((ref) => {
        const variable = formatCssVar(ref.split("."), prefix2);
        token2.value = token2.value.replace(`{${variable.ref}}`, variable);
      });
      return token2.value;
    }
  };
  var addColorPalette = {
    type: "extensions",
    enforce: "pre",
    name: "tokens/colors/colorPalette",
    match(token2) {
      return token2.extensions.category === "colors" && !token2.extensions.virtual;
    },
    transform(token2, dict) {
      let path = token2.path.slice();
      path.pop();
      path.shift();
      if (path.length === 0) {
        const newPath = [...token2.path];
        newPath.shift();
        path = newPath;
      }
      if (path.length === 0) {
        return {};
      }
      const roots = path.reduce((acc, _2, i2, arr) => {
        const next3 = arr.slice(0, i2 + 1);
        acc.push(next3);
        return acc;
      }, []);
      const root = path[0];
      const value = dict.formatTokenName(path);
      const keys = token2.path.slice(token2.path.indexOf(root) + 1).reduce((acc, _2, i2, arr) => {
        acc.push(arr.slice(i2));
        return acc;
      }, []);
      if (keys.length === 0) {
        keys.push([""]);
      }
      return {
        colorPalette: { value, roots, keys }
      };
    }
  };
  var tokenTransforms = [
    addCssVariables,
    addConditionalCssVariables,
    addColorPalette
  ];

  // node_modules/@chakra-ui/react/dist/esm/styled-system/token-dictionary.js
  var isToken = (value) => {
    return isObject(value) && Object.prototype.hasOwnProperty.call(value, "value");
  };
  function expandBreakpoints(breakpoints2) {
    if (!breakpoints2) return { breakpoints: {}, sizes: {} };
    return {
      breakpoints: mapObject(breakpoints2, (value) => ({ value })),
      sizes: Object.fromEntries(
        Object.entries(breakpoints2).map(([key, value]) => [
          `breakpoint-${key}`,
          { value }
        ])
      )
    };
  }
  function createTokenDictionary(options) {
    const {
      prefix: prefix2 = "",
      tokens: tokens2 = {},
      semanticTokens: semanticTokens2 = {},
      breakpoints: breakpoints2 = {}
    } = options;
    const formatTokenName = (path) => path.join(".");
    const formatCssVar = (path, prefix22) => cssVar(path.join("-"), { prefix: prefix22 });
    const allTokens = [];
    const tokenNameMap = /* @__PURE__ */ new Map();
    const conditionMap = /* @__PURE__ */ new Map();
    const cssVarMap = /* @__PURE__ */ new Map();
    const colorPaletteMap = /* @__PURE__ */ new Map();
    const flatMap2 = /* @__PURE__ */ new Map();
    const byCategory = /* @__PURE__ */ new Map();
    const categoryMap = /* @__PURE__ */ new Map();
    const transforms = /* @__PURE__ */ new Map();
    const middlewares = [];
    function registerToken(token2, phase) {
      allTokens.push(token2);
      tokenNameMap.set(token2.name, token2);
      if (phase) {
        transforms.forEach((fn) => {
          if (fn.enforce === phase) transformToken(fn, token2);
        });
      }
    }
    const breakpointTokens = expandBreakpoints(breakpoints2);
    const computedTokens = compact({
      ...tokens2,
      breakpoints: breakpointTokens.breakpoints,
      sizes: {
        ...tokens2.sizes,
        ...breakpointTokens.sizes
      }
    });
    function registerTokens() {
      walkObject(
        computedTokens,
        (entry, path) => {
          const isDefault = path.includes("DEFAULT");
          path = filterDefault(path);
          const category = path[0];
          const name = formatTokenName(path);
          const t3 = isString(entry) ? { value: entry } : entry;
          const token2 = {
            value: t3.value,
            originalValue: t3.value,
            name,
            path,
            extensions: {
              condition: "base",
              originalPath: path,
              category,
              prop: formatTokenName(path.slice(1))
            }
          };
          if (isDefault) {
            token2.extensions.default = true;
          }
          registerToken(token2);
        },
        { stop: isToken }
      );
      walkObject(
        semanticTokens2,
        (entry, path) => {
          const isDefault = path.includes("DEFAULT");
          path = filterBaseCondition(filterDefault(path));
          const category = path[0];
          const name = formatTokenName(path);
          const t3 = isString(entry.value) ? { value: { base: entry.value } } : entry;
          const token2 = {
            value: t3.value.base || "",
            originalValue: t3.value.base || "",
            name,
            path,
            extensions: {
              originalPath: path,
              category,
              conditions: t3.value,
              condition: "base",
              prop: formatTokenName(path.slice(1))
            }
          };
          if (isDefault) {
            token2.extensions.default = true;
          }
          registerToken(token2);
        },
        { stop: isToken }
      );
    }
    function getByName(name) {
      return tokenNameMap.get(name);
    }
    function buildConditionMap(token2) {
      const { condition } = token2.extensions;
      if (!condition) return;
      if (!conditionMap.has(condition)) {
        conditionMap.set(condition, /* @__PURE__ */ new Set());
      }
      conditionMap.get(condition).add(token2);
    }
    function buildCategoryMap(token2) {
      const { category, prop } = token2.extensions;
      if (!category) return;
      if (!categoryMap.has(category)) {
        categoryMap.set(category, /* @__PURE__ */ new Map());
      }
      categoryMap.get(category).set(prop, token2);
    }
    function buildCssVars(token2) {
      const { condition, negative, virtual, cssVar: cssVar2 } = token2.extensions;
      if (negative || virtual || !condition || !cssVar2) return;
      if (!cssVarMap.has(condition)) {
        cssVarMap.set(condition, /* @__PURE__ */ new Map());
      }
      cssVarMap.get(condition).set(cssVar2.var, token2.value);
    }
    function buildFlatMap(token2) {
      const { category, prop, cssVar: cssVar2, negative } = token2.extensions;
      if (!category) return;
      if (!byCategory.has(category)) {
        byCategory.set(category, /* @__PURE__ */ new Map());
      }
      const value = negative ? token2.extensions.conditions ? token2.originalValue : token2.value : cssVar2.ref;
      byCategory.get(category).set(prop, value);
      flatMap2.set([category, prop].join("."), value);
    }
    function buildColorPalette(token2) {
      const { colorPalette, virtual, default: isDefault } = token2.extensions;
      if (!colorPalette || virtual) return;
      colorPalette.roots.forEach((root) => {
        const name = formatTokenName(root);
        if (!colorPaletteMap.has(name)) {
          colorPaletteMap.set(name, /* @__PURE__ */ new Map());
        }
        const virtualPath = replaceRootWithColorPalette(
          [...token2.path],
          [...root]
        );
        const virtualName = formatTokenName(virtualPath);
        const virtualToken = getByName(virtualName);
        if (!virtualToken || !virtualToken.extensions.cssVar) return;
        const { var: virtualVar } = virtualToken.extensions.cssVar;
        colorPaletteMap.get(name).set(virtualVar, token2.extensions.cssVar.ref);
        if (isDefault && root.length === 1) {
          const colorPaletteName = formatTokenName(["colors", "colorPalette"]);
          const colorPaletteToken = getByName(colorPaletteName);
          if (!colorPaletteToken) return;
          const name2 = formatTokenName(token2.path);
          const virtualToken2 = getByName(name2);
          if (!virtualToken2) return;
          const keyPath = colorPalette.keys[0]?.filter(Boolean);
          if (!keyPath.length) return;
          const computedName = formatTokenName(root.concat(keyPath));
          if (!colorPaletteMap.has(computedName)) {
            colorPaletteMap.set(computedName, /* @__PURE__ */ new Map());
          }
          colorPaletteMap.get(computedName).set(
            colorPaletteToken.extensions.cssVar.var,
            virtualToken2.extensions.cssVar.ref
          );
        }
      });
    }
    let byCategoryJson = {};
    function setupViews() {
      allTokens.forEach((token2) => {
        buildConditionMap(token2);
        buildCategoryMap(token2);
        buildCssVars(token2);
        buildFlatMap(token2);
        buildColorPalette(token2);
      });
      byCategoryJson = mapToJson(byCategory);
    }
    const colorMix2 = (value, tokenFn) => {
      if (!value || typeof value !== "string") return { invalid: true, value };
      const [colorPath, rawOpacity] = value.split("/");
      if (!colorPath || !rawOpacity) {
        return { invalid: true, value: colorPath };
      }
      const colorToken = tokenFn(colorPath);
      const opacityToken = getByName(`opacity.${rawOpacity}`)?.value;
      if (!opacityToken && isNaN(Number(rawOpacity))) {
        return { invalid: true, value: colorPath };
      }
      const percent = opacityToken ? Number(opacityToken) * 100 + "%" : `${rawOpacity}%`;
      const color = colorToken ?? colorPath;
      return {
        invalid: false,
        color,
        value: `color-mix(in srgb, ${color} ${percent}, transparent)`
      };
    };
    const getVar = memo5((value, fallback3) => {
      return flatMap2.get(value) ?? fallback3;
    });
    const getCategoryValues = memo5((category) => {
      return byCategoryJson[category] || null;
    });
    const expandReferenceInValue = memo5((value) => {
      return expandTokenReferences(value, (path) => {
        if (!path) return;
        if (path.includes("/")) {
          const mix = colorMix2(path, (v) => getVar(v));
          if (mix.invalid) {
            throw new Error("Invalid color mix at " + path + ": " + mix.value);
          }
          return mix.value;
        }
        const resolved = getVar(path);
        if (resolved) return resolved;
        return TOKEN_PATH_REGEX.test(path) ? esc2(path) : path;
      });
    });
    const dictionary = {
      prefix: prefix2,
      allTokens,
      tokenMap: tokenNameMap,
      registerToken,
      getByName,
      formatTokenName,
      formatCssVar,
      flatMap: flatMap2,
      cssVarMap,
      categoryMap,
      colorPaletteMap,
      getVar,
      getCategoryValues,
      expandReferenceInValue
    };
    function registerTransform(...fns) {
      fns.forEach((fn) => {
        transforms.set(fn.name, fn);
      });
    }
    function registerMiddleware(...fns) {
      middlewares.push(...fns);
    }
    function transformToken(transform, token2) {
      if (token2.extensions.references) return;
      if (isFunction(transform.match) && !transform.match(token2)) return;
      const fn = (v) => transform.transform(v, dictionary);
      const transformed = fn(token2);
      switch (true) {
        case transform.type === "extensions":
          Object.assign(token2.extensions, transformed);
          break;
        case transform.type === "value":
          token2.value = transformed;
          break;
        default:
          token2[transform.type] = transformed;
          break;
      }
    }
    function applyMiddlewares(enforce) {
      middlewares.forEach((middleware2) => {
        if (middleware2.enforce === enforce) {
          middleware2.transform(dictionary);
        }
      });
    }
    function applyTransforms(enforce) {
      transforms.forEach((transform) => {
        if (transform.enforce === enforce) {
          allTokens.forEach((token2) => {
            transformToken(transform, token2);
          });
        }
      });
    }
    function addConditionalTokens() {
      allTokens.forEach((token2) => {
        const tokens22 = getConditionalTokens(token2);
        if (!tokens22 || tokens22.length === 0) return;
        tokens22.forEach((token22) => {
          registerToken(token22);
        });
      });
    }
    function getTokenReferences(value) {
      const refs = getReferences(value);
      return refs.map((ref) => getByName(ref)).filter(Boolean);
    }
    function addReferences() {
      allTokens.forEach((token2) => {
        if (!hasReference(token2.value)) return;
        const references = getTokenReferences(token2.value);
        token2.extensions.references = references.reduce((acc, ref) => {
          acc[ref.name] = ref;
          return acc;
        }, {});
      });
    }
    function expandTokenReferences$1() {
      allTokens.forEach((token2) => {
        expandReferences(token2);
      });
    }
    function build2() {
      applyMiddlewares("pre");
      applyTransforms("pre");
      addConditionalTokens();
      addReferences();
      expandTokenReferences$1();
      applyMiddlewares("post");
      applyTransforms("post");
      setupViews();
    }
    registerTokens();
    registerTransform(...tokenTransforms);
    registerMiddleware(...tokenMiddlewares);
    build2();
    return dictionary;
  }
  function filterDefault(path) {
    if (path[0] === "DEFAULT") return path;
    return path.filter((item) => item !== "DEFAULT");
  }
  function filterBaseCondition(path) {
    return path.filter((item) => item !== "base");
  }
  function getConditionalTokens(token2) {
    if (!token2.extensions.conditions) return;
    const { conditions } = token2.extensions;
    const tokens2 = [];
    walkObject(conditions, (value, path) => {
      const nextPath = filterBaseCondition(path);
      if (!nextPath.length) return;
      const nextToken = structuredClone(token2);
      nextToken.value = value;
      nextToken.extensions.condition = nextPath.join(":");
      tokens2.push(nextToken);
    });
    return tokens2;
  }
  function replaceRootWithColorPalette(path, roots) {
    const startIndex = path.findIndex(
      (_2, index) => roots.every(
        (rootElement, rootIndex) => path[index + rootIndex] === rootElement
      )
    );
    if (startIndex === -1) {
      return path;
    }
    path.splice(startIndex, roots.length);
    path.splice(startIndex, 0, "colorPalette");
    return path;
  }
  var tokenCategories = createProps2()([
    "aspectRatios",
    "zIndex",
    "opacity",
    "colors",
    "fonts",
    "fontSizes",
    "fontWeights",
    "lineHeights",
    "letterSpacings",
    "sizes",
    "shadows",
    "spacing",
    "radii",
    "cursor",
    "borders",
    "borderWidths",
    "borderStyles",
    "durations",
    "easings",
    "animations",
    "blurs",
    "gradients",
    "breakpoints",
    "assets"
  ]);

  // node_modules/@chakra-ui/react/dist/esm/styled-system/utility.js
  function normalize2(config) {
    return config;
  }
  function normalizeConfig(config) {
    return Object.fromEntries(
      Object.entries(config).map(([property, propertyConfig]) => {
        return [property, normalize2(propertyConfig)];
      })
    );
  }
  function createUtility(options) {
    const configs = normalizeConfig(options.config);
    const tokens2 = options.tokens;
    const shorthands = /* @__PURE__ */ new Map();
    const propValues = /* @__PURE__ */ new Map();
    function register(property, config) {
      configs[property] = normalize2(config);
      assignProperty(property, config);
    }
    const assignProperty = (property, config) => {
      const values = getPropertyValues(config);
      if (!values) return;
      propValues.set(property, values);
      assignPropertyType(property, config);
    };
    const assignProperties = () => {
      for (const [prop, config] of Object.entries(configs)) {
        if (!config) continue;
        assignProperty(prop, config);
      }
    };
    const assignShorthands = () => {
      for (const [property, config] of Object.entries(configs)) {
        const { shorthand } = config ?? {};
        if (!shorthand) continue;
        const values = Array.isArray(shorthand) ? shorthand : [shorthand];
        values.forEach((name) => shorthands.set(name, property));
      }
    };
    const assignColorPaletteProperty = () => {
      const values = mapToJson(tokens2.colorPaletteMap);
      register("colorPalette", {
        values: Object.keys(values),
        transform: memo5((value) => values[value])
      });
    };
    const propTypes = /* @__PURE__ */ new Map();
    const assignPropertyType = (property, config) => {
      if (!config) return;
      const values = getPropertyValues(config, (key) => `type:Tokens["${key}"]`);
      if (typeof values === "object" && values.type) {
        propTypes.set(property, /* @__PURE__ */ new Set([`type:${values.type}`]));
        return;
      }
      if (values) {
        const keys2 = new Set(Object.keys(values));
        propTypes.set(property, keys2);
      }
      const set = propTypes.get(property) ?? /* @__PURE__ */ new Set();
      if (config.property) {
        propTypes.set(property, set.add(`CssProperties["${config.property}"]`));
      }
    };
    const assignPropertyTypes = () => {
      for (const [property, propertyConfig] of Object.entries(configs)) {
        if (!propertyConfig) continue;
        assignPropertyType(property, propertyConfig);
      }
    };
    const addPropertyType = (property, type) => {
      const set = propTypes.get(property) ?? /* @__PURE__ */ new Set();
      propTypes.set(property, /* @__PURE__ */ new Set([...set, ...type]));
    };
    const getTypes = () => {
      const map2 = /* @__PURE__ */ new Map();
      for (const [prop, values] of propTypes.entries()) {
        if (values.size === 0) {
          map2.set(prop, ["string"]);
          continue;
        }
        const typeValues = Array.from(values).map((key) => {
          if (key.startsWith("CssProperties")) return key;
          if (key.startsWith("type:")) return key.replace("type:", "");
          return JSON.stringify(key);
        });
        map2.set(prop, typeValues);
      }
      return map2;
    };
    const getPropertyValues = (config, resolveFn) => {
      const { values } = config;
      const fn = (key) => {
        const value = resolveFn?.(key);
        return value ? { [value]: value } : void 0;
      };
      if (isString(values)) {
        return fn?.(values) ?? tokens2.getCategoryValues(values) ?? {};
      }
      if (Array.isArray(values)) {
        return values.reduce((result, value) => {
          result[value] = value;
          return result;
        }, {});
      }
      if (isFunction(values)) {
        return values(resolveFn ? fn : tokens2.getCategoryValues);
      }
      return values;
    };
    const defaultTransform = memo5((prop, value) => {
      return {
        [prop]: prop.startsWith("--") ? tokens2.getVar(value, value) : value
      };
    });
    const tokenFn = Object.assign(tokens2.getVar, {
      raw: (path) => tokens2.getByName(path)
    });
    const transform = memo5((prop, raw) => {
      const key = resolveShorthand(prop);
      if (isString(raw) && !raw.includes("_EMO_")) {
        raw = tokens2.expandReferenceInValue(raw);
      }
      const config = configs[key];
      if (!config) {
        return defaultTransform(key, raw);
      }
      const value = propValues.get(key)?.[raw];
      if (!config.transform) {
        return defaultTransform(prop, value ?? raw);
      }
      const _colorMix = (value2) => colorMix(value2, tokenFn);
      return config.transform(value ?? raw, {
        raw,
        token: tokenFn,
        utils: { colorMix: _colorMix }
      });
    });
    function build2() {
      assignShorthands();
      assignColorPaletteProperty();
      assignProperties();
      assignPropertyTypes();
    }
    build2();
    const hasShorthand = shorthands.size > 0;
    const resolveShorthand = memo5((prop) => {
      return shorthands.get(prop) ?? prop;
    });
    const keys = () => {
      return [...Array.from(shorthands.keys()), ...Object.keys(configs)];
    };
    const instance = {
      keys,
      hasShorthand,
      transform,
      shorthands,
      resolveShorthand,
      register,
      getTypes,
      addPropertyType
    };
    return instance;
  }

  // node_modules/@chakra-ui/react/dist/esm/styled-system/system.js
  var EMPTY_OBJECT = {};
  function createSystem(...configs) {
    const config = mergeConfigs(...configs);
    const {
      theme = {},
      utilities = {},
      globalCss: globalCss2 = {},
      cssVarsRoot: cssVarsRoot2 = ":where(:root, :host)",
      cssVarsPrefix: cssVarsPrefix2 = "chakra",
      preflight
    } = config;
    const layers = createLayers(config);
    const tokens2 = createTokenDictionary({
      breakpoints: theme.breakpoints,
      tokens: theme.tokens,
      semanticTokens: theme.semanticTokens,
      prefix: cssVarsPrefix2
    });
    const breakpoints2 = createBreakpoints(theme.breakpoints ?? EMPTY_OBJECT);
    const conditions = createConditions({
      conditions: config.conditions ?? EMPTY_OBJECT,
      breakpoints: breakpoints2
    });
    const utility = createUtility({
      config: utilities,
      tokens: tokens2
    });
    function assignComposition() {
      const { textStyles: textStyles2, layerStyles: layerStyles2, animationStyles: animationStyles2 } = theme;
      const compositions = compact({
        textStyle: textStyles2,
        layerStyle: layerStyles2,
        animationStyle: animationStyles2
      });
      for (const [key, values] of Object.entries(compositions)) {
        const flatValues = flatten2(values ?? EMPTY_OBJECT, stop);
        utility.register(key, {
          values: Object.keys(flatValues),
          transform(value) {
            return css2(flatValues[value]);
          }
        });
      }
    }
    assignComposition();
    utility.addPropertyType(
      "animationName",
      Object.keys(theme.keyframes ?? EMPTY_OBJECT)
    );
    const properties2 = /* @__PURE__ */ new Set(["css", ...utility.keys(), ...conditions.keys()]);
    const isValidProperty = memo5(
      (prop) => properties2.has(prop) || isCssProperty(prop)
    );
    const normalizeValue = (value) => {
      if (Array.isArray(value)) {
        return value.reduce((acc, current, index) => {
          const key = conditions.breakpoints[index];
          if (current != null) acc[key] = current;
          return acc;
        }, {});
      }
      return value;
    };
    const normalizeFn = createNormalizeFn({
      utility,
      normalize: normalizeValue
    });
    const serialize3 = createSerializeFn({
      conditions,
      isValidProperty
    });
    const css2 = createCssFn({
      transform: utility.transform,
      conditions,
      normalize: normalizeFn
    });
    const cva = createRecipeFn({
      css: css2,
      conditions,
      normalize: normalizeFn,
      layers
    });
    const sva = createSlotRecipeFn({ cva });
    function getTokenCss() {
      const result = {};
      for (const [key, values] of tokens2.cssVarMap.entries()) {
        const varsObj = Object.fromEntries(values);
        if (Object.keys(varsObj).length === 0) continue;
        const selector = key === "base" ? cssVarsRoot2 : conditions.resolve(key);
        const isAtRule = selector.startsWith("@");
        const cssObject = css2(
          serialize3({
            [selector]: isAtRule ? { [cssVarsRoot2]: varsObj } : varsObj
          })
        );
        mergeWith(result, cssObject);
      }
      return layers.wrap("tokens", result);
    }
    function getGlobalCss() {
      const keyframes2 = Object.fromEntries(
        Object.entries(theme.keyframes ?? EMPTY_OBJECT).map(([key, value]) => [
          `@keyframes ${key}`,
          value
        ])
      );
      const result = Object.assign({}, keyframes2, css2(serialize3(globalCss2)));
      return layers.wrap("base", result);
    }
    function splitCssProps(props26) {
      return splitProps(props26, isValidProperty);
    }
    function getPreflightCss() {
      const result = createPreflight({ preflight });
      return layers.wrap("reset", result);
    }
    const tokenMap = getTokenMap(tokens2);
    const tokenFn = (path, fallback3) => {
      return tokenMap.get(path)?.value || fallback3;
    };
    tokenFn.var = (path, fallback3) => {
      return tokenMap.get(path)?.variable || fallback3;
    };
    function getRecipe(key, fallback3) {
      return theme.recipes?.[key] ?? fallback3;
    }
    function getSlotRecipe(key, fallback3) {
      return theme.slotRecipes?.[key] ?? fallback3;
    }
    function isRecipe(key) {
      return Object.hasOwnProperty.call(theme.recipes ?? EMPTY_OBJECT, key);
    }
    function isSlotRecipe(key) {
      return Object.hasOwnProperty.call(theme.slotRecipes ?? EMPTY_OBJECT, key);
    }
    function hasRecipe(key) {
      return isRecipe(key) || isSlotRecipe(key);
    }
    const _global = [getPreflightCss(), getGlobalCss(), getTokenCss()];
    const query2 = {
      layerStyles: compositionQuery(theme.layerStyles ?? EMPTY_OBJECT),
      textStyles: compositionQuery(theme.textStyles ?? EMPTY_OBJECT),
      animationStyles: compositionQuery(theme.animationStyles ?? EMPTY_OBJECT),
      tokens: semanticTokenQuery(
        tokens2,
        Object.keys(theme.tokens ?? EMPTY_OBJECT),
        (value, key) => !value.extensions.conditions && !key.includes("colorPalette")
      ),
      semanticTokens: semanticTokenQuery(
        tokens2,
        Object.keys(theme.semanticTokens ?? EMPTY_OBJECT),
        (value) => !!value.extensions.conditions
      ),
      keyframes: basicQuery(theme.keyframes ?? EMPTY_OBJECT),
      breakpoints: basicQuery(theme.breakpoints ?? EMPTY_OBJECT)
    };
    return {
      $$chakra: true,
      _config: config,
      _global,
      breakpoints: breakpoints2,
      tokens: tokens2,
      conditions,
      utility,
      token: tokenFn,
      properties: properties2,
      layers,
      isValidProperty,
      splitCssProps,
      normalizeValue,
      getTokenCss,
      getGlobalCss,
      getPreflightCss,
      css: css2,
      cva,
      sva,
      getRecipe,
      getSlotRecipe,
      hasRecipe,
      isRecipe,
      isSlotRecipe,
      query: query2
    };
  }
  function getTokenMap(tokens2) {
    const map2 = /* @__PURE__ */ new Map();
    tokens2.allTokens.forEach((token2) => {
      const { cssVar: cssVar2, virtual, conditions } = token2.extensions;
      const value = !!conditions || virtual ? cssVar2.ref : token2.value;
      map2.set(token2.name, { value, variable: cssVar2.ref });
    });
    return map2;
  }
  var stop = (v) => isObject(v) && "value" in v;
  var compositionQuery = (dict) => ({
    list() {
      return Object.keys(flatten2(dict, stop));
    },
    search(query2) {
      return this.list().filter((style) => style.includes(query2));
    }
  });
  var semanticTokenQuery = (tokens2, categoryKeys, predicate) => ({
    categoryKeys,
    list(category) {
      return Array.from(tokens2.categoryMap.get(category)?.entries() ?? []).reduce(
        (acc, [key, value]) => {
          if (predicate(value, key)) acc.push(key);
          return acc;
        },
        []
      );
    },
    search(category, query2) {
      return this.list(category).filter((style) => style.includes(query2));
    }
  });
  var basicQuery = (dict) => ({
    list() {
      return Object.keys(dict);
    },
    search(query2) {
      return this.list().filter((style) => style.includes(query2));
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/breakpoints.js
  var breakpoints = {
    sm: "480px",
    md: "768px",
    lg: "1024px",
    xl: "1280px",
    "2xl": "1536px"
  };

  // node_modules/@chakra-ui/react/dist/esm/theme/global-css.js
  var empty = "var(--chakra-empty,/*!*/ /*!*/)";
  var globalCss = defineGlobalStyles({
    "*": {
      fontFeatureSettings: '"cv11"',
      "--ring-inset": empty,
      "--ring-offset-width": "0px",
      "--ring-offset-color": "#fff",
      "--ring-color": "rgba(66, 153, 225, 0.6)",
      "--ring-offset-shadow": "0 0 #0000",
      "--ring-shadow": "0 0 #0000",
      ...Object.fromEntries(
        [
          "brightness",
          "contrast",
          "grayscale",
          "hue-rotate",
          "invert",
          "saturate",
          "sepia",
          "drop-shadow"
        ].map((prop) => [`--${prop}`, empty])
      ),
      ...Object.fromEntries(
        [
          "blur",
          "brightness",
          "contrast",
          "grayscale",
          "hue-rotate",
          "invert",
          "opacity",
          "saturate",
          "sepia"
        ].map((prop) => [`--backdrop-${prop}`, empty])
      ),
      "--global-font-mono": "fonts.mono",
      "--global-font-body": "fonts.body",
      "--global-color-border": "colors.border"
    },
    html: {
      color: "fg",
      bg: "bg",
      lineHeight: "1.5",
      colorPalette: "gray"
    },
    "*::placeholder, *[data-placeholder]": {
      color: "fg.muted/80"
    },
    "*::selection": {
      bg: "colorPalette.emphasized/80"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/layer-styles.js
  var layerStyles = defineLayerStyles({
    // fill: some background color + color combination
    "fill.muted": {
      value: {
        background: "colorPalette.muted",
        color: "colorPalette.fg"
      }
    },
    "fill.subtle": {
      value: {
        background: "colorPalette.subtle",
        color: "colorPalette.fg"
      }
    },
    "fill.surface": {
      value: {
        background: "colorPalette.subtle",
        color: "colorPalette.fg",
        boxShadow: "0 0 0px 1px var(--shadow-color)",
        boxShadowColor: "colorPalette.muted"
      }
    },
    "fill.solid": {
      value: {
        background: "colorPalette.solid",
        color: "colorPalette.contrast"
      }
    },
    // outline: some border color + color combination
    "outline.subtle": {
      value: {
        color: "colorPalette.fg",
        boxShadow: "inset 0 0 0px 1px var(--shadow-color)",
        boxShadowColor: "colorPalette.subtle"
      }
    },
    "outline.solid": {
      value: {
        borderWidth: "1px",
        borderColor: "colorPalette.solid",
        color: "colorPalette.fg"
      }
    },
    // indicator: floating border color or left/bottom border
    "indicator.bottom": {
      value: {
        position: "relative",
        "--indicator-color-fallback": "colors.colorPalette.solid",
        _before: {
          content: `""`,
          position: "absolute",
          bottom: "var(--indicator-offset-y, 0)",
          insetInline: "var(--indicator-offset-x, 0)",
          height: "var(--indicator-thickness, 2px)",
          background: "var(--indicator-color, var(--indicator-color-fallback))"
        }
      }
    },
    "indicator.top": {
      value: {
        position: "relative",
        "--indicator-color-fallback": "colors.colorPalette.solid",
        _before: {
          content: `""`,
          position: "absolute",
          top: "var(--indicator-offset-y, 0)",
          insetInline: "var(--indicator-offset-x, 0)",
          height: "var(--indicator-thickness, 2px)",
          background: "var(--indicator-color, var(--indicator-color-fallback))"
        }
      }
    },
    "indicator.start": {
      value: {
        position: "relative",
        "--indicator-color-fallback": "colors.colorPalette.solid",
        _before: {
          content: `""`,
          position: "absolute",
          insetInlineStart: "var(--indicator-offset-x, 0)",
          insetBlock: "var(--indicator-offset-y, 0)",
          width: "var(--indicator-thickness, 2px)",
          background: "var(--indicator-color, var(--indicator-color-fallback))"
        }
      }
    },
    "indicator.end": {
      value: {
        position: "relative",
        "--indicator-color-fallback": "colors.colorPalette.solid",
        _before: {
          content: `""`,
          position: "absolute",
          insetInlineEnd: "var(--indicator-offset-x, 0)",
          insetBlock: "var(--indicator-offset-y, 0)",
          width: "var(--indicator-thickness, 2px)",
          background: "var(--indicator-color, var(--indicator-color-fallback))"
        }
      }
    },
    disabled: {
      value: {
        opacity: "0.5",
        cursor: "not-allowed"
      }
    },
    none: {
      value: {}
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/motion-styles.js
  var animationStyles = defineAnimationStyles({
    "slide-fade-in": {
      value: {
        transformOrigin: "var(--transform-origin)",
        "&[data-placement^=top]": {
          animationName: "slide-from-bottom, fade-in"
        },
        "&[data-placement^=bottom]": {
          animationName: "slide-from-top, fade-in"
        },
        "&[data-placement^=left]": {
          animationName: "slide-from-right, fade-in"
        },
        "&[data-placement^=right]": {
          animationName: "slide-from-left, fade-in"
        }
      }
    },
    "slide-fade-out": {
      value: {
        transformOrigin: "var(--transform-origin)",
        "&[data-placement^=top]": {
          animationName: "slide-to-bottom, fade-out"
        },
        "&[data-placement^=bottom]": {
          animationName: "slide-to-top, fade-out"
        },
        "&[data-placement^=left]": {
          animationName: "slide-to-right, fade-out"
        },
        "&[data-placement^=right]": {
          animationName: "slide-to-left, fade-out"
        }
      }
    },
    "scale-fade-in": {
      value: {
        transformOrigin: "var(--transform-origin)",
        animationName: "scale-in, fade-in"
      }
    },
    "scale-fade-out": {
      value: {
        transformOrigin: "var(--transform-origin)",
        animationName: "scale-out, fade-out"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/badge.js
  var badgeRecipe = defineRecipe({
    className: "chakra-badge",
    base: {
      display: "inline-flex",
      alignItems: "center",
      borderRadius: "l2",
      gap: "1",
      fontWeight: "medium",
      fontVariantNumeric: "tabular-nums",
      whiteSpace: "nowrap",
      userSelect: "none"
    },
    variants: {
      variant: {
        solid: {
          bg: "colorPalette.solid",
          color: "colorPalette.contrast"
        },
        subtle: {
          bg: "colorPalette.subtle",
          color: "colorPalette.fg"
        },
        outline: {
          color: "colorPalette.fg",
          shadow: "inset 0 0 0px 1px var(--shadow-color)",
          shadowColor: "colorPalette.muted"
        },
        surface: {
          bg: "colorPalette.subtle",
          color: "colorPalette.fg",
          shadow: "inset 0 0 0px 1px var(--shadow-color)",
          shadowColor: "colorPalette.muted"
        },
        plain: {
          color: "colorPalette.fg"
        }
      },
      size: {
        xs: {
          textStyle: "2xs",
          px: "1",
          minH: "4"
        },
        sm: {
          textStyle: "xs",
          px: "1.5",
          minH: "5"
        },
        md: {
          textStyle: "sm",
          px: "2",
          minH: "6"
        },
        lg: {
          textStyle: "sm",
          px: "2.5",
          minH: "7"
        }
      }
    },
    defaultVariants: {
      variant: "subtle",
      size: "sm"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/button.js
  var buttonRecipe = defineRecipe({
    className: "chakra-button",
    base: {
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      userSelect: "none",
      position: "relative",
      borderRadius: "l2",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      borderWidth: "1px",
      borderColor: "transparent",
      cursor: "button",
      flexShrink: "0",
      outline: "0",
      lineHeight: "1.2",
      isolation: "isolate",
      fontWeight: "medium",
      transitionProperty: "common",
      transitionDuration: "moderate",
      focusVisibleRing: "outside",
      _disabled: {
        layerStyle: "disabled"
      },
      _icon: {
        flexShrink: "0"
      }
    },
    variants: {
      size: {
        "2xs": {
          h: "6",
          minW: "6",
          textStyle: "xs",
          px: "2",
          gap: "1",
          _icon: {
            width: "3.5",
            height: "3.5"
          }
        },
        xs: {
          h: "8",
          minW: "8",
          textStyle: "xs",
          px: "2.5",
          gap: "1",
          _icon: {
            width: "4",
            height: "4"
          }
        },
        sm: {
          h: "9",
          minW: "9",
          px: "3.5",
          textStyle: "sm",
          gap: "2",
          _icon: {
            width: "4",
            height: "4"
          }
        },
        md: {
          h: "10",
          minW: "10",
          textStyle: "sm",
          px: "4",
          gap: "2",
          _icon: {
            width: "5",
            height: "5"
          }
        },
        lg: {
          h: "11",
          minW: "11",
          textStyle: "md",
          px: "5",
          gap: "3",
          _icon: {
            width: "5",
            height: "5"
          }
        },
        xl: {
          h: "12",
          minW: "12",
          textStyle: "md",
          px: "5",
          gap: "2.5",
          _icon: {
            width: "5",
            height: "5"
          }
        },
        "2xl": {
          h: "16",
          minW: "16",
          textStyle: "lg",
          px: "7",
          gap: "3",
          _icon: {
            width: "6",
            height: "6"
          }
        }
      },
      variant: {
        solid: {
          bg: "colorPalette.solid",
          color: "colorPalette.contrast",
          borderColor: "transparent",
          _hover: {
            bg: "colorPalette.solid/90"
          },
          _expanded: {
            bg: "colorPalette.solid/90"
          }
        },
        subtle: {
          bg: "colorPalette.subtle",
          color: "colorPalette.fg",
          borderColor: "transparent",
          _hover: {
            bg: "colorPalette.muted"
          },
          _expanded: {
            bg: "colorPalette.muted"
          }
        },
        surface: {
          bg: "colorPalette.subtle",
          color: "colorPalette.fg",
          shadow: "0 0 0px 1px var(--shadow-color)",
          shadowColor: "colorPalette.muted",
          _hover: {
            bg: "colorPalette.muted"
          },
          _expanded: {
            bg: "colorPalette.muted"
          }
        },
        outline: {
          borderWidth: "1px",
          borderColor: "colorPalette.muted",
          color: "colorPalette.fg",
          _hover: {
            bg: "colorPalette.subtle"
          },
          _expanded: {
            bg: "colorPalette.subtle"
          }
        },
        ghost: {
          bg: "transparent",
          color: "colorPalette.fg",
          _hover: {
            bg: "colorPalette.subtle"
          },
          _expanded: {
            bg: "colorPalette.subtle"
          }
        },
        plain: {
          color: "colorPalette.fg"
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "solid"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/checkmark.js
  var checkmarkRecipe = defineRecipe({
    className: "chakra-checkmark",
    base: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: "0",
      color: "white",
      borderWidth: "1px",
      borderColor: "transparent",
      borderRadius: "l1",
      cursor: "checkbox",
      focusVisibleRing: "outside",
      _icon: {
        boxSize: "full"
      },
      _invalid: {
        colorPalette: "red",
        borderColor: "border.error"
      },
      _disabled: {
        opacity: "0.5",
        cursor: "disabled"
      }
    },
    variants: {
      size: {
        xs: {
          boxSize: "3"
        },
        sm: {
          boxSize: "4"
        },
        md: {
          boxSize: "5",
          p: "0.5"
        },
        lg: {
          boxSize: "6",
          p: "0.5"
        }
      },
      variant: {
        solid: {
          borderColor: "border.emphasized",
          "&:is([data-state=checked], [data-state=indeterminate])": {
            bg: "colorPalette.solid",
            color: "colorPalette.contrast",
            borderColor: "colorPalette.solid"
          }
        },
        outline: {
          borderColor: "border",
          "&:is([data-state=checked], [data-state=indeterminate])": {
            color: "colorPalette.fg",
            borderColor: "colorPalette.solid"
          }
        },
        subtle: {
          bg: "colorPalette.muted",
          borderColor: "colorPalette.muted",
          "&:is([data-state=checked], [data-state=indeterminate])": {
            color: "colorPalette.fg"
          }
        },
        plain: {
          "&:is([data-state=checked], [data-state=indeterminate])": {
            color: "colorPalette.fg"
          }
        },
        inverted: {
          borderColor: "border",
          color: "colorPalette.fg",
          "&:is([data-state=checked], [data-state=indeterminate])": {
            borderColor: "colorPalette.solid"
          }
        }
      }
    },
    defaultVariants: {
      variant: "solid",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/code.js
  var { variants, defaultVariants } = badgeRecipe;
  var codeRecipe = defineRecipe({
    className: "chakra-code",
    base: {
      fontFamily: "mono",
      alignItems: "center",
      display: "inline-flex",
      borderRadius: "l2"
    },
    variants,
    defaultVariants
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/color-swatch.js
  var colorSwatchRecipe = defineRecipe({
    className: "color-swatch",
    base: {
      boxSize: "var(--swatch-size)",
      shadow: "inset 0 0 0 1px rgba(0, 0, 0, 0.1)",
      "--checker-size": "8px",
      "--checker-bg": "colors.bg",
      "--checker-fg": "colors.bg.emphasized",
      background: "linear-gradient(var(--color), var(--color)), repeating-conic-gradient(var(--checker-fg) 0%, var(--checker-fg) 25%, var(--checker-bg) 0%, var(--checker-bg) 50%) 0% 50% / var(--checker-size) var(--checker-size) !important",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: "0"
    },
    variants: {
      size: {
        "2xs": { "--swatch-size": "sizes.3.5" },
        xs: { "--swatch-size": "sizes.4" },
        sm: { "--swatch-size": "sizes.4.5" },
        md: { "--swatch-size": "sizes.5" },
        lg: { "--swatch-size": "sizes.6" },
        xl: { "--swatch-size": "sizes.7" },
        "2xl": { "--swatch-size": "sizes.8" },
        inherit: { "--swatch-size": "inherit" },
        full: { "--swatch-size": "100%" }
      },
      shape: {
        square: { borderRadius: "none" },
        circle: { borderRadius: "full" },
        rounded: { borderRadius: "l1" }
      }
    },
    defaultVariants: {
      size: "md",
      shape: "rounded"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/container.js
  var containerRecipe = defineRecipe({
    className: "chakra-container",
    base: {
      position: "relative",
      maxWidth: "8xl",
      w: "100%",
      mx: "auto",
      px: { base: "4", md: "6", lg: "8" }
    },
    variants: {
      centerContent: {
        true: {
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        }
      },
      fluid: {
        true: {
          maxWidth: "full"
        }
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/heading.js
  var headingRecipe = defineRecipe({
    className: "chakra-heading",
    base: {
      fontFamily: "heading",
      fontWeight: "semibold"
    },
    variants: {
      size: {
        xs: { textStyle: "xs" },
        sm: { textStyle: "sm" },
        md: { textStyle: "md" },
        lg: { textStyle: "lg" },
        xl: { textStyle: "xl" },
        "2xl": { textStyle: "2xl" },
        "3xl": { textStyle: "3xl" },
        "4xl": { textStyle: "4xl" },
        "5xl": { textStyle: "5xl" },
        "6xl": { textStyle: "6xl" },
        "7xl": { textStyle: "7xl" }
      }
    },
    defaultVariants: {
      size: "xl"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/icon.js
  var iconRecipe = defineRecipe({
    className: "chakra-icon",
    base: {
      display: "inline-block",
      lineHeight: "1em",
      flexShrink: "0",
      color: "currentcolor",
      verticalAlign: "middle"
    },
    variants: {
      size: {
        inherit: {},
        xs: { boxSize: "3" },
        sm: { boxSize: "4" },
        md: { boxSize: "5" },
        lg: { boxSize: "6" },
        xl: { boxSize: "7" },
        "2xl": { boxSize: "8" }
      }
    },
    defaultVariants: {
      size: "inherit"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/input.js
  var inputRecipe = defineRecipe({
    className: "chakra-input",
    base: {
      width: "100%",
      minWidth: "0",
      outline: "0",
      position: "relative",
      appearance: "none",
      textAlign: "start",
      borderRadius: "l2",
      _disabled: {
        layerStyle: "disabled"
      },
      height: "var(--input-height)",
      minW: "var(--input-height)",
      "--focus-color": "colors.colorPalette.focusRing",
      "--error-color": "colors.border.error",
      _invalid: {
        focusRingColor: "var(--error-color)",
        borderColor: "var(--error-color)"
      }
    },
    variants: {
      size: {
        "2xs": {
          textStyle: "xs",
          px: "2",
          "--input-height": "sizes.7"
        },
        xs: {
          textStyle: "xs",
          px: "2",
          "--input-height": "sizes.8"
        },
        sm: {
          textStyle: "sm",
          px: "2.5",
          "--input-height": "sizes.9"
        },
        md: {
          textStyle: "sm",
          px: "3",
          "--input-height": "sizes.10"
        },
        lg: {
          textStyle: "md",
          px: "4",
          "--input-height": "sizes.11"
        },
        xl: {
          textStyle: "md",
          px: "4.5",
          "--input-height": "sizes.12"
        },
        "2xl": {
          textStyle: "lg",
          px: "5",
          "--input-height": "sizes.16"
        }
      },
      variant: {
        outline: {
          bg: "transparent",
          borderWidth: "1px",
          borderColor: "border",
          focusVisibleRing: "inside",
          focusRingColor: "var(--focus-color)"
        },
        subtle: {
          borderWidth: "1px",
          borderColor: "transparent",
          bg: "bg.muted",
          focusVisibleRing: "inside",
          focusRingColor: "var(--focus-color)"
        },
        flushed: {
          bg: "transparent",
          borderBottomWidth: "1px",
          borderBottomColor: "border",
          borderRadius: "0",
          px: "0",
          _focusVisible: {
            borderColor: "var(--focus-color)",
            boxShadow: "0px 1px 0px 0px var(--focus-color)",
            _invalid: {
              borderColor: "var(--error-color)",
              boxShadow: "0px 1px 0px 0px var(--error-color)"
            }
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/input-addon.js
  var inputAddonRecipe = defineRecipe({
    className: "chakra-input-addon",
    base: {
      flex: "0 0 auto",
      width: "auto",
      display: "flex",
      alignItems: "center",
      whiteSpace: "nowrap",
      alignSelf: "stretch",
      borderRadius: "l2"
    },
    variants: {
      size: inputRecipe.variants.size,
      variant: {
        outline: {
          borderWidth: "1px",
          borderColor: "border",
          bg: "bg.muted"
        },
        subtle: {
          borderWidth: "1px",
          borderColor: "transparent",
          bg: "bg.emphasized"
        },
        flushed: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          borderRadius: "0",
          px: "0",
          bg: "transparent"
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/kbd.js
  var kbdRecipe = defineRecipe({
    className: "chakra-kbd",
    base: {
      display: "inline-flex",
      alignItems: "center",
      fontWeight: "medium",
      fontFamily: "mono",
      flexShrink: "0",
      whiteSpace: "nowrap",
      wordSpacing: "-0.5em",
      userSelect: "none",
      px: "1",
      borderRadius: "l2"
    },
    variants: {
      variant: {
        raised: {
          bg: "colorPalette.subtle",
          color: "colorPalette.fg",
          borderWidth: "1px",
          borderBottomWidth: "2px",
          borderColor: "colorPalette.muted"
        },
        outline: {
          borderWidth: "1px",
          color: "colorPalette.fg"
        },
        subtle: {
          bg: "colorPalette.muted",
          color: "colorPalette.fg"
        },
        plain: {
          color: "colorPalette.fg"
        }
      },
      size: {
        sm: {
          textStyle: "xs",
          height: "4.5"
        },
        md: {
          textStyle: "sm",
          height: "5"
        },
        lg: {
          textStyle: "md",
          height: "6"
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "raised"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/link.js
  var linkRecipe = defineRecipe({
    className: "chakra-link",
    base: {
      display: "inline-flex",
      alignItems: "center",
      outline: "none",
      gap: "1.5",
      cursor: "pointer",
      borderRadius: "l1",
      focusRing: "outside"
    },
    variants: {
      variant: {
        underline: {
          color: "colorPalette.fg",
          textDecoration: "underline",
          textUnderlineOffset: "3px",
          textDecorationColor: "currentColor/20"
        },
        plain: {
          color: "colorPalette.fg",
          _hover: {
            textDecoration: "underline",
            textUnderlineOffset: "3px",
            textDecorationColor: "currentColor/20"
          }
        }
      }
    },
    defaultVariants: {
      variant: "plain"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/mark.js
  var markRecipe = defineRecipe({
    className: "chakra-mark",
    base: {
      bg: "transparent",
      color: "inherit",
      whiteSpace: "nowrap"
    },
    variants: {
      variant: {
        subtle: {
          bg: "colorPalette.subtle",
          color: "inherit"
        },
        solid: {
          bg: "colorPalette.solid",
          color: "colorPalette.contrast"
        },
        text: {
          fontWeight: "medium"
        },
        plain: {}
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/radiomark.js
  var radiomarkRecipe = defineRecipe({
    className: "chakra-radiomark",
    base: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0,
      verticalAlign: "top",
      color: "white",
      borderWidth: "1px",
      borderColor: "transparent",
      borderRadius: "full",
      cursor: "radio",
      _focusVisible: {
        outline: "2px solid",
        outlineColor: "colorPalette.focusRing",
        outlineOffset: "2px"
      },
      _invalid: {
        colorPalette: "red",
        borderColor: "red.500"
      },
      _disabled: {
        opacity: "0.5",
        cursor: "disabled"
      },
      "& .dot": {
        height: "100%",
        width: "100%",
        borderRadius: "full",
        bg: "currentColor",
        scale: "0.4"
      }
    },
    variants: {
      variant: {
        solid: {
          borderWidth: "1px",
          borderColor: "border.emphasized",
          _checked: {
            bg: "colorPalette.solid",
            color: "colorPalette.contrast",
            borderColor: "colorPalette.solid"
          }
        },
        subtle: {
          borderWidth: "1px",
          bg: "colorPalette.muted",
          borderColor: "colorPalette.muted",
          color: "transparent",
          _checked: {
            color: "colorPalette.fg"
          }
        },
        outline: {
          borderWidth: "1px",
          borderColor: "inherit",
          _checked: {
            color: "colorPalette.fg",
            borderColor: "colorPalette.solid"
          },
          "& .dot": {
            scale: "0.6"
          }
        },
        inverted: {
          bg: "bg",
          borderWidth: "1px",
          borderColor: "inherit",
          _checked: {
            color: "colorPalette.solid",
            borderColor: "currentcolor"
          }
        }
      },
      size: {
        xs: {
          boxSize: "3"
        },
        sm: {
          boxSize: "4"
        },
        md: {
          boxSize: "5"
        },
        lg: {
          boxSize: "6"
        }
      }
    },
    defaultVariants: {
      variant: "solid",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/separator.js
  var separatorRecipe = defineRecipe({
    className: "chakra-separator",
    base: {
      display: "block",
      borderColor: "border"
    },
    variants: {
      variant: {
        solid: {
          borderStyle: "solid"
        },
        dashed: {
          borderStyle: "dashed"
        },
        dotted: {
          borderStyle: "dotted"
        }
      },
      orientation: {
        vertical: {
          borderInlineStartWidth: "var(--separator-thickness)"
        },
        horizontal: {
          borderTopWidth: "var(--separator-thickness)"
        }
      },
      size: {
        xs: {
          "--separator-thickness": "0.5px"
        },
        sm: {
          "--separator-thickness": "1px"
        },
        md: {
          "--separator-thickness": "2px"
        },
        lg: {
          "--separator-thickness": "3px"
        }
      }
    },
    defaultVariants: {
      size: "sm",
      variant: "solid",
      orientation: "horizontal"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/skeleton.js
  var skeletonRecipe = defineRecipe({
    className: "chakra-skeleton",
    base: {},
    variants: {
      loading: {
        true: {
          borderRadius: "l2",
          boxShadow: "none",
          backgroundClip: "padding-box",
          cursor: "default",
          color: "transparent",
          pointerEvents: "none",
          userSelect: "none",
          flexShrink: "0",
          "&::before, &::after, *": {
            visibility: "hidden"
          }
        },
        false: {
          background: "unset",
          animation: "fade-in var(--fade-duration, 0.1s) ease-out !important"
        }
      },
      variant: {
        pulse: {
          background: "bg.emphasized",
          animation: "pulse",
          animationDuration: "var(--duration, 1.2s)"
        },
        shine: {
          "--animate-from": "200%",
          "--animate-to": "-200%",
          "--start-color": "colors.bg.muted",
          "--end-color": "colors.bg.emphasized",
          backgroundImage: "linear-gradient(270deg,var(--start-color),var(--end-color),var(--end-color),var(--start-color))",
          backgroundSize: "400% 100%",
          animation: "bg-position var(--duration, 5s) ease-in-out infinite"
        },
        none: {
          animation: "none"
        }
      }
    },
    defaultVariants: {
      variant: "pulse",
      loading: true
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/skip-nav-link.js
  var skipNavLinkRecipe = defineRecipe({
    className: "chakra-skip-nav",
    base: {
      display: "inline-flex",
      bg: "bg.panel",
      padding: "2.5",
      borderRadius: "l2",
      fontWeight: "semibold",
      focusVisibleRing: "outside",
      textStyle: "sm",
      // visually hidden
      userSelect: "none",
      border: "0",
      height: "1px",
      width: "1px",
      margin: "-1px",
      outline: "0",
      overflow: "hidden",
      position: "absolute",
      clip: "rect(0 0 0 0)",
      _focusVisible: {
        clip: "auto",
        width: "auto",
        height: "auto",
        position: "fixed",
        top: "6",
        insetStart: "6"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/spinner.js
  var spinnerRecipe = defineRecipe({
    className: "chakra-spinner",
    base: {
      display: "inline-block",
      borderColor: "currentColor",
      borderStyle: "solid",
      borderWidth: "2px",
      borderRadius: "full",
      width: "var(--spinner-size)",
      height: "var(--spinner-size)",
      animation: "spin",
      animationDuration: "slowest",
      "--spinner-track-color": "transparent",
      borderBottomColor: "var(--spinner-track-color)",
      borderInlineStartColor: "var(--spinner-track-color)"
    },
    variants: {
      size: {
        inherit: { "--spinner-size": "1em" },
        xs: { "--spinner-size": "sizes.3" },
        sm: { "--spinner-size": "sizes.4" },
        md: { "--spinner-size": "sizes.5" },
        lg: { "--spinner-size": "sizes.8" },
        xl: { "--spinner-size": "sizes.10" }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/textarea.js
  var textareaRecipe = defineRecipe({
    className: "chakra-textarea",
    base: {
      width: "100%",
      minWidth: "0",
      outline: "0",
      position: "relative",
      appearance: "none",
      textAlign: "start",
      borderRadius: "l2",
      _disabled: {
        layerStyle: "disabled"
      },
      "--focus-color": "colors.colorPalette.focusRing",
      "--error-color": "colors.border.error",
      _invalid: {
        focusRingColor: "var(--error-color)",
        borderColor: "var(--error-color)"
      }
    },
    variants: {
      size: {
        xs: {
          textStyle: "xs",
          px: "2",
          py: "1.5",
          scrollPaddingBottom: "1.5"
        },
        sm: {
          textStyle: "sm",
          px: "2.5",
          py: "2",
          scrollPaddingBottom: "2"
        },
        md: {
          textStyle: "sm",
          px: "3",
          py: "2",
          scrollPaddingBottom: "2"
        },
        lg: {
          textStyle: "md",
          px: "4",
          py: "3",
          scrollPaddingBottom: "3"
        },
        xl: {
          textStyle: "md",
          px: "4.5",
          py: "3.5",
          scrollPaddingBottom: "3.5"
        }
      },
      variant: {
        outline: {
          bg: "transparent",
          borderWidth: "1px",
          borderColor: "border",
          focusVisibleRing: "inside"
        },
        subtle: {
          borderWidth: "1px",
          borderColor: "transparent",
          bg: "bg.muted",
          focusVisibleRing: "inside"
        },
        flushed: {
          bg: "transparent",
          borderBottomWidth: "1px",
          borderBottomColor: "border",
          borderRadius: "0",
          px: "0",
          _focusVisible: {
            borderColor: "var(--focus-color)",
            boxShadow: "0px 1px 0px 0px var(--focus-color)"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes.js
  var recipes = {
    badge: badgeRecipe,
    button: buttonRecipe,
    code: codeRecipe,
    container: containerRecipe,
    heading: headingRecipe,
    input: inputRecipe,
    inputAddon: inputAddonRecipe,
    kbd: kbdRecipe,
    link: linkRecipe,
    mark: markRecipe,
    separator: separatorRecipe,
    skeleton: skeletonRecipe,
    skipNavLink: skipNavLinkRecipe,
    spinner: spinnerRecipe,
    textarea: textareaRecipe,
    icon: iconRecipe,
    checkmark: checkmarkRecipe,
    radiomark: radiomarkRecipe,
    colorSwatch: colorSwatchRecipe
  };

  // node_modules/@chakra-ui/react/dist/esm/theme/semantic-tokens/colors.js
  var semanticColors = defineSemanticTokens.colors({
    bg: {
      DEFAULT: {
        value: { _light: "{colors.white}", _dark: "{colors.black}" }
      },
      subtle: {
        value: { _light: "{colors.gray.50}", _dark: "{colors.gray.950}" }
      },
      muted: {
        value: { _light: "{colors.gray.100}", _dark: "{colors.gray.900}" }
      },
      emphasized: {
        value: { _light: "{colors.gray.200}", _dark: "{colors.gray.800}" }
      },
      inverted: {
        value: { _light: "{colors.black}", _dark: "{colors.white}" }
      },
      panel: {
        value: { _light: "{colors.white}", _dark: "{colors.gray.950}" }
      },
      error: {
        value: { _light: "{colors.red.50}", _dark: "{colors.red.950}" }
      },
      warning: {
        value: { _light: "{colors.orange.50}", _dark: "{colors.orange.950}" }
      },
      success: {
        value: { _light: "{colors.green.50}", _dark: "{colors.green.950}" }
      },
      info: {
        value: { _light: "{colors.blue.50}", _dark: "{colors.blue.950}" }
      }
    },
    fg: {
      DEFAULT: {
        value: { _light: "{colors.black}", _dark: "{colors.gray.50}" }
      },
      muted: {
        value: { _light: "{colors.gray.600}", _dark: "{colors.gray.400}" }
      },
      subtle: {
        value: { _light: "{colors.gray.400}", _dark: "{colors.gray.500}" }
      },
      inverted: {
        value: { _light: "{colors.gray.50}", _dark: "{colors.black}" }
      },
      error: {
        value: { _light: "{colors.red.500}", _dark: "{colors.red.400}" }
      },
      warning: {
        value: { _light: "{colors.orange.600}", _dark: "{colors.orange.300}" }
      },
      success: {
        value: { _light: "{colors.green.600}", _dark: "{colors.green.300}" }
      },
      info: {
        value: { _light: "{colors.blue.600}", _dark: "{colors.blue.300}" }
      }
    },
    border: {
      DEFAULT: {
        value: { _light: "{colors.gray.200}", _dark: "{colors.gray.800}" }
      },
      muted: {
        value: { _light: "{colors.gray.100}", _dark: "{colors.gray.900}" }
      },
      subtle: {
        value: { _light: "{colors.gray.50}", _dark: "{colors.gray.950}" }
      },
      emphasized: {
        value: { _light: "{colors.gray.300}", _dark: "{colors.gray.700}" }
      },
      inverted: {
        value: { _light: "{colors.gray.800}", _dark: "{colors.gray.200}" }
      },
      error: {
        value: { _light: "{colors.red.500}", _dark: "{colors.red.400}" }
      },
      warning: {
        value: { _light: "{colors.orange.500}", _dark: "{colors.orange.400}" }
      },
      success: {
        value: { _light: "{colors.green.500}", _dark: "{colors.green.400}" }
      },
      info: {
        value: { _light: "{colors.blue.500}", _dark: "{colors.blue.400}" }
      }
    },
    gray: {
      contrast: {
        value: { _light: "{colors.white}", _dark: "{colors.black}" }
      },
      fg: {
        value: { _light: "{colors.gray.800}", _dark: "{colors.gray.200}" }
      },
      subtle: {
        value: { _light: "{colors.gray.100}", _dark: "{colors.gray.900}" }
      },
      muted: {
        value: { _light: "{colors.gray.200}", _dark: "{colors.gray.800}" }
      },
      emphasized: {
        value: { _light: "{colors.gray.300}", _dark: "{colors.gray.700}" }
      },
      solid: {
        value: { _light: "{colors.gray.900}", _dark: "{colors.white}" }
      },
      focusRing: {
        value: { _light: "{colors.gray.400}", _dark: "{colors.gray.400}" }
      }
    },
    red: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.red.700}", _dark: "{colors.red.300}" }
      },
      subtle: {
        value: { _light: "{colors.red.100}", _dark: "{colors.red.900}" }
      },
      muted: {
        value: { _light: "{colors.red.200}", _dark: "{colors.red.800}" }
      },
      emphasized: {
        value: { _light: "{colors.red.300}", _dark: "{colors.red.700}" }
      },
      solid: {
        value: { _light: "{colors.red.600}", _dark: "{colors.red.600}" }
      },
      focusRing: {
        value: { _light: "{colors.red.500}", _dark: "{colors.red.500}" }
      }
    },
    orange: {
      contrast: {
        value: { _light: "white", _dark: "black" }
      },
      fg: {
        value: { _light: "{colors.orange.700}", _dark: "{colors.orange.300}" }
      },
      subtle: {
        value: { _light: "{colors.orange.100}", _dark: "{colors.orange.900}" }
      },
      muted: {
        value: { _light: "{colors.orange.200}", _dark: "{colors.orange.800}" }
      },
      emphasized: {
        value: { _light: "{colors.orange.300}", _dark: "{colors.orange.700}" }
      },
      solid: {
        value: { _light: "{colors.orange.600}", _dark: "{colors.orange.500}" }
      },
      focusRing: {
        value: { _light: "{colors.orange.500}", _dark: "{colors.orange.500}" }
      }
    },
    green: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.green.700}", _dark: "{colors.green.300}" }
      },
      subtle: {
        value: { _light: "{colors.green.100}", _dark: "{colors.green.900}" }
      },
      muted: {
        value: { _light: "{colors.green.200}", _dark: "{colors.green.800}" }
      },
      emphasized: {
        value: { _light: "{colors.green.300}", _dark: "{colors.green.700}" }
      },
      solid: {
        value: { _light: "{colors.green.600}", _dark: "{colors.green.600}" }
      },
      focusRing: {
        value: { _light: "{colors.green.500}", _dark: "{colors.green.500}" }
      }
    },
    blue: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.blue.700}", _dark: "{colors.blue.300}" }
      },
      subtle: {
        value: { _light: "{colors.blue.100}", _dark: "{colors.blue.900}" }
      },
      muted: {
        value: { _light: "{colors.blue.200}", _dark: "{colors.blue.800}" }
      },
      emphasized: {
        value: { _light: "{colors.blue.300}", _dark: "{colors.blue.700}" }
      },
      solid: {
        value: { _light: "{colors.blue.600}", _dark: "{colors.blue.600}" }
      },
      focusRing: {
        value: { _light: "{colors.blue.500}", _dark: "{colors.blue.500}" }
      }
    },
    yellow: {
      contrast: {
        value: { _light: "black", _dark: "black" }
      },
      fg: {
        value: { _light: "{colors.yellow.800}", _dark: "{colors.yellow.300}" }
      },
      subtle: {
        value: { _light: "{colors.yellow.100}", _dark: "{colors.yellow.900}" }
      },
      muted: {
        value: { _light: "{colors.yellow.200}", _dark: "{colors.yellow.800}" }
      },
      emphasized: {
        value: { _light: "{colors.yellow.300}", _dark: "{colors.yellow.700}" }
      },
      solid: {
        value: { _light: "{colors.yellow.300}", _dark: "{colors.yellow.300}" }
      },
      focusRing: {
        value: { _light: "{colors.yellow.500}", _dark: "{colors.yellow.500}" }
      }
    },
    teal: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.teal.700}", _dark: "{colors.teal.300}" }
      },
      subtle: {
        value: { _light: "{colors.teal.100}", _dark: "{colors.teal.900}" }
      },
      muted: {
        value: { _light: "{colors.teal.200}", _dark: "{colors.teal.800}" }
      },
      emphasized: {
        value: { _light: "{colors.teal.300}", _dark: "{colors.teal.700}" }
      },
      solid: {
        value: { _light: "{colors.teal.600}", _dark: "{colors.teal.600}" }
      },
      focusRing: {
        value: { _light: "{colors.teal.500}", _dark: "{colors.teal.500}" }
      }
    },
    purple: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.purple.700}", _dark: "{colors.purple.300}" }
      },
      subtle: {
        value: { _light: "{colors.purple.100}", _dark: "{colors.purple.900}" }
      },
      muted: {
        value: { _light: "{colors.purple.200}", _dark: "{colors.purple.800}" }
      },
      emphasized: {
        value: { _light: "{colors.purple.300}", _dark: "{colors.purple.700}" }
      },
      solid: {
        value: { _light: "{colors.purple.600}", _dark: "{colors.purple.600}" }
      },
      focusRing: {
        value: { _light: "{colors.purple.500}", _dark: "{colors.purple.500}" }
      }
    },
    pink: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.pink.700}", _dark: "{colors.pink.300}" }
      },
      subtle: {
        value: { _light: "{colors.pink.100}", _dark: "{colors.pink.900}" }
      },
      muted: {
        value: { _light: "{colors.pink.200}", _dark: "{colors.pink.800}" }
      },
      emphasized: {
        value: { _light: "{colors.pink.300}", _dark: "{colors.pink.700}" }
      },
      solid: {
        value: { _light: "{colors.pink.600}", _dark: "{colors.pink.600}" }
      },
      focusRing: {
        value: { _light: "{colors.pink.500}", _dark: "{colors.pink.500}" }
      }
    },
    cyan: {
      contrast: {
        value: { _light: "white", _dark: "white" }
      },
      fg: {
        value: { _light: "{colors.cyan.700}", _dark: "{colors.cyan.300}" }
      },
      subtle: {
        value: { _light: "{colors.cyan.100}", _dark: "{colors.cyan.900}" }
      },
      muted: {
        value: { _light: "{colors.cyan.200}", _dark: "{colors.cyan.800}" }
      },
      emphasized: {
        value: { _light: "{colors.cyan.300}", _dark: "{colors.cyan.700}" }
      },
      solid: {
        value: { _light: "{colors.cyan.600}", _dark: "{colors.cyan.600}" }
      },
      focusRing: {
        value: { _light: "{colors.cyan.500}", _dark: "{colors.cyan.500}" }
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/semantic-tokens/radii.js
  var semanticRadii = defineSemanticTokens.radii({
    l1: { value: "{radii.xs}" },
    l2: { value: "{radii.sm}" },
    l3: { value: "{radii.md}" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/semantic-tokens/shadows.js
  var semanticShadows = defineSemanticTokens.shadows({
    xs: {
      value: {
        _light: "0px 1px 2px {colors.gray.900/10}, 0px 0px 1px {colors.gray.900/20}",
        _dark: "0px 1px 1px {black/64}, 0px 0px 1px inset {colors.gray.300/20}"
      }
    },
    sm: {
      value: {
        _light: "0px 2px 4px {colors.gray.900/10}, 0px 0px 1px {colors.gray.900/30}",
        _dark: "0px 2px 4px {black/64}, 0px 0px 1px inset {colors.gray.300/30}"
      }
    },
    md: {
      value: {
        _light: "0px 4px 8px {colors.gray.900/10}, 0px 0px 1px {colors.gray.900/30}",
        _dark: "0px 4px 8px {black/64}, 0px 0px 1px inset {colors.gray.300/30}"
      }
    },
    lg: {
      value: {
        _light: "0px 8px 16px {colors.gray.900/10}, 0px 0px 1px {colors.gray.900/30}",
        _dark: "0px 8px 16px {black/64}, 0px 0px 1px inset {colors.gray.300/30}"
      }
    },
    xl: {
      value: {
        _light: "0px 16px 24px {colors.gray.900/10}, 0px 0px 1px {colors.gray.900/30}",
        _dark: "0px 16px 24px {black/64}, 0px 0px 1px inset {colors.gray.300/30}"
      }
    },
    "2xl": {
      value: {
        _light: "0px 24px 40px {colors.gray.900/16}, 0px 0px 1px {colors.gray.900/30}",
        _dark: "0px 24px 40px {black/64}, 0px 0px 1px inset {colors.gray.300/30}"
      }
    },
    inner: {
      value: {
        _light: "inset 0 2px 4px 0 {black/5}",
        _dark: "inset 0 2px 4px 0 black"
      }
    },
    inset: {
      value: {
        _light: "inset 0 0 0 1px {black/5}",
        _dark: "inset 0 0 0 1px {colors.gray.300/5}"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/anatomy.js
  var accordionAnatomy = anatomy3.extendWith("itemBody");
  var actionBarAnatomy = createAnatomy("action-bar").parts(
    "positioner",
    "content",
    "separator",
    "selectionTrigger",
    "closeTrigger"
  );
  var alertAnatomy = createAnatomy("alert").parts(
    "title",
    "description",
    "root",
    "indicator",
    "content"
  );
  var breadcrumbAnatomy = createAnatomy("breadcrumb").parts(
    "link",
    "currentLink",
    "item",
    "list",
    "root",
    "ellipsis",
    "separator"
  );
  var blockquoteAnatomy = createAnatomy("blockquote").parts(
    "root",
    "icon",
    "content",
    "caption"
  );
  var cardAnatomy = createAnatomy("card").parts(
    "root",
    "header",
    "body",
    "footer",
    "title",
    "description"
  );
  var checkboxCardAnatomy = createAnatomy("checkbox-card", [
    "root",
    "control",
    "label",
    "description",
    "addon",
    "indicator",
    "content"
  ]);
  var dataListAnatomy = createAnatomy("data-list").parts(
    "root",
    "item",
    "itemLabel",
    "itemValue"
  );
  var dialogAnatomy = anatomy8.extendWith(
    "header",
    "body",
    "footer",
    "backdrop"
  );
  var drawerAnatomy = anatomy8.extendWith(
    "header",
    "body",
    "footer",
    "backdrop"
  );
  var editableAnatomy = anatomy9.extendWith("textarea");
  var emptyStateAnatomy = createAnatomy("empty-state", [
    "root",
    "content",
    "indicator",
    "title",
    "description"
  ]);
  var fieldAnatomy2 = fieldAnatomy.extendWith("requiredIndicator");
  var fieldsetAnatomy2 = fieldsetAnatomy.extendWith("content");
  var fileUploadAnatomy = anatomy10.extendWith(
    "itemContent",
    "dropzoneContent",
    "fileText"
  );
  var listAnatomy = createAnatomy("list").parts(
    "root",
    "item",
    "indicator"
  );
  var menuAnatomy = anatomy12.extendWith("itemCommand");
  var nativeSelectAnatomy = createAnatomy("select").parts(
    "root",
    "field",
    "indicator"
  );
  var popoverAnatomy = anatomy16.extendWith(
    "header",
    "body",
    "footer"
  );
  var radioGroupAnatomy = anatomy19.extendWith(
    "itemAddon",
    "itemIndicator"
  );
  var radioCardAnatomy = radioGroupAnatomy.extendWith(
    "itemContent",
    "itemDescription"
  );
  var ratingGroupAnatomy = anatomy20.extendWith("itemIndicator");
  var selectAnatomy = anatomy21.extendWith("indicatorGroup");
  var comboboxAnatomy = anatomy7.extendWith(
    "indicatorGroup",
    "empty"
  );
  var sliderAnatomy = anatomy22.extendWith("markerIndicator");
  var statAnatomy = createAnatomy("stat").parts(
    "root",
    "label",
    "helpText",
    "valueText",
    "valueUnit",
    "indicator"
  );
  var statusAnatomy = createAnatomy("status").parts("root", "indicator");
  var stepsAnatomy = createAnatomy("steps", [
    "root",
    "list",
    "item",
    "trigger",
    "indicator",
    "separator",
    "content",
    "title",
    "description",
    "nextTrigger",
    "prevTrigger",
    "progress"
  ]);
  var switchAnatomy = anatomy23.extendWith("indicator");
  var tableAnatomy = createAnatomy("table").parts(
    "root",
    "header",
    "body",
    "row",
    "columnHeader",
    "cell",
    "footer",
    "caption"
  );
  var toastAnatomy = createAnatomy("toast").parts(
    "root",
    "title",
    "description",
    "indicator",
    "closeTrigger",
    "actionTrigger"
  );
  var tabsAnatomy = createAnatomy("tabs").parts(
    "root",
    "trigger",
    "list",
    "content",
    "contentGroup",
    "indicator"
  );
  var tagAnatomy = createAnatomy("tag").parts(
    "root",
    "label",
    "closeTrigger",
    "startElement",
    "endElement"
  );
  var timelineAnatomy = createAnatomy("timeline").parts(
    "root",
    "item",
    "content",
    "separator",
    "indicator",
    "connector",
    "title",
    "description"
  );
  var colorPickerAnatomy2 = colorPickerAnatomy.extendWith("channelText");
  var codeBlockAnatomy = createAnatomy("code-block", [
    "root",
    "content",
    "title",
    "header",
    "footer",
    "control",
    "overlay",
    "code",
    "codeText",
    "copyTrigger",
    "copyIndicator",
    "collapseTrigger",
    "collapseIndicator",
    "collapseText"
  ]);
  var clipboardAnatomy = anatomy6.extendWith("valueText");

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/accordion.js
  var accordionSlotRecipe = defineSlotRecipe({
    className: "chakra-accordion",
    slots: accordionAnatomy.keys(),
    base: {
      root: {
        width: "full",
        "--accordion-radius": "radii.l2"
      },
      item: {
        overflowAnchor: "none"
      },
      itemTrigger: {
        display: "flex",
        alignItems: "center",
        textAlign: "start",
        width: "full",
        outline: "0",
        gap: "3",
        fontWeight: "medium",
        borderRadius: "var(--accordion-radius)",
        _focusVisible: {
          outline: "2px solid",
          outlineColor: "colorPalette.focusRing"
        },
        _disabled: {
          layerStyle: "disabled"
        }
      },
      itemBody: {
        pt: "var(--accordion-padding-y)",
        pb: "calc(var(--accordion-padding-y) * 2)"
      },
      itemContent: {
        overflow: "hidden",
        borderRadius: "var(--accordion-radius)",
        _open: {
          animationName: "expand-height, fade-in",
          animationDuration: "moderate"
        },
        _closed: {
          animationName: "collapse-height, fade-out",
          animationDuration: "moderate"
        }
      },
      itemIndicator: {
        transition: "rotate 0.2s",
        transformOrigin: "center",
        color: "fg.subtle",
        _open: {
          rotate: "180deg"
        },
        _icon: {
          width: "1.2em",
          height: "1.2em"
        }
      }
    },
    variants: {
      variant: {
        outline: {
          item: {
            borderBottomWidth: "1px"
          }
        },
        subtle: {
          itemTrigger: {
            px: "var(--accordion-padding-x)"
          },
          itemContent: {
            px: "var(--accordion-padding-x)"
          },
          item: {
            borderRadius: "var(--accordion-radius)",
            _open: {
              bg: "colorPalette.subtle"
            }
          }
        },
        enclosed: {
          root: {
            borderWidth: "1px",
            borderRadius: "var(--accordion-radius)",
            divideY: "1px",
            overflow: "hidden"
          },
          itemTrigger: {
            px: "var(--accordion-padding-x)"
          },
          itemContent: {
            px: "var(--accordion-padding-x)"
          },
          item: {
            _open: {
              bg: "bg.subtle"
            }
          }
        },
        plain: {}
      },
      size: {
        sm: {
          root: {
            "--accordion-padding-x": "spacing.3",
            "--accordion-padding-y": "spacing.2"
          },
          itemTrigger: {
            textStyle: "sm",
            py: "var(--accordion-padding-y)"
          }
        },
        md: {
          root: {
            "--accordion-padding-x": "spacing.4",
            "--accordion-padding-y": "spacing.2"
          },
          itemTrigger: {
            textStyle: "md",
            py: "var(--accordion-padding-y)"
          }
        },
        lg: {
          root: {
            "--accordion-padding-x": "spacing.4.5",
            "--accordion-padding-y": "spacing.2.5"
          },
          itemTrigger: {
            textStyle: "lg",
            py: "var(--accordion-padding-y)"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/action-bar.js
  var actionBarSlotRecipe = defineSlotRecipe({
    className: "chakra-action-bar",
    slots: actionBarAnatomy.keys(),
    base: {
      positioner: {
        position: "fixed",
        display: "flex",
        justifyContent: "center",
        pointerEvents: "none",
        insetInline: "0",
        top: "unset",
        bottom: "calc(env(safe-area-inset-bottom) + 20px)"
      },
      content: {
        bg: "bg.panel",
        shadow: "md",
        display: "flex",
        alignItems: "center",
        gap: "3",
        borderRadius: "l3",
        py: "2.5",
        px: "3",
        pointerEvents: "auto",
        // Stabilize the position of the action bar when the scrollbar is hidden
        // by using the scrollbar width to offset the position.
        translate: "calc(-1 * var(--scrollbar-width) / 2) 0px",
        _open: {
          animationName: "slide-from-bottom, fade-in",
          animationDuration: "moderate"
        },
        _closed: {
          animationName: "slide-to-bottom, fade-out",
          animationDuration: "faster"
        }
      },
      separator: {
        width: "1px",
        height: "5",
        bg: "border"
      },
      selectionTrigger: {
        display: "inline-flex",
        alignItems: "center",
        gap: "2",
        alignSelf: "stretch",
        textStyle: "sm",
        px: "4",
        py: "1",
        borderRadius: "l2",
        borderWidth: "1px",
        borderStyle: "dashed"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/alert.js
  var alertSlotRecipe = defineSlotRecipe({
    slots: alertAnatomy.keys(),
    className: "chakra-alert",
    base: {
      root: {
        width: "full",
        display: "flex",
        alignItems: "flex-start",
        position: "relative",
        borderRadius: "l3"
      },
      title: {
        fontWeight: "medium"
      },
      description: {
        display: "inline"
      },
      indicator: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: "0",
        width: "1em",
        height: "1em",
        _icon: { boxSize: "full" }
      },
      content: {
        display: "flex",
        flex: "1",
        gap: "1"
      }
    },
    variants: {
      status: {
        info: {
          root: { colorPalette: "blue" }
        },
        warning: {
          root: { colorPalette: "orange" }
        },
        success: {
          root: { colorPalette: "green" }
        },
        error: {
          root: { colorPalette: "red" }
        },
        neutral: {
          root: { colorPalette: "gray" }
        }
      },
      inline: {
        true: {
          content: {
            display: "inline-flex",
            flexDirection: "row",
            alignItems: "center"
          }
        },
        false: {
          content: {
            display: "flex",
            flexDirection: "column"
          }
        }
      },
      variant: {
        subtle: {
          root: {
            bg: "colorPalette.subtle",
            color: "colorPalette.fg"
          }
        },
        surface: {
          root: {
            bg: "colorPalette.subtle",
            color: "colorPalette.fg",
            shadow: "inset 0 0 0px 1px var(--shadow-color)",
            shadowColor: "colorPalette.muted"
          },
          indicator: {
            color: "colorPalette.fg"
          }
        },
        outline: {
          root: {
            color: "colorPalette.fg",
            shadow: "inset 0 0 0px 1px var(--shadow-color)",
            shadowColor: "colorPalette.muted"
          },
          indicator: {
            color: "colorPalette.fg"
          }
        },
        solid: {
          root: {
            bg: "colorPalette.solid",
            color: "colorPalette.contrast"
          },
          indicator: {
            color: "colorPalette.contrast"
          }
        }
      },
      size: {
        sm: {
          root: {
            gap: "2",
            px: "3",
            py: "3",
            textStyle: "xs"
          },
          indicator: {
            textStyle: "lg"
          }
        },
        md: {
          root: {
            gap: "3",
            px: "4",
            py: "4",
            textStyle: "sm"
          },
          indicator: {
            textStyle: "xl"
          }
        },
        lg: {
          root: {
            gap: "3",
            px: "4",
            py: "4",
            textStyle: "md"
          },
          indicator: {
            textStyle: "2xl"
          }
        }
      }
    },
    defaultVariants: {
      status: "info",
      variant: "subtle",
      size: "md",
      inline: false
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/avatar.js
  var avatarSlotRecipe = defineSlotRecipe({
    slots: anatomy4.keys(),
    className: "chakra-avatar",
    base: {
      root: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        fontWeight: "medium",
        position: "relative",
        verticalAlign: "top",
        flexShrink: "0",
        userSelect: "none",
        width: "var(--avatar-size)",
        height: "var(--avatar-size)",
        fontSize: "var(--avatar-font-size)",
        borderRadius: "var(--avatar-radius)",
        "&[data-group-item]": {
          borderWidth: "2px",
          borderColor: "bg"
        }
      },
      image: {
        width: "100%",
        height: "100%",
        objectFit: "cover",
        borderRadius: "var(--avatar-radius)"
      },
      fallback: {
        lineHeight: "1",
        textTransform: "uppercase",
        fontWeight: "medium",
        fontSize: "var(--avatar-font-size)",
        borderRadius: "var(--avatar-radius)"
      }
    },
    variants: {
      size: {
        full: {
          root: {
            "--avatar-size": "100%",
            "--avatar-font-size": "100%"
          }
        },
        "2xs": {
          root: {
            "--avatar-font-size": "fontSizes.2xs",
            "--avatar-size": "sizes.6"
          }
        },
        xs: {
          root: {
            "--avatar-font-size": "fontSizes.xs",
            "--avatar-size": "sizes.8"
          }
        },
        sm: {
          root: {
            "--avatar-font-size": "fontSizes.sm",
            "--avatar-size": "sizes.9"
          }
        },
        md: {
          root: {
            "--avatar-font-size": "fontSizes.md",
            "--avatar-size": "sizes.10"
          }
        },
        lg: {
          root: {
            "--avatar-font-size": "fontSizes.md",
            "--avatar-size": "sizes.11"
          }
        },
        xl: {
          root: {
            "--avatar-font-size": "fontSizes.lg",
            "--avatar-size": "sizes.12"
          }
        },
        "2xl": {
          root: {
            "--avatar-font-size": "fontSizes.xl",
            "--avatar-size": "sizes.16"
          }
        }
      },
      variant: {
        solid: {
          root: {
            bg: "colorPalette.solid",
            color: "colorPalette.contrast"
          }
        },
        subtle: {
          root: {
            bg: "colorPalette.muted",
            color: "colorPalette.fg"
          }
        },
        outline: {
          root: {
            color: "colorPalette.fg",
            borderWidth: "1px",
            borderColor: "colorPalette.muted"
          }
        }
      },
      shape: {
        square: {},
        rounded: {
          root: { "--avatar-radius": "radii.l3" }
        },
        full: {
          root: { "--avatar-radius": "radii.full" }
        }
      },
      borderless: {
        true: {
          root: {
            "&[data-group-item]": {
              borderWidth: "0px"
            }
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      shape: "full",
      variant: "subtle"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/blockquote.js
  var blockquoteSlotRecipe = defineSlotRecipe({
    className: "chakra-blockquote",
    slots: blockquoteAnatomy.keys(),
    base: {
      root: {
        position: "relative",
        display: "flex",
        flexDirection: "column",
        gap: "2"
      },
      caption: {
        textStyle: "sm",
        color: "fg.muted"
      },
      icon: {
        boxSize: "5"
      }
    },
    variants: {
      justify: {
        start: {
          root: {
            alignItems: "flex-start",
            textAlign: "start"
          }
        },
        center: {
          root: {
            alignItems: "center",
            textAlign: "center"
          }
        },
        end: {
          root: {
            alignItems: "flex-end",
            textAlign: "end"
          }
        }
      },
      variant: {
        subtle: {
          root: {
            paddingX: "5",
            borderStartWidth: "4px",
            borderStartColor: "colorPalette.muted"
          },
          icon: {
            color: "colorPalette.fg"
          }
        },
        solid: {
          root: {
            paddingX: "5",
            borderStartWidth: "4px",
            borderStartColor: "colorPalette.solid"
          },
          icon: {
            color: "colorPalette.solid"
          }
        },
        plain: {
          root: {
            paddingX: "5"
          },
          icon: {
            color: "colorPalette.solid"
          }
        }
      }
    },
    defaultVariants: {
      variant: "subtle",
      justify: "start"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/breadcrumb.js
  var breadcrumbSlotRecipe = defineSlotRecipe({
    className: "chakra-breadcrumb",
    slots: breadcrumbAnatomy.keys(),
    base: {
      list: {
        display: "flex",
        alignItems: "center",
        wordBreak: "break-word",
        color: "fg.muted",
        listStyle: "none"
      },
      link: {
        outline: "0",
        textDecoration: "none",
        borderRadius: "l1",
        focusRing: "outside",
        display: "inline-flex",
        alignItems: "center",
        gap: "2"
      },
      item: {
        display: "inline-flex",
        alignItems: "center"
      },
      separator: {
        color: "fg.muted",
        opacity: "0.8",
        _icon: {
          boxSize: "1em"
        },
        _rtl: {
          rotate: "180deg"
        }
      },
      ellipsis: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        _icon: {
          boxSize: "1em"
        }
      }
    },
    variants: {
      variant: {
        underline: {
          link: {
            color: "colorPalette.fg",
            textDecoration: "underline",
            textUnderlineOffset: "0.2em",
            textDecorationColor: "colorPalette.muted"
          },
          currentLink: {
            color: "colorPalette.fg"
          }
        },
        plain: {
          link: {
            color: "fg.muted",
            _hover: { color: "fg" }
          },
          currentLink: {
            color: "fg"
          }
        }
      },
      size: {
        sm: {
          list: {
            gap: "1",
            textStyle: "xs"
          }
        },
        md: {
          list: {
            gap: "1.5",
            textStyle: "sm"
          }
        },
        lg: {
          list: {
            gap: "2",
            textStyle: "md"
          }
        }
      }
    },
    defaultVariants: {
      variant: "plain",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/card.js
  var cardSlotRecipe = defineSlotRecipe({
    className: "chakra-card",
    slots: cardAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        minWidth: "0",
        wordWrap: "break-word",
        borderRadius: "l3",
        color: "fg",
        textAlign: "start"
      },
      title: {
        fontWeight: "semibold"
      },
      description: {
        color: "fg.muted",
        fontSize: "sm"
      },
      header: {
        paddingInline: "var(--card-padding)",
        paddingTop: "var(--card-padding)",
        display: "flex",
        flexDirection: "column",
        gap: "1.5"
      },
      body: {
        padding: "var(--card-padding)",
        flex: "1",
        display: "flex",
        flexDirection: "column"
      },
      footer: {
        display: "flex",
        alignItems: "center",
        gap: "2",
        paddingInline: "var(--card-padding)",
        paddingBottom: "var(--card-padding)"
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            "--card-padding": "spacing.4"
          },
          title: {
            textStyle: "md"
          }
        },
        md: {
          root: {
            "--card-padding": "spacing.6"
          },
          title: {
            textStyle: "lg"
          }
        },
        lg: {
          root: {
            "--card-padding": "spacing.7"
          },
          title: {
            textStyle: "xl"
          }
        }
      },
      variant: {
        elevated: {
          root: {
            bg: "bg.panel",
            boxShadow: "md"
          }
        },
        outline: {
          root: {
            bg: "bg.panel",
            borderWidth: "1px",
            borderColor: "border"
          }
        },
        subtle: {
          root: {
            bg: "bg.muted"
          }
        }
      }
    },
    defaultVariants: {
      variant: "outline",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/checkbox.js
  var checkboxSlotRecipe = defineSlotRecipe({
    slots: checkboxAnatomy.keys(),
    className: "chakra-checkbox",
    base: {
      root: {
        display: "inline-flex",
        gap: "2",
        alignItems: "center",
        verticalAlign: "top",
        position: "relative"
      },
      control: checkmarkRecipe.base,
      label: {
        fontWeight: "medium",
        userSelect: "none",
        _disabled: {
          opacity: "0.5"
        }
      }
    },
    variants: {
      size: {
        xs: {
          root: { gap: "1.5" },
          label: { textStyle: "xs" },
          control: checkmarkRecipe.variants?.size?.xs
        },
        sm: {
          root: { gap: "2" },
          label: { textStyle: "sm" },
          control: checkmarkRecipe.variants?.size?.sm
        },
        md: {
          root: { gap: "2.5" },
          label: { textStyle: "sm" },
          control: checkmarkRecipe.variants?.size?.md
        },
        lg: {
          root: { gap: "3" },
          label: { textStyle: "md" },
          control: checkmarkRecipe.variants?.size?.lg
        }
      },
      variant: {
        outline: {
          control: checkmarkRecipe.variants?.variant?.outline
        },
        solid: {
          control: checkmarkRecipe.variants?.variant?.solid
        },
        subtle: {
          control: checkmarkRecipe.variants?.variant?.subtle
        }
      }
    },
    defaultVariants: {
      variant: "solid",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/checkbox-card.js
  var checkboxCardSlotRecipe = defineSlotRecipe({
    slots: checkboxCardAnatomy.keys(),
    className: "chakra-checkbox-card",
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        userSelect: "none",
        position: "relative",
        borderRadius: "l2",
        flex: "1",
        focusVisibleRing: "outside",
        _disabled: {
          opacity: "0.8"
        },
        _invalid: {
          outline: "2px solid",
          outlineColor: "border.error"
        }
      },
      control: {
        display: "inline-flex",
        flex: "1",
        position: "relative",
        borderRadius: "inherit",
        justifyContent: "var(--checkbox-card-justify)",
        alignItems: "var(--checkbox-card-align)"
      },
      label: {
        fontWeight: "medium",
        display: "flex",
        alignItems: "center",
        gap: "2",
        flex: "1",
        _disabled: {
          opacity: "0.5"
        }
      },
      description: {
        opacity: "0.64",
        textStyle: "sm",
        _disabled: {
          opacity: "0.5"
        }
      },
      addon: {
        _disabled: {
          opacity: "0.5"
        }
      },
      indicator: checkmarkRecipe.base,
      content: {
        display: "flex",
        flexDirection: "column",
        flex: "1",
        gap: "1",
        justifyContent: "var(--checkbox-card-justify)",
        alignItems: "var(--checkbox-card-align)"
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            textStyle: "sm"
          },
          control: {
            padding: "3",
            gap: "1.5"
          },
          addon: {
            px: "3",
            py: "1.5",
            borderTopWidth: "1px"
          },
          indicator: checkmarkRecipe.variants?.size.sm
        },
        md: {
          root: {
            textStyle: "sm"
          },
          control: {
            padding: "4",
            gap: "2.5"
          },
          addon: {
            px: "4",
            py: "2",
            borderTopWidth: "1px"
          },
          indicator: checkmarkRecipe.variants?.size.md
        },
        lg: {
          root: {
            textStyle: "md"
          },
          control: {
            padding: "4",
            gap: "3.5"
          },
          addon: {
            px: "4",
            py: "2",
            borderTopWidth: "1px"
          },
          indicator: checkmarkRecipe.variants?.size.lg
        }
      },
      variant: {
        surface: {
          root: {
            borderWidth: "1px",
            borderColor: "border",
            _checked: {
              bg: "colorPalette.subtle",
              color: "colorPalette.fg",
              borderColor: "colorPalette.muted"
            },
            _disabled: {
              bg: "bg.muted"
            }
          },
          indicator: checkmarkRecipe.variants?.variant.solid
        },
        subtle: {
          root: {
            bg: "bg.muted"
          },
          control: {
            _checked: {
              bg: "colorPalette.muted",
              color: "colorPalette.fg"
            }
          },
          indicator: checkmarkRecipe.variants?.variant.plain
        },
        outline: {
          root: {
            borderWidth: "1px",
            borderColor: "border",
            _checked: {
              boxShadow: "0 0 0 1px var(--shadow-color)",
              boxShadowColor: "colorPalette.solid",
              borderColor: "colorPalette.solid"
            }
          },
          indicator: checkmarkRecipe.variants?.variant.solid
        },
        solid: {
          root: {
            borderWidth: "1px",
            _checked: {
              bg: "colorPalette.solid",
              color: "colorPalette.contrast",
              borderColor: "colorPalette.solid"
            }
          },
          indicator: checkmarkRecipe.variants?.variant.inverted
        }
      },
      justify: {
        start: {
          root: { "--checkbox-card-justify": "flex-start" }
        },
        end: {
          root: { "--checkbox-card-justify": "flex-end" }
        },
        center: {
          root: { "--checkbox-card-justify": "center" }
        }
      },
      align: {
        start: {
          root: { "--checkbox-card-align": "flex-start" },
          content: { textAlign: "start" }
        },
        end: {
          root: { "--checkbox-card-align": "flex-end" },
          content: { textAlign: "end" }
        },
        center: {
          root: { "--checkbox-card-align": "center" },
          content: { textAlign: "center" }
        }
      },
      orientation: {
        vertical: {
          control: { flexDirection: "column" }
        },
        horizontal: {
          control: { flexDirection: "row" }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline",
      align: "start",
      orientation: "horizontal"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/code-block.js
  var codeBlockSlotRecipe = defineSlotRecipe({
    slots: codeBlockAnatomy.keys(),
    className: "code-block",
    base: {
      root: {
        colorPalette: "gray",
        rounded: "var(--code-block-radius)",
        overflow: "hidden",
        bg: "bg",
        color: "fg",
        borderWidth: "1px",
        "--code-block-max-height": "320px",
        "--code-block-bg": "colors.bg",
        "--code-block-fg": "colors.fg",
        "--code-block-obscured-opacity": "0.5",
        "--code-block-obscured-blur": "1px",
        "--code-block-line-number-width": "sizes.3",
        "--code-block-line-number-margin": "spacing.4",
        "--code-block-highlight-bg": "{colors.teal.focusRing/20}",
        "--code-block-highlight-border": "colors.teal.focusRing",
        "--code-block-highlight-added-bg": "{colors.green.focusRing/20}",
        "--code-block-highlight-added-border": "colors.green.focusRing",
        "--code-block-highlight-removed-bg": "{colors.red.focusRing/20}",
        "--code-block-highlight-removed-border": "colors.red.focusRing"
      },
      header: {
        display: "flex",
        alignItems: "center",
        gap: "2",
        position: "relative",
        px: "var(--code-block-padding)",
        minH: "var(--code-block-header-height)",
        mb: "calc(var(--code-block-padding) / 2 * -1)"
      },
      title: {
        display: "inline-flex",
        alignItems: "center",
        gap: "1.5",
        flex: "1",
        color: "fg.muted"
      },
      control: {
        gap: "1.5",
        display: "inline-flex",
        alignItems: "center"
      },
      footer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "2",
        px: "var(--code-block-padding)",
        minH: "var(--code-block-header-height)"
      },
      content: {
        position: "relative",
        colorScheme: "dark",
        overflow: "hidden",
        borderBottomRadius: "var(--code-block-radius)",
        maxHeight: "var(--code-block-max-height)",
        "& ::selection": {
          bg: "blue.500/40"
        },
        _expanded: {
          maxHeight: "unset"
        }
      },
      overlay: {
        "--bg": "{colors.black/50}",
        display: "flex",
        alignItems: "flex-end",
        justifyContent: "center",
        padding: "4",
        bgImage: "linear-gradient(0deg,var(--bg) 25%,transparent 100%)",
        color: "white",
        minH: "5rem",
        pos: "absolute",
        bottom: "0",
        insetInline: "0",
        zIndex: "1",
        fontWeight: "medium",
        _expanded: {
          display: "none"
        }
      },
      code: {
        fontFamily: "mono",
        lineHeight: "tall",
        whiteSpace: "pre",
        counterReset: "line 0"
      },
      codeText: {
        px: "var(--code-block-padding)",
        py: "var(--code-block-padding)",
        position: "relative",
        display: "block",
        width: "100%",
        "&[data-has-focused]": {
          "& [data-line]:not([data-focused])": {
            transitionProperty: "opacity, filter",
            transitionDuration: "moderate",
            transitionTimingFunction: "ease-in-out",
            opacity: "var(--code-block-obscured-opacity)",
            filter: "blur(var(--code-block-obscured-blur))"
          },
          "&:hover": {
            "--code-block-obscured-opacity": "1",
            "--code-block-obscured-blur": "0px"
          }
        },
        "&[data-has-line-numbers][data-plaintext]": {
          paddingInlineStart: "calc(var(--code-block-line-number-width) + var(--code-block-line-number-margin) + var(--code-block-padding))"
        },
        "& [data-line]": {
          position: "relative",
          "--highlight-bg": "var(--code-block-highlight-bg)",
          "--highlight-border": "var(--code-block-highlight-border)",
          "&[data-highlight], &[data-diff]": {
            display: "inline-block",
            width: "full",
            "&:after": {
              content: `''`,
              display: "block",
              position: "absolute",
              insetStart: "calc(var(--code-block-padding) * -1)",
              insetEnd: "0px",
              width: "calc(100% + var(--code-block-padding) * 2)",
              height: "100%",
              bg: "var(--highlight-bg)",
              borderStartWidth: "2px",
              borderStartColor: "var(--highlight-border)"
            }
          },
          "&[data-diff='added']": {
            "--highlight-bg": "var(--code-block-highlight-added-bg)",
            "--highlight-border": "var(--code-block-highlight-added-border)"
          },
          "&[data-diff='removed']": {
            "--highlight-bg": "var(--code-block-highlight-removed-bg)",
            "--highlight-border": "var(--code-block-highlight-removed-border)"
          }
        },
        "&[data-word-wrap]": {
          "&[data-plaintext], & [data-line]": {
            whiteSpace: "pre-wrap",
            wordBreak: "break-all"
          }
        },
        "&[data-has-line-numbers]": {
          "--content": "counter(line)",
          "& [data-line]:before": {
            content: "var(--content)",
            counterIncrement: "line",
            width: "var(--code-block-line-number-width)",
            marginRight: "var(--code-block-line-number-margin)",
            display: "inline-block",
            textAlign: "end",
            userSelect: "none",
            opacity: 0.4
          },
          "& [data-diff='added']:before": {
            content: "'+'"
          },
          "& [data-diff='removed']:before": {
            content: "'-'"
          }
        }
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            "--code-block-padding": "spacing.4",
            "--code-block-radius": "radii.md",
            "--code-block-header-height": "sizes.8"
          },
          title: {
            textStyle: "xs"
          },
          code: {
            fontSize: "xs"
          }
        },
        md: {
          root: {
            "--code-block-padding": "spacing.4",
            "--code-block-radius": "radii.lg",
            "--code-block-header-height": "sizes.10"
          },
          title: {
            textStyle: "xs"
          },
          code: {
            fontSize: "sm"
          }
        },
        lg: {
          root: {
            "--code-block-padding": "spacing.5",
            "--code-block-radius": "radii.xl",
            "--code-block-header-height": "sizes.12"
          },
          title: {
            textStyle: "sm"
          },
          code: {
            fontSize: "sm"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/collapsible.js
  var collapsibleSlotRecipe = defineSlotRecipe({
    slots: anatomy.keys(),
    className: "chakra-collapsible",
    base: {
      content: {
        overflow: "hidden",
        _open: {
          animationName: "expand-height, fade-in",
          animationDuration: "moderate"
        },
        _closed: {
          animationName: "collapse-height, fade-out",
          animationDuration: "moderate"
        }
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/color-picker.js
  var colorPickerSlotRecipe = defineSlotRecipe({
    className: "colorPicker",
    slots: colorPickerAnatomy2.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1.5"
      },
      label: {
        color: "fg",
        fontWeight: "medium",
        textStyle: "sm",
        _disabled: {
          opacity: "0.5"
        }
      },
      valueText: {
        textAlign: "start"
      },
      control: {
        display: "flex",
        alignItems: "center",
        flexDirection: "row",
        gap: "2",
        position: "relative"
      },
      swatchTrigger: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      },
      trigger: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "row",
        flexShrink: "0",
        gap: "2",
        textStyle: "sm",
        minH: "var(--input-height)",
        minW: "var(--input-height)",
        px: "1",
        rounded: "l2",
        _disabled: { opacity: "0.5" },
        "--focus-color": "colors.colorPalette.focusRing",
        "&:focus-visible": {
          borderColor: "var(--focus-color)",
          outline: "1px solid var(--focus-color)"
        },
        "&[data-fit-content]": {
          "--input-height": "unset",
          px: "0",
          border: "0"
        }
      },
      content: {
        display: "flex",
        flexDirection: "column",
        bg: "bg.panel",
        borderRadius: "l3",
        boxShadow: "lg",
        width: "64",
        p: "4",
        gap: "3",
        zIndex: "dropdown",
        _open: {
          animationStyle: "slide-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "slide-fade-out",
          animationDuration: "faster"
        }
      },
      area: {
        height: "180px",
        borderRadius: "l2",
        overflow: "hidden"
      },
      areaThumb: {
        borderRadius: "full",
        height: "var(--thumb-size)",
        width: "var(--thumb-size)",
        borderWidth: "2px",
        borderColor: "white",
        shadow: "sm",
        focusVisibleRing: "mixed",
        focusRingColor: "white"
      },
      areaBackground: {
        height: "full"
      },
      channelSlider: {
        borderRadius: "l2",
        flex: "1"
      },
      channelSliderTrack: {
        height: "var(--slider-height)",
        borderRadius: "inherit",
        boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
      },
      channelText: {
        textStyle: "xs",
        color: "fg.muted",
        fontWeight: "medium",
        textTransform: "capitalize"
      },
      swatchGroup: {
        display: "flex",
        flexDirection: "row",
        flexWrap: "wrap",
        gap: "2"
      },
      swatch: {
        ...colorSwatchRecipe.base,
        borderRadius: "l1"
      },
      swatchIndicator: {
        color: "white",
        rounded: "full"
      },
      channelSliderThumb: {
        borderRadius: "full",
        height: "var(--thumb-size)",
        width: "var(--thumb-size)",
        borderWidth: "2px",
        borderColor: "white",
        shadow: "sm",
        transform: "translate(-50%, -50%)",
        focusVisibleRing: "outside",
        focusRingOffset: "1px"
      },
      channelInput: {
        ...inputRecipe.base,
        "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button": {
          WebkitAppearance: "none",
          margin: 0
        }
      },
      formatSelect: {
        textStyle: "xs",
        textTransform: "uppercase",
        borderWidth: "1px",
        minH: "6",
        focusRing: "inside",
        rounded: "l2"
      },
      transparencyGrid: {
        borderRadius: "l2"
      },
      view: {
        display: "flex",
        flexDirection: "column",
        gap: "2"
      }
    },
    variants: {
      size: {
        "2xs": {
          channelInput: inputRecipe.variants?.size?.["2xs"],
          swatch: { "--swatch-size": "sizes.4.5" },
          trigger: { "--input-height": "sizes.7" },
          area: { "--thumb-size": "sizes.3" },
          channelSlider: {
            "--slider-height": "sizes.3",
            "--thumb-size": "sizes.3"
          }
        },
        xs: {
          channelInput: inputRecipe.variants?.size?.xs,
          swatch: { "--swatch-size": "sizes.5" },
          trigger: { "--input-height": "sizes.8" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        },
        sm: {
          channelInput: inputRecipe.variants?.size?.sm,
          swatch: { "--swatch-size": "sizes.6" },
          trigger: { "--input-height": "sizes.9" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        },
        md: {
          channelInput: inputRecipe.variants?.size?.md,
          swatch: { "--swatch-size": "sizes.7" },
          trigger: { "--input-height": "sizes.10" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        },
        lg: {
          channelInput: inputRecipe.variants?.size?.lg,
          swatch: { "--swatch-size": "sizes.7" },
          trigger: { "--input-height": "sizes.11" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        },
        xl: {
          channelInput: inputRecipe.variants?.size?.xl,
          swatch: { "--swatch-size": "sizes.8" },
          trigger: { "--input-height": "sizes.12" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        },
        "2xl": {
          channelInput: inputRecipe.variants?.size?.["2xl"],
          swatch: { "--swatch-size": "sizes.10" },
          trigger: { "--input-height": "sizes.16" },
          area: { "--thumb-size": "sizes.3.5" },
          channelSlider: {
            "--slider-height": "sizes.3.5",
            "--thumb-size": "sizes.3.5"
          }
        }
      },
      variant: {
        outline: {
          channelInput: inputRecipe.variants?.variant?.outline,
          trigger: {
            borderWidth: "1px"
          }
        },
        subtle: {
          channelInput: inputRecipe.variants?.variant?.subtle,
          trigger: {
            borderWidth: "1px",
            borderColor: "transparent",
            bg: "bg.muted"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/combobox.js
  var comboboxSlotRecipe = defineSlotRecipe({
    className: "chakra-combobox",
    slots: comboboxAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1.5",
        width: "full"
      },
      label: {
        fontWeight: "medium",
        userSelect: "none",
        textStyle: "sm",
        _disabled: {
          layerStyle: "disabled"
        }
      },
      input: {
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        background: "bg.panel",
        width: "full",
        minH: "var(--combobox-input-height)",
        px: "var(--combobox-input-padding-x)",
        "--input-height": "var(--combobox-input-height)",
        borderRadius: "l2",
        outline: 0,
        userSelect: "none",
        textAlign: "start",
        _placeholderShown: {
          color: "fg.muted"
        },
        _disabled: {
          layerStyle: "disabled"
        },
        "--focus-color": "colors.colorPalette.focusRing",
        "--error-color": "colors.border.error",
        _invalid: {
          focusRingColor: "var(--error-color)",
          borderColor: "var(--error-color)"
        }
      },
      trigger: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        "--input-height": "var(--combobox-input-height)"
      },
      clearTrigger: {
        color: "fg.muted",
        pointerEvents: "auto",
        focusVisibleRing: "inside",
        focusRingWidth: "2px",
        rounded: "l1"
      },
      control: {
        pos: "relative"
      },
      indicatorGroup: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "1",
        pos: "absolute",
        insetEnd: "0",
        top: "0",
        bottom: "0",
        px: "var(--combobox-input-padding-x)",
        _icon: {
          boxSize: "var(--combobox-indicator-size)"
        },
        "[data-disabled] &": {
          opacity: 0.5
        }
      },
      content: {
        background: "bg.panel",
        display: "flex",
        flexDirection: "column",
        zIndex: "dropdown",
        borderRadius: "l2",
        outline: 0,
        maxH: "96",
        overflowY: "auto",
        boxShadow: "md",
        _open: {
          animationStyle: "slide-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "slide-fade-out",
          animationDuration: "0s"
        },
        "&[data-empty]:not(:has([data-scope=combobox][data-part=empty]))": {
          opacity: 0
        }
      },
      item: {
        position: "relative",
        userSelect: "none",
        display: "flex",
        alignItems: "center",
        gap: "2",
        py: "var(--combobox-item-padding-y)",
        px: "var(--combobox-item-padding-x)",
        cursor: "option",
        justifyContent: "space-between",
        flex: "1",
        textAlign: "start",
        borderRadius: "l1",
        _highlighted: {
          bg: "bg.emphasized/60"
        },
        _disabled: {
          pointerEvents: "none",
          opacity: "0.5"
        },
        _icon: {
          boxSize: "var(--combobox-indicator-size)"
        }
      },
      empty: {
        py: "var(--combobox-item-padding-y)",
        px: "var(--combobox-item-padding-x)"
      },
      itemText: {
        flex: "1"
      },
      itemGroup: {
        pb: "var(--combobox-item-padding-y)",
        _last: {
          pb: "0"
        }
      },
      itemGroupLabel: {
        fontWeight: "medium",
        py: "var(--combobox-item-padding-y)",
        px: "var(--combobox-item-padding-x)"
      }
    },
    variants: {
      variant: {
        outline: {
          input: {
            bg: "transparent",
            borderWidth: "1px",
            borderColor: "border",
            focusVisibleRing: "inside"
          }
        },
        subtle: {
          input: {
            borderWidth: "1px",
            borderColor: "transparent",
            bg: "bg.muted",
            focusVisibleRing: "inside"
          }
        },
        flushed: {
          input: {
            bg: "transparent",
            borderBottomWidth: "1px",
            borderBottomColor: "border",
            borderRadius: "0",
            px: "0",
            _focusVisible: {
              borderColor: "var(--focus-color)",
              boxShadow: "0px 1px 0px 0px var(--focus-color)"
            }
          },
          indicatorGroup: {
            px: "0"
          }
        }
      },
      size: {
        xs: {
          root: {
            "--combobox-input-height": "sizes.8",
            "--combobox-input-padding-x": "spacing.2",
            "--combobox-indicator-size": "sizes.3.5"
          },
          input: {
            textStyle: "xs"
          },
          content: {
            "--combobox-item-padding-x": "spacing.1.5",
            "--combobox-item-padding-y": "spacing.1",
            "--combobox-indicator-size": "sizes.3.5",
            p: "1",
            textStyle: "xs"
          },
          trigger: {
            textStyle: "xs",
            gap: "1"
          }
        },
        sm: {
          root: {
            "--combobox-input-height": "sizes.9",
            "--combobox-input-padding-x": "spacing.2.5",
            "--combobox-indicator-size": "sizes.4"
          },
          input: {
            textStyle: "sm"
          },
          content: {
            "--combobox-item-padding-x": "spacing.2",
            "--combobox-item-padding-y": "spacing.1.5",
            "--combobox-indicator-size": "sizes.4",
            p: "1",
            textStyle: "sm"
          },
          trigger: {
            textStyle: "sm",
            gap: "1"
          }
        },
        md: {
          root: {
            "--combobox-input-height": "sizes.10",
            "--combobox-input-padding-x": "spacing.3",
            "--combobox-indicator-size": "sizes.4"
          },
          input: {
            textStyle: "sm"
          },
          content: {
            "--combobox-item-padding-x": "spacing.2",
            "--combobox-item-padding-y": "spacing.1.5",
            "--combobox-indicator-size": "sizes.4",
            p: "1",
            textStyle: "sm"
          },
          itemIndicator: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          },
          trigger: {
            textStyle: "sm",
            gap: "2"
          }
        },
        lg: {
          root: {
            "--combobox-input-height": "sizes.12",
            "--combobox-input-padding-x": "spacing.4",
            "--combobox-indicator-size": "sizes.5"
          },
          input: {
            textStyle: "md"
          },
          content: {
            "--combobox-item-padding-y": "spacing.2",
            "--combobox-item-padding-x": "spacing.3",
            "--combobox-indicator-size": "sizes.5",
            p: "1.5",
            textStyle: "md"
          },
          trigger: {
            textStyle: "md",
            py: "3",
            gap: "2"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/data-list.js
  var dataListSlotRecipe = defineSlotRecipe({
    slots: dataListAnatomy.keys(),
    className: "chakra-data-list",
    base: {
      itemLabel: {
        display: "flex",
        alignItems: "center",
        gap: "1"
      },
      itemValue: {
        display: "flex",
        minWidth: "0",
        flex: "1"
      }
    },
    variants: {
      orientation: {
        horizontal: {
          root: {
            display: "flex",
            flexDirection: "column"
          },
          item: {
            display: "inline-flex",
            alignItems: "center",
            gap: "4"
          },
          itemLabel: {
            minWidth: "120px"
          }
        },
        vertical: {
          root: {
            display: "flex",
            flexDirection: "column"
          },
          item: {
            display: "flex",
            flexDirection: "column",
            gap: "1"
          }
        }
      },
      size: {
        sm: {
          root: {
            gap: "3"
          },
          item: {
            textStyle: "xs"
          }
        },
        md: {
          root: {
            gap: "4"
          },
          item: {
            textStyle: "sm"
          }
        },
        lg: {
          root: {
            gap: "5"
          },
          item: {
            textStyle: "md"
          }
        }
      },
      variant: {
        subtle: {
          itemLabel: {
            color: "fg.muted"
          }
        },
        bold: {
          itemLabel: {
            fontWeight: "medium"
          },
          itemValue: {
            color: "fg.muted"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      orientation: "vertical",
      variant: "subtle"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/dialog.js
  var dialogSlotRecipe = defineSlotRecipe({
    slots: dialogAnatomy.keys(),
    className: "chakra-dialog",
    base: {
      backdrop: {
        bg: "blackAlpha.500",
        pos: "fixed",
        left: 0,
        top: 0,
        w: "100dvw",
        h: "100dvh",
        zIndex: "var(--z-index)",
        _open: {
          animationName: "fade-in",
          animationDuration: "slow"
        },
        _closed: {
          animationName: "fade-out",
          animationDuration: "moderate"
        }
      },
      positioner: {
        display: "flex",
        width: "100dvw",
        height: "100dvh",
        position: "fixed",
        left: 0,
        top: 0,
        "--dialog-z-index": "zIndex.modal",
        zIndex: "calc(var(--dialog-z-index) + var(--layer-index, 0))",
        justifyContent: "center",
        overscrollBehaviorY: "none"
      },
      content: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0,
        borderRadius: "l3",
        textStyle: "sm",
        my: "var(--dialog-margin, var(--dialog-base-margin))",
        "--dialog-z-index": "zIndex.modal",
        zIndex: "calc(var(--dialog-z-index) + var(--layer-index, 0))",
        bg: "bg.panel",
        boxShadow: "lg",
        _open: {
          animationDuration: "moderate"
        },
        _closed: {
          animationDuration: "faster"
        }
      },
      header: {
        display: "flex",
        gap: "2",
        flex: 0,
        px: "6",
        pt: "6",
        pb: "4"
      },
      body: {
        flex: "1",
        px: "6",
        pt: "2",
        pb: "6"
      },
      footer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        gap: "3",
        px: "6",
        pt: "2",
        pb: "4"
      },
      title: {
        textStyle: "lg",
        fontWeight: "semibold"
      },
      description: {
        color: "fg.muted"
      },
      closeTrigger: {
        pos: "absolute",
        top: "2",
        insetEnd: "2"
      }
    },
    variants: {
      placement: {
        center: {
          positioner: {
            alignItems: "center"
          },
          content: {
            "--dialog-base-margin": "auto",
            mx: "auto"
          }
        },
        top: {
          positioner: {
            alignItems: "flex-start"
          },
          content: {
            "--dialog-base-margin": "spacing.16",
            mx: "auto"
          }
        },
        bottom: {
          positioner: {
            alignItems: "flex-end"
          },
          content: {
            "--dialog-base-margin": "spacing.16",
            mx: "auto"
          }
        }
      },
      scrollBehavior: {
        inside: {
          positioner: {
            overflow: "hidden"
          },
          content: {
            maxH: "calc(100% - 7.5rem)"
          },
          body: {
            overflow: "auto"
          }
        },
        outside: {
          positioner: {
            overflow: "auto",
            pointerEvents: "auto"
          }
        }
      },
      size: {
        xs: {
          content: {
            maxW: "sm"
          }
        },
        sm: {
          content: {
            maxW: "md"
          }
        },
        md: {
          content: {
            maxW: "lg"
          }
        },
        lg: {
          content: {
            maxW: "2xl"
          }
        },
        xl: {
          content: {
            maxW: "4xl"
          }
        },
        cover: {
          positioner: {
            padding: "10"
          },
          content: {
            width: "100%",
            height: "100%",
            "--dialog-margin": "0"
          }
        },
        full: {
          content: {
            maxW: "100dvw",
            minH: "100dvh",
            "--dialog-margin": "0",
            borderRadius: "0"
          }
        }
      },
      motionPreset: {
        scale: {
          content: {
            _open: { animationName: "scale-in, fade-in" },
            _closed: { animationName: "scale-out, fade-out" }
          }
        },
        "slide-in-bottom": {
          content: {
            _open: { animationName: "slide-from-bottom, fade-in" },
            _closed: { animationName: "slide-to-bottom, fade-out" }
          }
        },
        "slide-in-top": {
          content: {
            _open: { animationName: "slide-from-top, fade-in" },
            _closed: { animationName: "slide-to-top, fade-out" }
          }
        },
        "slide-in-left": {
          content: {
            _open: { animationName: "slide-from-left, fade-in" },
            _closed: { animationName: "slide-to-left, fade-out" }
          }
        },
        "slide-in-right": {
          content: {
            _open: { animationName: "slide-from-right, fade-in" },
            _closed: { animationName: "slide-to-right, fade-out" }
          }
        },
        none: {}
      }
    },
    defaultVariants: {
      size: "md",
      scrollBehavior: "outside",
      placement: "top",
      motionPreset: "scale"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/drawer.js
  var drawerSlotRecipe = defineSlotRecipe({
    slots: drawerAnatomy.keys(),
    className: "chakra-drawer",
    base: {
      backdrop: {
        bg: "blackAlpha.500",
        pos: "fixed",
        insetInlineStart: 0,
        top: 0,
        w: "100vw",
        h: "100dvh",
        zIndex: "overlay",
        _open: {
          animationName: "fade-in",
          animationDuration: "slow"
        },
        _closed: {
          animationName: "fade-out",
          animationDuration: "moderate"
        }
      },
      positioner: {
        display: "flex",
        width: "100vw",
        height: "100dvh",
        position: "fixed",
        insetInlineStart: 0,
        top: 0,
        zIndex: "modal",
        overscrollBehaviorY: "none"
      },
      content: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0,
        zIndex: "modal",
        textStyle: "sm",
        maxH: "100dvh",
        color: "inherit",
        bg: "bg.panel",
        boxShadow: "lg",
        _open: {
          animationDuration: "slowest",
          animationTimingFunction: "ease-in-smooth"
        },
        _closed: {
          animationDuration: "slower",
          animationTimingFunction: "ease-in-smooth"
        }
      },
      header: {
        display: "flex",
        alignItems: "center",
        gap: "2",
        flex: 0,
        px: "6",
        pt: "6",
        pb: "4"
      },
      body: {
        px: "6",
        py: "2",
        flex: "1",
        overflow: "auto"
      },
      footer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        gap: "3",
        px: "6",
        pt: "2",
        pb: "4"
      },
      title: {
        flex: "1",
        textStyle: "lg",
        fontWeight: "semibold"
      },
      description: {
        color: "fg.muted"
      },
      closeTrigger: {
        pos: "absolute",
        top: "3",
        insetEnd: "2"
      }
    },
    variants: {
      size: {
        xs: {
          content: {
            maxW: "xs"
          }
        },
        sm: {
          content: {
            maxW: "md"
          }
        },
        md: {
          content: {
            maxW: "lg"
          }
        },
        lg: {
          content: {
            maxW: "2xl"
          }
        },
        xl: {
          content: {
            maxW: "4xl"
          }
        },
        full: {
          content: {
            maxW: "100vw",
            h: "100dvh"
          }
        }
      },
      placement: {
        start: {
          positioner: {
            justifyContent: "flex-start",
            alignItems: "stretch"
          },
          content: {
            _open: {
              animationName: {
                base: "slide-from-left-full, fade-in",
                _rtl: "slide-from-right-full, fade-in"
              }
            },
            _closed: {
              animationName: {
                base: "slide-to-left-full, fade-out",
                _rtl: "slide-to-right-full, fade-out"
              }
            }
          }
        },
        end: {
          positioner: {
            justifyContent: "flex-end",
            alignItems: "stretch"
          },
          content: {
            _open: {
              animationName: {
                base: "slide-from-right-full, fade-in",
                _rtl: "slide-from-left-full, fade-in"
              }
            },
            _closed: {
              animationName: {
                base: "slide-to-right-full, fade-out",
                _rtl: "slide-to-left-full, fade-out"
              }
            }
          }
        },
        top: {
          positioner: {
            justifyContent: "stretch",
            alignItems: "flex-start"
          },
          content: {
            maxW: "100%",
            _open: { animationName: "slide-from-top-full, fade-in" },
            _closed: { animationName: "slide-to-top-full, fade-out" }
          }
        },
        bottom: {
          positioner: {
            justifyContent: "stretch",
            alignItems: "flex-end"
          },
          content: {
            maxW: "100%",
            _open: { animationName: "slide-from-bottom-full, fade-in" },
            _closed: { animationName: "slide-to-bottom-full, fade-out" }
          }
        }
      },
      contained: {
        true: {
          positioner: {
            padding: "4"
          },
          content: {
            borderRadius: "l3"
          }
        }
      }
    },
    defaultVariants: {
      size: "xs",
      placement: "end"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/editable.js
  var sharedStyles = defineStyle({
    fontSize: "inherit",
    fontWeight: "inherit",
    textAlign: "inherit",
    bg: "transparent",
    borderRadius: "l2"
  });
  var editableSlotRecipe = defineSlotRecipe({
    slots: editableAnatomy.keys(),
    className: "chakra-editable",
    base: {
      root: {
        display: "inline-flex",
        alignItems: "center",
        position: "relative",
        gap: "1.5",
        width: "full"
      },
      preview: {
        ...sharedStyles,
        py: "1",
        px: "1",
        display: "inline-flex",
        alignItems: "center",
        transitionProperty: "common",
        transitionDuration: "moderate",
        cursor: "text",
        _hover: {
          bg: "bg.muted"
        },
        _disabled: {
          userSelect: "none"
        }
      },
      input: {
        ...sharedStyles,
        outline: "0",
        py: "1",
        px: "1",
        transitionProperty: "common",
        transitionDuration: "normal",
        width: "full",
        focusVisibleRing: "inside",
        focusRingWidth: "2px",
        _placeholder: { opacity: 0.6 }
      },
      control: {
        display: "inline-flex",
        alignItems: "center",
        gap: "1.5"
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            textStyle: "sm"
          },
          preview: { minH: "8" },
          input: { minH: "8" }
        },
        md: {
          root: {
            textStyle: "sm"
          },
          preview: { minH: "9" },
          input: { minH: "9" }
        },
        lg: {
          root: {
            textStyle: "md"
          },
          preview: { minH: "10" },
          input: { minH: "10" }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/empty-state.js
  var emptyStateSlotRecipe = defineSlotRecipe({
    slots: emptyStateAnatomy.keys(),
    className: "chakra-empty-state",
    base: {
      root: {
        width: "full"
      },
      content: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center"
      },
      indicator: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        color: "fg.subtle",
        _icon: {
          boxSize: "1em"
        }
      },
      title: {
        fontWeight: "semibold"
      },
      description: {
        textStyle: "sm",
        color: "fg.muted"
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            px: "4",
            py: "6"
          },
          title: {
            textStyle: "md"
          },
          content: {
            gap: "4"
          },
          indicator: {
            textStyle: "2xl"
          }
        },
        md: {
          root: {
            px: "8",
            py: "12"
          },
          title: {
            textStyle: "lg"
          },
          content: {
            gap: "6"
          },
          indicator: {
            textStyle: "4xl"
          }
        },
        lg: {
          root: {
            px: "12",
            py: "16"
          },
          title: {
            textStyle: "xl"
          },
          content: {
            gap: "8"
          },
          indicator: {
            textStyle: "6xl"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/field.js
  var fieldSlotRecipe = defineSlotRecipe({
    className: "chakra-field",
    slots: fieldAnatomy2.keys(),
    base: {
      requiredIndicator: {
        color: "fg.error",
        lineHeight: "1"
      },
      root: {
        display: "flex",
        width: "100%",
        position: "relative",
        gap: "1.5"
      },
      label: {
        display: "flex",
        alignItems: "center",
        textAlign: "start",
        textStyle: "sm",
        fontWeight: "medium",
        gap: "1",
        userSelect: "none",
        _disabled: {
          opacity: "0.5"
        }
      },
      errorText: {
        display: "inline-flex",
        alignItems: "center",
        fontWeight: "medium",
        gap: "1",
        color: "fg.error",
        textStyle: "xs"
      },
      helperText: {
        color: "fg.muted",
        textStyle: "xs"
      }
    },
    variants: {
      orientation: {
        vertical: {
          root: {
            flexDirection: "column",
            alignItems: "flex-start"
          }
        },
        horizontal: {
          root: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between"
          },
          label: {
            flex: "0 0 var(--field-label-width, 80px)"
          }
        }
      }
    },
    defaultVariants: {
      orientation: "vertical"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/fieldset.js
  var fieldsetSlotRecipe = defineSlotRecipe({
    className: "fieldset",
    slots: fieldsetAnatomy2.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        width: "full"
      },
      content: {
        display: "flex",
        flexDirection: "column",
        width: "full"
      },
      legend: {
        color: "fg",
        fontWeight: "medium",
        _disabled: {
          opacity: "0.5"
        }
      },
      helperText: {
        color: "fg.muted",
        textStyle: "sm"
      },
      errorText: {
        display: "inline-flex",
        alignItems: "center",
        color: "fg.error",
        gap: "2",
        fontWeight: "medium",
        textStyle: "sm"
      }
    },
    variants: {
      size: {
        sm: {
          root: { spaceY: "2" },
          content: { gap: "1.5" },
          legend: { textStyle: "sm" }
        },
        md: {
          root: { spaceY: "4" },
          content: { gap: "4" },
          legend: { textStyle: "sm" }
        },
        lg: {
          root: { spaceY: "6" },
          content: { gap: "4" },
          legend: { textStyle: "md" }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/file-upload.js
  var fileUploadSlotRecipe = defineSlotRecipe({
    className: "chakra-file-upload",
    slots: fileUploadAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "4",
        width: "100%",
        alignItems: "flex-start"
      },
      label: {
        fontWeight: "medium",
        textStyle: "sm"
      },
      dropzone: {
        background: "bg",
        borderRadius: "l3",
        borderWidth: "2px",
        borderStyle: "dashed",
        display: "flex",
        alignItems: "center",
        flexDirection: "column",
        gap: "4",
        justifyContent: "center",
        minHeight: "2xs",
        px: "3",
        py: "2",
        transition: "backgrounds",
        focusVisibleRing: "outside",
        _hover: {
          bg: "bg.subtle"
        },
        _dragging: {
          bg: "colorPalette.subtle",
          borderStyle: "solid",
          borderColor: "colorPalette.solid"
        }
      },
      dropzoneContent: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        textAlign: "center",
        gap: "1",
        textStyle: "sm"
      },
      item: {
        pos: "relative",
        textStyle: "sm",
        animationName: "fade-in",
        animationDuration: "moderate",
        background: "bg",
        borderRadius: "l2",
        borderWidth: "1px",
        width: "100%",
        display: "flex",
        alignItems: "center",
        gap: "3",
        p: "4"
      },
      itemGroup: {
        width: "100%",
        display: "flex",
        flexDirection: "column",
        gap: "3",
        _empty: {
          display: "none"
        }
      },
      itemName: {
        color: "fg",
        fontWeight: "medium",
        lineClamp: "1"
      },
      itemContent: {
        display: "flex",
        flexDirection: "column",
        gap: "0.5",
        flex: "1"
      },
      itemSizeText: {
        color: "fg.muted",
        textStyle: "xs"
      },
      itemDeleteTrigger: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        alignSelf: "flex-start",
        boxSize: "5",
        p: "2px",
        color: "fg.muted",
        cursor: "button"
      },
      itemPreview: {
        color: "fg.muted",
        _icon: {
          boxSize: "4.5"
        }
      }
    },
    defaultVariants: {}
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/hover-card.js
  var hoverCardSlotRecipe = defineSlotRecipe({
    className: "chakra-hover-card",
    slots: anatomy11.keys(),
    base: {
      content: {
        position: "relative",
        display: "flex",
        flexDirection: "column",
        textStyle: "sm",
        "--hovercard-bg": "colors.bg.panel",
        bg: "var(--hovercard-bg)",
        boxShadow: "lg",
        maxWidth: "80",
        borderRadius: "l3",
        zIndex: "popover",
        transformOrigin: "var(--transform-origin)",
        outline: "0",
        _open: {
          animationStyle: "slide-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "slide-fade-out",
          animationDuration: "faster"
        }
      },
      arrow: {
        "--arrow-size": "sizes.3",
        "--arrow-background": "var(--hovercard-bg)"
      },
      arrowTip: {
        borderTopWidth: "0.5px",
        borderInlineStartWidth: "0.5px"
      }
    },
    variants: {
      size: {
        xs: {
          content: {
            padding: "3"
          }
        },
        sm: {
          content: {
            padding: "4"
          }
        },
        md: {
          content: {
            padding: "5"
          }
        },
        lg: {
          content: {
            padding: "6"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/list.js
  var listSlotRecipe = defineSlotRecipe({
    className: "chakra-list",
    slots: listAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "var(--list-gap)",
        "& :where(ul, ol)": {
          marginTop: "var(--list-gap)"
        }
      },
      item: {
        whiteSpace: "normal",
        display: "list-item"
      },
      indicator: {
        marginEnd: "2",
        minHeight: "1lh",
        flexShrink: 0,
        display: "inline-block",
        verticalAlign: "middle"
      }
    },
    variants: {
      variant: {
        marker: {
          root: {
            listStyle: "revert"
          },
          item: {
            _marker: {
              color: "fg.subtle"
            }
          }
        },
        plain: {
          item: {
            alignItems: "flex-start",
            display: "inline-flex"
          }
        }
      },
      align: {
        center: {
          item: { alignItems: "center" }
        },
        start: {
          item: { alignItems: "flex-start" }
        },
        end: {
          item: { alignItems: "flex-end" }
        }
      }
    },
    defaultVariants: {
      variant: "marker"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/menu.js
  var menuSlotRecipe = defineSlotRecipe({
    className: "chakra-menu",
    slots: menuAnatomy.keys(),
    base: {
      content: {
        outline: 0,
        bg: "bg.panel",
        boxShadow: "lg",
        color: "fg",
        maxHeight: "var(--available-height)",
        "--menu-z-index": "zIndex.dropdown",
        zIndex: "calc(var(--menu-z-index) + var(--layer-index, 0))",
        borderRadius: "l2",
        overflow: "hidden",
        overflowY: "auto",
        _open: {
          animationStyle: "slide-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "slide-fade-out",
          animationDuration: "faster"
        }
      },
      item: {
        textDecoration: "none",
        color: "fg",
        userSelect: "none",
        borderRadius: "l1",
        width: "100%",
        display: "flex",
        cursor: "menuitem",
        alignItems: "center",
        textAlign: "start",
        position: "relative",
        flex: "0 0 auto",
        outline: 0,
        _disabled: {
          layerStyle: "disabled"
        },
        "&[data-type]": {
          ps: "8"
        }
      },
      itemText: {
        flex: "1"
      },
      itemIndicator: {
        position: "absolute",
        insetStart: "2",
        transform: "translateY(-50%)",
        top: "50%"
      },
      itemGroupLabel: {
        px: "2",
        py: "1.5",
        fontWeight: "semibold",
        textStyle: "sm"
      },
      indicator: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: "0"
      },
      itemCommand: {
        opacity: "0.6",
        textStyle: "xs",
        ms: "auto",
        ps: "4",
        letterSpacing: "widest",
        fontFamily: "inherit"
      },
      separator: {
        height: "1px",
        bg: "bg.muted",
        my: "1",
        mx: "-1"
      }
    },
    variants: {
      variant: {
        subtle: {
          item: {
            _highlighted: {
              bg: "bg.emphasized/60"
            }
          }
        },
        solid: {
          item: {
            _highlighted: {
              bg: "colorPalette.solid",
              color: "colorPalette.contrast"
            }
          }
        }
      },
      size: {
        sm: {
          content: {
            minW: "8rem",
            padding: "1"
          },
          item: {
            gap: "1",
            textStyle: "xs",
            py: "1",
            px: "1.5"
          }
        },
        md: {
          content: {
            minW: "8rem",
            padding: "1.5"
          },
          item: {
            gap: "2",
            textStyle: "sm",
            py: "1.5",
            px: "2"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "subtle"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/select.js
  var selectSlotRecipe = defineSlotRecipe({
    className: "chakra-select",
    slots: selectAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1.5",
        width: "full"
      },
      trigger: {
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        width: "full",
        minH: "var(--select-trigger-height)",
        "--input-height": "var(--select-trigger-height)",
        px: "var(--select-trigger-padding-x)",
        borderRadius: "l2",
        userSelect: "none",
        textAlign: "start",
        focusVisibleRing: "inside",
        _placeholderShown: {
          color: "fg.muted/80"
        },
        _disabled: {
          layerStyle: "disabled"
        },
        _invalid: {
          borderColor: "border.error"
        }
      },
      indicatorGroup: {
        display: "flex",
        alignItems: "center",
        gap: "1",
        pos: "absolute",
        insetEnd: "0",
        top: "0",
        bottom: "0",
        px: "var(--select-trigger-padding-x)",
        pointerEvents: "none"
      },
      indicator: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        color: { base: "fg.muted", _disabled: "fg.subtle", _invalid: "fg.error" }
      },
      content: {
        background: "bg.panel",
        display: "flex",
        flexDirection: "column",
        zIndex: "dropdown",
        borderRadius: "l2",
        outline: 0,
        maxH: "96",
        overflowY: "auto",
        boxShadow: "md",
        _open: {
          animationStyle: "slide-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "slide-fade-out",
          animationDuration: "fastest"
        }
      },
      item: {
        position: "relative",
        userSelect: "none",
        display: "flex",
        alignItems: "center",
        gap: "2",
        cursor: "option",
        justifyContent: "space-between",
        flex: "1",
        textAlign: "start",
        borderRadius: "l1",
        _highlighted: {
          bg: "bg.emphasized/60"
        },
        _disabled: {
          pointerEvents: "none",
          opacity: "0.5"
        },
        _icon: {
          width: "4",
          height: "4"
        }
      },
      control: {
        pos: "relative"
      },
      itemText: {
        flex: "1"
      },
      itemGroup: {
        _first: { mt: "0" }
      },
      itemGroupLabel: {
        py: "1",
        fontWeight: "medium"
      },
      label: {
        fontWeight: "medium",
        userSelect: "none",
        textStyle: "sm",
        _disabled: {
          layerStyle: "disabled"
        }
      },
      valueText: {
        lineClamp: "1",
        maxW: "80%"
      },
      clearTrigger: {
        color: "fg.muted",
        pointerEvents: "auto",
        focusVisibleRing: "inside",
        focusRingWidth: "2px",
        rounded: "l1"
      }
    },
    variants: {
      variant: {
        outline: {
          trigger: {
            bg: "transparent",
            borderWidth: "1px",
            borderColor: "border",
            _expanded: {
              borderColor: "border.emphasized"
            }
          }
        },
        subtle: {
          trigger: {
            borderWidth: "1px",
            borderColor: "transparent",
            bg: "bg.muted"
          }
        }
      },
      size: {
        xs: {
          root: {
            "--select-trigger-height": "sizes.8",
            "--select-trigger-padding-x": "spacing.2"
          },
          content: {
            p: "1",
            gap: "1",
            textStyle: "xs"
          },
          trigger: {
            textStyle: "xs",
            gap: "1"
          },
          item: {
            py: "1",
            px: "2"
          },
          itemGroupLabel: {
            py: "1",
            px: "2"
          },
          indicator: {
            _icon: {
              width: "3.5",
              height: "3.5"
            }
          }
        },
        sm: {
          root: {
            "--select-trigger-height": "sizes.9",
            "--select-trigger-padding-x": "spacing.2.5"
          },
          content: {
            p: "1",
            textStyle: "sm"
          },
          trigger: {
            textStyle: "sm",
            gap: "1"
          },
          indicator: {
            _icon: {
              width: "4",
              height: "4"
            }
          },
          item: {
            py: "1",
            px: "1.5"
          },
          itemGroup: {
            mt: "1"
          },
          itemGroupLabel: {
            py: "1",
            px: "1.5"
          }
        },
        md: {
          root: {
            "--select-trigger-height": "sizes.10",
            "--select-trigger-padding-x": "spacing.3"
          },
          content: {
            p: "1",
            textStyle: "sm"
          },
          itemGroup: {
            mt: "1.5"
          },
          item: {
            py: "1.5",
            px: "2"
          },
          itemIndicator: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          },
          itemGroupLabel: {
            py: "1.5",
            px: "2"
          },
          trigger: {
            textStyle: "sm",
            gap: "2"
          },
          indicator: {
            _icon: {
              width: "4",
              height: "4"
            }
          }
        },
        lg: {
          root: {
            "--select-trigger-height": "sizes.12",
            "--select-trigger-padding-x": "spacing.4"
          },
          content: {
            p: "1.5",
            textStyle: "md"
          },
          itemGroup: {
            mt: "2"
          },
          item: {
            py: "2",
            px: "3"
          },
          itemGroupLabel: {
            py: "2",
            px: "3"
          },
          trigger: {
            textStyle: "md",
            py: "3",
            gap: "2"
          },
          indicator: {
            _icon: {
              width: "5",
              height: "5"
            }
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/native-select.js
  var nativeSelectSlotRecipe = defineSlotRecipe({
    className: "chakra-native-select",
    slots: nativeSelectAnatomy.keys(),
    base: {
      root: {
        height: "fit-content",
        display: "flex",
        width: "100%",
        position: "relative"
      },
      field: {
        width: "100%",
        minWidth: "0",
        outline: "0",
        appearance: "none",
        borderRadius: "l2",
        "--error-color": "colors.border.error",
        "--input-height": "var(--select-field-height)",
        height: "var(--select-field-height)",
        _disabled: {
          layerStyle: "disabled"
        },
        _invalid: {
          focusRingColor: "var(--error-color)",
          borderColor: "var(--error-color)"
        },
        focusVisibleRing: "inside",
        lineHeight: "normal",
        "& > option, & > optgroup": {
          bg: "bg"
        }
      },
      indicator: {
        position: "absolute",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none",
        top: "50%",
        transform: "translateY(-50%)",
        height: "100%",
        color: "fg.muted",
        _disabled: {
          opacity: "0.5"
        },
        _invalid: {
          color: "fg.error"
        },
        _icon: {
          width: "1em",
          height: "1em"
        }
      }
    },
    variants: {
      variant: {
        outline: {
          field: selectSlotRecipe.variants?.variant.outline.trigger
        },
        subtle: {
          field: selectSlotRecipe.variants?.variant.subtle.trigger
        },
        plain: {
          field: {
            bg: "transparent",
            color: "fg",
            focusRingWidth: "2px"
          }
        }
      },
      size: {
        xs: {
          root: {
            "--select-field-height": "sizes.8"
          },
          field: {
            textStyle: "xs",
            ps: "2",
            pe: "6"
          },
          indicator: {
            textStyle: "sm",
            insetEnd: "1.5"
          }
        },
        sm: {
          root: {
            "--select-field-height": "sizes.9"
          },
          field: {
            textStyle: "sm",
            ps: "2.5",
            pe: "8"
          },
          indicator: {
            textStyle: "md",
            insetEnd: "2"
          }
        },
        md: {
          root: {
            "--select-field-height": "sizes.10"
          },
          field: {
            textStyle: "sm",
            ps: "3",
            pe: "8"
          },
          indicator: {
            textStyle: "lg",
            insetEnd: "2"
          }
        },
        lg: {
          root: {
            "--select-field-height": "sizes.11"
          },
          field: {
            textStyle: "md",
            ps: "4",
            pe: "8"
          },
          indicator: {
            textStyle: "xl",
            insetEnd: "3"
          }
        },
        xl: {
          root: {
            "--select-field-height": "sizes.12"
          },
          field: {
            textStyle: "md",
            ps: "4.5",
            pe: "10"
          },
          indicator: {
            textStyle: "xl",
            insetEnd: "3"
          }
        }
      }
    },
    defaultVariants: selectSlotRecipe.defaultVariants
  });

  // node_modules/@chakra-ui/react/dist/esm/utils/entries.js
  function mapEntries2(obj, f) {
    const result = {};
    for (const key in obj) {
      const kv = f(key, obj[key]);
      result[kv[0]] = kv[1];
    }
    return result;
  }

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/number-input.js
  var triggerStyle = defineStyle({
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: "1",
    userSelect: "none",
    cursor: "button",
    lineHeight: "1",
    color: "fg.muted",
    "--stepper-base-radius": "radii.l1",
    "--stepper-radius": "calc(var(--stepper-base-radius) + 1px)",
    _icon: {
      boxSize: "1em"
    },
    _disabled: {
      opacity: "0.5"
    },
    _hover: {
      bg: "bg.muted"
    },
    _active: {
      bg: "bg.emphasized"
    }
  });
  var numberInputSlotRecipe = defineSlotRecipe({
    className: "chakra-number-input",
    slots: anatomy14.keys(),
    base: {
      root: {
        position: "relative",
        zIndex: "0",
        isolation: "isolate"
      },
      input: {
        ...inputRecipe.base,
        verticalAlign: "top",
        pe: "calc(var(--stepper-width) + 0.5rem)"
      },
      control: {
        display: "flex",
        flexDirection: "column",
        position: "absolute",
        top: "0",
        insetEnd: "0px",
        margin: "1px",
        width: "var(--stepper-width)",
        height: "calc(100% - 2px)",
        zIndex: "1",
        borderStartWidth: "1px",
        divideY: "1px"
      },
      incrementTrigger: {
        ...triggerStyle,
        borderTopEndRadius: "var(--stepper-radius)"
      },
      decrementTrigger: {
        ...triggerStyle,
        borderBottomEndRadius: "var(--stepper-radius)"
      },
      valueText: {
        fontWeight: "medium",
        fontFeatureSettings: "pnum",
        fontVariantNumeric: "proportional-nums"
      }
    },
    variants: {
      size: {
        xs: {
          input: inputRecipe.variants.size.xs,
          control: {
            fontSize: "2xs",
            "--stepper-width": "sizes.4"
          }
        },
        sm: {
          input: inputRecipe.variants.size.sm,
          control: {
            fontSize: "xs",
            "--stepper-width": "sizes.5"
          }
        },
        md: {
          input: inputRecipe.variants.size.md,
          control: {
            fontSize: "sm",
            "--stepper-width": "sizes.6"
          }
        },
        lg: {
          input: inputRecipe.variants.size.lg,
          control: {
            fontSize: "sm",
            "--stepper-width": "sizes.6"
          }
        }
      },
      variant: mapEntries2(inputRecipe.variants.variant, (key, variantStyles) => [
        key,
        { input: variantStyles }
      ])
    },
    defaultVariants: {
      size: "md",
      variant: "outline"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/pin-input.js
  var { variants: variants2, defaultVariants: defaultVariants2 } = inputRecipe;
  var pinInputSlotRecipe = defineSlotRecipe({
    className: "chakra-pin-input",
    slots: anatomy15.keys(),
    base: {
      input: {
        ...inputRecipe.base,
        textAlign: "center",
        width: "var(--input-height)"
      },
      control: {
        display: "inline-flex",
        gap: "2",
        isolation: "isolate"
      }
    },
    variants: {
      size: mapEntries2(variants2.size, (key, value) => [
        key,
        { input: { ...value, px: "1" } }
      ]),
      variant: mapEntries2(variants2.variant, (key, value) => [
        key,
        { input: value }
      ]),
      attached: {
        true: {
          control: {
            gap: "0",
            spaceX: "-1px"
          },
          input: {
            _notFirst: { borderStartRadius: "0" },
            _notLast: { borderEndRadius: "0" },
            _focusVisible: { zIndex: "1" }
          }
        }
      }
    },
    defaultVariants: defaultVariants2
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/popover.js
  var popoverSlotRecipe = defineSlotRecipe({
    className: "chakra-popover",
    slots: popoverAnatomy.keys(),
    base: {
      content: {
        position: "relative",
        display: "flex",
        flexDirection: "column",
        textStyle: "sm",
        "--popover-bg": "colors.bg.panel",
        bg: "var(--popover-bg)",
        boxShadow: "lg",
        "--popover-size": "sizes.xs",
        "--popover-mobile-size": "calc(100dvw - 1rem)",
        width: {
          base: "min(var(--popover-mobile-size), var(--popover-size))",
          sm: "var(--popover-size)"
        },
        borderRadius: "l3",
        "--popover-z-index": "zIndex.popover",
        zIndex: "calc(var(--popover-z-index) + var(--layer-index, 0))",
        outline: "0",
        transformOrigin: "var(--transform-origin)",
        maxHeight: "var(--available-height)",
        _open: {
          animationStyle: "scale-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "scale-fade-out",
          animationDuration: "faster"
        }
      },
      header: {
        paddingInline: "var(--popover-padding)",
        paddingTop: "var(--popover-padding)"
      },
      body: {
        padding: "var(--popover-padding)",
        flex: "1"
      },
      footer: {
        display: "flex",
        alignItems: "center",
        paddingInline: "var(--popover-padding)",
        paddingBottom: "var(--popover-padding)"
      },
      arrow: {
        "--arrow-size": "sizes.3",
        "--arrow-background": "var(--popover-bg)"
      },
      arrowTip: {
        borderTopWidth: "1px",
        borderInlineStartWidth: "1px"
      }
    },
    variants: {
      size: {
        xs: {
          content: {
            "--popover-padding": "spacing.3"
          }
        },
        sm: {
          content: {
            "--popover-padding": "spacing.4"
          }
        },
        md: {
          content: {
            "--popover-padding": "spacing.5"
          }
        },
        lg: {
          content: {
            "--popover-padding": "spacing.6"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/progress.js
  var progressSlotRecipe = defineSlotRecipe({
    slots: anatomy17.keys(),
    className: "chakra-progress",
    base: {
      root: {
        textStyle: "sm",
        position: "relative"
      },
      track: {
        overflow: "hidden",
        position: "relative"
      },
      range: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        transitionProperty: "width, height",
        transitionDuration: "slow",
        height: "100%",
        bgColor: "var(--track-color)",
        _indeterminate: {
          "--animate-from-x": "-40%",
          "--animate-to-x": "100%",
          position: "absolute",
          willChange: "left",
          minWidth: "50%",
          animation: "position 1s ease infinite normal none running",
          backgroundImage: `linear-gradient(to right, transparent 0%, var(--track-color) 50%, transparent 100%)`
        }
      },
      label: {
        display: "inline-flex",
        fontWeight: "medium",
        alignItems: "center",
        gap: "1"
      },
      valueText: {
        textStyle: "xs",
        lineHeight: "1",
        fontWeight: "medium"
      }
    },
    variants: {
      variant: {
        outline: {
          track: {
            shadow: "inset",
            bgColor: "bg.muted"
          },
          range: {
            bgColor: "colorPalette.solid"
          }
        },
        subtle: {
          track: {
            bgColor: "colorPalette.muted"
          },
          range: {
            bgColor: "colorPalette.solid/72"
          }
        }
      },
      shape: {
        square: {},
        rounded: {
          track: {
            borderRadius: "l1"
          }
        },
        full: {
          track: {
            borderRadius: "full"
          }
        }
      },
      striped: {
        true: {
          range: {
            backgroundImage: `linear-gradient(45deg, var(--stripe-color) 25%, transparent 25%, transparent 50%, var(--stripe-color) 50%, var(--stripe-color) 75%, transparent 75%, transparent)`,
            backgroundSize: `var(--stripe-size) var(--stripe-size)`,
            "--stripe-size": "1rem",
            "--stripe-color": {
              _light: "rgba(255, 255, 255, 0.3)",
              _dark: "rgba(0, 0, 0, 0.3)"
            }
          }
        }
      },
      animated: {
        true: {
          range: {
            "--animate-from": "var(--stripe-size)",
            animation: "bg-position 1s linear infinite"
          }
        }
      },
      size: {
        xs: {
          track: { h: "1.5" }
        },
        sm: {
          track: { h: "2" }
        },
        md: {
          track: { h: "2.5" }
        },
        lg: {
          track: { h: "3" }
        },
        xl: {
          track: { h: "4" }
        }
      }
    },
    defaultVariants: {
      variant: "outline",
      size: "md",
      shape: "rounded"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/progress-circle.js
  var progressCircleSlotRecipe = defineSlotRecipe({
    className: "chakra-progress-circle",
    slots: anatomy17.keys(),
    base: {
      root: {
        display: "inline-flex",
        textStyle: "sm",
        position: "relative"
      },
      circle: {
        _indeterminate: {
          animation: "spin 2s linear infinite"
        }
      },
      circleTrack: {
        "--track-color": "colors.colorPalette.muted",
        stroke: "var(--track-color)"
      },
      circleRange: {
        stroke: "colorPalette.solid",
        transitionProperty: "stroke-dashoffset, stroke-dasharray",
        transitionDuration: "0.6s",
        _indeterminate: {
          animation: "circular-progress 1.5s linear infinite"
        }
      },
      label: {
        display: "inline-flex"
      },
      valueText: {
        lineHeight: "1",
        fontWeight: "medium",
        letterSpacing: "tight",
        fontVariantNumeric: "tabular-nums"
      }
    },
    variants: {
      size: {
        xs: {
          circle: {
            "--size": "24px",
            "--thickness": "4px"
          },
          valueText: {
            textStyle: "2xs"
          }
        },
        sm: {
          circle: {
            "--size": "32px",
            "--thickness": "5px"
          },
          valueText: {
            textStyle: "2xs"
          }
        },
        md: {
          circle: {
            "--size": "40px",
            "--thickness": "6px"
          },
          valueText: {
            textStyle: "xs"
          }
        },
        lg: {
          circle: {
            "--size": "48px",
            "--thickness": "7px"
          },
          valueText: {
            textStyle: "sm"
          }
        },
        xl: {
          circle: {
            "--size": "64px",
            "--thickness": "8px"
          },
          valueText: {
            textStyle: "sm"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/qr-code.js
  var qrCodeSlotRecipe = defineSlotRecipe({
    slots: anatomy18.keys(),
    className: "chakra-qr-code",
    base: {
      root: {
        position: "relative",
        width: "fit-content",
        "--qr-code-overlay-size": "calc(var(--qr-code-size) / 3)"
      },
      frame: {
        width: "var(--qr-code-size)",
        height: "var(--qr-code-size)",
        fill: "currentColor"
      },
      overlay: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: "var(--qr-code-overlay-size)",
        height: "var(--qr-code-overlay-size)",
        padding: "1",
        bg: "bg",
        rounded: "l1"
      }
    },
    variants: {
      size: {
        "2xs": {
          root: { "--qr-code-size": "40px" }
        },
        xs: {
          root: { "--qr-code-size": "64px" }
        },
        sm: {
          root: { "--qr-code-size": "80px" }
        },
        md: {
          root: { "--qr-code-size": "120px" }
        },
        lg: {
          root: { "--qr-code-size": "160px" }
        },
        xl: {
          root: { "--qr-code-size": "200px" }
        },
        "2xl": {
          root: { "--qr-code-size": "240px" }
        },
        full: {
          root: { "--qr-code-size": "100%" }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/radio-card.js
  var radioCardSlotRecipe = defineSlotRecipe({
    className: "chakra-radio-card",
    slots: radioCardAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1.5",
        isolation: "isolate"
      },
      item: {
        flex: "1",
        display: "flex",
        flexDirection: "column",
        userSelect: "none",
        position: "relative",
        borderRadius: "l2",
        _focus: {
          bg: "colorPalette.muted/20"
        },
        _disabled: {
          opacity: "0.8",
          borderColor: "border.disabled"
        },
        _checked: {
          zIndex: "1"
        }
      },
      label: {
        display: "inline-flex",
        fontWeight: "medium",
        textStyle: "sm",
        _disabled: {
          opacity: "0.5"
        }
      },
      itemText: {
        fontWeight: "medium",
        flex: "1"
      },
      itemDescription: {
        opacity: "0.64",
        textStyle: "sm"
      },
      itemControl: {
        display: "inline-flex",
        flex: "1",
        pos: "relative",
        rounded: "inherit",
        justifyContent: "var(--radio-card-justify)",
        alignItems: "var(--radio-card-align)",
        _disabled: {
          bg: "bg.muted"
        }
      },
      itemIndicator: radiomarkRecipe.base,
      itemAddon: {
        roundedBottom: "inherit",
        _disabled: {
          color: "fg.muted"
        }
      },
      itemContent: {
        display: "flex",
        flexDirection: "column",
        flex: "1",
        gap: "1",
        justifyContent: "var(--radio-card-justify)",
        alignItems: "var(--radio-card-align)"
      }
    },
    variants: {
      size: {
        sm: {
          item: {
            textStyle: "sm"
          },
          itemControl: {
            padding: "3",
            gap: "1.5"
          },
          itemAddon: {
            px: "3",
            py: "1.5",
            borderTopWidth: "1px"
          },
          itemIndicator: radiomarkRecipe.variants?.size.sm
        },
        md: {
          item: {
            textStyle: "sm"
          },
          itemControl: {
            padding: "4",
            gap: "2.5"
          },
          itemAddon: {
            px: "4",
            py: "2",
            borderTopWidth: "1px"
          },
          itemIndicator: radiomarkRecipe.variants?.size.md
        },
        lg: {
          item: {
            textStyle: "md"
          },
          itemControl: {
            padding: "4",
            gap: "3.5"
          },
          itemAddon: {
            px: "4",
            py: "2",
            borderTopWidth: "1px"
          },
          itemIndicator: radiomarkRecipe.variants?.size.lg
        }
      },
      variant: {
        surface: {
          item: {
            borderWidth: "1px",
            _checked: {
              bg: "colorPalette.subtle",
              color: "colorPalette.fg",
              borderColor: "colorPalette.muted"
            }
          },
          itemIndicator: radiomarkRecipe.variants?.variant.solid
        },
        subtle: {
          item: {
            bg: "bg.muted"
          },
          itemControl: {
            _checked: {
              bg: "colorPalette.muted",
              color: "colorPalette.fg"
            }
          },
          itemIndicator: radiomarkRecipe.variants?.variant.outline
        },
        outline: {
          item: {
            borderWidth: "1px",
            _checked: {
              boxShadow: "0 0 0 1px var(--shadow-color)",
              boxShadowColor: "colorPalette.solid",
              borderColor: "colorPalette.solid"
            }
          },
          itemIndicator: radiomarkRecipe.variants?.variant.solid
        },
        solid: {
          item: {
            borderWidth: "1px",
            _checked: {
              bg: "colorPalette.solid",
              color: "colorPalette.contrast",
              borderColor: "colorPalette.solid"
            }
          },
          itemIndicator: radiomarkRecipe.variants?.variant.inverted
        }
      },
      justify: {
        start: {
          item: { "--radio-card-justify": "flex-start" }
        },
        end: {
          item: { "--radio-card-justify": "flex-end" }
        },
        center: {
          item: { "--radio-card-justify": "center" }
        }
      },
      align: {
        start: {
          item: { "--radio-card-align": "flex-start" },
          itemControl: { textAlign: "start" }
        },
        end: {
          item: { "--radio-card-align": "flex-end" },
          itemControl: { textAlign: "end" }
        },
        center: {
          item: { "--radio-card-align": "center" },
          itemControl: { textAlign: "center" }
        }
      },
      orientation: {
        vertical: {
          itemControl: { flexDirection: "column" }
        },
        horizontal: {
          itemControl: { flexDirection: "row" }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline",
      align: "start",
      orientation: "horizontal"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/radio-group.js
  var radioGroupSlotRecipe = defineSlotRecipe({
    className: "chakra-radio-group",
    slots: radioGroupAnatomy.keys(),
    base: {
      item: {
        display: "inline-flex",
        alignItems: "center",
        position: "relative",
        fontWeight: "medium",
        _disabled: {
          cursor: "disabled"
        }
      },
      itemControl: radiomarkRecipe.base,
      label: {
        userSelect: "none",
        textStyle: "sm",
        _disabled: {
          opacity: "0.5"
        }
      }
    },
    variants: {
      variant: {
        outline: {
          itemControl: radiomarkRecipe.variants?.variant?.outline
        },
        subtle: {
          itemControl: radiomarkRecipe.variants?.variant?.subtle
        },
        solid: {
          itemControl: radiomarkRecipe.variants?.variant?.solid
        }
      },
      size: {
        xs: {
          item: { textStyle: "xs", gap: "1.5" },
          itemControl: radiomarkRecipe.variants?.size?.xs
        },
        sm: {
          item: { textStyle: "sm", gap: "2" },
          itemControl: radiomarkRecipe.variants?.size?.sm
        },
        md: {
          item: { textStyle: "sm", gap: "2.5" },
          itemControl: radiomarkRecipe.variants?.size?.md
        },
        lg: {
          item: { textStyle: "md", gap: "3" },
          itemControl: radiomarkRecipe.variants?.size?.lg
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "solid"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/rating-group.js
  var ratingGroupSlotRecipe = defineSlotRecipe({
    className: "chakra-rating-group",
    slots: ratingGroupAnatomy.keys(),
    base: {
      root: {
        display: "inline-flex"
      },
      control: {
        display: "inline-flex",
        alignItems: "center"
      },
      item: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        userSelect: "none"
      },
      itemIndicator: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: "1em",
        height: "1em",
        position: "relative",
        "--clip-path": { base: "inset(0 50% 0 0)", _rtl: "inset(0 0 0 50%)" },
        _icon: {
          stroke: "currentColor",
          width: "100%",
          height: "100%",
          display: "inline-block",
          flexShrink: 0,
          position: "absolute",
          left: 0,
          top: 0
        },
        "& [data-bg]": {
          color: "bg.emphasized"
        },
        "& [data-fg]": {
          color: "transparent"
        },
        "&[data-highlighted]:not([data-half])": {
          "& [data-fg]": {
            color: "colorPalette.solid"
          }
        },
        "&[data-half]": {
          "& [data-fg]": {
            color: "colorPalette.solid",
            clipPath: "var(--clip-path)"
          }
        }
      }
    },
    variants: {
      size: {
        xs: {
          item: {
            textStyle: "sm"
          }
        },
        sm: {
          item: {
            textStyle: "md"
          }
        },
        md: {
          item: {
            textStyle: "xl"
          }
        },
        lg: {
          item: {
            textStyle: "2xl"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/segment-group.js
  var segmentGroupSlotRecipe = defineSlotRecipe({
    className: "chakra-segment-group",
    slots: segmentGroupAnatomy.keys(),
    base: {
      root: {
        "--segment-radius": "radii.l2",
        borderRadius: "l2",
        display: "inline-flex",
        boxShadow: "inset",
        minW: "max-content",
        textAlign: "center",
        position: "relative",
        isolation: "isolate",
        bg: "bg.muted",
        _vertical: {
          flexDirection: "column"
        }
      },
      item: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        userSelect: "none",
        fontSize: "sm",
        position: "relative",
        color: "fg",
        borderRadius: "var(--segment-radius)",
        _disabled: {
          opacity: "0.5"
        },
        "&:has(input:focus-visible)": {
          focusRing: "outside"
        },
        _before: {
          content: '""',
          position: "absolute",
          bg: "border",
          transition: "opacity 0.2s"
        },
        _horizontal: {
          _before: {
            insetInlineStart: 0,
            insetBlock: "1.5",
            width: "1px"
          }
        },
        _vertical: {
          _before: {
            insetBlockStart: 0,
            insetInline: "1.5",
            height: "1px"
          }
        },
        "& + &[data-state=checked], &[data-state=checked] + &, &:first-of-type": {
          _before: {
            opacity: "0"
          }
        },
        "&[data-state=checked][data-ssr]": {
          shadow: "sm",
          bg: "bg",
          borderRadius: "var(--segment-radius)"
        }
      },
      indicator: {
        shadow: "sm",
        pos: "absolute",
        bg: { _light: "bg", _dark: "bg.emphasized" },
        width: "var(--width)",
        height: "var(--height)",
        top: "var(--top)",
        left: "var(--left)",
        zIndex: -1,
        borderRadius: "var(--segment-radius)"
      }
    },
    variants: {
      size: {
        xs: {
          item: {
            textStyle: "xs",
            px: "3",
            gap: "1",
            height: "6"
          }
        },
        sm: {
          item: {
            textStyle: "sm",
            px: "4",
            gap: "2",
            height: "8"
          }
        },
        md: {
          item: {
            textStyle: "sm",
            px: "4",
            gap: "2",
            height: "10"
          }
        },
        lg: {
          item: {
            textStyle: "md",
            px: "4.5",
            gap: "3",
            height: "11"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/slider.js
  var sliderSlotRecipe = defineSlotRecipe({
    className: "chakra-slider",
    slots: sliderAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1",
        textStyle: "sm",
        position: "relative",
        isolation: "isolate",
        touchAction: "none"
      },
      label: {
        fontWeight: "medium",
        textStyle: "sm"
      },
      control: {
        display: "inline-flex",
        alignItems: "center",
        position: "relative"
      },
      track: {
        overflow: "hidden",
        borderRadius: "full",
        flex: "1"
      },
      range: {
        width: "inherit",
        height: "inherit",
        _disabled: { bg: "border.emphasized!" }
      },
      markerGroup: {
        position: "absolute!",
        zIndex: "1"
      },
      marker: {
        "--marker-bg": { base: "white", _underValue: "colors.bg" },
        display: "flex",
        alignItems: "center",
        gap: "calc(var(--slider-thumb-size) / 2)",
        color: "fg.muted",
        textStyle: "xs"
      },
      markerIndicator: {
        width: "var(--slider-marker-size)",
        height: "var(--slider-marker-size)",
        borderRadius: "full",
        bg: "var(--marker-bg)"
      },
      thumb: {
        width: "var(--slider-thumb-size)",
        height: "var(--slider-thumb-size)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        outline: 0,
        zIndex: "2",
        borderRadius: "full",
        _focusVisible: {
          ring: "2px",
          ringColor: "colorPalette.focusRing",
          ringOffset: "2px",
          ringOffsetColor: "bg"
        }
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            "--slider-thumb-size": "sizes.4",
            "--slider-track-size": "sizes.1.5",
            "--slider-marker-center": "6px",
            "--slider-marker-size": "sizes.1",
            "--slider-marker-inset": "3px"
          }
        },
        md: {
          root: {
            "--slider-thumb-size": "sizes.5",
            "--slider-track-size": "sizes.2",
            "--slider-marker-center": "8px",
            "--slider-marker-size": "sizes.1",
            "--slider-marker-inset": "4px"
          }
        },
        lg: {
          root: {
            "--slider-thumb-size": "sizes.6",
            "--slider-track-size": "sizes.2.5",
            "--slider-marker-center": "9px",
            "--slider-marker-size": "sizes.1.5",
            "--slider-marker-inset": "5px"
          }
        }
      },
      variant: {
        outline: {
          track: {
            shadow: "inset",
            bg: "bg.emphasized/72"
          },
          range: {
            bg: "colorPalette.solid"
          },
          thumb: {
            borderWidth: "2px",
            borderColor: "colorPalette.solid",
            bg: "bg",
            _disabled: {
              bg: "border.emphasized",
              borderColor: "border.emphasized"
            }
          }
        },
        solid: {
          track: {
            bg: "colorPalette.subtle",
            _disabled: {
              bg: "bg.muted"
            }
          },
          range: {
            bg: "colorPalette.solid"
          },
          thumb: {
            bg: "colorPalette.solid",
            _disabled: {
              bg: "border.emphasized"
            }
          }
        }
      },
      orientation: {
        vertical: {
          root: {
            display: "inline-flex"
          },
          control: {
            flexDirection: "column",
            height: "100%",
            minWidth: "var(--slider-thumb-size)",
            "&[data-has-mark-label], &:has(.chakra-slider__marker-label)": {
              marginEnd: "4"
            }
          },
          track: {
            width: "var(--slider-track-size)"
          },
          thumb: {
            left: "50%",
            translate: "-50% 0"
          },
          markerGroup: {
            insetStart: "var(--slider-marker-center)",
            insetBlock: "var(--slider-marker-inset)"
          },
          marker: {
            flexDirection: "row"
          }
        },
        horizontal: {
          control: {
            flexDirection: "row",
            width: "100%",
            minHeight: "var(--slider-thumb-size)",
            "&[data-has-mark-label], &:has(.chakra-slider__marker-label)": {
              marginBottom: "4"
            }
          },
          track: {
            height: "var(--slider-track-size)"
          },
          thumb: {
            top: "50%",
            translate: "0 -50%"
          },
          markerGroup: {
            top: "var(--slider-marker-center)",
            insetInline: "var(--slider-marker-inset)"
          },
          marker: {
            flexDirection: "column"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "outline",
      orientation: "horizontal"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/stat.js
  var statSlotRecipe = defineSlotRecipe({
    className: "chakra-stat",
    slots: statAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        gap: "1",
        position: "relative",
        flex: "1"
      },
      label: {
        display: "inline-flex",
        gap: "1.5",
        alignItems: "center",
        color: "fg.muted",
        textStyle: "sm"
      },
      helpText: {
        color: "fg.muted",
        textStyle: "xs"
      },
      valueUnit: {
        color: "fg.muted",
        textStyle: "xs",
        fontWeight: "initial",
        letterSpacing: "initial"
      },
      valueText: {
        verticalAlign: "baseline",
        fontWeight: "semibold",
        letterSpacing: "tight",
        fontFeatureSettings: "pnum",
        fontVariantNumeric: "proportional-nums",
        display: "inline-flex",
        gap: "1"
      },
      indicator: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        marginEnd: 1,
        "& :where(svg)": {
          w: "1em",
          h: "1em"
        },
        "&[data-type=up]": {
          color: "fg.success"
        },
        "&[data-type=down]": {
          color: "fg.error"
        }
      }
    },
    variants: {
      size: {
        sm: {
          valueText: {
            textStyle: "xl"
          }
        },
        md: {
          valueText: {
            textStyle: "2xl"
          }
        },
        lg: {
          valueText: {
            textStyle: "3xl"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/status.js
  var statusSlotRecipe = defineSlotRecipe({
    className: "chakra-status",
    slots: statusAnatomy.keys(),
    base: {
      root: {
        display: "inline-flex",
        alignItems: "center",
        gap: "2"
      },
      indicator: {
        width: "0.64em",
        height: "0.64em",
        flexShrink: 0,
        borderRadius: "full",
        forcedColorAdjust: "none",
        bg: "colorPalette.solid"
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            textStyle: "xs"
          }
        },
        md: {
          root: {
            textStyle: "sm"
          }
        },
        lg: {
          root: {
            textStyle: "md"
          }
        }
      }
    },
    defaultVariants: {
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/steps.js
  var stepsSlotRecipe = defineSlotRecipe({
    className: "chakra-steps",
    slots: stepsAnatomy.keys(),
    base: {
      root: {
        display: "flex",
        width: "full"
      },
      list: {
        display: "flex",
        justifyContent: "space-between",
        "--steps-gutter": "spacing.3",
        "--steps-thickness": "2px"
      },
      title: {
        fontWeight: "medium",
        color: "fg"
      },
      description: {
        color: "fg.muted"
      },
      separator: {
        bg: "border",
        flex: "1"
      },
      indicator: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        flexShrink: "0",
        borderRadius: "full",
        fontWeight: "medium",
        width: "var(--steps-size)",
        height: "var(--steps-size)",
        _icon: {
          flexShrink: "0",
          width: "var(--steps-icon-size)",
          height: "var(--steps-icon-size)"
        }
      },
      item: {
        position: "relative",
        display: "flex",
        gap: "3",
        flex: "1 0 0",
        "&:last-of-type": {
          flex: "initial",
          "& [data-part=separator]": {
            display: "none"
          }
        }
      },
      trigger: {
        display: "flex",
        alignItems: "center",
        gap: "3",
        textAlign: "start",
        focusVisibleRing: "outside",
        borderRadius: "l2"
      },
      content: {
        focusVisibleRing: "outside"
      }
    },
    variants: {
      orientation: {
        vertical: {
          root: {
            flexDirection: "row",
            height: "100%"
          },
          list: {
            flexDirection: "column",
            alignItems: "flex-start"
          },
          separator: {
            position: "absolute",
            width: "var(--steps-thickness)",
            height: "100%",
            maxHeight: "calc(100% - var(--steps-size) - var(--steps-gutter) * 2)",
            top: "calc(var(--steps-size) + var(--steps-gutter))",
            insetStart: "calc(var(--steps-size) / 2 - 1px)"
          },
          item: {
            alignItems: "flex-start"
          }
        },
        horizontal: {
          root: {
            flexDirection: "column",
            width: "100%"
          },
          list: {
            flexDirection: "row",
            alignItems: "center"
          },
          separator: {
            width: "100%",
            height: "var(--steps-thickness)",
            marginX: "var(--steps-gutter)"
          },
          item: {
            alignItems: "center"
          }
        }
      },
      variant: {
        solid: {
          indicator: {
            _incomplete: {
              borderWidth: "var(--steps-thickness)"
            },
            _current: {
              bg: "colorPalette.muted",
              borderWidth: "var(--steps-thickness)",
              borderColor: "colorPalette.solid",
              color: "colorPalette.fg"
            },
            _complete: {
              bg: "colorPalette.solid",
              borderColor: "colorPalette.solid",
              color: "colorPalette.contrast"
            }
          },
          separator: {
            _complete: {
              bg: "colorPalette.solid"
            }
          }
        },
        subtle: {
          indicator: {
            _incomplete: {
              bg: "bg.muted"
            },
            _current: {
              bg: "colorPalette.muted",
              color: "colorPalette.fg"
            },
            _complete: {
              bg: "colorPalette.emphasized",
              color: "colorPalette.fg"
            }
          },
          separator: {
            _complete: {
              bg: "colorPalette.emphasized"
            }
          }
        }
      },
      size: {
        xs: {
          root: {
            gap: "2.5"
          },
          list: {
            "--steps-size": "sizes.6",
            "--steps-icon-size": "sizes.3.5",
            textStyle: "xs"
          },
          title: {
            textStyle: "sm"
          }
        },
        sm: {
          root: {
            gap: "3"
          },
          list: {
            "--steps-size": "sizes.8",
            "--steps-icon-size": "sizes.4",
            textStyle: "xs"
          },
          title: {
            textStyle: "sm"
          }
        },
        md: {
          root: {
            gap: "4"
          },
          list: {
            "--steps-size": "sizes.10",
            "--steps-icon-size": "sizes.4",
            textStyle: "sm"
          },
          title: {
            textStyle: "sm"
          }
        },
        lg: {
          root: {
            gap: "6"
          },
          list: {
            "--steps-size": "sizes.11",
            "--steps-icon-size": "sizes.5",
            textStyle: "md"
          },
          title: {
            textStyle: "md"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "solid",
      orientation: "horizontal"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/switch.js
  var switchSlotRecipe = defineSlotRecipe({
    slots: switchAnatomy.keys(),
    className: "chakra-switch",
    base: {
      root: {
        display: "inline-flex",
        gap: "2.5",
        alignItems: "center",
        position: "relative",
        verticalAlign: "middle",
        "--switch-diff": "calc(var(--switch-width) - var(--switch-height))",
        "--switch-x": {
          base: "var(--switch-diff)",
          _rtl: "calc(var(--switch-diff) * -1)"
        }
      },
      label: {
        lineHeight: "1",
        userSelect: "none",
        fontSize: "sm",
        fontWeight: "medium",
        _disabled: {
          opacity: "0.5"
        }
      },
      indicator: {
        position: "absolute",
        height: "var(--switch-height)",
        width: "var(--switch-height)",
        fontSize: "var(--switch-indicator-font-size)",
        fontWeight: "medium",
        flexShrink: 0,
        userSelect: "none",
        display: "grid",
        placeContent: "center",
        transition: "inset-inline-start 0.12s ease",
        insetInlineStart: "calc(var(--switch-x) - 2px)",
        _checked: {
          insetInlineStart: "2px"
        }
      },
      control: {
        display: "inline-flex",
        gap: "0.5rem",
        flexShrink: 0,
        justifyContent: "flex-start",
        cursor: "switch",
        borderRadius: "full",
        position: "relative",
        width: "var(--switch-width)",
        height: "var(--switch-height)",
        transition: "backgrounds",
        _disabled: {
          opacity: "0.5",
          cursor: "not-allowed"
        },
        _invalid: {
          outline: "2px solid",
          outlineColor: "border.error",
          outlineOffset: "2px"
        }
      },
      thumb: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0,
        transitionProperty: "translate",
        transitionDuration: "fast",
        borderRadius: "inherit",
        _checked: {
          translate: "var(--switch-x) 0"
        }
      }
    },
    variants: {
      variant: {
        solid: {
          control: {
            borderRadius: "full",
            bg: "bg.emphasized",
            focusVisibleRing: "outside",
            _checked: {
              bg: "colorPalette.solid"
            }
          },
          thumb: {
            bg: "white",
            width: "var(--switch-height)",
            height: "var(--switch-height)",
            scale: "0.8",
            boxShadow: "sm",
            _checked: {
              bg: "colorPalette.contrast"
            }
          }
        },
        raised: {
          control: {
            borderRadius: "full",
            height: "calc(var(--switch-height) / 2)",
            bg: "bg.muted",
            boxShadow: "inset",
            _checked: {
              bg: "colorPalette.solid/60"
            }
          },
          thumb: {
            width: "var(--switch-height)",
            height: "var(--switch-height)",
            position: "relative",
            top: "calc(var(--switch-height) * -0.25)",
            bg: "white",
            boxShadow: "xs",
            focusVisibleRing: "outside",
            _checked: {
              bg: "colorPalette.solid"
            }
          }
        }
      },
      size: {
        xs: {
          root: {
            "--switch-width": "sizes.6",
            "--switch-height": "sizes.3",
            "--switch-indicator-font-size": "fontSizes.xs"
          }
        },
        sm: {
          root: {
            "--switch-width": "sizes.8",
            "--switch-height": "sizes.4",
            "--switch-indicator-font-size": "fontSizes.xs"
          }
        },
        md: {
          root: {
            "--switch-width": "sizes.10",
            "--switch-height": "sizes.5",
            "--switch-indicator-font-size": "fontSizes.sm"
          }
        },
        lg: {
          root: {
            "--switch-width": "sizes.12",
            "--switch-height": "sizes.6",
            "--switch-indicator-font-size": "fontSizes.md"
          }
        }
      }
    },
    defaultVariants: {
      variant: "solid",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/table.js
  var tableSlotRecipe = defineSlotRecipe({
    className: "chakra-table",
    slots: tableAnatomy.keys(),
    base: {
      root: {
        fontVariantNumeric: "lining-nums tabular-nums",
        borderCollapse: "collapse",
        width: "full",
        textAlign: "start",
        verticalAlign: "top"
      },
      row: {
        _selected: {
          bg: "colorPalette.subtle"
        }
      },
      cell: {
        textAlign: "start",
        alignItems: "center"
      },
      columnHeader: {
        fontWeight: "medium",
        textAlign: "start",
        color: "fg"
      },
      caption: {
        fontWeight: "medium",
        textStyle: "xs"
      },
      footer: {
        fontWeight: "medium"
      }
    },
    variants: {
      interactive: {
        true: {
          body: {
            "& tr": {
              _hover: {
                bg: "colorPalette.subtle"
              }
            }
          }
        }
      },
      stickyHeader: {
        true: {
          header: {
            "& :where(tr)": {
              top: "var(--table-sticky-offset, 0)",
              position: "sticky",
              zIndex: 1
            }
          }
        }
      },
      striped: {
        true: {
          row: {
            "&:nth-of-type(odd) td": {
              bg: "bg.muted"
            }
          }
        }
      },
      showColumnBorder: {
        true: {
          columnHeader: {
            "&:not(:last-of-type)": {
              borderInlineEndWidth: "1px"
            }
          },
          cell: {
            "&:not(:last-of-type)": {
              borderInlineEndWidth: "1px"
            }
          }
        }
      },
      variant: {
        line: {
          columnHeader: {
            borderBottomWidth: "1px"
          },
          cell: {
            borderBottomWidth: "1px"
          },
          row: {
            bg: "bg"
          }
        },
        outline: {
          root: {
            boxShadow: "0 0 0 1px {colors.border}",
            overflow: "hidden"
          },
          columnHeader: {
            borderBottomWidth: "1px"
          },
          header: {
            bg: "bg.muted"
          },
          row: {
            "&:not(:last-of-type)": {
              borderBottomWidth: "1px"
            }
          },
          footer: {
            borderTopWidth: "1px"
          }
        }
      },
      size: {
        sm: {
          root: {
            textStyle: "sm"
          },
          columnHeader: {
            px: "2",
            py: "2"
          },
          cell: {
            px: "2",
            py: "2"
          }
        },
        md: {
          root: {
            textStyle: "sm"
          },
          columnHeader: {
            px: "3",
            py: "3"
          },
          cell: {
            px: "3",
            py: "3"
          }
        },
        lg: {
          root: {
            textStyle: "md"
          },
          columnHeader: {
            px: "4",
            py: "3"
          },
          cell: {
            px: "4",
            py: "3"
          }
        }
      }
    },
    defaultVariants: {
      variant: "line",
      size: "md"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/tabs.js
  var tabsSlotRecipe = defineSlotRecipe({
    slots: tabsAnatomy.keys(),
    className: "chakra-tabs",
    base: {
      root: {
        "--tabs-trigger-radius": "radii.l2",
        position: "relative",
        _horizontal: {
          display: "block"
        },
        _vertical: {
          display: "flex"
        }
      },
      list: {
        display: "inline-flex",
        position: "relative",
        isolation: "isolate",
        "--tabs-indicator-shadow": "shadows.xs",
        "--tabs-indicator-bg": "colors.bg",
        minH: "var(--tabs-height)",
        _horizontal: {
          flexDirection: "row"
        },
        _vertical: {
          flexDirection: "column"
        }
      },
      trigger: {
        outline: "0",
        minW: "var(--tabs-height)",
        height: "var(--tabs-height)",
        display: "flex",
        alignItems: "center",
        fontWeight: "medium",
        position: "relative",
        cursor: "button",
        gap: "2",
        _focusVisible: {
          zIndex: 1,
          outline: "2px solid",
          outlineColor: "colorPalette.focusRing"
        },
        _disabled: {
          cursor: "not-allowed",
          opacity: 0.5
        }
      },
      content: {
        focusVisibleRing: "inside",
        _horizontal: {
          width: "100%",
          pt: "var(--tabs-content-padding)"
        },
        _vertical: {
          height: "100%",
          ps: "var(--tabs-content-padding)"
        }
      },
      indicator: {
        width: "var(--width)",
        height: "var(--height)",
        borderRadius: "var(--tabs-indicator-radius)",
        bg: "var(--tabs-indicator-bg)",
        shadow: "var(--tabs-indicator-shadow)",
        zIndex: -1
      }
    },
    variants: {
      fitted: {
        true: {
          list: {
            display: "flex"
          },
          trigger: {
            flex: 1,
            textAlign: "center",
            justifyContent: "center"
          }
        }
      },
      justify: {
        start: {
          list: {
            justifyContent: "flex-start"
          }
        },
        center: {
          list: {
            justifyContent: "center"
          }
        },
        end: {
          list: {
            justifyContent: "flex-end"
          }
        }
      },
      size: {
        sm: {
          root: {
            "--tabs-height": "sizes.9",
            "--tabs-content-padding": "spacing.3"
          },
          trigger: {
            py: "1",
            px: "3",
            textStyle: "sm"
          }
        },
        md: {
          root: {
            "--tabs-height": "sizes.10",
            "--tabs-content-padding": "spacing.4"
          },
          trigger: {
            py: "2",
            px: "4",
            textStyle: "sm"
          }
        },
        lg: {
          root: {
            "--tabs-height": "sizes.11",
            "--tabs-content-padding": "spacing.4.5"
          },
          trigger: {
            py: "2",
            px: "4.5",
            textStyle: "md"
          }
        }
      },
      variant: {
        line: {
          list: {
            display: "flex",
            borderColor: "border",
            _horizontal: {
              borderBottomWidth: "1px"
            },
            _vertical: {
              borderEndWidth: "1px"
            }
          },
          trigger: {
            color: "fg.muted",
            _disabled: {
              _active: { bg: "initial" }
            },
            _selected: {
              color: "fg",
              _horizontal: {
                layerStyle: "indicator.bottom",
                "--indicator-offset-y": "-1px",
                "--indicator-color": "colors.colorPalette.solid"
              },
              _vertical: {
                layerStyle: "indicator.end",
                "--indicator-offset-x": "-1px"
              }
            }
          }
        },
        subtle: {
          trigger: {
            borderRadius: "var(--tabs-trigger-radius)",
            color: "fg.muted",
            _selected: {
              bg: "colorPalette.subtle",
              color: "colorPalette.fg"
            }
          }
        },
        enclosed: {
          list: {
            bg: "bg.muted",
            padding: "1",
            borderRadius: "l3",
            minH: "calc(var(--tabs-height) - 4px)"
          },
          trigger: {
            justifyContent: "center",
            color: "fg.muted",
            borderRadius: "var(--tabs-trigger-radius)",
            _selected: {
              bg: "bg",
              color: "colorPalette.fg",
              shadow: "xs"
            }
          }
        },
        outline: {
          list: {
            "--line-thickness": "1px",
            "--line-offset": "calc(var(--line-thickness) * -1)",
            borderColor: "border",
            display: "flex",
            _horizontal: {
              _before: {
                content: '""',
                position: "absolute",
                bottom: "0px",
                width: "100%",
                borderBottomWidth: "var(--line-thickness)",
                borderBottomColor: "border"
              }
            },
            _vertical: {
              _before: {
                content: '""',
                position: "absolute",
                insetInline: "var(--line-offset)",
                height: "calc(100% - calc(var(--line-thickness) * 2))",
                borderEndWidth: "var(--line-thickness)",
                borderEndColor: "border"
              }
            }
          },
          trigger: {
            color: "fg.muted",
            borderWidth: "1px",
            borderColor: "transparent",
            _selected: {
              bg: "currentBg",
              color: "colorPalette.fg"
            },
            _horizontal: {
              borderTopRadius: "var(--tabs-trigger-radius)",
              marginBottom: "var(--line-offset)",
              marginEnd: { _notLast: "var(--line-offset)" },
              _selected: {
                borderColor: "border",
                borderBottomColor: "transparent"
              }
            },
            _vertical: {
              borderStartRadius: "var(--tabs-trigger-radius)",
              marginEnd: "var(--line-offset)",
              marginBottom: { _notLast: "var(--line-offset)" },
              _selected: {
                borderColor: "border",
                borderEndColor: "transparent"
              }
            }
          }
        },
        plain: {
          trigger: {
            color: "fg.muted",
            _selected: {
              color: "colorPalette.fg"
            },
            borderRadius: "var(--tabs-trigger-radius)",
            "&[data-selected][data-ssr]": {
              bg: "var(--tabs-indicator-bg)",
              shadow: "var(--tabs-indicator-shadow)",
              borderRadius: "var(--tabs-indicator-radius)"
            }
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "line"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/tag.js
  var badgeVariant = badgeRecipe.variants?.variant;
  var tagSlotRecipe = defineSlotRecipe({
    slots: tagAnatomy.keys(),
    className: "chakra-tag",
    base: {
      root: {
        display: "inline-flex",
        alignItems: "center",
        verticalAlign: "top",
        maxWidth: "100%",
        userSelect: "none",
        borderRadius: "l2",
        focusVisibleRing: "outside"
      },
      label: {
        lineClamp: "1"
      },
      closeTrigger: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        outline: "0",
        borderRadius: "l1",
        color: "currentColor",
        focusVisibleRing: "inside",
        focusRingWidth: "2px"
      },
      startElement: {
        flexShrink: 0,
        boxSize: "var(--tag-element-size)",
        ms: "var(--tag-element-offset)",
        "&:has([data-scope=avatar])": {
          boxSize: "var(--tag-avatar-size)",
          ms: "calc(var(--tag-element-offset) * 1.5)"
        },
        _icon: { boxSize: "100%" }
      },
      endElement: {
        flexShrink: 0,
        boxSize: "var(--tag-element-size)",
        me: "var(--tag-element-offset)",
        _icon: { boxSize: "100%" },
        "&:has(button)": {
          ms: "calc(var(--tag-element-offset) * -1)"
        }
      }
    },
    variants: {
      size: {
        sm: {
          root: {
            px: "1.5",
            minH: "4.5",
            gap: "1",
            "--tag-avatar-size": "spacing.3",
            "--tag-element-size": "spacing.3",
            "--tag-element-offset": "-2px"
          },
          label: {
            textStyle: "xs"
          }
        },
        md: {
          root: {
            px: "1.5",
            minH: "5",
            gap: "1",
            "--tag-avatar-size": "spacing.3.5",
            "--tag-element-size": "spacing.3.5",
            "--tag-element-offset": "-2px"
          },
          label: {
            textStyle: "xs"
          }
        },
        lg: {
          root: {
            px: "2",
            minH: "6",
            gap: "1.5",
            "--tag-avatar-size": "spacing.4.5",
            "--tag-element-size": "spacing.4",
            "--tag-element-offset": "-3px"
          },
          label: {
            textStyle: "sm"
          }
        },
        xl: {
          root: {
            px: "2.5",
            minH: "8",
            gap: "1.5",
            "--tag-avatar-size": "spacing.6",
            "--tag-element-size": "spacing.4.5",
            "--tag-element-offset": "-4px"
          },
          label: {
            textStyle: "sm"
          }
        }
      },
      variant: {
        subtle: {
          root: badgeVariant?.subtle
        },
        solid: {
          root: badgeVariant?.solid
        },
        outline: {
          root: badgeVariant?.outline
        },
        surface: {
          root: badgeVariant?.surface
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "surface"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/timeline.js
  var timelineSlotRecipe = defineSlotRecipe({
    slots: timelineAnatomy.keys(),
    className: "chakra-timeline",
    base: {
      root: {
        display: "flex",
        flexDirection: "column",
        width: "full",
        "--timeline-thickness": "1px",
        "--timeline-gutter": "4px"
      },
      item: {
        display: "flex",
        position: "relative",
        alignItems: "flex-start",
        flexShrink: 0,
        gap: "4",
        _last: {
          "& :where(.chakra-timeline__separator)": { display: "none" }
        }
      },
      separator: {
        position: "absolute",
        borderStartWidth: "var(--timeline-thickness)",
        ms: "calc(-1 * var(--timeline-thickness) / 2)",
        insetInlineStart: "calc(var(--timeline-indicator-size) / 2)",
        insetBlock: "0",
        borderColor: "border"
      },
      indicator: {
        outline: "2px solid {colors.bg}",
        position: "relative",
        flexShrink: "0",
        boxSize: "var(--timeline-indicator-size)",
        fontSize: "var(--timeline-font-size)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: "full",
        fontWeight: "medium"
      },
      connector: {
        alignSelf: "stretch",
        position: "relative"
      },
      content: {
        pb: "6",
        display: "flex",
        flexDirection: "column",
        width: "full",
        gap: "2"
      },
      title: {
        display: "flex",
        fontWeight: "medium",
        flexWrap: "wrap",
        gap: "1.5",
        alignItems: "center",
        mt: "var(--timeline-margin)"
      },
      description: {
        color: "fg.muted",
        textStyle: "xs"
      }
    },
    variants: {
      variant: {
        subtle: {
          indicator: {
            bg: "colorPalette.muted"
          }
        },
        solid: {
          indicator: {
            bg: "colorPalette.solid",
            color: "colorPalette.contrast"
          }
        },
        outline: {
          indicator: {
            bg: "currentBg",
            borderWidth: "1px",
            borderColor: "colorPalette.muted"
          }
        },
        plain: {}
      },
      size: {
        sm: {
          root: {
            "--timeline-indicator-size": "sizes.4",
            "--timeline-font-size": "fontSizes.2xs"
          },
          title: {
            textStyle: "xs"
          }
        },
        md: {
          root: {
            "--timeline-indicator-size": "sizes.5",
            "--timeline-font-size": "fontSizes.xs"
          },
          title: {
            textStyle: "sm"
          }
        },
        lg: {
          root: {
            "--timeline-indicator-size": "sizes.6",
            "--timeline-font-size": "fontSizes.xs"
          },
          title: {
            mt: "0.5",
            textStyle: "sm"
          }
        },
        xl: {
          root: {
            "--timeline-indicator-size": "sizes.8",
            "--timeline-font-size": "fontSizes.sm"
          },
          title: {
            mt: "1.5",
            textStyle: "sm"
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "solid"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/toast.js
  var toastSlotRecipe = defineSlotRecipe({
    slots: toastAnatomy.keys(),
    className: "chakra-toast",
    base: {
      root: {
        width: "full",
        display: "flex",
        alignItems: "flex-start",
        position: "relative",
        gap: "3",
        py: "4",
        ps: "4",
        pe: "6",
        borderRadius: "l2",
        translate: "var(--x) var(--y)",
        scale: "var(--scale)",
        zIndex: "var(--z-index)",
        height: "var(--height)",
        opacity: "var(--opacity)",
        willChange: "translate, opacity, scale",
        transition: "translate 400ms, scale 400ms, opacity 400ms, height 400ms, box-shadow 200ms",
        transitionTimingFunction: "cubic-bezier(0.21, 1.02, 0.73, 1)",
        _closed: {
          transition: "translate 400ms, scale 400ms, opacity 200ms",
          transitionTimingFunction: "cubic-bezier(0.06, 0.71, 0.55, 1)"
        },
        bg: "bg.panel",
        color: "fg",
        boxShadow: "xl",
        "--toast-trigger-bg": "colors.bg.muted",
        "&[data-type=warning]": {
          bg: "orange.solid",
          color: "orange.contrast",
          "--toast-trigger-bg": "{white/10}",
          "--toast-border-color": "{white/40}"
        },
        "&[data-type=success]": {
          bg: "green.solid",
          color: "green.contrast",
          "--toast-trigger-bg": "{white/10}",
          "--toast-border-color": "{white/40}"
        },
        "&[data-type=error]": {
          bg: "red.solid",
          color: "red.contrast",
          "--toast-trigger-bg": "{white/10}",
          "--toast-border-color": "{white/40}"
        }
      },
      title: {
        fontWeight: "medium",
        textStyle: "sm",
        marginEnd: "2"
      },
      description: {
        display: "inline",
        textStyle: "sm",
        opacity: "0.8"
      },
      indicator: {
        flexShrink: "0",
        boxSize: "5"
      },
      actionTrigger: {
        textStyle: "sm",
        fontWeight: "medium",
        height: "8",
        px: "3",
        borderRadius: "l2",
        alignSelf: "center",
        borderWidth: "1px",
        borderColor: "var(--toast-border-color, inherit)",
        transition: "background 200ms",
        _hover: {
          bg: "var(--toast-trigger-bg)"
        }
      },
      closeTrigger: {
        position: "absolute",
        top: "1",
        insetEnd: "1",
        padding: "1",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        color: "{currentColor/60}",
        borderRadius: "l2",
        textStyle: "md",
        transition: "background 200ms",
        _icon: {
          boxSize: "1em"
        }
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/tooltip.js
  var tooltipSlotRecipe = defineSlotRecipe({
    slots: anatomy24.keys(),
    className: "chakra-tooltip",
    base: {
      content: {
        "--tooltip-bg": "colors.bg.inverted",
        bg: "var(--tooltip-bg)",
        color: "fg.inverted",
        px: "2.5",
        py: "1",
        borderRadius: "l2",
        fontWeight: "medium",
        textStyle: "xs",
        boxShadow: "md",
        maxW: "xs",
        zIndex: "tooltip",
        transformOrigin: "var(--transform-origin)",
        _open: {
          animationStyle: "scale-fade-in",
          animationDuration: "fast"
        },
        _closed: {
          animationStyle: "scale-fade-out",
          animationDuration: "fast"
        }
      },
      arrow: {
        "--arrow-size": "sizes.2",
        "--arrow-background": "var(--tooltip-bg)"
      },
      arrowTip: {
        borderTopWidth: "1px",
        borderInlineStartWidth: "1px",
        borderColor: "var(--tooltip-bg)"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/recipes/tree-view.js
  var baseItemStyle = defineStyle({
    display: "flex",
    alignItems: "center",
    gap: "var(--tree-item-gap)",
    rounded: "l2",
    userSelect: "none",
    position: "relative",
    "--tree-depth": "calc(var(--depth) - 1)",
    "--tree-indentation-offset": "calc(var(--tree-indentation) * var(--tree-depth))",
    "--tree-icon-offset": "calc(var(--tree-icon-size) * var(--tree-depth) * 0.5)",
    "--tree-offset": "calc(var(--tree-padding-inline) + var(--tree-indentation-offset) + var(--tree-icon-offset))",
    ps: "var(--tree-offset)",
    pe: "var(--tree-padding-inline)",
    py: "var(--tree-padding-block)",
    focusVisibleRing: "inside",
    focusRingColor: "border.emphasized",
    focusRingWidth: "2px",
    "&:hover, &:focus-visible": {
      bg: "bg.muted"
    },
    _disabled: {
      layerStyle: "disabled"
    }
  });
  var baseTextStyle = defineStyle({
    flex: "1"
  });
  var subtleVariantStyle = defineStyle({
    _selected: {
      bg: "colorPalette.subtle",
      color: "colorPalette.fg"
    }
  });
  var solidVariantStyle = defineStyle({
    _selected: {
      layerStyle: "fill.solid"
    }
  });
  var treeViewSlotRecipe = defineSlotRecipe({
    slots: anatomy13.keys(),
    className: "chakra-tree-view",
    base: {
      root: {
        width: "full",
        display: "flex",
        flexDirection: "column",
        gap: "2"
      },
      tree: {
        display: "flex",
        flexDirection: "column",
        "--tree-item-gap": "spacing.2",
        _icon: {
          boxSize: "var(--tree-icon-size)"
        }
      },
      label: {
        fontWeight: "medium",
        textStyle: "sm"
      },
      branch: {
        position: "relative"
      },
      branchContent: {
        position: "relative"
      },
      branchIndentGuide: {
        height: "100%",
        width: "1px",
        bg: "border",
        position: "absolute",
        "--tree-depth": "calc(var(--depth) - 1)",
        "--tree-indentation-offset": "calc(var(--tree-indentation) * var(--tree-depth))",
        "--tree-offset": "calc(var(--tree-padding-inline) + var(--tree-indentation-offset))",
        "--tree-icon-offset": "calc(var(--tree-icon-size) * 0.5 * var(--depth))",
        insetInlineStart: "calc(var(--tree-offset) + var(--tree-icon-offset))",
        zIndex: "1"
      },
      branchIndicator: {
        color: "fg.muted",
        transformOrigin: "center",
        transitionDuration: "normal",
        transitionProperty: "transform",
        transitionTimingFunction: "default",
        _open: {
          transform: "rotate(90deg)"
        }
      },
      branchTrigger: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center"
      },
      branchControl: baseItemStyle,
      item: baseItemStyle,
      itemText: baseTextStyle,
      branchText: baseTextStyle,
      nodeCheckbox: {
        display: "inline-flex"
      }
    },
    variants: {
      size: {
        md: {
          tree: {
            textStyle: "sm",
            "--tree-indentation": "spacing.4",
            "--tree-padding-inline": "spacing.3",
            "--tree-padding-block": "spacing.1.5",
            "--tree-icon-size": "spacing.4"
          }
        },
        sm: {
          tree: {
            textStyle: "sm",
            "--tree-indentation": "spacing.4",
            "--tree-padding-inline": "spacing.3",
            "--tree-padding-block": "spacing.1",
            "--tree-icon-size": "spacing.3"
          }
        },
        xs: {
          tree: {
            textStyle: "xs",
            "--tree-indentation": "spacing.4",
            "--tree-padding-inline": "spacing.2",
            "--tree-padding-block": "spacing.1",
            "--tree-icon-size": "spacing.3"
          }
        }
      },
      variant: {
        subtle: {
          branchControl: subtleVariantStyle,
          item: subtleVariantStyle
        },
        solid: {
          branchControl: solidVariantStyle,
          item: solidVariantStyle
        }
      },
      animateContent: {
        true: {
          branchContent: {
            _open: {
              animationName: "expand-height, fade-in",
              animationDuration: "moderate"
            },
            _closed: {
              animationName: "collapse-height, fade-out",
              animationDuration: "moderate"
            }
          }
        }
      }
    },
    defaultVariants: {
      size: "md",
      variant: "subtle"
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/slot-recipes.js
  var slotRecipes = {
    accordion: accordionSlotRecipe,
    actionBar: actionBarSlotRecipe,
    alert: alertSlotRecipe,
    avatar: avatarSlotRecipe,
    blockquote: blockquoteSlotRecipe,
    breadcrumb: breadcrumbSlotRecipe,
    card: cardSlotRecipe,
    checkbox: checkboxSlotRecipe,
    checkboxCard: checkboxCardSlotRecipe,
    codeBlock: codeBlockSlotRecipe,
    collapsible: collapsibleSlotRecipe,
    dataList: dataListSlotRecipe,
    dialog: dialogSlotRecipe,
    drawer: drawerSlotRecipe,
    editable: editableSlotRecipe,
    emptyState: emptyStateSlotRecipe,
    field: fieldSlotRecipe,
    fieldset: fieldsetSlotRecipe,
    fileUpload: fileUploadSlotRecipe,
    hoverCard: hoverCardSlotRecipe,
    list: listSlotRecipe,
    menu: menuSlotRecipe,
    nativeSelect: nativeSelectSlotRecipe,
    numberInput: numberInputSlotRecipe,
    pinInput: pinInputSlotRecipe,
    popover: popoverSlotRecipe,
    progress: progressSlotRecipe,
    progressCircle: progressCircleSlotRecipe,
    radioCard: radioCardSlotRecipe,
    radioGroup: radioGroupSlotRecipe,
    ratingGroup: ratingGroupSlotRecipe,
    segmentGroup: segmentGroupSlotRecipe,
    select: selectSlotRecipe,
    combobox: comboboxSlotRecipe,
    slider: sliderSlotRecipe,
    stat: statSlotRecipe,
    steps: stepsSlotRecipe,
    switch: switchSlotRecipe,
    table: tableSlotRecipe,
    tabs: tabsSlotRecipe,
    tag: tagSlotRecipe,
    toast: toastSlotRecipe,
    tooltip: tooltipSlotRecipe,
    status: statusSlotRecipe,
    timeline: timelineSlotRecipe,
    colorPicker: colorPickerSlotRecipe,
    qrCode: qrCodeSlotRecipe,
    treeView: treeViewSlotRecipe
  };

  // node_modules/@chakra-ui/react/dist/esm/theme/text-styles.js
  var textStyles = defineTextStyles({
    "2xs": { value: { fontSize: "2xs", lineHeight: "0.75rem" } },
    xs: { value: { fontSize: "xs", lineHeight: "1rem" } },
    sm: { value: { fontSize: "sm", lineHeight: "1.25rem" } },
    md: { value: { fontSize: "md", lineHeight: "1.5rem" } },
    lg: { value: { fontSize: "lg", lineHeight: "1.75rem" } },
    xl: { value: { fontSize: "xl", lineHeight: "1.875rem" } },
    "2xl": { value: { fontSize: "2xl", lineHeight: "2rem" } },
    "3xl": { value: { fontSize: "3xl", lineHeight: "2.375rem" } },
    "4xl": {
      value: {
        fontSize: "4xl",
        lineHeight: "2.75rem",
        letterSpacing: "-0.025em"
      }
    },
    "5xl": {
      value: {
        fontSize: "5xl",
        lineHeight: "3.75rem",
        letterSpacing: "-0.025em"
      }
    },
    "6xl": {
      value: { fontSize: "6xl", lineHeight: "4.5rem", letterSpacing: "-0.025em" }
    },
    "7xl": {
      value: {
        fontSize: "7xl",
        lineHeight: "5.75rem",
        letterSpacing: "-0.025em"
      }
    },
    none: {
      value: {}
    },
    label: {
      value: {
        fontSize: "sm",
        lineHeight: "1.25rem",
        fontWeight: "medium"
      }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/animations.js
  var animations = defineTokens.animations({
    spin: { value: "spin 1s linear infinite" },
    ping: { value: "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite" },
    pulse: { value: "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite" },
    bounce: { value: "bounce 1s infinite" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/aspect-ratios.js
  var aspectRatios = defineTokens.aspectRatios({
    square: { value: "1 / 1" },
    landscape: { value: "4 / 3" },
    portrait: { value: "3 / 4" },
    wide: { value: "16 / 9" },
    ultrawide: { value: "18 / 5" },
    golden: { value: "1.618 / 1" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/blurs.js
  var blurs = defineTokens.blurs({
    none: { value: " " },
    sm: { value: "4px" },
    md: { value: "8px" },
    lg: { value: "12px" },
    xl: { value: "16px" },
    "2xl": { value: "24px" },
    "3xl": { value: "40px" },
    "4xl": { value: "64px" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/borders.js
  var borders = defineTokens.borders({
    xs: { value: "0.5px solid" },
    sm: { value: "1px solid" },
    md: { value: "2px solid" },
    lg: { value: "4px solid" },
    xl: { value: "8px solid" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/colors.js
  var colors = defineTokens.colors({
    transparent: { value: "transparent" },
    current: { value: "currentColor" },
    black: { value: "#09090B" },
    white: { value: "#FFFFFF" },
    whiteAlpha: {
      50: { value: "rgba(255, 255, 255, 0.04)" },
      100: { value: "rgba(255, 255, 255, 0.06)" },
      200: { value: "rgba(255, 255, 255, 0.08)" },
      300: { value: "rgba(255, 255, 255, 0.16)" },
      400: { value: "rgba(255, 255, 255, 0.24)" },
      500: { value: "rgba(255, 255, 255, 0.36)" },
      600: { value: "rgba(255, 255, 255, 0.48)" },
      700: { value: "rgba(255, 255, 255, 0.64)" },
      800: { value: "rgba(255, 255, 255, 0.80)" },
      900: { value: "rgba(255, 255, 255, 0.92)" },
      950: { value: "rgba(255, 255, 255, 0.95)" }
    },
    blackAlpha: {
      50: { value: "rgba(0, 0, 0, 0.04)" },
      100: { value: "rgba(0, 0, 0, 0.06)" },
      200: { value: "rgba(0, 0, 0, 0.08)" },
      300: { value: "rgba(0, 0, 0, 0.16)" },
      400: { value: "rgba(0, 0, 0, 0.24)" },
      500: { value: "rgba(0, 0, 0, 0.36)" },
      600: { value: "rgba(0, 0, 0, 0.48)" },
      700: { value: "rgba(0, 0, 0, 0.64)" },
      800: { value: "rgba(0, 0, 0, 0.80)" },
      900: { value: "rgba(0, 0, 0, 0.92)" },
      950: { value: "rgba(0, 0, 0, 0.95)" }
    },
    gray: {
      50: { value: "#fafafa" },
      100: { value: "#f4f4f5" },
      200: { value: "#e4e4e7" },
      300: { value: "#d4d4d8" },
      400: { value: "#a1a1aa" },
      500: { value: "#71717a" },
      600: { value: "#52525b" },
      700: { value: "#3f3f46" },
      800: { value: "#27272a" },
      900: { value: "#18181b" },
      950: { value: "#111111" }
    },
    red: {
      50: { value: "#fef2f2" },
      100: { value: "#fee2e2" },
      200: { value: "#fecaca" },
      300: { value: "#fca5a5" },
      400: { value: "#f87171" },
      500: { value: "#ef4444" },
      600: { value: "#dc2626" },
      700: { value: "#991919" },
      800: { value: "#511111" },
      900: { value: "#300c0c" },
      950: { value: "#1f0808" }
    },
    orange: {
      50: { value: "#fff7ed" },
      100: { value: "#ffedd5" },
      200: { value: "#fed7aa" },
      300: { value: "#fdba74" },
      400: { value: "#fb923c" },
      500: { value: "#f97316" },
      600: { value: "#ea580c" },
      700: { value: "#92310a" },
      800: { value: "#6c2710" },
      900: { value: "#3b1106" },
      950: { value: "#220a04" }
    },
    yellow: {
      50: { value: "#fefce8" },
      100: { value: "#fef9c3" },
      200: { value: "#fef08a" },
      300: { value: "#fde047" },
      400: { value: "#facc15" },
      500: { value: "#eab308" },
      600: { value: "#ca8a04" },
      700: { value: "#845209" },
      800: { value: "#713f12" },
      900: { value: "#422006" },
      950: { value: "#281304" }
    },
    green: {
      50: { value: "#f0fdf4" },
      100: { value: "#dcfce7" },
      200: { value: "#bbf7d0" },
      300: { value: "#86efac" },
      400: { value: "#4ade80" },
      500: { value: "#22c55e" },
      600: { value: "#16a34a" },
      700: { value: "#116932" },
      800: { value: "#124a28" },
      900: { value: "#042713" },
      950: { value: "#03190c" }
    },
    teal: {
      50: { value: "#f0fdfa" },
      100: { value: "#ccfbf1" },
      200: { value: "#99f6e4" },
      300: { value: "#5eead4" },
      400: { value: "#2dd4bf" },
      500: { value: "#14b8a6" },
      600: { value: "#0d9488" },
      700: { value: "#0c5d56" },
      800: { value: "#114240" },
      900: { value: "#032726" },
      950: { value: "#021716" }
    },
    blue: {
      50: { value: "#eff6ff" },
      100: { value: "#dbeafe" },
      200: { value: "#bfdbfe" },
      300: { value: "#a3cfff" },
      400: { value: "#60a5fa" },
      500: { value: "#3b82f6" },
      600: { value: "#2563eb" },
      700: { value: "#173da6" },
      800: { value: "#1a3478" },
      900: { value: "#14204a" },
      950: { value: "#0c142e" }
    },
    cyan: {
      50: { value: "#ecfeff" },
      100: { value: "#cffafe" },
      200: { value: "#a5f3fc" },
      300: { value: "#67e8f9" },
      400: { value: "#22d3ee" },
      500: { value: "#06b6d4" },
      600: { value: "#0891b2" },
      700: { value: "#0c5c72" },
      800: { value: "#134152" },
      900: { value: "#072a38" },
      950: { value: "#051b24" }
    },
    purple: {
      50: { value: "#faf5ff" },
      100: { value: "#f3e8ff" },
      200: { value: "#e9d5ff" },
      300: { value: "#d8b4fe" },
      400: { value: "#c084fc" },
      500: { value: "#a855f7" },
      600: { value: "#9333ea" },
      700: { value: "#641ba3" },
      800: { value: "#4a1772" },
      900: { value: "#2f0553" },
      950: { value: "#1a032e" }
    },
    pink: {
      50: { value: "#fdf2f8" },
      100: { value: "#fce7f3" },
      200: { value: "#fbcfe8" },
      300: { value: "#f9a8d4" },
      400: { value: "#f472b6" },
      500: { value: "#ec4899" },
      600: { value: "#db2777" },
      700: { value: "#a41752" },
      800: { value: "#6d0e34" },
      900: { value: "#45061f" },
      950: { value: "#2c0514" }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/cursor.js
  var cursor2 = defineTokens.cursor({
    button: { value: "pointer" },
    checkbox: { value: "default" },
    disabled: { value: "not-allowed" },
    menuitem: { value: "default" },
    option: { value: "default" },
    radio: { value: "default" },
    slider: { value: "default" },
    switch: { value: "pointer" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/durations.js
  var durations = defineTokens.durations({
    fastest: { value: "50ms" },
    faster: { value: "100ms" },
    fast: { value: "150ms" },
    moderate: { value: "200ms" },
    slow: { value: "300ms" },
    slower: { value: "400ms" },
    slowest: { value: "500ms" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/easings.js
  var easings = defineTokens.easings({
    "ease-in": { value: "cubic-bezier(0.42, 0, 1, 1)" },
    "ease-out": { value: "cubic-bezier(0, 0, 0.58, 1)" },
    "ease-in-out": { value: "cubic-bezier(0.42, 0, 0.58, 1)" },
    "ease-in-smooth": { value: "cubic-bezier(0.32, 0.72, 0, 1)" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/font-sizes.js
  var fontSizes = defineTokens.fontSizes({
    "2xs": { value: "0.625rem" },
    xs: { value: "0.75rem" },
    sm: { value: "0.875rem" },
    md: { value: "1rem" },
    lg: { value: "1.125rem" },
    xl: { value: "1.25rem" },
    "2xl": { value: "1.5rem" },
    "3xl": { value: "1.875rem" },
    "4xl": { value: "2.25rem" },
    "5xl": { value: "3rem" },
    "6xl": { value: "3.75rem" },
    "7xl": { value: "4.5rem" },
    "8xl": { value: "6rem" },
    "9xl": { value: "8rem" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/font-weights.js
  var fontWeights = defineTokens.fontWeights({
    thin: { value: "100" },
    extralight: { value: "200" },
    light: { value: "300" },
    normal: { value: "400" },
    medium: { value: "500" },
    semibold: { value: "600" },
    bold: { value: "700" },
    extrabold: { value: "800" },
    black: { value: "900" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/fonts.js
  var fallback2 = `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`;
  var fonts = defineTokens.fonts({
    heading: {
      value: `Inter, ${fallback2}`
    },
    body: {
      value: `Inter, ${fallback2}`
    },
    mono: {
      value: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/keyframes.js
  var keyframes = defineKeyframes({
    spin: {
      "0%": { transform: "rotate(0deg)" },
      "100%": { transform: "rotate(360deg)" }
    },
    pulse: {
      "50%": { opacity: "0.5" }
    },
    ping: {
      "75%, 100%": {
        transform: "scale(2)",
        opacity: "0"
      }
    },
    bounce: {
      "0%, 100%": {
        transform: "translateY(-25%)",
        animationTimingFunction: "cubic-bezier(0.8,0,1,1)"
      },
      "50%": {
        transform: "none",
        animationTimingFunction: "cubic-bezier(0,0,0.2,1)"
      }
    },
    "bg-position": {
      from: { backgroundPosition: "var(--animate-from, 1rem) 0" },
      to: { backgroundPosition: "var(--animate-to, 0) 0" }
    },
    position: {
      from: {
        insetInlineStart: "var(--animate-from-x)",
        insetBlockStart: "var(--animate-from-y)"
      },
      to: {
        insetInlineStart: "var(--animate-to-x)",
        insetBlockStart: "var(--animate-to-y)"
      }
    },
    "circular-progress": {
      "0%": {
        strokeDasharray: "1, 400",
        strokeDashoffset: "0"
      },
      "50%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-100%"
      },
      "100%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-260%"
      }
    },
    // collapse
    "expand-height": {
      from: { height: "0" },
      to: { height: "var(--height)" }
    },
    "collapse-height": {
      from: { height: "var(--height)" },
      to: { height: "0" }
    },
    "expand-width": {
      from: { width: "0" },
      to: { width: "var(--width)" }
    },
    "collapse-width": {
      from: { height: "var(--width)" },
      to: { height: "0" }
    },
    // fade
    "fade-in": {
      from: { opacity: 0 },
      to: { opacity: 1 }
    },
    "fade-out": {
      from: { opacity: 1 },
      to: { opacity: 0 }
    },
    // slide from (full)
    "slide-from-left-full": {
      from: { translate: "-100% 0" },
      to: { translate: "0 0" }
    },
    "slide-from-right-full": {
      from: { translate: "100% 0" },
      to: { translate: "0 0" }
    },
    "slide-from-top-full": {
      from: { translate: "0 -100%" },
      to: { translate: "0 0" }
    },
    "slide-from-bottom-full": {
      from: { translate: "0 100%" },
      to: { translate: "0 0" }
    },
    // slide to (full)
    "slide-to-left-full": {
      from: { translate: "0 0" },
      to: { translate: "-100% 0" }
    },
    "slide-to-right-full": {
      from: { translate: "0 0" },
      to: { translate: "100% 0" }
    },
    "slide-to-top-full": {
      from: { translate: "0 0" },
      to: { translate: "0 -100%" }
    },
    "slide-to-bottom-full": {
      from: { translate: "0 0" },
      to: { translate: "0 100%" }
    },
    // slide from
    "slide-from-top": {
      "0%": { translate: "0 -0.5rem" },
      to: { translate: "0" }
    },
    "slide-from-bottom": {
      "0%": { translate: "0 0.5rem" },
      to: { translate: "0" }
    },
    "slide-from-left": {
      "0%": { translate: "-0.5rem 0" },
      to: { translate: "0" }
    },
    "slide-from-right": {
      "0%": { translate: "0.5rem 0" },
      to: { translate: "0" }
    },
    // slide to
    "slide-to-top": {
      "0%": { translate: "0" },
      to: { translate: "0 -0.5rem" }
    },
    "slide-to-bottom": {
      "0%": { translate: "0" },
      to: { translate: "0 0.5rem" }
    },
    "slide-to-left": {
      "0%": { translate: "0" },
      to: { translate: "-0.5rem 0" }
    },
    "slide-to-right": {
      "0%": { translate: "0" },
      to: { translate: "0.5rem 0" }
    },
    // scale
    "scale-in": {
      from: { scale: "0.95" },
      to: { scale: "1" }
    },
    "scale-out": {
      from: { scale: "1" },
      to: { scale: "0.95" }
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/letter-spacing.js
  var letterSpacings = defineTokens.letterSpacings({
    tighter: { value: "-0.05em" },
    tight: { value: "-0.025em" },
    wide: { value: "0.025em" },
    wider: { value: "0.05em" },
    widest: { value: "0.1em" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/line-heights.js
  var lineHeights = defineTokens.lineHeights({
    shorter: { value: 1.25 },
    short: { value: 1.375 },
    moderate: { value: 1.5 },
    tall: { value: 1.625 },
    taller: { value: 2 }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/radius.js
  var radii = defineTokens.radii({
    none: { value: "0" },
    "2xs": { value: "0.0625rem" },
    xs: { value: "0.125rem" },
    sm: { value: "0.25rem" },
    md: { value: "0.375rem" },
    lg: { value: "0.5rem" },
    xl: { value: "0.75rem" },
    "2xl": { value: "1rem" },
    "3xl": { value: "1.5rem" },
    "4xl": { value: "2rem" },
    full: { value: "9999px" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/spacing.js
  var spacing = defineTokens.spacing({
    0.5: { value: "0.125rem" },
    1: { value: "0.25rem" },
    1.5: { value: "0.375rem" },
    2: { value: "0.5rem" },
    2.5: { value: "0.625rem" },
    3: { value: "0.75rem" },
    3.5: { value: "0.875rem" },
    4: { value: "1rem" },
    4.5: { value: "1.125rem" },
    5: { value: "1.25rem" },
    6: { value: "1.5rem" },
    7: { value: "1.75rem" },
    8: { value: "2rem" },
    9: { value: "2.25rem" },
    10: { value: "2.5rem" },
    11: { value: "2.75rem" },
    12: { value: "3rem" },
    14: { value: "3.5rem" },
    16: { value: "4rem" },
    20: { value: "5rem" },
    24: { value: "6rem" },
    28: { value: "7rem" },
    32: { value: "8rem" },
    36: { value: "9rem" },
    40: { value: "10rem" },
    44: { value: "11rem" },
    48: { value: "12rem" },
    52: { value: "13rem" },
    56: { value: "14rem" },
    60: { value: "15rem" },
    64: { value: "16rem" },
    72: { value: "18rem" },
    80: { value: "20rem" },
    96: { value: "24rem" }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/sizes.js
  var largeSizes = defineTokens.sizes({
    "3xs": { value: "14rem" },
    "2xs": { value: "16rem" },
    xs: { value: "20rem" },
    sm: { value: "24rem" },
    md: { value: "28rem" },
    lg: { value: "32rem" },
    xl: { value: "36rem" },
    "2xl": { value: "42rem" },
    "3xl": { value: "48rem" },
    "4xl": { value: "56rem" },
    "5xl": { value: "64rem" },
    "6xl": { value: "72rem" },
    "7xl": { value: "80rem" },
    "8xl": { value: "90rem" }
  });
  var namedSizes = defineTokens.sizes({
    max: { value: "max-content" },
    min: { value: "min-content" },
    fit: { value: "fit-content" },
    prose: { value: "60ch" },
    full: { value: "100%" },
    dvh: { value: "100dvh" },
    svh: { value: "100svh" },
    lvh: { value: "100lvh" },
    dvw: { value: "100dvw" },
    svw: { value: "100svw" },
    lvw: { value: "100lvw" },
    vw: { value: "100vw" },
    vh: { value: "100vh" }
  });
  var fractionalSizes = defineTokens.sizes({
    "1/2": { value: "50%" },
    "1/3": { value: "33.333333%" },
    "2/3": { value: "66.666667%" },
    "1/4": { value: "25%" },
    "3/4": { value: "75%" },
    "1/5": { value: "20%" },
    "2/5": { value: "40%" },
    "3/5": { value: "60%" },
    "4/5": { value: "80%" },
    "1/6": { value: "16.666667%" },
    "2/6": { value: "33.333333%" },
    "3/6": { value: "50%" },
    "4/6": { value: "66.666667%" },
    "5/6": { value: "83.333333%" },
    "1/12": { value: "8.333333%" },
    "2/12": { value: "16.666667%" },
    "3/12": { value: "25%" },
    "4/12": { value: "33.333333%" },
    "5/12": { value: "41.666667%" },
    "6/12": { value: "50%" },
    "7/12": { value: "58.333333%" },
    "8/12": { value: "66.666667%" },
    "9/12": { value: "75%" },
    "10/12": { value: "83.333333%" },
    "11/12": { value: "91.666667%" }
  });
  var sizes = defineTokens.sizes({
    ...largeSizes,
    ...spacing,
    ...fractionalSizes,
    ...namedSizes
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/tokens/z-indices.js
  var zIndices = defineTokens.zIndex({
    hide: { value: -1 },
    base: { value: 0 },
    docked: { value: 10 },
    dropdown: { value: 1e3 },
    sticky: { value: 1100 },
    banner: { value: 1200 },
    overlay: { value: 1300 },
    modal: { value: 1400 },
    popover: { value: 1500 },
    skipNav: { value: 1600 },
    toast: { value: 1700 },
    tooltip: { value: 1800 },
    max: { value: 2147483647 }
  });

  // node_modules/@chakra-ui/react/dist/esm/theme/index.js
  var tokens = {
    aspectRatios,
    animations,
    blurs,
    borders,
    colors,
    durations,
    easings,
    fonts,
    fontSizes,
    fontWeights,
    letterSpacings,
    lineHeights,
    radii,
    spacing,
    sizes,
    zIndex: zIndices,
    cursor: cursor2
  };
  var semanticTokens = {
    colors: semanticColors,
    shadows: semanticShadows,
    radii: semanticRadii
  };
  var cssVarsPrefix = "chakra";
  var cssVarsRoot = ":where(html, .chakra-theme)";
  var defaultThemeConfig = defineConfig({
    preflight: true,
    cssVarsPrefix,
    cssVarsRoot,
    globalCss,
    theme: {
      breakpoints,
      keyframes,
      tokens,
      semanticTokens,
      recipes,
      slotRecipes,
      textStyles,
      layerStyles,
      animationStyles
    }
  });

  // node_modules/@chakra-ui/react/dist/esm/preset.js
  var defaultConfig = mergeConfigs(defaultBaseConfig, defaultThemeConfig);
  var defaultSystem = createSystem(defaultConfig);

  // node_modules/@chakra-ui/react/dist/esm/components/absolute-center/absolute-center.js
  var AbsoluteCenter = chakra("div", {
    base: {
      position: "absolute",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    variants: {
      axis: {
        horizontal: {
          insetStart: "50%",
          translate: "-50%",
          _rtl: {
            translate: "50%"
          }
        },
        vertical: {
          top: "50%",
          translate: "0 -50%"
        },
        both: {
          insetStart: "50%",
          top: "50%",
          translate: "-50% -50%",
          _rtl: {
            translate: "50% -50%"
          }
        }
      }
    },
    defaultVariants: {
      axis: "both"
    }
  });
  AbsoluteCenter.displayName = "AbsoluteCenter";

  // node_modules/@chakra-ui/react/dist/esm/components/button/button.js
  var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
  var import_react156 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/loader/loader.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
  var React18 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/spinner/spinner.js
  var { withContext: withContext2, PropsProvider: PropsProvider2 } = createRecipeContext({
    key: "spinner"
  });
  var Spinner = withContext2("span");

  // node_modules/@chakra-ui/react/dist/esm/components/loader/loader.js
  var Loader = React18.forwardRef(
    function Loader2(props26, ref) {
      const {
        spinner = /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Spinner, { size: "inherit", borderWidth: "0.125em", color: "inherit" }),
        spinnerPlacement = "start",
        children,
        text,
        visible = true,
        ...rest
      } = props26;
      if (!visible) return children;
      if (text) {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(Span, { ref, display: "contents", ...rest, children: [
          spinnerPlacement === "start" && spinner,
          text,
          spinnerPlacement === "end" && spinner
        ] });
      }
      if (spinner) {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(Span, { ref, display: "contents", ...rest, children: [
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(AbsoluteCenter, { display: "inline-flex", children: spinner }),
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Span, { visibility: "hidden", display: "contents", children })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Span, { ref, display: "contents", ...rest, children });
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/button/button.js
  var { useRecipeResult, PropsProvider: PropsProvider3, usePropsContext } = createRecipeContext(
    { key: "button" }
  );
  var Button = (0, import_react156.forwardRef)(
    function Button2(inProps, ref) {
      const propsContext = usePropsContext();
      const props26 = (0, import_react156.useMemo)(
        () => mergeProps(propsContext, inProps),
        [propsContext, inProps]
      );
      const result = useRecipeResult(props26);
      const {
        loading,
        loadingText,
        children,
        spinner,
        spinnerPlacement,
        ...rest
      } = result.props;
      return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
        chakra.button,
        {
          type: "button",
          ref,
          ...rest,
          "data-loading": dataAttr2(loading),
          disabled: loading || rest.disabled,
          className: cx(result.className, props26.className),
          css: [result.styles, props26.css],
          children: !props26.asChild && loading ? /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            Loader,
            {
              spinner,
              text: loadingText,
              spinnerPlacement,
              children
            }
          ) : children
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/button/icon-button.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
  var import_react157 = __toESM(require_react(), 1);
  var IconButton = (0, import_react157.forwardRef)(
    function IconButton2(props26, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Button,
        {
          px: "0",
          py: "0",
          _icon: { fontSize: "1.2em" },
          ref,
          ...props26
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/button/close-button.js
  var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
  var React19 = __toESM(require_react(), 1);
  var CloseButton = React19.forwardRef(function CloseButton2(props26, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(IconButton, { variant: "ghost", "aria-label": "Close", ref, ...props26, children: props26.children ?? /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(CloseIcon, {}) });
  });

  // node_modules/@chakra-ui/react/dist/esm/components/client-only/client-only.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
  var import_react159 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/show/show.js
  var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
  var import_react158 = __toESM(require_react(), 1);
  function Show(props26) {
    const { when, fallback: fallback3, children } = props26;
    let result;
    if (!when) {
      result = fallback3;
    } else {
      result = typeof children === "function" ? children(when) : children;
    }
    return (0, import_react158.isValidElement)(result) ? result : /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(import_jsx_runtime78.Fragment, { children: result });
  }

  // node_modules/@chakra-ui/react/dist/esm/components/client-only/client-only.js
  var ClientOnly = (props26) => {
    const { children, fallback: fallback3 } = props26;
    const [hasMounted, setHasMounted] = (0, import_react159.useState)(false);
    (0, import_react159.useEffect)(() => {
      setHasMounted(true);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(Show, { when: hasMounted, fallback: fallback3, children });
  };

  // node_modules/@chakra-ui/react/dist/esm/components/stack/stack.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
  var import_react160 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/stack/get-separator-style.js
  function getSeparatorStyles(options) {
    const { gap, direction } = options;
    const styles = {
      column: {
        marginY: gap,
        marginX: 0,
        borderInlineStartWidth: 0,
        borderTopWidth: "1px"
      },
      "column-reverse": {
        marginY: gap,
        marginX: 0,
        borderInlineStartWidth: 0,
        borderTopWidth: "1px"
      },
      row: {
        marginX: gap,
        marginY: 0,
        borderInlineStartWidth: "1px",
        borderTopWidth: 0
      },
      "row-reverse": {
        marginX: gap,
        marginY: 0,
        borderInlineStartWidth: "1px",
        borderTopWidth: 0
      }
    };
    return {
      "&": mapObject(direction, (value) => styles[value])
    };
  }

  // node_modules/@chakra-ui/react/dist/esm/components/stack/stack.js
  function getValidChildren(children) {
    return import_react160.Children.toArray(children).filter(
      (child) => (0, import_react160.isValidElement)(child)
    );
  }
  var Stack = (0, import_react160.forwardRef)(
    function Stack2(props26, ref) {
      const {
        direction = "column",
        align,
        justify,
        gap = "0.5rem",
        wrap: wrap5,
        children,
        separator,
        className,
        ...rest
      } = props26;
      const separatorStyle = (0, import_react160.useMemo)(
        () => getSeparatorStyles({ gap, direction }),
        [gap, direction]
      );
      const clones = (0, import_react160.useMemo)(() => {
        if (!(0, import_react160.isValidElement)(separator)) return children;
        return getValidChildren(children).map((child, index, arr) => {
          const key = typeof child.key !== "undefined" ? child.key : index;
          const typedSep = separator;
          const sep = (0, import_react160.cloneElement)(typedSep, {
            css: [separatorStyle, typedSep.props.css]
          });
          return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(import_react160.Fragment, { children: [
            child,
            index === arr.length - 1 ? null : sep
          ] }, key);
        });
      }, [children, separator, separatorStyle]);
      return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
        chakra.div,
        {
          ref,
          display: "flex",
          alignItems: align,
          justifyContent: justify,
          flexDirection: direction,
          flexWrap: wrap5,
          gap: separator ? void 0 : gap,
          className: cx("chakra-stack", className),
          ...rest,
          children: clones
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/dialog/dialog.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
  var import_react161 = __toESM(require_react(), 1);
  var {
    withRootProvider,
    withContext: withContext3,
    useStyles: useDialogStyles,
    PropsProvider: PropsProvider4
  } = createSlotRecipeContext({ key: "dialog" });
  var DialogRootProvider2 = withRootProvider(
    dialog_exports.RootProvider,
    {
      defaultProps: { unmountOnExit: true, lazyMount: true }
    }
  );
  var DialogRoot2 = withRootProvider(dialog_exports.Root, {
    defaultProps: { unmountOnExit: true, lazyMount: true }
  });
  var DialogPropsProvider = PropsProvider4;
  var DialogTrigger2 = withContext3(
    dialog_exports.Trigger,
    "trigger",
    { forwardAsChild: true }
  );
  var DialogPositioner2 = withContext3(dialog_exports.Positioner, "positioner", { forwardAsChild: true });
  var DialogContent2 = withContext3(
    dialog_exports.Content,
    "content",
    { forwardAsChild: true }
  );
  var DialogDescription2 = withContext3(dialog_exports.Description, "description", { forwardAsChild: true });
  var DialogTitle2 = withContext3(
    dialog_exports.Title,
    "title",
    { forwardAsChild: true }
  );
  var DialogCloseTrigger2 = withContext3(dialog_exports.CloseTrigger, "closeTrigger", { forwardAsChild: true });
  var DialogActionTrigger = (0, import_react161.forwardRef)(function DialogActionTrigger2(props26, ref) {
    const dialog = useDialogContext();
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(chakra.button, { ...props26, ref, onClick: () => dialog.setOpen(false) });
  });
  var DialogBackdrop2 = withContext3(
    dialog_exports.Backdrop,
    "backdrop",
    { forwardAsChild: true }
  );
  var DialogBody = withContext3(
    "div",
    "body"
  );
  var DialogFooter = withContext3(
    "div",
    "footer"
  );
  var DialogHeader = withContext3(
    "div",
    "header"
  );
  var DialogContext2 = dialog_exports.Context;

  // node_modules/@chakra-ui/react/dist/esm/components/dialog/namespace.js
  var namespace_exports = {};
  __export(namespace_exports, {
    ActionTrigger: () => DialogActionTrigger,
    Backdrop: () => DialogBackdrop2,
    Body: () => DialogBody,
    CloseTrigger: () => DialogCloseTrigger2,
    Content: () => DialogContent2,
    Context: () => DialogContext2,
    Description: () => DialogDescription2,
    Footer: () => DialogFooter,
    Header: () => DialogHeader,
    Positioner: () => DialogPositioner2,
    PropsProvider: () => DialogPropsProvider,
    Root: () => DialogRoot2,
    RootProvider: () => DialogRootProvider2,
    Title: () => DialogTitle2,
    Trigger: () => DialogTrigger2
  });

  // node_modules/@chakra-ui/react/dist/esm/components/editable/editable.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
  var import_react162 = __toESM(require_react(), 1);
  var {
    withProvider,
    withContext: withContext4,
    useStyles: useEditableStyles,
    PropsProvider: PropsProvider5
  } = createSlotRecipeContext({ key: "editable" });
  var EditableRootProvider2 = withProvider(editable_exports.RootProvider, "root", { forwardAsChild: true });
  var EditableRoot2 = withProvider(
    editable_exports.Root,
    "root",
    { forwardAsChild: true }
  );
  var EditablePropsProvider = PropsProvider5;
  var EditablePreview2 = withContext4(editable_exports.Preview, "preview", { forwardAsChild: true });
  var EditableInput2 = withContext4(
    editable_exports.Input,
    "input",
    { forwardAsChild: true }
  );
  var ArkEditableTextarea = (0, import_react162.forwardRef)(function EditableTextarea2(props26, ref) {
    const editable = useEditableContext();
    const mergedProps = mergeProps(editable.getInputProps(), props26);
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ark.textarea, { ref, ...mergedProps });
  });
  var EditableTextarea = withContext4(ArkEditableTextarea, "input", { forwardAsChild: true });
  var EditableControl2 = withContext4(editable_exports.Control, "control", { forwardAsChild: true });
  var EditableArea2 = withContext4(
    editable_exports.Area,
    "area",
    { forwardAsChild: true }
  );
  var EditableEditTrigger2 = withContext4(editable_exports.EditTrigger, "editTrigger", { forwardAsChild: true });
  var EditableSubmitTrigger2 = withContext4(editable_exports.SubmitTrigger, "submitTrigger", { forwardAsChild: true });
  var EditableCancelTrigger2 = withContext4(editable_exports.CancelTrigger, "cancelTrigger", { forwardAsChild: true });
  var EditableContext2 = editable_exports.Context;

  // node_modules/@chakra-ui/react/dist/esm/components/editable/namespace.js
  var namespace_exports2 = {};
  __export(namespace_exports2, {
    Area: () => EditableArea2,
    CancelTrigger: () => EditableCancelTrigger2,
    Context: () => EditableContext2,
    Control: () => EditableControl2,
    EditTrigger: () => EditableEditTrigger2,
    Input: () => EditableInput2,
    Preview: () => EditablePreview2,
    PropsProvider: () => EditablePropsProvider,
    Root: () => EditableRoot2,
    RootProvider: () => EditableRootProvider2,
    SubmitTrigger: () => EditableSubmitTrigger2,
    Textarea: () => EditableTextarea
  });

  // node_modules/@chakra-ui/react/dist/esm/components/empty-state/empty-state.js
  var {
    withProvider: withProvider2,
    withContext: withContext5,
    useStyles: useEmptyStateStyles,
    PropsProvider: PropsProvider6
  } = createSlotRecipeContext({ key: "emptyState" });
  var EmptyStateRoot = withProvider2(
    "div",
    "root"
  );
  var EmptyStatePropsProvider = PropsProvider6;
  var EmptyStateContent = withContext5("div", "content");
  var EmptyStateIndicator = withContext5("div", "indicator");
  var EmptyStateTitle = withContext5("h3", "title");
  var EmptyStateDescription = withContext5("p", "description");

  // node_modules/@chakra-ui/react/dist/esm/components/empty-state/namespace.js
  var namespace_exports3 = {};
  __export(namespace_exports3, {
    Content: () => EmptyStateContent,
    Description: () => EmptyStateDescription,
    Indicator: () => EmptyStateIndicator,
    PropsProvider: () => EmptyStatePropsProvider,
    Root: () => EmptyStateRoot,
    Title: () => EmptyStateTitle
  });

  // node_modules/@chakra-ui/react/dist/esm/components/field/field.js
  var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
  var import_react164 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/icon/create-icon.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
  var import_react163 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/icon/icon.js
  var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
  var React20 = __toESM(require_react(), 1);
  var { useRecipeResult: useRecipeResult2, PropsProvider: PropsProvider7 } = createRecipeContext({ key: "icon" });
  var Icon = React20.forwardRef(
    function Icon2(props26, ref) {
      const {
        styles,
        className,
        props: otherProps
      } = useRecipeResult2({ asChild: !props26.as, ...props26 });
      return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        chakra.svg,
        {
          ref,
          focusable: false,
          "aria-hidden": "true",
          ...otherProps,
          css: [styles, props26.css],
          className: cx(className, props26.className)
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/icon/create-icon.js
  function createIcon(options) {
    const {
      viewBox = "0 0 24 24",
      d: pathDefinition,
      displayName,
      defaultProps = {}
    } = options;
    const path = import_react163.Children.toArray(options.path);
    const Comp = (0, import_react163.forwardRef)((props26, ref) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
      Icon,
      {
        ref,
        asChild: false,
        viewBox,
        ...defaultProps,
        ...props26,
        children: path.length ? path : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("path", { fill: "currentColor", d: pathDefinition })
      }
    ));
    Comp.displayName = displayName;
    return Comp;
  }

  // node_modules/@chakra-ui/react/dist/esm/components/field/field.js
  var {
    withProvider: withProvider3,
    withContext: withContext6,
    useStyles: useFieldStyles,
    useClassNames,
    PropsProvider: PropsProvider8
  } = createSlotRecipeContext({ key: "field" });
  var FieldRoot2 = withProvider3(
    field_exports.Root,
    "root",
    { forwardAsChild: true }
  );
  var FieldPropsProvider = PropsProvider8;
  var FieldLabel2 = withContext6(
    field_exports.Label,
    "label",
    { forwardAsChild: true }
  );
  var FieldHelperText2 = withContext6(field_exports.HelperText, "helperText", { forwardAsChild: true });
  var FieldErrorText2 = withContext6(
    field_exports.ErrorText,
    "errorText",
    { forwardAsChild: true }
  );
  var FieldErrorIcon = createIcon({
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  });
  var FieldRequiredIndicator2 = (0, import_react164.forwardRef)(function RequiredIndicator(props26, ref) {
    const { fallback: fallback3, children = "*", ...restProps } = props26;
    const field = useFieldContext();
    const classNames = useClassNames();
    const styles = useFieldStyles();
    if (!field?.required) {
      return fallback3;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
      chakra.span,
      {
        ref,
        "aria-hidden": "true",
        ...restProps,
        className: cx(classNames.requiredIndicator, props26.className),
        css: [styles.requiredIndicator, props26.css],
        children
      }
    );
  });

  // node_modules/@chakra-ui/react/dist/esm/components/field/namespace.js
  var namespace_exports4 = {};
  __export(namespace_exports4, {
    ErrorIcon: () => FieldErrorIcon,
    ErrorText: () => FieldErrorText2,
    HelperText: () => FieldHelperText2,
    Label: () => FieldLabel2,
    PropsProvider: () => FieldPropsProvider,
    RequiredIndicator: () => FieldRequiredIndicator2,
    Root: () => FieldRoot2
  });

  // node_modules/@chakra-ui/react/dist/esm/components/fieldset/fieldset.js
  var { withProvider: withProvider4, withContext: withContext7 } = createSlotRecipeContext({
    key: "fieldset"
  });
  var FieldsetRoot2 = withProvider4(fieldset_exports.Root, "root");
  var FieldsetErrorText2 = withContext7(fieldset_exports.ErrorText, "errorText");
  var FieldsetHelperText2 = withContext7(fieldset_exports.HelperText, "helperText");
  var FieldsetLegend2 = withContext7(fieldset_exports.Legend, "legend");
  var FieldsetContent = withContext7(ark.div, "content");
  var FieldsetContext2 = fieldset_exports.Context;

  // node_modules/@chakra-ui/react/dist/esm/components/fieldset/namespace.js
  var namespace_exports5 = {};
  __export(namespace_exports5, {
    Content: () => FieldsetContent,
    Context: () => FieldsetContext2,
    ErrorText: () => FieldsetErrorText2,
    HelperText: () => FieldsetHelperText2,
    Legend: () => FieldsetLegend2,
    Root: () => FieldsetRoot2
  });

  // node_modules/@chakra-ui/react/dist/esm/components/file-upload/file-upload.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
  var import_react165 = __toESM(require_react(), 1);

  // node_modules/@chakra-ui/react/dist/esm/components/for/for.js
  function For(props26) {
    const { each, fallback: fallback3, children } = props26;
    if (each?.length === 0) {
      return fallback3 || null;
    }
    return each?.map(children);
  }

  // node_modules/@chakra-ui/react/dist/esm/components/file-upload/file-upload.js
  var {
    withProvider: withProvider5,
    withContext: withContext8,
    useStyles: useFileUploadStyles,
    PropsProvider: PropsProvider9
  } = createSlotRecipeContext({ key: "fileUpload" });
  var FileUploadRootProvider2 = withProvider5(file_upload_exports.RootProvider, "root", { forwardAsChild: true });
  var FileUploadRoot2 = withProvider5(
    file_upload_exports.Root,
    "root",
    { forwardAsChild: true }
  );
  var FileUploadPropsProvider = PropsProvider9;
  var FileUploadClearTrigger2 = withContext8(file_upload_exports.ClearTrigger, "clearTrigger", { forwardAsChild: true });
  var FileUploadDropzone2 = withContext8(file_upload_exports.Dropzone, "dropzone", { forwardAsChild: true });
  var FileUploadDropzoneContent = withContext8("div", "dropzoneContent");
  var FileUploadItem2 = withContext8(
    file_upload_exports.Item,
    "item",
    { forwardAsChild: true }
  );
  var FileUploadItemContent = withContext8("div", "itemContent");
  var FileUploadItemDeleteTrigger2 = withContext8(file_upload_exports.ItemDeleteTrigger, "itemDeleteTrigger", {
    forwardAsChild: true,
    defaultProps: {
      children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(CloseIcon, {})
    }
  });
  var FileUploadItemGroup2 = withContext8(file_upload_exports.ItemGroup, "itemGroup", { forwardAsChild: true });
  var FileUploadItemName2 = withContext8(file_upload_exports.ItemName, "itemName", { forwardAsChild: true });
  var FileUploadItemPreview2 = withContext8(file_upload_exports.ItemPreview, "itemPreview", {
    forwardAsChild: true,
    defaultProps: {
      children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileIcon, {})
    }
  });
  var FileUploadItemPreviewImage2 = withContext8(file_upload_exports.ItemPreviewImage, "itemPreviewImage", { forwardAsChild: true });
  var FileUploadItemSizeText2 = withContext8(file_upload_exports.ItemSizeText, "itemSizeText", { forwardAsChild: true });
  var FileUploadLabel2 = withContext8(file_upload_exports.Label, "label", { forwardAsChild: true });
  var FileUploadTrigger2 = withContext8(file_upload_exports.Trigger, "trigger", { forwardAsChild: true });
  var FileUploadItems = (props26) => {
    const { showSize, clearable, files, ...rest } = props26;
    const fileUpload = useFileUploadContext();
    const acceptedFiles = files ?? fileUpload.acceptedFiles;
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(For, { each: acceptedFiles, children: (file) => /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(FileUploadItem2, { file, ...rest, children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemPreview2, {}),
      showSize ? /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(FileUploadItemContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemName2, {}),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemSizeText2, {})
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemName2, { flex: "1" }),
      clearable && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemDeleteTrigger2, {})
    ] }, file.name) });
  };
  var FileUploadList = (0, import_react165.forwardRef)(
    function FileUploadList2(props26, ref) {
      const { showSize, clearable, files, ...rest } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(FileUploadItemGroup2, { ref, ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        FileUploadItems,
        {
          showSize,
          clearable,
          files
        }
      ) });
    }
  );
  var FileUploadFileText = (0, import_react165.forwardRef)(function FileUploadFileText2(props26, ref) {
    const { fallback: fallback3 = "Select file(s)", ...rest } = props26;
    const fileUpload = useFileUploadContext();
    const styles = useFileUploadStyles();
    const acceptedFiles = fileUpload.acceptedFiles;
    const fileText = (0, import_react165.useMemo)(() => {
      if (acceptedFiles.length === 1) {
        return acceptedFiles[0].name;
      }
      if (acceptedFiles.length > 1) {
        return `${acceptedFiles.length} files`;
      }
      return fallback3;
    }, [acceptedFiles, fallback3]);
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      Span,
      {
        ref,
        "data-placeholder": fileText === fallback3 ? "" : void 0,
        ...rest,
        css: [styles.fileText, props26.css],
        children: fileText
      }
    );
  });
  var FileUploadContext2 = file_upload_exports.Context;
  var FileUploadHiddenInput2 = file_upload_exports.HiddenInput;

  // node_modules/@chakra-ui/react/dist/esm/components/file-upload/namespace.js
  var namespace_exports6 = {};
  __export(namespace_exports6, {
    ClearTrigger: () => FileUploadClearTrigger2,
    Context: () => FileUploadContext2,
    Dropzone: () => FileUploadDropzone2,
    DropzoneContent: () => FileUploadDropzoneContent,
    FileText: () => FileUploadFileText,
    HiddenInput: () => FileUploadHiddenInput2,
    Item: () => FileUploadItem2,
    ItemContent: () => FileUploadItemContent,
    ItemDeleteTrigger: () => FileUploadItemDeleteTrigger2,
    ItemGroup: () => FileUploadItemGroup2,
    ItemName: () => FileUploadItemName2,
    ItemPreview: () => FileUploadItemPreview2,
    ItemPreviewImage: () => FileUploadItemPreviewImage2,
    ItemSizeText: () => FileUploadItemSizeText2,
    Items: () => FileUploadItems,
    Label: () => FileUploadLabel2,
    List: () => FileUploadList,
    PropsProvider: () => FileUploadPropsProvider,
    Root: () => FileUploadRoot2,
    RootProvider: () => FileUploadRootProvider2,
    Trigger: () => FileUploadTrigger2
  });

  // node_modules/@chakra-ui/react/dist/esm/components/flex/flex.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
  var import_react166 = __toESM(require_react(), 1);
  var Flex = (0, import_react166.forwardRef)(
    function Flex2(props26, ref) {
      const {
        direction,
        align,
        justify,
        wrap: wrap5,
        basis,
        grow,
        shrink,
        inline: inline2,
        ...rest
      } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
        chakra.div,
        {
          ref,
          ...rest,
          css: {
            display: inline2 ? "inline-flex" : "flex",
            flexDirection: direction,
            alignItems: align,
            justifyContent: justify,
            flexWrap: wrap5,
            flexBasis: basis,
            flexGrow: grow,
            flexShrink: shrink,
            ...props26.css
          }
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/image/image.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
  var import_react167 = __toESM(require_react(), 1);
  var Image = (0, import_react167.forwardRef)(
    function Image2(props26, ref) {
      const { align, fit = "cover", ...rest } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        chakra.img,
        {
          ref,
          objectFit: fit,
          objectPosition: align,
          className: cx("chakra-image", props26.className),
          ...rest
        }
      );
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/input/input.js
  var { withContext: withContext9, PropsProvider: PropsProvider10 } = createRecipeContext({
    key: "input"
  });
  var Input = withContext9(field_exports.Input);

  // node_modules/@chakra-ui/react/dist/esm/components/link/link.js
  var { withContext: withContext10, PropsProvider: PropsProvider11 } = createRecipeContext({
    key: "link"
  });
  var Link2 = withContext10("a");

  // node_modules/@chakra-ui/react/dist/esm/components/select/select.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
  var {
    withProvider: withProvider6,
    withContext: withContext11,
    useStyles: useSelectStyles,
    PropsProvider: PropsProvider12
  } = createSlotRecipeContext({ key: "select" });
  var SelectRootProvider2 = withProvider6(select_exports.RootProvider, "root", {
    forwardAsChild: true
  });
  var SelectRoot2 = withProvider6(
    select_exports.Root,
    "root",
    {
      forwardAsChild: true,
      defaultProps: { positioning: { sameWidth: true } }
    }
  );
  var SelectPropsProvider = PropsProvider12;
  var SelectTrigger2 = withContext11(
    select_exports.Trigger,
    "trigger",
    { forwardAsChild: true }
  );
  var SelectPositioner2 = withContext11(select_exports.Positioner, "positioner", { forwardAsChild: true });
  var SelectContent2 = withContext11(
    select_exports.Content,
    "content",
    { forwardAsChild: true }
  );
  var SelectValueText2 = withContext11(select_exports.ValueText, "valueText", { forwardAsChild: true });
  var SelectClearTrigger2 = withContext11(select_exports.ClearTrigger, "clearTrigger", {
    forwardAsChild: true,
    defaultProps: { children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(CloseIcon, { boxSize: "1em" }) }
  });
  var SelectItemGroup2 = withContext11(select_exports.ItemGroup, "itemGroup", { forwardAsChild: true });
  var SelectItemGroupLabel2 = withContext11(select_exports.ItemGroupLabel, "itemGroupLabel", { forwardAsChild: true });
  var SelectItem2 = withContext11(
    select_exports.Item,
    "item",
    { forwardAsChild: true }
  );
  var SelectItemText2 = withContext11(
    select_exports.ItemText,
    "itemText",
    { forwardAsChild: true }
  );
  var SelectItemIndicator2 = withContext11(select_exports.ItemIndicator, "itemIndicator", {
    forwardAsChild: true,
    defaultProps: {
      children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(CheckIcon, {})
    }
  });
  var SelectIndicatorGroup = withContext11("div", "indicatorGroup");
  var SelectIndicator2 = withContext11(select_exports.Indicator, "indicator", {
    forwardAsChild: true,
    defaultProps: {
      children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(ChevronDownIcon, {})
    }
  });
  var SelectControl2 = withContext11(
    select_exports.Control,
    "control",
    { forwardAsChild: true }
  );
  var SelectLabel2 = withContext11(
    select_exports.Label,
    "label",
    { forwardAsChild: true }
  );
  var SelectContext2 = select_exports.Context;
  var SelectHiddenSelect2 = select_exports.HiddenSelect;
  var SelectItemContext2 = select_exports.ItemContext;

  // node_modules/@chakra-ui/react/dist/esm/components/select/namespace.js
  var namespace_exports7 = {};
  __export(namespace_exports7, {
    ClearTrigger: () => SelectClearTrigger2,
    Content: () => SelectContent2,
    Context: () => SelectContext2,
    Control: () => SelectControl2,
    HiddenSelect: () => SelectHiddenSelect2,
    Indicator: () => SelectIndicator2,
    IndicatorGroup: () => SelectIndicatorGroup,
    Item: () => SelectItem2,
    ItemContext: () => SelectItemContext2,
    ItemGroup: () => SelectItemGroup2,
    ItemGroupLabel: () => SelectItemGroupLabel2,
    ItemIndicator: () => SelectItemIndicator2,
    ItemText: () => SelectItemText2,
    Label: () => SelectLabel2,
    Positioner: () => SelectPositioner2,
    PropsProvider: () => SelectPropsProvider,
    Root: () => SelectRoot2,
    RootProvider: () => SelectRootProvider2,
    Trigger: () => SelectTrigger2,
    ValueText: () => SelectValueText2
  });

  // node_modules/@chakra-ui/react/dist/esm/components/skeleton/skeleton.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
  var React21 = __toESM(require_react(), 1);
  var { withContext: withContext12, PropsProvider: PropsProvider13 } = createRecipeContext({
    key: "skeleton"
  });
  var Skeleton = withContext12("div");
  var SkeletonCircle = React21.forwardRef(function SkeletonCircle2(props26, ref) {
    const { size: size3, ...rest } = props26;
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Circle, { size: size3, asChild: true, ref, children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Skeleton, { ...rest }) });
  });
  var SkeletonText = React21.forwardRef(
    function SkeletonText2(props26, ref) {
      const { noOfLines = 3, gap, rootProps, ...rest } = props26;
      return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Stack, { gap, width: "full", ref, ...rootProps, children: Array.from({ length: noOfLines }).map((_2, index) => /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
        Skeleton,
        {
          height: "4",
          _last: { maxW: noOfLines === 1 ? "100%" : "80%" },
          ...rest
        },
        index
      )) });
    }
  );

  // node_modules/@chakra-ui/react/dist/esm/components/stack/v-stack.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
  var import_react168 = __toESM(require_react(), 1);
  var VStack = (0, import_react168.forwardRef)(
    function VStack2(props26, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(Stack, { align: "center", ...props26, direction: "column", ref });
    }
  );

  // node_modules/pocketbase/dist/pocketbase.es.mjs
  var ClientResponseError = class _ClientResponseError extends Error {
    constructor(e2) {
      super("ClientResponseError"), this.url = "", this.status = 0, this.response = {}, this.isAbort = false, this.originalError = null, Object.setPrototypeOf(this, _ClientResponseError.prototype), null !== e2 && "object" == typeof e2 && (this.url = "string" == typeof e2.url ? e2.url : "", this.status = "number" == typeof e2.status ? e2.status : 0, this.isAbort = !!e2.isAbort, this.originalError = e2.originalError, null !== e2.response && "object" == typeof e2.response ? this.response = e2.response : null !== e2.data && "object" == typeof e2.data ? this.response = e2.data : this.response = {}), this.originalError || e2 instanceof _ClientResponseError || (this.originalError = e2), "undefined" != typeof DOMException && e2 instanceof DOMException && (this.isAbort = true), this.name = "ClientResponseError " + this.status, this.message = this.response?.message, this.message || (this.isAbort ? this.message = "The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation." : this.originalError?.cause?.message?.includes("ECONNREFUSED ::1") ? this.message = "Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21)." : this.message = "Something went wrong."), this.cause = this.originalError;
    }
    get data() {
      return this.response;
    }
    toJSON() {
      return { ...this };
    }
  };
  var e = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  function cookieParse(e2, t3) {
    const s2 = {};
    if ("string" != typeof e2) return s2;
    const i2 = Object.assign({}, t3 || {}).decode || defaultDecode;
    let n2 = 0;
    for (; n2 < e2.length; ) {
      const t4 = e2.indexOf("=", n2);
      if (-1 === t4) break;
      let r2 = e2.indexOf(";", n2);
      if (-1 === r2) r2 = e2.length;
      else if (r2 < t4) {
        n2 = e2.lastIndexOf(";", t4 - 1) + 1;
        continue;
      }
      const o = e2.slice(n2, t4).trim();
      if (void 0 === s2[o]) {
        let n3 = e2.slice(t4 + 1, r2).trim();
        34 === n3.charCodeAt(0) && (n3 = n3.slice(1, -1));
        try {
          s2[o] = i2(n3);
        } catch (e3) {
          s2[o] = n3;
        }
      }
      n2 = r2 + 1;
    }
    return s2;
  }
  function cookieSerialize(t3, s2, i2) {
    const n2 = Object.assign({}, i2 || {}), r2 = n2.encode || defaultEncode;
    if (!e.test(t3)) throw new TypeError("argument name is invalid");
    const o = r2(s2);
    if (o && !e.test(o)) throw new TypeError("argument val is invalid");
    let a = t3 + "=" + o;
    if (null != n2.maxAge) {
      const e2 = n2.maxAge - 0;
      if (isNaN(e2) || !isFinite(e2)) throw new TypeError("option maxAge is invalid");
      a += "; Max-Age=" + Math.floor(e2);
    }
    if (n2.domain) {
      if (!e.test(n2.domain)) throw new TypeError("option domain is invalid");
      a += "; Domain=" + n2.domain;
    }
    if (n2.path) {
      if (!e.test(n2.path)) throw new TypeError("option path is invalid");
      a += "; Path=" + n2.path;
    }
    if (n2.expires) {
      if (!function isDate(e2) {
        return "[object Date]" === Object.prototype.toString.call(e2) || e2 instanceof Date;
      }(n2.expires) || isNaN(n2.expires.valueOf())) throw new TypeError("option expires is invalid");
      a += "; Expires=" + n2.expires.toUTCString();
    }
    if (n2.httpOnly && (a += "; HttpOnly"), n2.secure && (a += "; Secure"), n2.priority) {
      switch ("string" == typeof n2.priority ? n2.priority.toLowerCase() : n2.priority) {
        case "low":
          a += "; Priority=Low";
          break;
        case "medium":
          a += "; Priority=Medium";
          break;
        case "high":
          a += "; Priority=High";
          break;
        default:
          throw new TypeError("option priority is invalid");
      }
    }
    if (n2.sameSite) {
      switch ("string" == typeof n2.sameSite ? n2.sameSite.toLowerCase() : n2.sameSite) {
        case true:
          a += "; SameSite=Strict";
          break;
        case "lax":
          a += "; SameSite=Lax";
          break;
        case "strict":
          a += "; SameSite=Strict";
          break;
        case "none":
          a += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return a;
  }
  function defaultDecode(e2) {
    return -1 !== e2.indexOf("%") ? decodeURIComponent(e2) : e2;
  }
  function defaultEncode(e2) {
    return encodeURIComponent(e2);
  }
  var t = "undefined" != typeof navigator && "ReactNative" === navigator.product || "undefined" != typeof global && global.HermesInternal;
  var s;
  function getTokenPayload(e2) {
    if (e2) try {
      const t3 = decodeURIComponent(s(e2.split(".")[1]).split("").map(function(e3) {
        return "%" + ("00" + e3.charCodeAt(0).toString(16)).slice(-2);
      }).join(""));
      return JSON.parse(t3) || {};
    } catch (e3) {
    }
    return {};
  }
  function isTokenExpired(e2, t3 = 0) {
    let s2 = getTokenPayload(e2);
    return !(Object.keys(s2).length > 0 && (!s2.exp || s2.exp - t3 > Date.now() / 1e3));
  }
  s = "function" != typeof atob || t ? (e2) => {
    let t3 = String(e2).replace(/=+$/, "");
    if (t3.length % 4 == 1) throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
    for (var s2, i2, n2 = 0, r2 = 0, o = ""; i2 = t3.charAt(r2++); ~i2 && (s2 = n2 % 4 ? 64 * s2 + i2 : i2, n2++ % 4) ? o += String.fromCharCode(255 & s2 >> (-2 * n2 & 6)) : 0) i2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(i2);
    return o;
  } : atob;
  var i = "pb_auth";
  var BaseAuthStore = class {
    constructor() {
      this.baseToken = "", this.baseModel = null, this._onChangeCallbacks = [];
    }
    get token() {
      return this.baseToken;
    }
    get record() {
      return this.baseModel;
    }
    get model() {
      return this.baseModel;
    }
    get isValid() {
      return !isTokenExpired(this.token);
    }
    get isSuperuser() {
      let e2 = getTokenPayload(this.token);
      return "auth" == e2.type && ("_superusers" == this.record?.collectionName || !this.record?.collectionName && "pbc_3142635823" == e2.collectionId);
    }
    get isAdmin() {
      return console.warn("Please replace pb.authStore.isAdmin with pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName"), this.isSuperuser;
    }
    get isAuthRecord() {
      return console.warn("Please replace pb.authStore.isAuthRecord with !pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName"), "auth" == getTokenPayload(this.token).type && !this.isSuperuser;
    }
    save(e2, t3) {
      this.baseToken = e2 || "", this.baseModel = t3 || null, this.triggerChange();
    }
    clear() {
      this.baseToken = "", this.baseModel = null, this.triggerChange();
    }
    loadFromCookie(e2, t3 = i) {
      const s2 = cookieParse(e2 || "")[t3] || "";
      let n2 = {};
      try {
        n2 = JSON.parse(s2), (null === typeof n2 || "object" != typeof n2 || Array.isArray(n2)) && (n2 = {});
      } catch (e3) {
      }
      this.save(n2.token || "", n2.record || n2.model || null);
    }
    exportToCookie(e2, t3 = i) {
      const s2 = { secure: true, sameSite: true, httpOnly: true, path: "/" }, n2 = getTokenPayload(this.token);
      s2.expires = n2?.exp ? new Date(1e3 * n2.exp) : /* @__PURE__ */ new Date("1970-01-01"), e2 = Object.assign({}, s2, e2);
      const r2 = { token: this.token, record: this.record ? JSON.parse(JSON.stringify(this.record)) : null };
      let o = cookieSerialize(t3, JSON.stringify(r2), e2);
      const a = "undefined" != typeof Blob ? new Blob([o]).size : o.length;
      if (r2.record && a > 4096) {
        r2.record = { id: r2.record?.id, email: r2.record?.email };
        const s3 = ["collectionId", "collectionName", "verified"];
        for (const e3 in this.record) s3.includes(e3) && (r2.record[e3] = this.record[e3]);
        o = cookieSerialize(t3, JSON.stringify(r2), e2);
      }
      return o;
    }
    onChange(e2, t3 = false) {
      return this._onChangeCallbacks.push(e2), t3 && e2(this.token, this.record), () => {
        for (let t4 = this._onChangeCallbacks.length - 1; t4 >= 0; t4--) if (this._onChangeCallbacks[t4] == e2) return delete this._onChangeCallbacks[t4], void this._onChangeCallbacks.splice(t4, 1);
      };
    }
    triggerChange() {
      for (const e2 of this._onChangeCallbacks) e2 && e2(this.token, this.record);
    }
  };
  var LocalAuthStore = class extends BaseAuthStore {
    constructor(e2 = "pocketbase_auth") {
      super(), this.storageFallback = {}, this.storageKey = e2, this._bindStorageEvent();
    }
    get token() {
      return (this._storageGet(this.storageKey) || {}).token || "";
    }
    get record() {
      const e2 = this._storageGet(this.storageKey) || {};
      return e2.record || e2.model || null;
    }
    get model() {
      return this.record;
    }
    save(e2, t3) {
      this._storageSet(this.storageKey, { token: e2, record: t3 }), super.save(e2, t3);
    }
    clear() {
      this._storageRemove(this.storageKey), super.clear();
    }
    _storageGet(e2) {
      if ("undefined" != typeof window && window?.localStorage) {
        const t3 = window.localStorage.getItem(e2) || "";
        try {
          return JSON.parse(t3);
        } catch (e3) {
          return t3;
        }
      }
      return this.storageFallback[e2];
    }
    _storageSet(e2, t3) {
      if ("undefined" != typeof window && window?.localStorage) {
        let s2 = t3;
        "string" != typeof t3 && (s2 = JSON.stringify(t3)), window.localStorage.setItem(e2, s2);
      } else this.storageFallback[e2] = t3;
    }
    _storageRemove(e2) {
      "undefined" != typeof window && window?.localStorage && window.localStorage?.removeItem(e2), delete this.storageFallback[e2];
    }
    _bindStorageEvent() {
      "undefined" != typeof window && window?.localStorage && window.addEventListener && window.addEventListener("storage", (e2) => {
        if (e2.key != this.storageKey) return;
        const t3 = this._storageGet(this.storageKey) || {};
        super.save(t3.token || "", t3.record || t3.model || null);
      });
    }
  };
  var BaseService = class {
    constructor(e2) {
      this.client = e2;
    }
  };
  var SettingsService = class extends BaseService {
    async getAll(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send("/api/settings", e2);
    }
    async update(e2, t3) {
      return t3 = Object.assign({ method: "PATCH", body: e2 }, t3), this.client.send("/api/settings", t3);
    }
    async testS3(e2 = "storage", t3) {
      return t3 = Object.assign({ method: "POST", body: { filesystem: e2 } }, t3), this.client.send("/api/settings/test/s3", t3).then(() => true);
    }
    async testEmail(e2, t3, s2, i2) {
      return i2 = Object.assign({ method: "POST", body: { email: t3, template: s2, collection: e2 } }, i2), this.client.send("/api/settings/test/email", i2).then(() => true);
    }
    async generateAppleClientSecret(e2, t3, s2, i2, n2, r2) {
      return r2 = Object.assign({ method: "POST", body: { clientId: e2, teamId: t3, keyId: s2, privateKey: i2, duration: n2 } }, r2), this.client.send("/api/settings/apple/generate-client-secret", r2);
    }
  };
  var n = ["requestKey", "$cancelKey", "$autoCancel", "fetch", "headers", "body", "query", "params", "cache", "credentials", "headers", "integrity", "keepalive", "method", "mode", "redirect", "referrer", "referrerPolicy", "signal", "window"];
  function normalizeUnknownQueryParams(e2) {
    if (e2) {
      e2.query = e2.query || {};
      for (let t3 in e2) n.includes(t3) || (e2.query[t3] = e2[t3], delete e2[t3]);
    }
  }
  function serializeQueryParams(e2) {
    const t3 = [];
    for (const s2 in e2) {
      const i2 = encodeURIComponent(s2), n2 = Array.isArray(e2[s2]) ? e2[s2] : [e2[s2]];
      for (let e3 of n2) e3 = prepareQueryParamValue(e3), null !== e3 && t3.push(i2 + "=" + e3);
    }
    return t3.join("&");
  }
  function prepareQueryParamValue(e2) {
    return null == e2 ? null : e2 instanceof Date ? encodeURIComponent(e2.toISOString().replace("T", " ")) : "object" == typeof e2 ? encodeURIComponent(JSON.stringify(e2)) : encodeURIComponent(e2);
  }
  var RealtimeService = class extends BaseService {
    constructor() {
      super(...arguments), this.clientId = "", this.eventSource = null, this.subscriptions = {}, this.lastSentSubscriptions = [], this.maxConnectTimeout = 15e3, this.reconnectAttempts = 0, this.maxReconnectAttempts = 1 / 0, this.predefinedReconnectIntervals = [200, 300, 500, 1e3, 1200, 1500, 2e3], this.pendingConnects = [];
    }
    get isConnected() {
      return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;
    }
    async subscribe(e2, t3, s2) {
      if (!e2) throw new Error("topic must be set.");
      let i2 = e2;
      if (s2) {
        normalizeUnknownQueryParams(s2 = Object.assign({}, s2));
        const e3 = "options=" + encodeURIComponent(JSON.stringify({ query: s2.query, headers: s2.headers }));
        i2 += (i2.includes("?") ? "&" : "?") + e3;
      }
      const listener = function(e3) {
        const s3 = e3;
        let i3;
        try {
          i3 = JSON.parse(s3?.data);
        } catch {
        }
        t3(i3 || {});
      };
      return this.subscriptions[i2] || (this.subscriptions[i2] = []), this.subscriptions[i2].push(listener), this.isConnected ? 1 === this.subscriptions[i2].length ? await this.submitSubscriptions() : this.eventSource?.addEventListener(i2, listener) : await this.connect(), async () => this.unsubscribeByTopicAndListener(e2, listener);
    }
    async unsubscribe(e2) {
      let t3 = false;
      if (e2) {
        const s2 = this.getSubscriptionsByTopic(e2);
        for (let e3 in s2) if (this.hasSubscriptionListeners(e3)) {
          for (let t4 of this.subscriptions[e3]) this.eventSource?.removeEventListener(e3, t4);
          delete this.subscriptions[e3], t3 || (t3 = true);
        }
      } else this.subscriptions = {};
      this.hasSubscriptionListeners() ? t3 && await this.submitSubscriptions() : this.disconnect();
    }
    async unsubscribeByPrefix(e2) {
      let t3 = false;
      for (let s2 in this.subscriptions) if ((s2 + "?").startsWith(e2)) {
        t3 = true;
        for (let e3 of this.subscriptions[s2]) this.eventSource?.removeEventListener(s2, e3);
        delete this.subscriptions[s2];
      }
      t3 && (this.hasSubscriptionListeners() ? await this.submitSubscriptions() : this.disconnect());
    }
    async unsubscribeByTopicAndListener(e2, t3) {
      let s2 = false;
      const i2 = this.getSubscriptionsByTopic(e2);
      for (let e3 in i2) {
        if (!Array.isArray(this.subscriptions[e3]) || !this.subscriptions[e3].length) continue;
        let i3 = false;
        for (let s3 = this.subscriptions[e3].length - 1; s3 >= 0; s3--) this.subscriptions[e3][s3] === t3 && (i3 = true, delete this.subscriptions[e3][s3], this.subscriptions[e3].splice(s3, 1), this.eventSource?.removeEventListener(e3, t3));
        i3 && (this.subscriptions[e3].length || delete this.subscriptions[e3], s2 || this.hasSubscriptionListeners(e3) || (s2 = true));
      }
      this.hasSubscriptionListeners() ? s2 && await this.submitSubscriptions() : this.disconnect();
    }
    hasSubscriptionListeners(e2) {
      if (this.subscriptions = this.subscriptions || {}, e2) return !!this.subscriptions[e2]?.length;
      for (let e3 in this.subscriptions) if (this.subscriptions[e3]?.length) return true;
      return false;
    }
    async submitSubscriptions() {
      if (this.clientId) return this.addAllSubscriptionListeners(), this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys(), this.client.send("/api/realtime", { method: "POST", body: { clientId: this.clientId, subscriptions: this.lastSentSubscriptions }, requestKey: this.getSubscriptionsCancelKey() }).catch((e2) => {
        if (!e2?.isAbort) throw e2;
      });
    }
    getSubscriptionsCancelKey() {
      return "realtime_" + this.clientId;
    }
    getSubscriptionsByTopic(e2) {
      const t3 = {};
      e2 = e2.includes("?") ? e2 : e2 + "?";
      for (let s2 in this.subscriptions) (s2 + "?").startsWith(e2) && (t3[s2] = this.subscriptions[s2]);
      return t3;
    }
    getNonEmptySubscriptionKeys() {
      const e2 = [];
      for (let t3 in this.subscriptions) this.subscriptions[t3].length && e2.push(t3);
      return e2;
    }
    addAllSubscriptionListeners() {
      if (this.eventSource) {
        this.removeAllSubscriptionListeners();
        for (let e2 in this.subscriptions) for (let t3 of this.subscriptions[e2]) this.eventSource.addEventListener(e2, t3);
      }
    }
    removeAllSubscriptionListeners() {
      if (this.eventSource) for (let e2 in this.subscriptions) for (let t3 of this.subscriptions[e2]) this.eventSource.removeEventListener(e2, t3);
    }
    async connect() {
      if (!(this.reconnectAttempts > 0)) return new Promise((e2, t3) => {
        this.pendingConnects.push({ resolve: e2, reject: t3 }), this.pendingConnects.length > 1 || this.initConnect();
      });
    }
    initConnect() {
      this.disconnect(true), clearTimeout(this.connectTimeoutId), this.connectTimeoutId = setTimeout(() => {
        this.connectErrorHandler(new Error("EventSource connect took too long."));
      }, this.maxConnectTimeout), this.eventSource = new EventSource(this.client.buildURL("/api/realtime")), this.eventSource.onerror = (e2) => {
        this.connectErrorHandler(new Error("Failed to establish realtime connection."));
      }, this.eventSource.addEventListener("PB_CONNECT", (e2) => {
        const t3 = e2;
        this.clientId = t3?.lastEventId, this.submitSubscriptions().then(async () => {
          let e3 = 3;
          for (; this.hasUnsentSubscriptions() && e3 > 0; ) e3--, await this.submitSubscriptions();
        }).then(() => {
          for (let e3 of this.pendingConnects) e3.resolve();
          this.pendingConnects = [], this.reconnectAttempts = 0, clearTimeout(this.reconnectTimeoutId), clearTimeout(this.connectTimeoutId);
          const t4 = this.getSubscriptionsByTopic("PB_CONNECT");
          for (let s2 in t4) for (let i2 of t4[s2]) i2(e2);
        }).catch((e3) => {
          this.clientId = "", this.connectErrorHandler(e3);
        });
      });
    }
    hasUnsentSubscriptions() {
      const e2 = this.getNonEmptySubscriptionKeys();
      if (e2.length != this.lastSentSubscriptions.length) return true;
      for (const t3 of e2) if (!this.lastSentSubscriptions.includes(t3)) return true;
      return false;
    }
    connectErrorHandler(e2) {
      if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), !this.clientId && !this.reconnectAttempts || this.reconnectAttempts > this.maxReconnectAttempts) {
        for (let t4 of this.pendingConnects) t4.reject(new ClientResponseError(e2));
        return this.pendingConnects = [], void this.disconnect();
      }
      this.disconnect(true);
      const t3 = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];
      this.reconnectAttempts++, this.reconnectTimeoutId = setTimeout(() => {
        this.initConnect();
      }, t3);
    }
    disconnect(e2 = false) {
      if (this.clientId && this.onDisconnect && this.onDisconnect(Object.keys(this.subscriptions)), clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), this.removeAllSubscriptionListeners(), this.client.cancelRequest(this.getSubscriptionsCancelKey()), this.eventSource?.close(), this.eventSource = null, this.clientId = "", !e2) {
        this.reconnectAttempts = 0;
        for (let e3 of this.pendingConnects) e3.resolve();
        this.pendingConnects = [];
      }
    }
  };
  var CrudService = class extends BaseService {
    decode(e2) {
      return e2;
    }
    async getFullList(e2, t3) {
      if ("number" == typeof e2) return this._getFullList(e2, t3);
      let s2 = 500;
      return (t3 = Object.assign({}, e2, t3)).batch && (s2 = t3.batch, delete t3.batch), this._getFullList(s2, t3);
    }
    async getList(e2 = 1, t3 = 30, s2) {
      return (s2 = Object.assign({ method: "GET" }, s2)).query = Object.assign({ page: e2, perPage: t3 }, s2.query), this.client.send(this.baseCrudPath, s2).then((e3) => (e3.items = e3.items?.map((e4) => this.decode(e4)) || [], e3));
    }
    async getFirstListItem(e2, t3) {
      return (t3 = Object.assign({ requestKey: "one_by_filter_" + this.baseCrudPath + "_" + e2 }, t3)).query = Object.assign({ filter: e2, skipTotal: 1 }, t3.query), this.getList(1, 1, t3).then((e3) => {
        if (!e3?.items?.length) throw new ClientResponseError({ status: 404, response: { code: 404, message: "The requested resource wasn't found.", data: {} } });
        return e3.items[0];
      });
    }
    async getOne(e2, t3) {
      if (!e2) throw new ClientResponseError({ url: this.client.buildURL(this.baseCrudPath + "/"), status: 404, response: { code: 404, message: "Missing required record id.", data: {} } });
      return t3 = Object.assign({ method: "GET" }, t3), this.client.send(this.baseCrudPath + "/" + encodeURIComponent(e2), t3).then((e3) => this.decode(e3));
    }
    async create(e2, t3) {
      return t3 = Object.assign({ method: "POST", body: e2 }, t3), this.client.send(this.baseCrudPath, t3).then((e3) => this.decode(e3));
    }
    async update(e2, t3, s2) {
      return s2 = Object.assign({ method: "PATCH", body: t3 }, s2), this.client.send(this.baseCrudPath + "/" + encodeURIComponent(e2), s2).then((e3) => this.decode(e3));
    }
    async delete(e2, t3) {
      return t3 = Object.assign({ method: "DELETE" }, t3), this.client.send(this.baseCrudPath + "/" + encodeURIComponent(e2), t3).then(() => true);
    }
    _getFullList(e2 = 500, t3) {
      (t3 = t3 || {}).query = Object.assign({ skipTotal: 1 }, t3.query);
      let s2 = [], request = async (i2) => this.getList(i2, e2 || 500, t3).then((e3) => {
        const t4 = e3.items;
        return s2 = s2.concat(t4), t4.length == e3.perPage ? request(i2 + 1) : s2;
      });
      return request(1);
    }
  };
  function normalizeLegacyOptionsArgs(e2, t3, s2, i2) {
    const n2 = void 0 !== i2;
    return n2 || void 0 !== s2 ? n2 ? (console.warn(e2), t3.body = Object.assign({}, t3.body, s2), t3.query = Object.assign({}, t3.query, i2), t3) : Object.assign(t3, s2) : t3;
  }
  function resetAutoRefresh(e2) {
    e2._resetAutoRefresh?.();
  }
  var RecordService = class extends CrudService {
    constructor(e2, t3) {
      super(e2), this.collectionIdOrName = t3;
    }
    get baseCrudPath() {
      return this.baseCollectionPath + "/records";
    }
    get baseCollectionPath() {
      return "/api/collections/" + encodeURIComponent(this.collectionIdOrName);
    }
    get isSuperusers() {
      return "_superusers" == this.collectionIdOrName || "_pbc_2773867675" == this.collectionIdOrName;
    }
    async subscribe(e2, t3, s2) {
      if (!e2) throw new Error("Missing topic.");
      if (!t3) throw new Error("Missing subscription callback.");
      return this.client.realtime.subscribe(this.collectionIdOrName + "/" + e2, t3, s2);
    }
    async unsubscribe(e2) {
      return e2 ? this.client.realtime.unsubscribe(this.collectionIdOrName + "/" + e2) : this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);
    }
    async getFullList(e2, t3) {
      if ("number" == typeof e2) return super.getFullList(e2, t3);
      const s2 = Object.assign({}, e2, t3);
      return super.getFullList(s2);
    }
    async getList(e2 = 1, t3 = 30, s2) {
      return super.getList(e2, t3, s2);
    }
    async getFirstListItem(e2, t3) {
      return super.getFirstListItem(e2, t3);
    }
    async getOne(e2, t3) {
      return super.getOne(e2, t3);
    }
    async create(e2, t3) {
      return super.create(e2, t3);
    }
    async update(e2, t3, s2) {
      return super.update(e2, t3, s2).then((e3) => {
        if (this.client.authStore.record?.id === e3?.id && (this.client.authStore.record?.collectionId === this.collectionIdOrName || this.client.authStore.record?.collectionName === this.collectionIdOrName)) {
          let t4 = Object.assign({}, this.client.authStore.record.expand), s3 = Object.assign({}, this.client.authStore.record, e3);
          t4 && (s3.expand = Object.assign(t4, e3.expand)), this.client.authStore.save(this.client.authStore.token, s3);
        }
        return e3;
      });
    }
    async delete(e2, t3) {
      return super.delete(e2, t3).then((t4) => (!t4 || this.client.authStore.record?.id !== e2 || this.client.authStore.record?.collectionId !== this.collectionIdOrName && this.client.authStore.record?.collectionName !== this.collectionIdOrName || this.client.authStore.clear(), t4));
    }
    authResponse(e2) {
      const t3 = this.decode(e2?.record || {});
      return this.client.authStore.save(e2?.token, t3), Object.assign({}, e2, { token: e2?.token || "", record: t3 });
    }
    async listAuthMethods(e2) {
      return e2 = Object.assign({ method: "GET", fields: "mfa,otp,password,oauth2" }, e2), this.client.send(this.baseCollectionPath + "/auth-methods", e2);
    }
    async authWithPassword(e2, t3, s2) {
      let i2;
      s2 = Object.assign({ method: "POST", body: { identity: e2, password: t3 } }, s2), this.isSuperusers && (i2 = s2.autoRefreshThreshold, delete s2.autoRefreshThreshold, s2.autoRefresh || resetAutoRefresh(this.client));
      let n2 = await this.client.send(this.baseCollectionPath + "/auth-with-password", s2);
      return n2 = this.authResponse(n2), i2 && this.isSuperusers && function registerAutoRefresh(e3, t4, s3, i3) {
        resetAutoRefresh(e3);
        const n3 = e3.beforeSend, r2 = e3.authStore.record, o = e3.authStore.onChange((t5, s4) => {
          (!t5 || s4?.id != r2?.id || (s4?.collectionId || r2?.collectionId) && s4?.collectionId != r2?.collectionId) && resetAutoRefresh(e3);
        });
        e3._resetAutoRefresh = function() {
          o(), e3.beforeSend = n3, delete e3._resetAutoRefresh;
        }, e3.beforeSend = async (r3, o2) => {
          const a = e3.authStore.token;
          if (o2.query?.autoRefresh) return n3 ? n3(r3, o2) : { url: r3, sendOptions: o2 };
          let c = e3.authStore.isValid;
          if (c && isTokenExpired(e3.authStore.token, t4)) try {
            await s3();
          } catch (e4) {
            c = false;
          }
          c || await i3();
          const l = o2.headers || {};
          for (let t5 in l) if ("authorization" == t5.toLowerCase() && a == l[t5] && e3.authStore.token) {
            l[t5] = e3.authStore.token;
            break;
          }
          return o2.headers = l, n3 ? n3(r3, o2) : { url: r3, sendOptions: o2 };
        };
      }(this.client, i2, () => this.authRefresh({ autoRefresh: true }), () => this.authWithPassword(e2, t3, Object.assign({ autoRefresh: true }, s2))), n2;
    }
    async authWithOAuth2Code(e2, t3, s2, i2, n2, r2, o) {
      let a = { method: "POST", body: { provider: e2, code: t3, codeVerifier: s2, redirectURL: i2, createData: n2 } };
      return a = normalizeLegacyOptionsArgs("This form of authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, options?).", a, r2, o), this.client.send(this.baseCollectionPath + "/auth-with-oauth2", a).then((e3) => this.authResponse(e3));
    }
    authWithOAuth2(...e2) {
      if (e2.length > 1 || "string" == typeof e2?.[0]) return console.warn("PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration."), this.authWithOAuth2Code(e2?.[0] || "", e2?.[1] || "", e2?.[2] || "", e2?.[3] || "", e2?.[4] || {}, e2?.[5] || {}, e2?.[6] || {});
      const t3 = e2?.[0] || {};
      let s2 = null;
      t3.urlCallback || (s2 = openBrowserPopup(void 0));
      const i2 = new RealtimeService(this.client);
      function cleanup() {
        s2?.close(), i2.unsubscribe();
      }
      const n2 = {}, r2 = t3.requestKey;
      return r2 && (n2.requestKey = r2), this.listAuthMethods(n2).then((e3) => {
        const n3 = e3.oauth2.providers.find((e4) => e4.name === t3.provider);
        if (!n3) throw new ClientResponseError(new Error(`Missing or invalid provider "${t3.provider}".`));
        const o = this.client.buildURL("/api/oauth2-redirect"), a = r2 ? this.client.cancelControllers?.[r2] : void 0;
        return a && (a.signal.onabort = () => {
          cleanup();
        }), new Promise(async (e4, r3) => {
          try {
            await i2.subscribe("@oauth2", async (s3) => {
              const c2 = i2.clientId;
              try {
                if (!s3.state || c2 !== s3.state) throw new Error("State parameters don't match.");
                if (s3.error || !s3.code) throw new Error("OAuth2 redirect error or missing code: " + s3.error);
                const i3 = Object.assign({}, t3);
                delete i3.provider, delete i3.scopes, delete i3.createData, delete i3.urlCallback, a?.signal?.onabort && (a.signal.onabort = null);
                const r4 = await this.authWithOAuth2Code(n3.name, s3.code, n3.codeVerifier, o, t3.createData, i3);
                e4(r4);
              } catch (e5) {
                r3(new ClientResponseError(e5));
              }
              cleanup();
            });
            const c = { state: i2.clientId };
            t3.scopes?.length && (c.scope = t3.scopes.join(" "));
            const l = this._replaceQueryParams(n3.authURL + o, c);
            let h = t3.urlCallback || function(e5) {
              s2 ? s2.location.href = e5 : s2 = openBrowserPopup(e5);
            };
            await h(l);
          } catch (e5) {
            cleanup(), r3(new ClientResponseError(e5));
          }
        });
      }).catch((e3) => {
        throw cleanup(), e3;
      });
    }
    async authRefresh(e2, t3) {
      let s2 = { method: "POST" };
      return s2 = normalizeLegacyOptionsArgs("This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).", s2, e2, t3), this.client.send(this.baseCollectionPath + "/auth-refresh", s2).then((e3) => this.authResponse(e3));
    }
    async requestPasswordReset(e2, t3, s2) {
      let i2 = { method: "POST", body: { email: e2 } };
      return i2 = normalizeLegacyOptionsArgs("This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).", i2, t3, s2), this.client.send(this.baseCollectionPath + "/request-password-reset", i2).then(() => true);
    }
    async confirmPasswordReset(e2, t3, s2, i2, n2) {
      let r2 = { method: "POST", body: { token: e2, password: t3, passwordConfirm: s2 } };
      return r2 = normalizeLegacyOptionsArgs("This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).", r2, i2, n2), this.client.send(this.baseCollectionPath + "/confirm-password-reset", r2).then(() => true);
    }
    async requestVerification(e2, t3, s2) {
      let i2 = { method: "POST", body: { email: e2 } };
      return i2 = normalizeLegacyOptionsArgs("This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).", i2, t3, s2), this.client.send(this.baseCollectionPath + "/request-verification", i2).then(() => true);
    }
    async confirmVerification(e2, t3, s2) {
      let i2 = { method: "POST", body: { token: e2 } };
      return i2 = normalizeLegacyOptionsArgs("This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).", i2, t3, s2), this.client.send(this.baseCollectionPath + "/confirm-verification", i2).then(() => {
        const t4 = getTokenPayload(e2), s3 = this.client.authStore.record;
        return s3 && !s3.verified && s3.id === t4.id && s3.collectionId === t4.collectionId && (s3.verified = true, this.client.authStore.save(this.client.authStore.token, s3)), true;
      });
    }
    async requestEmailChange(e2, t3, s2) {
      let i2 = { method: "POST", body: { newEmail: e2 } };
      return i2 = normalizeLegacyOptionsArgs("This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).", i2, t3, s2), this.client.send(this.baseCollectionPath + "/request-email-change", i2).then(() => true);
    }
    async confirmEmailChange(e2, t3, s2, i2) {
      let n2 = { method: "POST", body: { token: e2, password: t3 } };
      return n2 = normalizeLegacyOptionsArgs("This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).", n2, s2, i2), this.client.send(this.baseCollectionPath + "/confirm-email-change", n2).then(() => {
        const t4 = getTokenPayload(e2), s3 = this.client.authStore.record;
        return s3 && s3.id === t4.id && s3.collectionId === t4.collectionId && this.client.authStore.clear(), true;
      });
    }
    async listExternalAuths(e2, t3) {
      return this.client.collection("_externalAuths").getFullList(Object.assign({}, t3, { filter: this.client.filter("recordRef = {:id}", { id: e2 }) }));
    }
    async unlinkExternalAuth(e2, t3, s2) {
      const i2 = await this.client.collection("_externalAuths").getFirstListItem(this.client.filter("recordRef = {:recordId} && provider = {:provider}", { recordId: e2, provider: t3 }));
      return this.client.collection("_externalAuths").delete(i2.id, s2).then(() => true);
    }
    async requestOTP(e2, t3) {
      return t3 = Object.assign({ method: "POST", body: { email: e2 } }, t3), this.client.send(this.baseCollectionPath + "/request-otp", t3);
    }
    async authWithOTP(e2, t3, s2) {
      return s2 = Object.assign({ method: "POST", body: { otpId: e2, password: t3 } }, s2), this.client.send(this.baseCollectionPath + "/auth-with-otp", s2).then((e3) => this.authResponse(e3));
    }
    async impersonate(e2, t3, s2) {
      (s2 = Object.assign({ method: "POST", body: { duration: t3 } }, s2)).headers = s2.headers || {}, s2.headers.Authorization || (s2.headers.Authorization = this.client.authStore.token);
      const i2 = new Client(this.client.baseURL, new BaseAuthStore(), this.client.lang), n2 = await i2.send(this.baseCollectionPath + "/impersonate/" + encodeURIComponent(e2), s2);
      return i2.authStore.save(n2?.token, this.decode(n2?.record || {})), i2;
    }
    _replaceQueryParams(e2, t3 = {}) {
      let s2 = e2, i2 = "";
      e2.indexOf("?") >= 0 && (s2 = e2.substring(0, e2.indexOf("?")), i2 = e2.substring(e2.indexOf("?") + 1));
      const n2 = {}, r2 = i2.split("&");
      for (const e3 of r2) {
        if ("" == e3) continue;
        const t4 = e3.split("=");
        n2[decodeURIComponent(t4[0].replace(/\+/g, " "))] = decodeURIComponent((t4[1] || "").replace(/\+/g, " "));
      }
      for (let e3 in t3) t3.hasOwnProperty(e3) && (null == t3[e3] ? delete n2[e3] : n2[e3] = t3[e3]);
      i2 = "";
      for (let e3 in n2) n2.hasOwnProperty(e3) && ("" != i2 && (i2 += "&"), i2 += encodeURIComponent(e3.replace(/%20/g, "+")) + "=" + encodeURIComponent(n2[e3].replace(/%20/g, "+")));
      return "" != i2 ? s2 + "?" + i2 : s2;
    }
  };
  function openBrowserPopup(e2) {
    if ("undefined" == typeof window || !window?.open) throw new ClientResponseError(new Error("Not in a browser context - please pass a custom urlCallback function."));
    let t3 = 1024, s2 = 768, i2 = window.innerWidth, n2 = window.innerHeight;
    t3 = t3 > i2 ? i2 : t3, s2 = s2 > n2 ? n2 : s2;
    let r2 = i2 / 2 - t3 / 2, o = n2 / 2 - s2 / 2;
    return window.open(e2, "popup_window", "width=" + t3 + ",height=" + s2 + ",top=" + o + ",left=" + r2 + ",resizable,menubar=no");
  }
  var CollectionService = class extends CrudService {
    get baseCrudPath() {
      return "/api/collections";
    }
    async import(e2, t3 = false, s2) {
      return s2 = Object.assign({ method: "PUT", body: { collections: e2, deleteMissing: t3 } }, s2), this.client.send(this.baseCrudPath + "/import", s2).then(() => true);
    }
    async getScaffolds(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send(this.baseCrudPath + "/meta/scaffolds", e2);
    }
    async truncate(e2, t3) {
      return t3 = Object.assign({ method: "DELETE" }, t3), this.client.send(this.baseCrudPath + "/" + encodeURIComponent(e2) + "/truncate", t3).then(() => true);
    }
  };
  var LogService = class extends BaseService {
    async getList(e2 = 1, t3 = 30, s2) {
      return (s2 = Object.assign({ method: "GET" }, s2)).query = Object.assign({ page: e2, perPage: t3 }, s2.query), this.client.send("/api/logs", s2);
    }
    async getOne(e2, t3) {
      if (!e2) throw new ClientResponseError({ url: this.client.buildURL("/api/logs/"), status: 404, response: { code: 404, message: "Missing required log id.", data: {} } });
      return t3 = Object.assign({ method: "GET" }, t3), this.client.send("/api/logs/" + encodeURIComponent(e2), t3);
    }
    async getStats(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send("/api/logs/stats", e2);
    }
  };
  var HealthService = class extends BaseService {
    async check(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send("/api/health", e2);
    }
  };
  var FileService = class extends BaseService {
    getUrl(e2, t3, s2 = {}) {
      return console.warn("Please replace pb.files.getUrl() with pb.files.getURL()"), this.getURL(e2, t3, s2);
    }
    getURL(e2, t3, s2 = {}) {
      if (!t3 || !e2?.id || !e2?.collectionId && !e2?.collectionName) return "";
      const i2 = [];
      i2.push("api"), i2.push("files"), i2.push(encodeURIComponent(e2.collectionId || e2.collectionName)), i2.push(encodeURIComponent(e2.id)), i2.push(encodeURIComponent(t3));
      let n2 = this.client.buildURL(i2.join("/"));
      if (Object.keys(s2).length) {
        false === s2.download && delete s2.download;
        const e3 = new URLSearchParams(s2);
        n2 += (n2.includes("?") ? "&" : "?") + e3;
      }
      return n2;
    }
    async getToken(e2) {
      return e2 = Object.assign({ method: "POST" }, e2), this.client.send("/api/files/token", e2).then((e3) => e3?.token || "");
    }
  };
  var BackupService = class extends BaseService {
    async getFullList(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send("/api/backups", e2);
    }
    async create(e2, t3) {
      return t3 = Object.assign({ method: "POST", body: { name: e2 } }, t3), this.client.send("/api/backups", t3).then(() => true);
    }
    async upload(e2, t3) {
      return t3 = Object.assign({ method: "POST", body: e2 }, t3), this.client.send("/api/backups/upload", t3).then(() => true);
    }
    async delete(e2, t3) {
      return t3 = Object.assign({ method: "DELETE" }, t3), this.client.send(`/api/backups/${encodeURIComponent(e2)}`, t3).then(() => true);
    }
    async restore(e2, t3) {
      return t3 = Object.assign({ method: "POST" }, t3), this.client.send(`/api/backups/${encodeURIComponent(e2)}/restore`, t3).then(() => true);
    }
    getDownloadUrl(e2, t3) {
      return console.warn("Please replace pb.backups.getDownloadUrl() with pb.backups.getDownloadURL()"), this.getDownloadURL(e2, t3);
    }
    getDownloadURL(e2, t3) {
      return this.client.buildURL(`/api/backups/${encodeURIComponent(t3)}?token=${encodeURIComponent(e2)}`);
    }
  };
  var CronService = class extends BaseService {
    async getFullList(e2) {
      return e2 = Object.assign({ method: "GET" }, e2), this.client.send("/api/crons", e2);
    }
    async run(e2, t3) {
      return t3 = Object.assign({ method: "POST" }, t3), this.client.send(`/api/crons/${encodeURIComponent(e2)}`, t3).then(() => true);
    }
  };
  function isFile(e2) {
    return "undefined" != typeof Blob && e2 instanceof Blob || "undefined" != typeof File && e2 instanceof File || null !== e2 && "object" == typeof e2 && e2.uri && ("undefined" != typeof navigator && "ReactNative" === navigator.product || "undefined" != typeof global && global.HermesInternal);
  }
  function isFormData(e2) {
    return e2 && ("FormData" === e2.constructor.name || "undefined" != typeof FormData && e2 instanceof FormData);
  }
  function hasFileField(e2) {
    for (const t3 in e2) {
      const s2 = Array.isArray(e2[t3]) ? e2[t3] : [e2[t3]];
      for (const e3 of s2) if (isFile(e3)) return true;
    }
    return false;
  }
  var r = /^[\-\.\d]+$/;
  function inferFormDataValue(e2) {
    if ("string" != typeof e2) return e2;
    if ("true" == e2) return true;
    if ("false" == e2) return false;
    if (("-" === e2[0] || e2[0] >= "0" && e2[0] <= "9") && r.test(e2)) {
      let t3 = +e2;
      if ("" + t3 === e2) return t3;
    }
    return e2;
  }
  var BatchService = class extends BaseService {
    constructor() {
      super(...arguments), this.requests = [], this.subs = {};
    }
    collection(e2) {
      return this.subs[e2] || (this.subs[e2] = new SubBatchService(this.requests, e2)), this.subs[e2];
    }
    async send(e2) {
      const t3 = new FormData(), s2 = [];
      for (let e3 = 0; e3 < this.requests.length; e3++) {
        const i2 = this.requests[e3];
        if (s2.push({ method: i2.method, url: i2.url, headers: i2.headers, body: i2.json }), i2.files) for (let s3 in i2.files) {
          const n2 = i2.files[s3] || [];
          for (let i3 of n2) t3.append("requests." + e3 + "." + s3, i3);
        }
      }
      return t3.append("@jsonPayload", JSON.stringify({ requests: s2 })), e2 = Object.assign({ method: "POST", body: t3 }, e2), this.client.send("/api/batch", e2);
    }
  };
  var SubBatchService = class {
    constructor(e2, t3) {
      this.requests = [], this.requests = e2, this.collectionIdOrName = t3;
    }
    upsert(e2, t3) {
      t3 = Object.assign({ body: e2 || {} }, t3);
      const s2 = { method: "PUT", url: "/api/collections/" + encodeURIComponent(this.collectionIdOrName) + "/records" };
      this.prepareRequest(s2, t3), this.requests.push(s2);
    }
    create(e2, t3) {
      t3 = Object.assign({ body: e2 || {} }, t3);
      const s2 = { method: "POST", url: "/api/collections/" + encodeURIComponent(this.collectionIdOrName) + "/records" };
      this.prepareRequest(s2, t3), this.requests.push(s2);
    }
    update(e2, t3, s2) {
      s2 = Object.assign({ body: t3 || {} }, s2);
      const i2 = { method: "PATCH", url: "/api/collections/" + encodeURIComponent(this.collectionIdOrName) + "/records/" + encodeURIComponent(e2) };
      this.prepareRequest(i2, s2), this.requests.push(i2);
    }
    delete(e2, t3) {
      t3 = Object.assign({}, t3);
      const s2 = { method: "DELETE", url: "/api/collections/" + encodeURIComponent(this.collectionIdOrName) + "/records/" + encodeURIComponent(e2) };
      this.prepareRequest(s2, t3), this.requests.push(s2);
    }
    prepareRequest(e2, t3) {
      if (normalizeUnknownQueryParams(t3), e2.headers = t3.headers, e2.json = {}, e2.files = {}, void 0 !== t3.query) {
        const s3 = serializeQueryParams(t3.query);
        s3 && (e2.url += (e2.url.includes("?") ? "&" : "?") + s3);
      }
      let s2 = t3.body;
      isFormData(s2) && (s2 = function convertFormDataToObject(e3) {
        let t4 = {};
        return e3.forEach((e4, s3) => {
          if ("@jsonPayload" === s3 && "string" == typeof e4) try {
            let s4 = JSON.parse(e4);
            Object.assign(t4, s4);
          } catch (e5) {
            console.warn("@jsonPayload error:", e5);
          }
          else void 0 !== t4[s3] ? (Array.isArray(t4[s3]) || (t4[s3] = [t4[s3]]), t4[s3].push(inferFormDataValue(e4))) : t4[s3] = inferFormDataValue(e4);
        }), t4;
      }(s2));
      for (const t4 in s2) {
        const i2 = s2[t4];
        if (isFile(i2)) e2.files[t4] = e2.files[t4] || [], e2.files[t4].push(i2);
        else if (Array.isArray(i2)) {
          const s3 = [], n2 = [];
          for (const e3 of i2) isFile(e3) ? s3.push(e3) : n2.push(e3);
          if (s3.length > 0 && s3.length == i2.length) {
            e2.files[t4] = e2.files[t4] || [];
            for (let i3 of s3) e2.files[t4].push(i3);
          } else if (e2.json[t4] = n2, s3.length > 0) {
            let i3 = t4;
            t4.startsWith("+") || t4.endsWith("+") || (i3 += "+"), e2.files[i3] = e2.files[i3] || [];
            for (let t5 of s3) e2.files[i3].push(t5);
          }
        } else e2.json[t4] = i2;
      }
    }
  };
  var Client = class {
    get baseUrl() {
      return this.baseURL;
    }
    set baseUrl(e2) {
      this.baseURL = e2;
    }
    constructor(e2 = "/", t3, s2 = "en-US") {
      this.cancelControllers = {}, this.recordServices = {}, this.enableAutoCancellation = true, this.baseURL = e2, this.lang = s2, t3 ? this.authStore = t3 : "undefined" != typeof window && window.Deno ? this.authStore = new BaseAuthStore() : this.authStore = new LocalAuthStore(), this.collections = new CollectionService(this), this.files = new FileService(this), this.logs = new LogService(this), this.settings = new SettingsService(this), this.realtime = new RealtimeService(this), this.health = new HealthService(this), this.backups = new BackupService(this), this.crons = new CronService(this);
    }
    get admins() {
      return this.collection("_superusers");
    }
    createBatch() {
      return new BatchService(this);
    }
    collection(e2) {
      return this.recordServices[e2] || (this.recordServices[e2] = new RecordService(this, e2)), this.recordServices[e2];
    }
    autoCancellation(e2) {
      return this.enableAutoCancellation = !!e2, this;
    }
    cancelRequest(e2) {
      return this.cancelControllers[e2] && (this.cancelControllers[e2].abort(), delete this.cancelControllers[e2]), this;
    }
    cancelAllRequests() {
      for (let e2 in this.cancelControllers) this.cancelControllers[e2].abort();
      return this.cancelControllers = {}, this;
    }
    filter(e2, t3) {
      if (!t3) return e2;
      for (let s2 in t3) {
        let i2 = t3[s2];
        switch (typeof i2) {
          case "boolean":
          case "number":
            i2 = "" + i2;
            break;
          case "string":
            i2 = "'" + i2.replace(/'/g, "\\'") + "'";
            break;
          default:
            i2 = null === i2 ? "null" : i2 instanceof Date ? "'" + i2.toISOString().replace("T", " ") + "'" : "'" + JSON.stringify(i2).replace(/'/g, "\\'") + "'";
        }
        e2 = e2.replaceAll("{:" + s2 + "}", i2);
      }
      return e2;
    }
    getFileUrl(e2, t3, s2 = {}) {
      return console.warn("Please replace pb.getFileUrl() with pb.files.getURL()"), this.files.getURL(e2, t3, s2);
    }
    buildUrl(e2) {
      return console.warn("Please replace pb.buildUrl() with pb.buildURL()"), this.buildURL(e2);
    }
    buildURL(e2) {
      let t3 = this.baseURL;
      return "undefined" == typeof window || !window.location || t3.startsWith("https://") || t3.startsWith("http://") || (t3 = window.location.origin?.endsWith("/") ? window.location.origin.substring(0, window.location.origin.length - 1) : window.location.origin || "", this.baseURL.startsWith("/") || (t3 += window.location.pathname || "/", t3 += t3.endsWith("/") ? "" : "/"), t3 += this.baseURL), e2 && (t3 += t3.endsWith("/") ? "" : "/", t3 += e2.startsWith("/") ? e2.substring(1) : e2), t3;
    }
    async send(e2, t3) {
      t3 = this.initSendOptions(e2, t3);
      let s2 = this.buildURL(e2);
      if (this.beforeSend) {
        const e3 = Object.assign({}, await this.beforeSend(s2, t3));
        void 0 !== e3.url || void 0 !== e3.options ? (s2 = e3.url || s2, t3 = e3.options || t3) : Object.keys(e3).length && (t3 = e3, console?.warn && console.warn("Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`."));
      }
      if (void 0 !== t3.query) {
        const e3 = serializeQueryParams(t3.query);
        e3 && (s2 += (s2.includes("?") ? "&" : "?") + e3), delete t3.query;
      }
      "application/json" == this.getHeader(t3.headers, "Content-Type") && t3.body && "string" != typeof t3.body && (t3.body = JSON.stringify(t3.body));
      return (t3.fetch || fetch)(s2, t3).then(async (e3) => {
        let s3 = {};
        try {
          s3 = await e3.json();
        } catch (e4) {
        }
        if (this.afterSend && (s3 = await this.afterSend(e3, s3, t3)), e3.status >= 400) throw new ClientResponseError({ url: e3.url, status: e3.status, data: s3 });
        return s3;
      }).catch((e3) => {
        throw new ClientResponseError(e3);
      });
    }
    initSendOptions(e2, t3) {
      if ((t3 = Object.assign({ method: "GET" }, t3)).body = function convertToFormDataIfNeeded(e3) {
        if ("undefined" == typeof FormData || void 0 === e3 || "object" != typeof e3 || null === e3 || isFormData(e3) || !hasFileField(e3)) return e3;
        const t4 = new FormData();
        for (const s2 in e3) {
          const i2 = e3[s2];
          if (void 0 !== i2) if ("object" != typeof i2 || hasFileField({ data: i2 })) {
            const e4 = Array.isArray(i2) ? i2 : [i2];
            for (let i3 of e4) t4.append(s2, i3);
          } else {
            let e4 = {};
            e4[s2] = i2, t4.append("@jsonPayload", JSON.stringify(e4));
          }
        }
        return t4;
      }(t3.body), normalizeUnknownQueryParams(t3), t3.query = Object.assign({}, t3.params, t3.query), void 0 === t3.requestKey && (false === t3.$autoCancel || false === t3.query.$autoCancel ? t3.requestKey = null : (t3.$cancelKey || t3.query.$cancelKey) && (t3.requestKey = t3.$cancelKey || t3.query.$cancelKey)), delete t3.$autoCancel, delete t3.query.$autoCancel, delete t3.$cancelKey, delete t3.query.$cancelKey, null !== this.getHeader(t3.headers, "Content-Type") || isFormData(t3.body) || (t3.headers = Object.assign({}, t3.headers, { "Content-Type": "application/json" })), null === this.getHeader(t3.headers, "Accept-Language") && (t3.headers = Object.assign({}, t3.headers, { "Accept-Language": this.lang })), this.authStore.token && null === this.getHeader(t3.headers, "Authorization") && (t3.headers = Object.assign({}, t3.headers, { Authorization: this.authStore.token })), this.enableAutoCancellation && null !== t3.requestKey) {
        const s2 = t3.requestKey || (t3.method || "GET") + e2;
        delete t3.requestKey, this.cancelRequest(s2);
        const i2 = new AbortController();
        this.cancelControllers[s2] = i2, t3.signal = i2.signal;
      }
      return t3;
    }
    getHeader(e2, t3) {
      e2 = e2 || {}, t3 = t3.toLowerCase();
      for (let s2 in e2) if (s2.toLowerCase() == t3) return e2[s2];
      return null;
    }
  };

  // src/services/auth-provider.jsx
  var import_react169 = __toESM(require_react());
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var pb2 = new Client("http://localhost:8090");
  pb2.autoCancellation(false);
  window.pb = pb2;
  var AuthContext = (0, import_react169.createContext)();
  function AuthProvider({ children }) {
    const value = {
      pb: pb2,
      isAuthenticated: pb2.authStore.isValid,
      user: pb2.authStore.record,
      logout: () => {
        console.log("logging out");
        pb2.authStore.clear();
        window.location.reload();
      },
      login: ({ username, password }) => {
        return pb2.collection("users").authWithPassword(username, password).then(({ _record, _token }) => {
          window.location.reload();
        });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(AuthContext.Provider, { value, children });
  }

  // src/components/link.jsx
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var link_default = ({ to, children }) => /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(Link2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(NavLink, { to, children }) });

  // src/components/layout.jsx
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  function layout_default({ children, authed = false }) {
    const { pb: pb3, isAuthenticated, user, logout, login } = (0, import_react171.useContext)(AuthContext);
    const [loginDialogOpen, setLoginDialogOpen] = (0, import_react171.useState)(false);
    const [error, setError] = (0, import_react171.useState)(null);
    const [username, setUsername] = (0, import_react171.useState)("");
    const [password, setPassword] = (0, import_react171.useState)("");
    const navigate = useNavigate();
    const location = useLocation();
    (0, import_react171.useEffect)(() => {
      if (authed && !isAuthenticated) {
        navigate(
          "/?from=" + encodeURIComponent(location.pathname + location.search)
        );
      }
    }, [authed, isAuthenticated]);
    function handleLogin() {
      login({ username, password }).catch((error2) => {
        setError("Login failed. Please check your credentials.");
      });
    }
    function updateUsername(event) {
      setUsername(event.target.value);
      setError(null);
    }
    function updatePassword(event) {
      setPassword(event.target.value);
      setError(null);
    }
    function updateLoginDialogOpen({ open }) {
      setLoginDialogOpen(open);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(Flex, { width: "100%", height: "100%", flexDirection: "column", children: [
      /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(
        Flex,
        {
          bgColor: "bg.muted",
          flexDirection: "row",
          justifyContent: "space-between",
          padding: "4",
          align: "center",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Heading, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(link_default, { to: "/", children: "ClockCamera" }) }),
            isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Button, { onClick: logout, children: "Logout" }) }) : /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(
              namespace_exports.Root,
              {
                open: loginDialogOpen,
                onOpenChange: updateLoginDialogOpen,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Trigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Button, { children: "Login" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Backdrop, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(namespace_exports.Content, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.CloseTrigger, {}),
                    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Header, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Title, { children: "Login" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Body, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(namespace_exports5.Root, { size: "lg", maxW: "md", invalid: !!error, children: [
                      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Stack, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports5.HelperText, { children: "Enter your username and password below." }) }),
                      /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(namespace_exports5.Content, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(namespace_exports4.Root, { invalid: !!error, children: [
                          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports4.Label, { children: "Username" }),
                          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
                            Input,
                            {
                              value: username,
                              placeholder: "Username",
                              id: "username",
                              onChange: updateUsername
                            }
                          )
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(namespace_exports4.Root, { invalid: !!error, children: [
                          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports4.Label, { children: "Password" }),
                          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
                            Input,
                            {
                              type: "password",
                              value: password,
                              placeholder: "Password",
                              onChange: updatePassword
                            }
                          )
                        ] })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports5.ErrorText, { children: "Some fields are invalid. Please check them." })
                    ] }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(namespace_exports.Footer, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
                      Button,
                      {
                        onClick: handleLogin,
                        type: "submit",
                        alignSelf: "flex-start",
                        children: "Submit"
                      }
                    ) })
                  ] }) })
                ]
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Flex, { flexGrow: 1, flexDirection: "column", padding: "4", children })
    ] });
  }

  // src/pages/front-page.jsx
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  function FrontPage() {
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(layout_default, { authed: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("h1", { children: /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("a", { href: "/clocks", children: "Clocks" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("p", { children: "This is the front page of the ClockCamera application." })
    ] });
  }

  // node_modules/next-themes/dist/index.mjs
  var t2 = __toESM(require_react(), 1);
  var M = (e2, i2, s2, u, m, a, l, h) => {
    let d = document.documentElement, w = ["light", "dark"];
    function p(n2) {
      (Array.isArray(e2) ? e2 : [e2]).forEach((y) => {
        let k = y === "class", S = k && a ? m.map((f) => a[f] || f) : m;
        k ? (d.classList.remove(...S), d.classList.add(a && a[n2] ? a[n2] : n2)) : d.setAttribute(y, n2);
      }), R(n2);
    }
    function R(n2) {
      h && w.includes(n2) && (d.style.colorScheme = n2);
    }
    function c() {
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    if (u) p(u);
    else try {
      let n2 = localStorage.getItem(i2) || s2, y = l && n2 === "system" ? c() : n2;
      p(y);
    } catch (n2) {
    }
  };
  var b = ["light", "dark"];
  var I = "(prefers-color-scheme: dark)";
  var O = typeof window == "undefined";
  var x = t2.createContext(void 0);
  var U = { setTheme: (e2) => {
  }, themes: [] };
  var z = () => {
    var e2;
    return (e2 = t2.useContext(x)) != null ? e2 : U;
  };
  var J = (e2) => t2.useContext(x) ? t2.createElement(t2.Fragment, null, e2.children) : t2.createElement(V, { ...e2 });
  var N = ["light", "dark"];
  var V = ({ forcedTheme: e2, disableTransitionOnChange: i2 = false, enableSystem: s2 = true, enableColorScheme: u = true, storageKey: m = "theme", themes: a = N, defaultTheme: l = s2 ? "system" : "light", attribute: h = "data-theme", value: d, children: w, nonce: p, scriptProps: R }) => {
    let [c, n2] = t2.useState(() => H(m, l)), [T, y] = t2.useState(() => c === "system" ? E() : c), k = d ? Object.values(d) : a, S = t2.useCallback((o) => {
      let r2 = o;
      if (!r2) return;
      o === "system" && s2 && (r2 = E());
      let v = d ? d[r2] : r2, C = i2 ? W(p) : null, P = document.documentElement, L = (g) => {
        g === "class" ? (P.classList.remove(...k), v && P.classList.add(v)) : g.startsWith("data-") && (v ? P.setAttribute(g, v) : P.removeAttribute(g));
      };
      if (Array.isArray(h) ? h.forEach(L) : L(h), u) {
        let g = b.includes(l) ? l : null, D = b.includes(r2) ? r2 : g;
        P.style.colorScheme = D;
      }
      C == null || C();
    }, [p]), f = t2.useCallback((o) => {
      let r2 = typeof o == "function" ? o(c) : o;
      n2(r2);
      try {
        localStorage.setItem(m, r2);
      } catch (v) {
      }
    }, [c]), A = t2.useCallback((o) => {
      let r2 = E(o);
      y(r2), c === "system" && s2 && !e2 && S("system");
    }, [c, e2]);
    t2.useEffect(() => {
      let o = window.matchMedia(I);
      return o.addListener(A), A(o), () => o.removeListener(A);
    }, [A]), t2.useEffect(() => {
      let o = (r2) => {
        r2.key === m && (r2.newValue ? n2(r2.newValue) : f(l));
      };
      return window.addEventListener("storage", o), () => window.removeEventListener("storage", o);
    }, [f]), t2.useEffect(() => {
      S(e2 != null ? e2 : c);
    }, [e2, c]);
    let Q = t2.useMemo(() => ({ theme: c, setTheme: f, forcedTheme: e2, resolvedTheme: c === "system" ? T : c, themes: s2 ? [...a, "system"] : a, systemTheme: s2 ? T : void 0 }), [c, f, e2, T, s2, a]);
    return t2.createElement(x.Provider, { value: Q }, t2.createElement(_, { forcedTheme: e2, storageKey: m, attribute: h, enableSystem: s2, enableColorScheme: u, defaultTheme: l, value: d, themes: a, nonce: p, scriptProps: R }), w);
  };
  var _ = t2.memo(({ forcedTheme: e2, storageKey: i2, attribute: s2, enableSystem: u, enableColorScheme: m, defaultTheme: a, value: l, themes: h, nonce: d, scriptProps: w }) => {
    let p = JSON.stringify([s2, i2, a, e2, h, l, u, m]).slice(1, -1);
    return t2.createElement("script", { ...w, suppressHydrationWarning: true, nonce: typeof window == "undefined" ? d : "", dangerouslySetInnerHTML: { __html: `(${M.toString()})(${p})` } });
  });
  var H = (e2, i2) => {
    if (O) return;
    let s2;
    try {
      s2 = localStorage.getItem(e2) || void 0;
    } catch (u) {
    }
    return s2 || i2;
  };
  var W = (e2) => {
    let i2 = document.createElement("style");
    return e2 && i2.setAttribute("nonce", e2), i2.appendChild(document.createTextNode("*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")), document.head.appendChild(i2), () => {
      window.getComputedStyle(document.body), setTimeout(() => {
        document.head.removeChild(i2);
      }, 1);
    };
  };
  var E = (e2) => (e2 || (e2 = window.matchMedia(I)), e2.matches ? "dark" : "light");

  // src/components/ui/color-mode.jsx
  var React25 = __toESM(require_react());

  // node_modules/react-icons/lib/iconBase.mjs
  var import_react174 = __toESM(require_react(), 1);

  // node_modules/react-icons/lib/iconContext.mjs
  var import_react173 = __toESM(require_react(), 1);
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react173.default.createContext && /* @__PURE__ */ import_react173.default.createContext(DefaultContext);

  // node_modules/react-icons/lib/iconBase.mjs
  var _excluded = ["attr", "size", "title"];
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function ownKeys(e2, r2) {
    var t3 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e2);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
      })), t3.push.apply(t3, o);
    }
    return t3;
  }
  function _objectSpread(e2) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t3 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys(Object(t3), true).forEach(function(r3) {
        _defineProperty(e2, r3, t3[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t3)) : ownKeys(Object(t3)).forEach(function(r3) {
        Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t3, r3));
      });
    }
    return e2;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(t3) {
    var i2 = _toPrimitive(t3, "string");
    return "symbol" == typeof i2 ? i2 : i2 + "";
  }
  function _toPrimitive(t3, r2) {
    if ("object" != typeof t3 || !t3) return t3;
    var e2 = t3[Symbol.toPrimitive];
    if (void 0 !== e2) {
      var i2 = e2.call(t3, r2 || "default");
      if ("object" != typeof i2) return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t3);
  }
  function Tree2Element(tree) {
    return tree && tree.map((node2, i2) => /* @__PURE__ */ import_react174.default.createElement(node2.tag, _objectSpread({
      key: i2
    }, node2.attr), Tree2Element(node2.child)));
  }
  function GenIcon(data2) {
    return (props26) => /* @__PURE__ */ import_react174.default.createElement(IconBase, _extends2({
      attr: _objectSpread({}, data2.attr)
    }, props26), Tree2Element(data2.child));
  }
  function IconBase(props26) {
    var elem = (conf) => {
      var {
        attr,
        size: size3,
        title
      } = props26, svgProps = _objectWithoutProperties(props26, _excluded);
      var computedSize = size3 || conf.size || "1em";
      var className;
      if (conf.className) className = conf.className;
      if (props26.className) className = (className ? className + " " : "") + props26.className;
      return /* @__PURE__ */ import_react174.default.createElement("svg", _extends2({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: _objectSpread(_objectSpread({
          color: props26.color || conf.color
        }, conf.style), props26.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && /* @__PURE__ */ import_react174.default.createElement("title", null, title), props26.children);
    };
    return IconContext !== void 0 ? /* @__PURE__ */ import_react174.default.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
  }

  // node_modules/react-icons/lu/index.mjs
  function LuCheck(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M20 6 9 17l-5-5" }, "child": [] }] })(props26);
  }
  function LuImagePlus(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M16 5h6" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 2v6" }, "child": [] }, { "tag": "path", "attr": { "d": "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5" }, "child": [] }, { "tag": "path", "attr": { "d": "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" }, "child": [] }, { "tag": "circle", "attr": { "cx": "9", "cy": "9", "r": "2" }, "child": [] }] })(props26);
  }
  function LuImage(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2", "ry": "2" }, "child": [] }, { "tag": "circle", "attr": { "cx": "9", "cy": "9", "r": "2" }, "child": [] }, { "tag": "path", "attr": { "d": "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" }, "child": [] }] })(props26);
  }
  function LuMoon(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" }, "child": [] }] })(props26);
  }
  function LuPencilLine(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M12 20h9" }, "child": [] }, { "tag": "path", "attr": { "d": "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z" }, "child": [] }, { "tag": "path", "attr": { "d": "m15 5 3 3" }, "child": [] }] })(props26);
  }
  function LuSun(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "circle", "attr": { "cx": "12", "cy": "12", "r": "4" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 2v2" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 20v2" }, "child": [] }, { "tag": "path", "attr": { "d": "m4.93 4.93 1.41 1.41" }, "child": [] }, { "tag": "path", "attr": { "d": "m17.66 17.66 1.41 1.41" }, "child": [] }, { "tag": "path", "attr": { "d": "M2 12h2" }, "child": [] }, { "tag": "path", "attr": { "d": "M20 12h2" }, "child": [] }, { "tag": "path", "attr": { "d": "m6.34 17.66-1.41 1.41" }, "child": [] }, { "tag": "path", "attr": { "d": "m19.07 4.93-1.41 1.41" }, "child": [] }] })(props26);
  }
  function LuUpload(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" }, "child": [] }, { "tag": "polyline", "attr": { "points": "17 8 12 3 7 8" }, "child": [] }, { "tag": "line", "attr": { "x1": "12", "x2": "12", "y1": "3", "y2": "15" }, "child": [] }] })(props26);
  }
  function LuX(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M18 6 6 18" }, "child": [] }, { "tag": "path", "attr": { "d": "m6 6 12 12" }, "child": [] }] })(props26);
  }

  // src/components/ui/color-mode.jsx
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  function ColorModeProvider(props26) {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(J, { attribute: "class", disableTransitionOnChange: true, ...props26 });
  }
  function useColorMode() {
    const { resolvedTheme, setTheme, forcedTheme } = z();
    const colorMode = forcedTheme || resolvedTheme;
    const toggleColorMode = () => {
      setTheme(resolvedTheme === "dark" ? "light" : "dark");
    };
    return {
      colorMode,
      setColorMode: setTheme,
      toggleColorMode
    };
  }
  function ColorModeIcon() {
    const { colorMode } = useColorMode();
    return colorMode === "dark" ? /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(LuMoon, {}) : /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(LuSun, {});
  }
  var ColorModeButton = React25.forwardRef(
    function ColorModeButton2(props26, ref) {
      const { toggleColorMode } = useColorMode();
      return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ClientOnly, { fallback: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Skeleton, { boxSize: "8" }), children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        IconButton,
        {
          onClick: toggleColorMode,
          variant: "ghost",
          "aria-label": "Toggle color mode",
          size: "sm",
          ref,
          ...props26,
          css: {
            _icon: {
              width: "5",
              height: "5"
            }
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ColorModeIcon, {})
        }
      ) });
    }
  );
  var LightMode = React25.forwardRef(function LightMode2(props26, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
      Span,
      {
        color: "fg",
        display: "contents",
        className: "chakra-theme light",
        colorPalette: "gray",
        colorScheme: "light",
        ref,
        ...props26
      }
    );
  });
  var DarkMode = React25.forwardRef(function DarkMode2(props26, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
      Span,
      {
        color: "fg",
        display: "contents",
        className: "chakra-theme dark",
        colorPalette: "gray",
        colorScheme: "dark",
        ref,
        ...props26
      }
    );
  });

  // src/components/ui/provider.jsx
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  function Provider(props26) {
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ChakraProvider, { value: defaultSystem, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ColorModeProvider, { ...props26 }) });
  }

  // src/pages/clocks-page.jsx
  var import_react179 = __toESM(require_react());

  // node_modules/react-icons/tb/index.mjs
  function TbCancel(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M3 12a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" }, "child": [] }, { "tag": "path", "attr": { "d": "M18.364 5.636l-12.728 12.728" }, "child": [] }] })(props26);
  }
  function TbClockEdit(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M21 12a9 9 0 1 0 -9.972 8.948c.32 .034 .644 .052 .972 .052" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 7v5l2 2" }, "child": [] }, { "tag": "path", "attr": { "d": "M18.42 15.61a2.1 2.1 0 0 1 2.97 2.97l-3.39 3.42h-3v-3l3.42 -3.39z" }, "child": [] }] })(props26);
  }
  function TbClockHour2(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 12l3 -2" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 7v5" }, "child": [] }] })(props26);
  }

  // node_modules/react-icons/fa/index.mjs
  function FaAngleLeft(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 256 512" }, "child": [{ "tag": "path", "attr": { "d": "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z" }, "child": [] }] })(props26);
  }
  function FaEye(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z" }, "child": [] }] })(props26);
  }

  // src/components/delete-control.jsx
  var import_react177 = __toESM(require_react());

  // node_modules/react-icons/fa6/index.mjs
  function FaTrashCan(props26) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M135.2 17.7C140.6 6.8 151.7 0 163.8 0L284.2 0c12.1 0 23.2 6.8 28.6 17.7L320 32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 96C14.3 96 0 81.7 0 64S14.3 32 32 32l96 0 7.2-14.3zM32 128l384 0 0 320c0 35.3-28.7 64-64 64L96 512c-35.3 0-64-28.7-64-64l0-320zm96 64c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16s16-7.2 16-16l0-224c0-8.8-7.2-16-16-16z" }, "child": [] }] })(props26);
  }

  // src/components/delete-control.jsx
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  function delete_control_default({ onDelete }) {
    const [deleting, setDeleting] = (0, import_react177.useState)(false);
    function deleteClicked(e2) {
      e2.stopPropagation();
      if (deleting) {
        onDelete();
      } else {
        setDeleting(true);
      }
    }
    function cancelClicked(e2) {
      e2.stopPropagation();
      setDeleting(false);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(Flex, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
        IconButton,
        {
          colorPalette: deleting ? "red" : "gray",
          size: "sm",
          variant: "ghost",
          onClick: deleteClicked,
          children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(FaTrashCan, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
        Flex,
        {
          w: deleting ? "40px" : "0px",
          transitionProperty: "width",
          transitionDuration: "100ms",
          transitionTimingFunction: "ease-in-out",
          overflow: "hidden",
          children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
            IconButton,
            {
              colorPalette: "orange",
              size: "sm",
              variant: "ghost",
              onClick: cancelClicked,
              children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(TbCancel, {})
            }
          )
        }
      )
    ] });
  }

  // src/pages/clocks-page.jsx
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  function ImageList({ clockId }) {
    const [images, setImages] = (0, import_react179.useState)(null);
    function getImages() {
      pb.collection("images").getFullList({
        sort: "-created",
        // Filter for clock
        filter: `clock="${clockId}"`
      }).then(setImages);
    }
    (0, import_react179.useEffect)(getImages, []);
    const thumb = "0x128";
    if (images == null) return;
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(Flex, { flexGrow: 1, flexShrink: 1, overflow: "hidden", children: [
      images.length == 0 && /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Flex, { color: "fg.muted", children: "No images yet" }),
      images.map((image) => /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        Image,
        {
          src: pb.files.getURL(image, image.image, { thumb }),
          height: "128px",
          width: "128px",
          objectFit: "contain",
          objectPosition: "50% 50%"
        },
        image.id
      ))
    ] });
  }
  var ClocksPage = () => {
    const [clocks, setClocks] = (0, import_react179.useState)([]);
    const [loading, setLoading] = (0, import_react179.useState)(true);
    const { user, pb: pb3 } = (0, import_react179.useContext)(AuthContext);
    let navigate = useNavigate();
    function getClocks() {
      pb3.collection("clocks").getFullList({
        sort: "-updated"
      }).then((data2) => {
        setClocks(data2);
        setLoading(false);
      });
    }
    (0, import_react179.useEffect)(() => {
      const unsubPromise = pb3.collection("clocks").subscribe("*", getClocks);
      getClocks();
      return () => unsubPromise.then((unsub) => unsub());
    }, []);
    async function createClock() {
      const record = await pb3.collection("clocks").create({
        name: `Clock ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`,
        owner: user.id,
        granularity_minutes: 10,
        mode: "single",
        range: "12"
      });
    }
    function showClock(e2, clockId) {
      e2.stopPropagation();
      navigate(`/clocks/${clockId}/show`);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(layout_default, { authed: true, children: /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(Flex, { width: "100%", height: "100%", flexDirection: "column", children: [
      /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Heading, { children: "Your Clocks" }),
      clocks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        Flex,
        {
          width: "100%",
          height: "100%",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column",
          children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(namespace_exports3.Root, { children: /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(namespace_exports3.Content, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(namespace_exports3.Indicator, { children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TbClockHour2, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(VStack, { textAlign: "center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(namespace_exports3.Title, { children: "No clocks created yet" }),
              /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(namespace_exports3.Description, { children: "Click the button below to create your first clock." })
            ] })
          ] }) })
        }
      ) : /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Flex, { direction: "column", gap: 4, mt: 4, borderRadius: 8, children: clocks.map((clock) => /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(
        Flex,
        {
          onClick: () => navigate(`/clocks/${clock.id}`),
          bgColor: "bg.emphasized",
          px: 6,
          py: 4,
          direction: "column",
          cursor: "pointer",
          gap: 2,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(Flex, { justify: "space-between", flexGrow: 1, align: "flex-end", children: [
              /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Heading, { children: clock.name }),
              /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(Flex, { color: "fg.muted", align: "center", gap: 4, children: [
                /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
                  IconButton,
                  {
                    size: "md",
                    variant: "ghost",
                    onClick: (e2) => showClock(e2, clock.id),
                    children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(FaEye, {})
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(Flex, { children: [
                  clock.granularity_minutes,
                  "min - ",
                  clock.range,
                  " hour -",
                  " ",
                  clock.mode
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(delete_control_default, {})
              ] })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(ImageList, { clockId: clock.id })
          ]
        },
        clock.id
      )) }),
      /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Flex, { position: "fixed", bottom: 4, right: 4, children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        IconButton,
        {
          rounded: "full",
          "aria-label": "Create Clock",
          onClick: createClock,
          size: "xl",
          children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TbClockEdit, { size: "100px" })
        }
      ) })
    ] }) });
  };
  var clocks_page_default = ClocksPage;

  // src/pages/clock-detail-page.jsx
  var import_react188 = __toESM(require_react());

  // src/components/clock-settings.jsx
  var import_react181 = __toESM(require_react());
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var granularityOptions = createListCollection({
    items: [
      { label: "1 minute", value: 1 },
      { label: "5 minutes", value: 5 },
      { label: "10 minutes", value: 10 },
      { label: "15 minutes", value: 15 }
    ]
  });
  var modeOptions = createListCollection({
    items: [
      { label: "Split", value: "split" },
      { label: "Single", value: "single" }
    ]
  });
  var rangeOptions = createListCollection({
    items: [
      { label: "12 Hour", value: "12" },
      { label: "24 Hour", value: "24" }
    ]
  });
  function clock_settings_default({ clockId }) {
    const { pb: pb3 } = (0, import_react181.useContext)(AuthContext);
    const [clock, setClock] = (0, import_react181.useState)(null);
    const navigate = useNavigate();
    function getClock() {
      pb3.collection("clocks").getOne(clockId).then((data2) => {
        setClock(data2);
      });
    }
    (0, import_react181.useEffect)(() => {
      getClock();
    }, []);
    function saveClock(data2) {
      pb3.collection("clocks").update(clockId, data2).then((data3) => {
        setClock(data3);
      });
    }
    function saveGranularity({ value }) {
      saveClock({ granularity_minutes: parseInt(value, 10) });
    }
    function saveMode({ value }) {
      saveClock({ mode: value });
    }
    function saveRange({ value }) {
      saveClock({ range: value });
    }
    function saveName({ value }) {
      saveClock({ name: value });
    }
    if (clock == null) return;
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(import_jsx_runtime100.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(Flex, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(IconButton, { variant: "subtle", mr: 4, onClick: () => navigate("/clocks"), children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(FaAngleLeft, { size: "24px" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          IconButton,
          {
            variant: "subtle",
            mr: 4,
            onClick: () => navigate(`/clocks/${clockId}/show`),
            children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(FaEye, { size: "24px" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(
          namespace_exports2.Root,
          {
            size: "xl",
            defaultValue: clock.name,
            onValueCommit: saveName,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports2.Preview, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Heading, { children: clock.name }) }),
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports2.Input, {}),
              /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports2.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports2.EditTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(IconButton, { variant: "ghost", size: "xs", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(LuPencilLine, {}) }) }),
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports2.CancelTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(IconButton, { variant: "outline", size: "xs", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(LuX, {}) }) }),
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports2.SubmitTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(IconButton, { variant: "outline", size: "xs", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(LuCheck, {}) }) })
              ] })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(Flex, { gap: 4, children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(
          namespace_exports7.Root,
          {
            collection: rangeOptions,
            value: [clock.range],
            onValueChange: saveRange,
            width: "180px",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Label, { children: "Mode" }),
              /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ValueText, { placeholder: "Select mode" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.IndicatorGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Indicator, {}) })
              ] }),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Content, { children: rangeOptions.items.map((option) => /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Item, { item: option, children: [
                option.label,
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ItemIndicator, {})
              ] }, option.value)) }) }),
              " "
            ]
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(
          namespace_exports7.Root,
          {
            collection: granularityOptions,
            value: [clock.granularity_minutes],
            onValueChange: saveGranularity,
            width: "180px",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Label, { children: "Granularity" }),
              /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ValueText, { placeholder: "Select granularity" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.IndicatorGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Indicator, {}) })
              ] }),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Content, { children: granularityOptions.items.map((option) => /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Item, { item: option, children: [
                option.label,
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ItemIndicator, {})
              ] }, option.value)) }) }),
              " "
            ]
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(
          namespace_exports7.Root,
          {
            collection: modeOptions,
            value: [clock.mode],
            onValueChange: saveMode,
            width: "180px",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Label, { children: "Style" }),
              /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ValueText, { placeholder: "Select mode" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.IndicatorGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Indicator, {}) })
              ] }),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.Content, { children: modeOptions.items.map((option) => /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(namespace_exports7.Item, { item: option, children: [
                option.label,
                /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(namespace_exports7.ItemIndicator, {})
              ] }, option.value)) }) }),
              " "
            ]
          }
        ) })
      ] })
    ] });
  }

  // src/components/images.jsx
  var import_react183 = __toESM(require_react());
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  function Image3({ image, mode, onClick }) {
    const { pb: pb3 } = (0, import_react183.useContext)(AuthContext);
    const { id, image: filename, content } = image;
    const split = mode == "split";
    const thumb = split ? "0x128" : "256x0";
    const url = pb3.files.getURL(image, filename, { thumb });
    const [hour, minute] = content.split(":");
    function onDelete() {
      pb3.collection("images").delete(id);
    }
    const error = split ? hour != "XX" && minute != "XX" : hour == "XX" || minute == "XX";
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(
      Flex,
      {
        border: "1px solid",
        borderColor: "bg.emphasized",
        borderRadius: 8,
        flexDirection: "column",
        alignItems: "center",
        gap: 2,
        overflow: "hidden",
        cursor: "pointer",
        onClick: () => onClick(image),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
            Image,
            {
              width: split ? "128px" : "256px",
              height: "128px",
              src: url,
              objectFit: "contain",
              objectPosition: "50% 50%",
              m: 4
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(
            Flex,
            {
              py: 2,
              pr: 2,
              pl: 4,
              bgColor: error ? "orange.900" : "bg.muted",
              width: "100%",
              justify: "space-between",
              align: "center",
              children: [
                split ? /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(Flex, { children: [
                  hour == "XX" ? /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { color: "fg.subtle", children: "HH" }) : /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { children: hour }),
                  ":",
                  minute == "XX" ? /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { color: "fg.subtle", children: "MM" }) : /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { children: minute })
                ] }) : /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { children: content }),
                /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(delete_control_default, { onDelete })
              ]
            }
          )
        ]
      }
    );
  }
  function images_default({ clockId, onClick }) {
    const { pb: pb3 } = (0, import_react183.useContext)(AuthContext);
    const [images, setImages] = (0, import_react183.useState)(null);
    const [clock, setClock] = (0, import_react183.useState)(null);
    function getImages() {
      pb3.collection("images").getFullList({
        sort: "-created",
        // Filter for clock
        filter: `clock="${clockId}"`
      }).then(setImages);
    }
    function getClock() {
      pb3.collection("clocks").getOne(clockId).then(setClock);
    }
    (0, import_react183.useEffect)(() => {
      const unsubPromise1 = pb3.collection("images").subscribe("*", getImages);
      const unsubPromise2 = pb3.collection("clocks").subscribe(clockId, getClock);
      getImages();
      getClock();
      return () => {
        Promise.all([unsubPromise1, unsubPromise2]).then(
          (unsubs) => unsubs.map((u) => u())
        );
      };
    }, []);
    if (images == null || clock == null) return;
    const { mode } = clock;
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
      Flex,
      {
        width: "100%",
        flexGrow: 1,
        my: 4,
        p: 4,
        bgColor: "bg.subtle",
        borderRadius: 8,
        children: images.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          Flex,
          {
            width: "100%",
            height: "100%",
            alignItems: "center",
            justifyContent: "center",
            flexDirection: "column",
            children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(namespace_exports3.Root, { children: /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(namespace_exports3.Content, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(namespace_exports3.Indicator, { children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(LuImage, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(VStack, { textAlign: "center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(namespace_exports3.Title, { children: "No images uploaded yet" }),
                /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(namespace_exports3.Description, { children: "Click the button below to upload your first image." })
              ] })
            ] }) })
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Flex, { flexWrap: "wrap", gap: 4, alignItems: "flex-start", children: images.map((image) => /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Image3, { image, mode, onClick }, image.id)) })
      }
    );
  }

  // src/components/image-dialog.jsx
  var import_react186 = __toESM(require_react());

  // src/components/content-editor.jsx
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  function content_editor_default({ clock, setImageContent, imageContent }) {
    const [hour, minute] = imageContent.split(":");
    const { mode, range, granularity_minutes } = clock;
    const split = mode == "split";
    const hourOptions = createListCollection({
      items: new Array(parseInt(range)).fill(0).map((_v, i2) => ({
        label: (i2 + 1).toString().padStart(2, "0"),
        value: (i2 + 1).toString().padStart(2, "0")
      }))
    });
    const minutesOptions = createListCollection({
      items: new Array(60).fill(0).reduce((arr, _v, i2) => {
        if (i2 % granularity_minutes == 0) {
          arr.push({
            label: i2.toString().padStart(2, "0"),
            value: i2.toString().padStart(2, "0")
          });
        }
        return arr;
      }, [])
    });
    function updateHour({ value }) {
      const minutePortion = split ? "XX" : minute;
      setImageContent(`${value[0]}:${minutePortion}`);
    }
    function updateMinute({ value }) {
      const hourPortion = split ? "XX" : hour;
      setImageContent(`${hourPortion}:${value[0]}`);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(Flex, { align: "center", gap: 4, children: [
      /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(Flex, { align: "center", gap: 1, children: [
        "H",
        /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(
          namespace_exports7.Root,
          {
            collection: hourOptions,
            value: [hour],
            onValueChange: updateHour,
            width: "100px",
            variant: hour == "XX" ? "subtle" : "outline",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(namespace_exports7.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.ValueText, { placeholder: "Select hour" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.IndicatorGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Indicator, {}) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Content, { children: hourOptions.items.map((option) => /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(namespace_exports7.Item, { item: option, children: [
                option.label,
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.ItemIndicator, {})
              ] }, option.value)) }) })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(Flex, { align: "center", gap: 1, children: [
        "M",
        /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(
          namespace_exports7.Root,
          {
            collection: minutesOptions,
            value: [minute],
            onValueChange: updateMinute,
            width: "100px",
            variant: minute == "XX" ? "subtle" : "outline",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(namespace_exports7.Control, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.ValueText, { placeholder: "Select minute" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.IndicatorGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Indicator, {}) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.Content, { children: minutesOptions.items.map((option) => /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(namespace_exports7.Item, { item: option, children: [
                option.label,
                /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(namespace_exports7.ItemIndicator, {})
              ] }, option.value)) }) })
            ]
          }
        )
      ] })
    ] });
  }

  // src/components/image-dialog.jsx
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  function image_dialog_default({
    clockId,
    dialogOpen,
    setDialogOpen,
    uploadedFile,
    uploadAccepted,
    createImage,
    updateImage,
    setImageContent,
    imageContent,
    image,
    Select
  }) {
    const { pb: pb3 } = (0, import_react186.useContext)(AuthContext);
    const [clock, setClock] = (0, import_react186.useState)(null);
    function getClock() {
      pb3.collection("clocks").getOne(clockId).then((data2) => {
        setClock(data2);
      });
    }
    (0, import_react186.useEffect)(() => {
      const unsubPromise = pb3.collection("clocks").subscribe(clockId, getClock);
      getClock();
      return () => unsubPromise.then((unsub) => unsub());
    }, []);
    if (clock == null) return;
    const { image: filename, content } = image || {};
    const thumb = "0x128";
    const url = pb3.files.getURL(image, filename);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
      namespace_exports.Root,
      {
        lazyMount: true,
        open: dialogOpen,
        onOpenChange: (e2) => setDialogOpen(e2.open),
        children: /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(Portal, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.Backdrop, {}),
          /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.Positioner, { children: /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(namespace_exports.Content, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.Header, { children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.Title, { children: image ? "Update Image" : "Add Image" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.Body, { children: image ? /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
              Image,
              {
                src: url,
                width: "100%",
                height: "100%",
                maxHeight: "400px",
                objectFit: "contain",
                objectPosition: "50% 50%"
              }
            ) }) : /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Flex, { width: "100%", direction: "column", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(
              namespace_exports6.Root,
              {
                capture: "environment",
                alignItems: "stretch",
                position: "relative",
                accept: ["image/png"],
                onFileAccept: uploadAccepted,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports6.HiddenInput, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports6.ItemGroup, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                    Flex,
                    {
                      width: "100%",
                      minHeight: "400px",
                      maxHeight: "600px",
                      align: "center",
                      justify: "center",
                      children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports6.Context, { children: ({ acceptedFiles }) => acceptedFiles.map((file) => /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                        namespace_exports6.Item,
                        {
                          file,
                          w: "100%",
                          h: "100%",
                          children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports6.ItemPreviewImage, {})
                        },
                        file.name
                      )) })
                    }
                  ) }),
                  /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                    namespace_exports6.Dropzone,
                    {
                      position: "absolute",
                      width: "100%",
                      height: "100%",
                      bgColor: "#0006",
                      children: /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(
                        Flex,
                        {
                          direction: "column",
                          gap: 3,
                          bgColor: "#000A",
                          p: 4,
                          align: "center",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Icon, { size: "md", color: "fg.muted", children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(LuUpload, {}) }),
                            /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(namespace_exports6.DropzoneContent, { children: [
                              /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Flex, { children: "Drag and drop files here" }),
                              /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Flex, { color: "fg.muted", children: ".png, .jpg up to 5MB" })
                            ] })
                          ]
                        }
                      )
                    }
                  )
                ]
              }
            ) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(namespace_exports.Footer, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Flex, { flexGrow: 1, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                content_editor_default,
                {
                  clock,
                  imageContent,
                  setImageContent
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.ActionTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Button, { variant: "outline", children: "Cancel" }) }),
              image ? /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Button, { onClick: updateImage, children: "Update" }) : /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Button, { disabled: uploadedFile == null, onClick: createImage, children: "Save" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(namespace_exports.CloseTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(CloseButton, { size: "sm" }) })
          ] }) })
        ] })
      }
    );
  }

  // src/pages/clock-detail-page.jsx
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  function clock_detail_page_default() {
    let { id } = useParams();
    const [dialogOpen, setDialogOpen] = (0, import_react188.useState)(false);
    const [uploadedFile, setUploadedFile] = (0, import_react188.useState)(null);
    const [selectedImage, setSelectedImage] = (0, import_react188.useState)(null);
    const [imageContent, setImageContent] = (0, import_react188.useState)("XX:XX");
    async function createImage() {
      const record = await pb.collection("images").create({
        clock: id,
        image: uploadedFile,
        content: imageContent
      });
      setDialogOpen(false);
    }
    async function updateImage() {
      await pb.collection("images").update(selectedImage.id, { content: imageContent });
      setImageContent("XX:XX");
      handleDialogOpen(false);
    }
    function uploadAccepted({ files }) {
      if (files.length == 1) {
        setUploadedFile(files[0]);
      }
    }
    function handleImageClick(image) {
      setSelectedImage(image);
      setImageContent(image.content);
      setDialogOpen(true);
    }
    function handleDialogOpen(status) {
      if (status == false) setSelectedImage(null);
      setDialogOpen(status);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(layout_default, { authed: true, children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
        image_dialog_default,
        {
          clockId: id,
          dialogOpen,
          setDialogOpen: handleDialogOpen,
          uploadedFile,
          uploadAccepted,
          createImage,
          updateImage,
          imageContent,
          setImageContent,
          image: selectedImage
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(Flex, { width: "100%", justifyContent: "space-between", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(clock_settings_default, { clockId: id }) }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(Flex, { flexGrow: 1, children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(images_default, { clockId: id, onClick: handleImageClick }) }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(Flex, { position: "fixed", bottom: 4, right: 4, children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
        IconButton,
        {
          rounded: "full",
          "aria-label": "Create Clock",
          onClick: () => setDialogOpen(true),
          size: "xl",
          children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(LuImagePlus, { size: "100px" })
        }
      ) })
    ] });
  }

  // src/pages/clock-show-page.jsx
  var import_react190 = __toESM(require_react());
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  function SingleLayout({ now, images }) {
    const { pb: pb3 } = (0, import_react190.useContext)(AuthContext);
    let image = void 0;
    let offset3 = 0;
    do {
      const time = new Date(Number(now) + offset3);
      const content = `${time.getHours().toString().padStart(2, "0")}:${time.getMinutes().toString().padStart(2, "0")}`;
      image = images.find((image2) => image2.content == content);
      offset3 += 6e4;
    } while (image === void 0);
    const url = pb3.files.getURL(image, image.image);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
      Image,
      {
        src: url,
        width: "100%",
        height: "100%",
        objectFit: "contain",
        objectPosition: "50% 50%"
      }
    );
  }
  function SplitLayout({ now, clock, images }) {
    const { pb: pb3 } = (0, import_react190.useContext)(AuthContext);
    const hours = images.filter((image) => image.content.match(/\d\d\:XX/));
    const minutes = images.filter((image) => image.content.match(/XX\:\d\d/));
    const hourConstraint = parseInt(clock.range);
    const hour = (now.getHours() % hourConstraint).toString().padStart(2, "0");
    const granularity = now.getMinutes();
    const minute = (Math.floor(now.getMinutes() / clock.granularity_minutes) * clock.granularity_minutes).toString().padStart(2, "0");
    const hourImage = hours.find((image) => image.content == `${hour}:XX`);
    const minuteImage = minutes.find((image) => image.content == `XX:${minute}`);
    if (hours.length == 0 || minutes.length == 0)
      return "At least one hour and minute image require";
    if (hourImage == void 0 || minuteImage == void 0)
      return `No matching images found for ${hour}:${minute}`;
    const hourUrl = pb3.files.getURL(hourImage, hourImage.image);
    const minuteUrl = pb3.files.getURL(minuteImage, minuteImage.image);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
      Flex,
      {
        width: "100%",
        height: "100%",
        flexShrink: 1,
        align: "center",
        justify: "center",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
            Image,
            {
              src: hourUrl,
              width: "50%",
              height: "100%",
              objectFit: "contain",
              objectPosition: "50% 50%"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
            Image,
            {
              src: minuteUrl,
              width: "50%",
              height: "100%",
              objectFit: "contain",
              objectPosition: "50% 50%"
            }
          )
        ]
      }
    );
  }
  function clock_show_page_default() {
    let { id } = useParams();
    const { pb: pb3 } = (0, import_react190.useContext)(AuthContext);
    const [images, setImages] = (0, import_react190.useState)(null);
    const [clock, setClock] = (0, import_react190.useState)(null);
    const [now, setNow] = (0, import_react190.useState)(/* @__PURE__ */ new Date());
    function getImages() {
      pb3.collection("images").getFullList({
        sort: "-created",
        // Filter for clock
        filter: `clock="${id}"`
      }).then(setImages);
    }
    function getClock() {
      pb3.collection("clocks").getOne(id).then(setClock);
    }
    (0, import_react190.useEffect)(() => {
      const unsubPromise1 = pb3.collection("images").subscribe("*", getImages);
      const unsubPromise2 = pb3.collection("clocks").subscribe(id, getClock);
      getImages();
      getClock();
      const cancelId = setInterval(() => {
        setNow(/* @__PURE__ */ new Date());
      }, 6e4);
      setNow(/* @__PURE__ */ new Date());
      return () => {
        Promise.all([unsubPromise1, unsubPromise2]).then(
          (unsubs) => unsubs.map((u) => u())
        );
        clearInterval(cancelId);
      };
    }, []);
    if (images == null || clock == null) return;
    const { mode } = clock;
    const split = mode == "split";
    if (images.length == 0) return "no images added yet";
    return split ? /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(SplitLayout, { now, clock, images }) : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(SingleLayout, { now, images });
  }

  // src/app.jsx
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  function app_default() {
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Provider, { children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(BrowserRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(Routes, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Route, { path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(FrontPage, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Route, { path: "/clocks", element: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(clocks_page_default, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Route, { path: "/clocks/:id", element: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(clock_detail_page_default, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Route, { path: "/clocks/:id/show", element: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(clock_show_page_default, {}) })
    ] }) }) }) });
  }

  // src/index.jsx
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  import_client.default.createRoot(document.getElementById("app")).render(/* @__PURE__ */ (0, import_jsx_runtime107.jsx)(app_default, {}));
})();
/*! Bundled license information:

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.development.js:
  (**
   * @license React
   * react-dom-client.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-router/dist/development/chunk-EF7DTUVF.mjs:
react-router/dist/development/index.mjs:
  (**
   * react-router v7.7.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
